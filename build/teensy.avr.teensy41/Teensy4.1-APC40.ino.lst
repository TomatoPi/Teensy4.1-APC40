
/home/tomato/build.Arduino/Teensy4.1-APC40.build/Teensy4.1-APC40.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	200026c0 	.word	0x200026c0
6000142c:	20003940 	.word	0x20003940

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f918 	bl	60001674 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f8b6 	bl	60001684 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 fae4 	bl	60001b18 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fc71 	bl	60001e48 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f000 f8f2 	bl	60001794 <configure_external_ram>
	analog_init();
600015b0:	f000 fc16 	bl	60001de0 <analog_init>
	pwm_init();
600015b4:	f000 fc58 	bl	60001e68 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f000 fadc 	bl	60001b74 <tempmon_init>
	startup_middle_hook();
600015bc:	f000 f85c 	bl	60001678 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f000 fb6d 	bl	60001ca4 <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f000 f855 	bl	60001680 <startup_debug_reset>
	startup_late_hook();
600015d6:	f000 f851 	bl	6000167c <startup_default_late_hook>
	__libc_init_array();
600015da:	f000 fc49 	bl	60001e70 <____libc_init_array_veneer>
	main();
600015de:	f000 fc2f 	bl	60001e40 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	00013a48 	.word	0x00013a48
600015f0:	60001f9c 	.word	0x60001f9c
600015f4:	00000000 	.word	0x00000000
600015f8:	200026c0 	.word	0x200026c0
600015fc:	600159e8 	.word	0x600159e8
60001600:	20000000 	.word	0x20000000
60001604:	20002400 	.word	0x20002400
60001608:	0000b8f5 	.word	0x0000b8f5
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	0000b00d 	.word	0x0000b00d
6000161c:	200038d4 	.word	0x200038d4
60001620:	0000b011 	.word	0x0000b011
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	23c34600 	.word	0x23c34600
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	200038d8 	.word	0x200038d8
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaaabf 	.word	0xaaaaaabf
6000166c:	00200007 	.word	0x00200007
60001670:	20068000 	.word	0x20068000

60001674 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001674:	4770      	bx	lr
60001676:	bf00      	nop

60001678 <startup_default_middle_hook>:
60001678:	4770      	bx	lr
6000167a:	bf00      	nop

6000167c <startup_default_late_hook>:
6000167c:	4770      	bx	lr
6000167e:	bf00      	nop

60001680 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001680:	bf00      	nop
60001682:	4770      	bx	lr

60001684 <configure_cache>:
{
60001684:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001686:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000168a:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000168c:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000168e:	4831      	ldr	r0, [pc, #196]	; (60001754 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001690:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001694:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001698:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000169a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000169e:	482e      	ldr	r0, [pc, #184]	; (60001758 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016a0:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016a4:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016a6:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016aa:	482c      	ldr	r0, [pc, #176]	; (6000175c <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016ac:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b0:	4a2b      	ldr	r2, [pc, #172]	; (60001760 <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016b2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016b6:	4c2b      	ldr	r4, [pc, #172]	; (60001764 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b8:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016bc:	482a      	ldr	r0, [pc, #168]	; (60001768 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016be:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016c2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016c6:	4c29      	ldr	r4, [pc, #164]	; (6000176c <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016c8:	4829      	ldr	r0, [pc, #164]	; (60001770 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016ca:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016ce:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016d2:	4c28      	ldr	r4, [pc, #160]	; (60001774 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016d4:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016d8:	4827      	ldr	r0, [pc, #156]	; (60001778 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016da:	4a28      	ldr	r2, [pc, #160]	; (6000177c <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016dc:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016e0:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016e4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016e8:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016ec:	4c24      	ldr	r4, [pc, #144]	; (60001780 <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016ee:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016f0:	4824      	ldr	r0, [pc, #144]	; (60001784 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016f2:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016f6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016fa:	4a23      	ldr	r2, [pc, #140]	; (60001788 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016fc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001700:	4c22      	ldr	r4, [pc, #136]	; (6000178c <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001702:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001706:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000170a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000170e:	4820      	ldr	r0, [pc, #128]	; (60001790 <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001710:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001714:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001716:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
6000171a:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
6000171e:	bf00      	nop
	asm("nop");
60001720:	bf00      	nop
	asm("nop");
60001722:	bf00      	nop
	asm("nop");
60001724:	bf00      	nop
	asm("nop");
60001726:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001728:	2201      	movs	r2, #1
6000172a:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
6000172e:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001732:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001736:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000173a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000173e:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001742:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001746:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000174a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
6000174e:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001752:	4770      	bx	lr
60001754:	1000003f 	.word	0x1000003f
60001758:	07080025 	.word	0x07080025
6000175c:	00100009 	.word	0x00100009
60001760:	20003940 	.word	0x20003940
60001764:	00200013 	.word	0x00200013
60001768:	07020021 	.word	0x07020021
6000176c:	20000014 	.word	0x20000014
60001770:	13080025 	.word	0x13080025
60001774:	10000009 	.word	0x10000009
60001778:	20200016 	.word	0x20200016
6000177c:	130b0027 	.word	0x130b0027
60001780:	40000017 	.word	0x40000017
60001784:	60000018 	.word	0x60000018
60001788:	070b002f 	.word	0x070b002f
6000178c:	70000019 	.word	0x70000019
60001790:	8000001a 	.word	0x8000001a

60001794 <configure_external_ram>:
{
60001794:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001796:	4bb8      	ldr	r3, [pc, #736]	; (60001a78 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001798:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000179a:	4eb8      	ldr	r6, [pc, #736]	; (60001a7c <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000179c:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000179e:	4fb8      	ldr	r7, [pc, #736]	; (60001a80 <configure_external_ram+0x2ec>)
{
600017a0:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017a2:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017a6:	49b7      	ldr	r1, [pc, #732]	; (60001a84 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600017a8:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017ac:	4db6      	ldr	r5, [pc, #728]	; (60001a88 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017ae:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600017b2:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017b6:	4cb5      	ldr	r4, [pc, #724]	; (60001a8c <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600017b8:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017bc:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017c0:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017c4:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017c8:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017cc:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600017d0:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600017d2:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600017d4:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600017d6:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600017d8:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600017da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600017de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600017e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017e6:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017ea:	4aa9      	ldr	r2, [pc, #676]	; (60001a90 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600017ec:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600017f0:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600017f4:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600017f8:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600017fc:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001800:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001802:	4ba4      	ldr	r3, [pc, #656]	; (60001a94 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001804:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001806:	48a4      	ldr	r0, [pc, #656]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001808:	49a4      	ldr	r1, [pc, #656]	; (60001a9c <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000180a:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000180c:	4aa4      	ldr	r2, [pc, #656]	; (60001aa0 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000180e:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001810:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001814:	f043 030c 	orr.w	r3, r3, #12
60001818:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000181c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001820:	6803      	ldr	r3, [r0, #0]
60001822:	f043 0302 	orr.w	r3, r3, #2
60001826:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001828:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000182a:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
6000182c:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001830:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001832:	4b9c      	ldr	r3, [pc, #624]	; (60001aa4 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001834:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001836:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001838:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000183a:	4c9b      	ldr	r4, [pc, #620]	; (60001aa8 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000183c:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000183e:	4a9b      	ldr	r2, [pc, #620]	; (60001aac <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001840:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001844:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001846:	68c3      	ldr	r3, [r0, #12]
60001848:	f023 0378 	bic.w	r3, r3, #120	; 0x78
6000184c:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000184e:	6a03      	ldr	r3, [r0, #32]
60001850:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001852:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001854:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001856:	6a03      	ldr	r3, [r0, #32]
60001858:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000185a:	4a95      	ldr	r2, [pc, #596]	; (60001ab0 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000185c:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000185e:	4c95      	ldr	r4, [pc, #596]	; (60001ab4 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001860:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001862:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001864:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
60001866:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001868:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
6000186c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001870:	f043 0301 	orr.w	r3, r3, #1
60001874:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001878:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000187c:	498e      	ldr	r1, [pc, #568]	; (60001ab8 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000187e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001882:	f043 0301 	orr.w	r3, r3, #1
60001886:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000188a:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
6000188e:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001890:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001892:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001894:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001898:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000189a:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000189c:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000189e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600018a2:	6803      	ldr	r3, [r0, #0]
600018a4:	f023 0302 	bic.w	r3, r3, #2
600018a8:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018aa:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018ac:	4b83      	ldr	r3, [pc, #524]	; (60001abc <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
600018ae:	4984      	ldr	r1, [pc, #528]	; (60001ac0 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018b0:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
600018b2:	f843 2b04 	str.w	r2, [r3], #4
600018b6:	428b      	cmp	r3, r1
600018b8:	d1fb      	bne.n	600018b2 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600018ba:	4a77      	ldr	r2, [pc, #476]	; (60001a98 <configure_external_ram+0x304>)
600018bc:	6813      	ldr	r3, [r2, #0]
600018be:	f043 0301 	orr.w	r3, r3, #1
600018c2:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600018c4:	6813      	ldr	r3, [r2, #0]
600018c6:	f013 0301 	ands.w	r3, r3, #1
600018ca:	d1fb      	bne.n	600018c4 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018cc:	487a      	ldr	r0, [pc, #488]	; (60001ab8 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018ce:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018d0:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018d4:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018d6:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018da:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018dc:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018e0:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018e4:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018e8:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018ec:	4975      	ldr	r1, [pc, #468]	; (60001ac4 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018ee:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018f2:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600018f6:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600018fa:	4873      	ldr	r0, [pc, #460]	; (60001ac8 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018fc:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001900:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001904:	4c71      	ldr	r4, [pc, #452]	; (60001acc <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001906:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000190a:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
6000190e:	4970      	ldr	r1, [pc, #448]	; (60001ad0 <configure_external_ram+0x33c>)
60001910:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001914:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001916:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000191a:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000191e:	485e      	ldr	r0, [pc, #376]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001920:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001924:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001928:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000192c:	6943      	ldr	r3, [r0, #20]
6000192e:	07da      	lsls	r2, r3, #31
60001930:	d5fc      	bpl.n	6000192c <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001932:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001934:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001936:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000193a:	4957      	ldr	r1, [pc, #348]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000193c:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
6000193e:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001942:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001946:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000194a:	694b      	ldr	r3, [r1, #20]
6000194c:	07db      	lsls	r3, r3, #31
6000194e:	d5fc      	bpl.n	6000194a <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001950:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001952:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001954:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001958:	4a4f      	ldr	r2, [pc, #316]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000195a:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
6000195c:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001960:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001964:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001968:	6953      	ldr	r3, [r2, #20]
6000196a:	07df      	lsls	r7, r3, #31
6000196c:	d5fc      	bpl.n	60001968 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000196e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001970:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001972:	4858      	ldr	r0, [pc, #352]	; (60001ad4 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001974:	4948      	ldr	r1, [pc, #288]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001976:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001978:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000197c:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001980:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001984:	694b      	ldr	r3, [r1, #20]
60001986:	07de      	lsls	r6, r3, #31
60001988:	d5fc      	bpl.n	60001984 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
6000198a:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
6000198e:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001992:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001994:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001996:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001998:	4293      	cmp	r3, r2
6000199a:	d165      	bne.n	60001a68 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
6000199c:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000199e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019a2:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019a4:	483c      	ldr	r0, [pc, #240]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600019a6:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019aa:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019ae:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019b2:	6943      	ldr	r3, [r0, #20]
600019b4:	07dd      	lsls	r5, r3, #31
600019b6:	d5fc      	bpl.n	600019b2 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019b8:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019ba:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019be:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019c0:	4a35      	ldr	r2, [pc, #212]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019c2:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
600019c4:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019c8:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019cc:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019d0:	6953      	ldr	r3, [r2, #20]
600019d2:	07dc      	lsls	r4, r3, #31
600019d4:	d5fc      	bpl.n	600019d0 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019d6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019d8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019dc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019e0:	492d      	ldr	r1, [pc, #180]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019e2:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019e4:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019e8:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019ec:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019f0:	694b      	ldr	r3, [r1, #20]
600019f2:	07d8      	lsls	r0, r3, #31
600019f4:	d5fc      	bpl.n	600019f0 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019f6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019f8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019fc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a00:	4a25      	ldr	r2, [pc, #148]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a02:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001a04:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a08:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a0c:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a10:	6953      	ldr	r3, [r2, #20]
60001a12:	07d9      	lsls	r1, r3, #31
60001a14:	d5fc      	bpl.n	60001a10 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a16:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a18:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a1c:	482d      	ldr	r0, [pc, #180]	; (60001ad4 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a1e:	491e      	ldr	r1, [pc, #120]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a20:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001a22:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a26:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a2a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a2e:	694b      	ldr	r3, [r1, #20]
60001a30:	07da      	lsls	r2, r3, #31
60001a32:	d5fc      	bpl.n	60001a2e <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001a34:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a38:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a3c:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a3e:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a40:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a42:	4293      	cmp	r3, r2
60001a44:	d050      	beq.n	60001ae8 <configure_external_ram+0x354>
60001a46:	2508      	movs	r5, #8
60001a48:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001a4c:	4922      	ldr	r1, [pc, #136]	; (60001ad8 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a4e:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001a50:	4b22      	ldr	r3, [pc, #136]	; (60001adc <configure_external_ram+0x348>)
			external_psram_size = 16;
60001a52:	4a23      	ldr	r2, [pc, #140]	; (60001ae0 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a54:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001a56:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001a58:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a5a:	2301      	movs	r3, #1
60001a5c:	4821      	ldr	r0, [pc, #132]	; (60001ae4 <configure_external_ram+0x350>)
60001a5e:	4422      	add	r2, r4
60001a60:	f000 f9f6 	bl	60001e50 <__sm_set_pool_veneer>
}
60001a64:	b003      	add	sp, #12
60001a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001a68:	4b1e      	ldr	r3, [pc, #120]	; (60001ae4 <configure_external_ram+0x350>)
60001a6a:	2200      	movs	r2, #0
60001a6c:	e9c3 2200 	strd	r2, r2, [r3]
60001a70:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001a74:	b003      	add	sp, #12
60001a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001a78:	401f8000 	.word	0x401f8000
60001a7c:	0001b0f9 	.word	0x0001b0f9
60001a80:	000110f9 	.word	0x000110f9
60001a84:	401f8400 	.word	0x401f8400
60001a88:	000170f9 	.word	0x000170f9
60001a8c:	400fc000 	.word	0x400fc000
60001a90:	1ffffcff 	.word	0x1ffffcff
60001a94:	a0000300 	.word	0xa0000300
60001a98:	402a4000 	.word	0x402a4000
60001a9c:	402a8000 	.word	0x402a8000
60001aa0:	ffff0012 	.word	0xffff0012
60001aa4:	00f737ff 	.word	0x00f737ff
60001aa8:	80000040 	.word	0x80000040
60001aac:	7cf0ff00 	.word	0x7cf0ff00
60001ab0:	830f00ff 	.word	0x830f00ff
60001ab4:	00020063 	.word	0x00020063
60001ab8:	5af05af0 	.word	0x5af05af0
60001abc:	402a4200 	.word	0x402a4200
60001ac0:	402a4300 	.word	0x402a4300
60001ac4:	3018049f 	.word	0x3018049f
60001ac8:	0a1806eb 	.word	0x0a1806eb
60001acc:	0a180638 	.word	0x0a180638
60001ad0:	26013206 	.word	0x26013206
60001ad4:	00030004 	.word	0x00030004
60001ad8:	70000000 	.word	0x70000000
60001adc:	70000000 	.word	0x70000000
60001ae0:	20003904 	.word	0x20003904
60001ae4:	20003854 	.word	0x20003854
	FLEXSPI2_IPCR0 = addr;
60001ae8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001aec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001af0:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001af2:	4808      	ldr	r0, [pc, #32]	; (60001b14 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001af4:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001af8:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001afc:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b00:	6943      	ldr	r3, [r0, #20]
60001b02:	07db      	lsls	r3, r3, #31
60001b04:	d5fc      	bpl.n	60001b00 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b06:	2301      	movs	r3, #1
60001b08:	2510      	movs	r5, #16
60001b0a:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001b0e:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001b10:	e79c      	b.n	60001a4c <configure_external_ram+0x2b8>
60001b12:	bf00      	nop
60001b14:	402a4000 	.word	0x402a4000

60001b18 <usb_pll_start>:
{
60001b18:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b1a:	4a15      	ldr	r2, [pc, #84]	; (60001b70 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b1c:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b1e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b22:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b26:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b2a:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b2e:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b32:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001b34:	f013 0f02 	tst.w	r3, #2
60001b38:	d10e      	bne.n	60001b58 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b3a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001b3e:	d00f      	beq.n	60001b60 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001b40:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001b44:	d00e      	beq.n	60001b64 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001b46:	2b00      	cmp	r3, #0
60001b48:	daf3      	bge.n	60001b32 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001b4a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001b4e:	d10b      	bne.n	60001b68 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001b50:	065b      	lsls	r3, r3, #25
60001b52:	d50b      	bpl.n	60001b6c <usb_pll_start+0x54>
}
60001b54:	bcf0      	pop	{r4, r5, r6, r7}
60001b56:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b58:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001b5a:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b5c:	6190      	str	r0, [r2, #24]
			continue;
60001b5e:	e7e8      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b60:	6155      	str	r5, [r2, #20]
			continue;
60001b62:	e7e6      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b64:	6156      	str	r6, [r2, #20]
			continue;
60001b66:	e7e4      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b68:	6191      	str	r1, [r2, #24]
			continue;
60001b6a:	e7e2      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b6c:	6157      	str	r7, [r2, #20]
			continue;
60001b6e:	e7e0      	b.n	60001b32 <usb_pll_start+0x1a>
60001b70:	400d8000 	.word	0x400d8000

60001b74 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b74:	4a3f      	ldr	r2, [pc, #252]	; (60001c74 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b76:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001b78:	493f      	ldr	r1, [pc, #252]	; (60001c78 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b7a:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b7e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001b82:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b86:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001c7c <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b8a:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b8e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001c80 <tempmon_init+0x10c>
{
60001b92:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b98:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001b9c:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ba0:	4d38      	ldr	r5, [pc, #224]	; (60001c84 <tempmon_init+0x110>)
60001ba2:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001ba4:	4c38      	ldr	r4, [pc, #224]	; (60001c88 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ba6:	4839      	ldr	r0, [pc, #228]	; (60001c8c <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ba8:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001baa:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001bae:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bb0:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001bb8:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bbc:	ee07 1a10 	vmov	s14, r1
60001bc0:	4b33      	ldr	r3, [pc, #204]	; (60001c90 <tempmon_init+0x11c>)
60001bc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bc6:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bc8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bcc:	4931      	ldr	r1, [pc, #196]	; (60001c94 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bce:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bd2:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bd6:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bda:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bde:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001be2:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001be6:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bea:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bee:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bf2:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bf6:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001bfa:	4827      	ldr	r0, [pc, #156]	; (60001c98 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bfc:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c00:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c04:	ee75 5a87 	vadd.f32	s11, s11, s14
60001c08:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c0c:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c10:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c14:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c18:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c1c:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c24:	ee16 3a10 	vmov	r3, s12
60001c28:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c30:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001c34:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c36:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c3a:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001c42:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001c46:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001c48:	4914      	ldr	r1, [pc, #80]	; (60001c9c <tempmon_init+0x128>)
60001c4a:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001c4e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001c52:	f043 0302 	orr.w	r3, r3, #2
60001c56:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001c5a:	4b11      	ldr	r3, [pc, #68]	; (60001ca0 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c5c:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001c60:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c64:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001c68:	2201      	movs	r2, #1
}
60001c6a:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c6c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001c70:	4770      	bx	lr
60001c72:	bf00      	nop
60001c74:	400d8100 	.word	0x400d8100
60001c78:	401f4400 	.word	0x401f4400
60001c7c:	42aa0000 	.word	0x42aa0000
60001c80:	42b40000 	.word	0x42b40000
60001c84:	200038bc 	.word	0x200038bc
60001c88:	200038b8 	.word	0x200038b8
60001c8c:	200038c0 	.word	0x200038c0
60001c90:	200038c4 	.word	0x200038c4
60001c94:	0fff0000 	.word	0x0fff0000
60001c98:	e000e400 	.word	0xe000e400
60001c9c:	20002400 	.word	0x20002400
60001ca0:	0000bae1 	.word	0x0000bae1

60001ca4 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001ca4:	4b31      	ldr	r3, [pc, #196]	; (60001d6c <usb_init+0xc8>)
60001ca6:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001caa:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001cac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001cb0:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001cb4:	f000 f8e0 	bl	60001e78 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cb8:	4a2d      	ldr	r2, [pc, #180]	; (60001d70 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001cba:	492e      	ldr	r1, [pc, #184]	; (60001d74 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cbc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cc0:	482d      	ldr	r0, [pc, #180]	; (60001d78 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cc2:	f043 0303 	orr.w	r3, r3, #3
60001cc6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cca:	4b2c      	ldr	r3, [pc, #176]	; (60001d7c <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001ccc:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cd0:	6802      	ldr	r2, [r0, #0]
60001cd2:	421a      	tst	r2, r3
60001cd4:	d103      	bne.n	60001cde <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001cd6:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001cda:	079a      	lsls	r2, r3, #30
60001cdc:	d01b      	beq.n	60001d16 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001cde:	4a25      	ldr	r2, [pc, #148]	; (60001d74 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001ce0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001ce4:	4b24      	ldr	r3, [pc, #144]	; (60001d78 <usb_init+0xd4>)
60001ce6:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001ce8:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cec:	f043 0302 	orr.w	r3, r3, #2
60001cf0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001cf4:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cf8:	079b      	lsls	r3, r3, #30
60001cfa:	d4fb      	bmi.n	60001cf4 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001cfc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001d00:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d04:	4b1c      	ldr	r3, [pc, #112]	; (60001d78 <usb_init+0xd4>)
60001d06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001d0a:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001d0e:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d10:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001d12:	f000 f8a5 	bl	60001e60 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d16:	4a18      	ldr	r2, [pc, #96]	; (60001d78 <usb_init+0xd4>)
60001d18:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d1c:	4c15      	ldr	r4, [pc, #84]	; (60001d74 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001d1e:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d20:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d22:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d24:	4b16      	ldr	r3, [pc, #88]	; (60001d80 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001d26:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d28:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d2c:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d30:	4618      	mov	r0, r3
60001d32:	f000 f891 	bl	60001e58 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001d36:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d3a:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d3c:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d40:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d44:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001d46:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001d4a:	641a      	str	r2, [r3, #64]	; 0x40
60001d4c:	4b0d      	ldr	r3, [pc, #52]	; (60001d84 <usb_init+0xe0>)
60001d4e:	4a0e      	ldr	r2, [pc, #56]	; (60001d88 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d50:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001d54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d58:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001d5c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001d60:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d62:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001d66:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001d6a:	bd10      	pop	{r4, pc}
60001d6c:	400d8000 	.word	0x400d8000
60001d70:	400fc000 	.word	0x400fc000
60001d74:	402e0000 	.word	0x402e0000
60001d78:	400d9000 	.word	0x400d9000
60001d7c:	001e1c00 	.word	0x001e1c00
60001d80:	20000000 	.word	0x20000000
60001d84:	20002400 	.word	0x20002400
60001d88:	0000bcc9 	.word	0x0000bcc9

60001d8c <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001d8c:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001d8e:	4b0e      	ldr	r3, [pc, #56]	; (60001dc8 <_reboot_Teensyduino_+0x3c>)
60001d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001d92:	079b      	lsls	r3, r3, #30
60001d94:	d400      	bmi.n	60001d98 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001d96:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001d98:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001d9a:	4b0c      	ldr	r3, [pc, #48]	; (60001dcc <_reboot_Teensyduino_+0x40>)
60001d9c:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d9e:	4a0c      	ldr	r2, [pc, #48]	; (60001dd0 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001da0:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001da4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001da8:	490a      	ldr	r1, [pc, #40]	; (60001dd4 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001daa:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001dae:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001db0:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001db2:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001db6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001dba:	4807      	ldr	r0, [pc, #28]	; (60001dd8 <_reboot_Teensyduino_+0x4c>)
60001dbc:	4a07      	ldr	r2, [pc, #28]	; (60001ddc <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001dbe:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001dc0:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001dc2:	689b      	ldr	r3, [r3, #8]
60001dc4:	4798      	blx	r3
	}
	__builtin_unreachable();
60001dc6:	bf00      	nop
60001dc8:	401f4400 	.word	0x401f4400
60001dcc:	402e0000 	.word	0x402e0000
60001dd0:	400ac000 	.word	0x400ac000
60001dd4:	00200003 	.word	0x00200003
60001dd8:	20208000 	.word	0x20208000
60001ddc:	eb120000 	.word	0xeb120000

60001de0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001de0:	4b10      	ldr	r3, [pc, #64]	; (60001e24 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001de2:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001de4:	4a10      	ldr	r2, [pc, #64]	; (60001e28 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001de6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001de8:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001dec:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001dee:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001df0:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001df4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001df6:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001dfa:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dfc:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001dfe:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001e00:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001e02:	061b      	lsls	r3, r3, #24
60001e04:	d4fc      	bmi.n	60001e00 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e06:	4a09      	ldr	r2, [pc, #36]	; (60001e2c <analog_init+0x4c>)
60001e08:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e0c:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e0e:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e10:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001e12:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001e14:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001e18:	d1fb      	bne.n	60001e12 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001e1a:	4a05      	ldr	r2, [pc, #20]	; (60001e30 <analog_init+0x50>)
60001e1c:	7013      	strb	r3, [r2, #0]
}
60001e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
60001e22:	4770      	bx	lr
60001e24:	400fc000 	.word	0x400fc000
60001e28:	400c4000 	.word	0x400c4000
60001e2c:	400c8000 	.word	0x400c8000
60001e30:	20003903 	.word	0x20003903

60001e34 <_init>:
60001e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001e36:	bf00      	nop
60001e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001e3a:	bc08      	pop	{r3}
60001e3c:	469e      	mov	lr, r3
60001e3e:	4770      	bx	lr

60001e40 <__main_veneer>:
60001e40:	f85f f000 	ldr.w	pc, [pc]	; 60001e44 <__main_veneer+0x4>
60001e44:	0000b721 	.word	0x0000b721

60001e48 <__set_arm_clock_veneer>:
60001e48:	f85f f000 	ldr.w	pc, [pc]	; 60001e4c <__set_arm_clock_veneer+0x4>
60001e4c:	0000b24d 	.word	0x0000b24d

60001e50 <__sm_set_pool_veneer>:
60001e50:	f85f f000 	ldr.w	pc, [pc]	; 60001e54 <__sm_set_pool_veneer+0x4>
60001e54:	0000d581 	.word	0x0000d581

60001e58 <__memset_veneer>:
60001e58:	f85f f000 	ldr.w	pc, [pc]	; 60001e5c <__memset_veneer+0x4>
60001e5c:	0000de8d 	.word	0x0000de8d

60001e60 <__delay_veneer>:
60001e60:	f85f f000 	ldr.w	pc, [pc]	; 60001e64 <__delay_veneer+0x4>
60001e64:	0000b53d 	.word	0x0000b53d

60001e68 <__pwm_init_veneer>:
60001e68:	f85f f000 	ldr.w	pc, [pc]	; 60001e6c <__pwm_init_veneer+0x4>
60001e6c:	0000d441 	.word	0x0000d441

60001e70 <____libc_init_array_veneer>:
60001e70:	f85f f000 	ldr.w	pc, [pc]	; 60001e74 <____libc_init_array_veneer+0x4>
60001e74:	0000df3d 	.word	0x0000df3d

60001e78 <__usb_init_serialnumber_veneer>:
60001e78:	f85f f000 	ldr.w	pc, [pc]	; 60001e7c <__usb_init_serialnumber_veneer+0x4>
60001e7c:	0000c439 	.word	0x0000c439

60001e80 <__frame_dummy_init_array_entry>:
60001e80:	00000045 000014c9 00002b85 0000a305     E........+......
60001e90:	0000addd                                ....

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
    } else {
      *hs = highSurrogate(cp);
      *ls = lowSurrogate(cp);
    }
    return ptr;
  }
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
  /** High surrogate for a code point.
   * \param{in} cp code point.
   * \return high surrogate.
   */
  inline uint16_t highSurrogate(uint32_t cp) {
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
    return (cp & 0X3FF) + 0XDC00;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
      *hs = highSurrogate(cp);
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      *ls = lowSurrogate(cp);
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
  }
      34:	4718      	bx	r3
      36:	4770      	bx	lr
	// Event Handler functions and data
	static uint8_t serial_event_handlers_active;

	using Print::write; 
	// Transmit a single byte
	size_t write(unsigned long n) { return write((uint8_t)n); }
      38:	200026c0 	.word	0x200026c0
      3c:	200026c0 	.word	0x200026c0
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
  }
  m_vwd = dir;
  return true;

 fail:
  return false;
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
}
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
	if (pin < NUM_DIGITAL_PINS) {
		cdPin_ = pin;
		pinMode(cdPin_, INPUT_PULLUP);
	} else {
		cdPin_ = 0xff;
		return false;
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
  m_vwd = dir;
  return true;

 fail:
  return false;
}
      5c:	00000000 	.word	0x00000000
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
}
      60:	20003868 	.word	0x20003868
      64:	60019000 	.word	0x60019000

00000068 <Print::availableForWrite()>:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
      68:	2000      	movs	r0, #0
      6a:	4770      	bx	lr

0000006c <Print::flush()>:
	virtual void flush()				{ }
      6c:	4770      	bx	lr
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
      6e:	bf00      	nop

00000070 <SDFile::isOpen()>:
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
      70:	6d03      	ldr	r3, [r0, #80]	; 0x50
      72:	b10b      	cbz	r3, 78 <SDFile::isOpen()+0x8>
      74:	2001      	movs	r0, #1
			sdfatfile.close();
		}
	}
	virtual bool isOpen() {
		return sdfatfile.isOpen();
	}
      76:	4770      	bx	lr
      78:	6d40      	ldr	r0, [r0, #84]	; 0x54
      7a:	3800      	subs	r0, #0
      7c:	bf18      	it	ne
      7e:	2001      	movne	r0, #1
      80:	4770      	bx	lr
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      82:	bf00      	nop

00000084 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::~MidiInterface()>:
      84:	4770      	bx	lr
  if (tz & 0X80) {
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
      86:	bf00      	nop

00000088 <SDFile::close()>:
	virtual void close() {
      88:	b510      	push	{r4, lr}
      8a:	4604      	mov	r4, r0
		if (filename) {
      8c:	6d80      	ldr	r0, [r0, #88]	; 0x58
      8e:	b118      	cbz	r0, 98 <SDFile::close()+0x10>
			free(filename);
      90:	f00d fb78 	bl	d784 <free>
			filename = nullptr;
      94:	2300      	movs	r3, #0
      96:	65a3      	str	r3, [r4, #88]	; 0x58
      98:	6d23      	ldr	r3, [r4, #80]	; 0x50
      9a:	b12b      	cbz	r3, a8 <SDFile::close()+0x20>
			sdfatfile.close();
      9c:	f104 0018 	add.w	r0, r4, #24
	}
      a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			sdfatfile.close();
      a4:	f007 b9f2 	b.w	748c <FsBaseFile::close()>
      a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
      aa:	2b00      	cmp	r3, #0
      ac:	d1f6      	bne.n	9c <SDFile::close()+0x14>
	}
      ae:	bd10      	pop	{r4, pc}

000000b0 <hw::async::async_master& hw::async::async_master::get<Master>() [clone .part.0]>:
}
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
  if (this == &from) return *this;
  close();
  if (from.m_fFile) {
      b0:	b410      	push	{r4}
					*(portConfigRegister(hardware->rx_pins[rx_pin_new_index].pin)) = hardware->rx_pins[rx_pin_new_index].mux_val;
					if (hardware->rx_pins[rx_pin_new_index].select_input_register) {
					 	*(hardware->rx_pins[rx_pin_new_index].select_input_register) =  hardware->rx_pins[rx_pin_new_index].select_val;		
					}
				}		
				rx_pin_index_ = rx_pin_new_index;
      b2:	4b08      	ldr	r3, [pc, #32]	; (d4 <hw::async::async_master& hw::async::async_master::get<Master>() [clone .part.0]+0x24>)
				//Serial.printf("  PINCFG: %x MODIR: %x\n", port->PINCFG, port->MODIR);	
				return;
			}
		}
	}
}
      b4:	2100      	movs	r1, #0
		for (uint8_t rx_pin_new_index = 0; rx_pin_new_index < cnt_rx_pins; rx_pin_new_index++) {
      b6:	4c08      	ldr	r4, [pc, #32]	; (d8 <hw::async::async_master& hw::async::async_master::get<Master>() [clone .part.0]+0x28>)
			if (pin == hardware->rx_pins[rx_pin_new_index].pin) {
      b8:	461a      	mov	r2, r3
      ba:	4808      	ldr	r0, [pc, #32]	; (dc <hw::async::async_master& hw::async::async_master::get<Master>() [clone .part.0]+0x2c>)
      bc:	601c      	str	r4, [r3, #0]
      be:	2401      	movs	r4, #1
      c0:	7519      	strb	r1, [r3, #20]
      c2:	f842 1f04 	str.w	r1, [r2, #4]!
      c6:	6004      	str	r4, [r0, #0]
      c8:	6119      	str	r1, [r3, #16]
      ca:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (!rmdir()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return true;
      ce:	e9c3 2202 	strd	r2, r2, [r3, #8]

 fail:
  return false;
}
      d2:	4770      	bx	lr
    if (!rmdir()) {
      d4:	20003508 	.word	0x20003508
      d8:	20002aa8 	.word	0x20002aa8
  seconds += (tm.mday-1) * SECS_PER_DAY;
  seconds += tm.hour * SECS_PER_HOUR;
  seconds += tm.min * SECS_PER_MIN;
  seconds += tm.sec;
  return /*(time_t)*/ seconds;
}
      dc:	200032d4 	.word	0x200032d4

000000e0 <SDFile::name()>:
	virtual const char * name() {
      e0:	b510      	push	{r4, lr}
      e2:	4604      	mov	r4, r0
		if (!filename) {
      e4:	6d80      	ldr	r0, [r0, #88]	; 0x58
      e6:	b100      	cbz	r0, ea <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
      e8:	bd10      	pop	{r4, pc}
			filename = (char *)malloc(MAX_FILENAME_LEN);
      ea:	f44f 7080 	mov.w	r0, #256	; 0x100
      ee:	f00d fb41 	bl	d774 <malloc>
      f2:	65a0      	str	r0, [r4, #88]	; 0x58
			if (filename) {
      f4:	b1b0      	cbz	r0, 124 <SDFile::name()+0x44>
    *name = 0;
      f6:	2200      	movs	r2, #0
    return m_fFile ? m_fFile->getName(name, len) :
      f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    *name = 0;
      fa:	7002      	strb	r2, [r0, #0]
    return m_fFile ? m_fFile->getName(name, len) :
      fc:	b13b      	cbz	r3, 10e <SDFile::name()+0x2e>
      fe:	4601      	mov	r1, r0
     100:	f44f 7280 	mov.w	r2, #256	; 0x100
     104:	4618      	mov	r0, r3
     106:	f006 fe11 	bl	6d2c <FatFile::getName(char*, unsigned int)>
		return filename;
     10a:	6da0      	ldr	r0, [r4, #88]	; 0x58
	}
     10c:	bd10      	pop	{r4, pc}
     10e:	6d63      	ldr	r3, [r4, #84]	; 0x54
           m_xFile ? m_xFile->getName(name, len) : 0;
     110:	2b00      	cmp	r3, #0
     112:	d0e9      	beq.n	e8 <SDFile::name()+0x8>
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
     114:	4601      	mov	r1, r0
     116:	f44f 7280 	mov.w	r2, #256	; 0x100
     11a:	4618      	mov	r0, r3
     11c:	f004 fab4 	bl	4688 <ExFatFile::getName8(char*, unsigned int)>
		return filename;
     120:	6da0      	ldr	r0, [r4, #88]	; 0x58
	}
     122:	bd10      	pop	{r4, pc}
				filename = &zeroterm;
     124:	4b01      	ldr	r3, [pc, #4]	; (12c <SDFile::name()+0x4c>)
     126:	4618      	mov	r0, r3
     128:	65a3      	str	r3, [r4, #88]	; 0x58
	}
     12a:	bd10      	pop	{r4, pc}
     12c:	20003902 	.word	0x20003902

00000130 <SDFile::truncate(unsigned long long)>:
	virtual bool truncate(uint64_t size=0) {
     130:	b538      	push	{r3, r4, r5, lr}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
     132:	6d05      	ldr	r5, [r0, #80]	; 0x50
     134:	b16d      	cbz	r5, 152 <SDFile::truncate(unsigned long long)+0x22>
     136:	b10b      	cbz	r3, 13c <SDFile::truncate(unsigned long long)+0xc>
	}
     138:	2000      	movs	r0, #0
     13a:	bd38      	pop	{r3, r4, r5, pc}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
     13c:	4611      	mov	r1, r2
     13e:	4628      	mov	r0, r5
     140:	f005 fb30 	bl	57a4 <FatFile::seekSet(unsigned long)>
     144:	2800      	cmp	r0, #0
     146:	d0f7      	beq.n	138 <SDFile::truncate(unsigned long long)+0x8>
     148:	4628      	mov	r0, r5
     14a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     14e:	f005 bccb 	b.w	5ae8 <FatFile::truncate()>
     152:	6d44      	ldr	r4, [r0, #84]	; 0x54
           m_xFile ? m_xFile->truncate(length) : false;
     154:	2c00      	cmp	r4, #0
     156:	d0ef      	beq.n	138 <SDFile::truncate(unsigned long long)+0x8>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
     158:	4620      	mov	r0, r4
     15a:	f002 fee7 	bl	2f2c <ExFatFile::seekSet(unsigned long long)>
     15e:	2800      	cmp	r0, #0
     160:	d0ea      	beq.n	138 <SDFile::truncate(unsigned long long)+0x8>
     162:	4620      	mov	r0, r4
     164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     168:	f003 bd5a 	b.w	3c20 <ExFatFile::truncate()>

0000016c <SDFile::setModifyTime(DateTimeFields const&)>:
		if (tm.year < 80 || tm.year > 207) return false;
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
	}
	virtual bool setModifyTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     16c:	798a      	ldrb	r2, [r1, #6]
     16e:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
     172:	061b      	lsls	r3, r3, #24
     174:	d422      	bmi.n	1bc <SDFile::setModifyTime(DateTimeFields const&)+0x50>
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     176:	f202 726c 	addw	r2, r2, #1900	; 0x76c
	virtual bool setModifyTime(const DateTimeFields &tm) {
     17a:	b5f0      	push	{r4, r5, r6, r7, lr}
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     17c:	794b      	ldrb	r3, [r1, #5]
	virtual bool setModifyTime(const DateTimeFields &tm) {
     17e:	b085      	sub	sp, #20
    return m_fFile ?
     180:	6d04      	ldr	r4, [r0, #80]	; 0x50
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     182:	3301      	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
     184:	790d      	ldrb	r5, [r1, #4]
     186:	788e      	ldrb	r6, [r1, #2]
     188:	784f      	ldrb	r7, [r1, #1]
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     18a:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     18c:	7809      	ldrb	r1, [r1, #0]
     18e:	b14c      	cbz	r4, 1a4 <SDFile::setModifyTime(DateTimeFields const&)+0x38>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
     190:	4620      	mov	r0, r4
     192:	9601      	str	r6, [sp, #4]
     194:	9500      	str	r5, [sp, #0]
     196:	e9cd 7102 	strd	r7, r1, [sp, #8]
     19a:	2104      	movs	r1, #4
     19c:	f005 fc38 	bl	5a10 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     1a0:	b005      	add	sp, #20
     1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1a4:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ?
     1a6:	2800      	cmp	r0, #0
     1a8:	d0fa      	beq.n	1a0 <SDFile::setModifyTime(DateTimeFields const&)+0x34>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
     1aa:	9601      	str	r6, [sp, #4]
     1ac:	9500      	str	r5, [sp, #0]
     1ae:	e9cd 7102 	strd	r7, r1, [sp, #8]
     1b2:	2104      	movs	r1, #4
     1b4:	f003 fc78 	bl	3aa8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     1b8:	b005      	add	sp, #20
     1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (tm.year < 80 || tm.year > 207) return false;
     1bc:	2000      	movs	r0, #0
	}
     1be:	4770      	bx	lr

000001c0 <SDFile::rewindDirectory()>:
	virtual void rewindDirectory(void) {
     1c0:	b510      	push	{r4, lr}
     1c2:	4604      	mov	r4, r0
    return m_fFile ? m_fFile->isDir() :
     1c4:	6d00      	ldr	r0, [r0, #80]	; 0x50
     1c6:	b180      	cbz	r0, 1ea <SDFile::rewindDirectory()+0x2a>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     1c8:	7803      	ldrb	r3, [r0, #0]
     1ca:	f013 0f70 	tst.w	r3, #112	; 0x70
     1ce:	d100      	bne.n	1d2 <SDFile::rewindDirectory()+0x12>
	}
     1d0:	bd10      	pop	{r4, pc}
    seekSet(0);
     1d2:	2100      	movs	r1, #0
     1d4:	f005 fae6 	bl	57a4 <FatFile::seekSet(unsigned long)>
    if (m_xFile) m_xFile->rewind();
     1d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
     1da:	2800      	cmp	r0, #0
     1dc:	d0f8      	beq.n	1d0 <SDFile::rewindDirectory()+0x10>
    seekSet(0);
     1de:	2200      	movs	r2, #0
     1e0:	2300      	movs	r3, #0
     1e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     1e6:	f002 bea1 	b.w	2f2c <ExFatFile::seekSet(unsigned long long)>
     1ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
           m_xFile ? m_xFile->isDir() : false;
     1ec:	2800      	cmp	r0, #0
     1ee:	d0ef      	beq.n	1d0 <SDFile::rewindDirectory()+0x10>
     1f0:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
     1f4:	f013 0f50 	tst.w	r3, #80	; 0x50
     1f8:	d0ea      	beq.n	1d0 <SDFile::rewindDirectory()+0x10>
     1fa:	2200      	movs	r2, #0
     1fc:	2300      	movs	r3, #0
     1fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     202:	f002 be93 	b.w	2f2c <ExFatFile::seekSet(unsigned long long)>
      if (cb > 11) cb = 11; // truncate off.
      dir->type = EXFAT_TYPE_LABEL;
      dir->labelLength = cb;
      uint8_t *puni = dir->unicode;
      while (cb--) {
        *puni = *volume_label++;
     206:	bf00      	nop

00000208 <SDFile::getModifyTime(DateTimeFields&)>:
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
     208:	6d03      	ldr	r3, [r0, #80]	; 0x50
	virtual bool getModifyTime(DateTimeFields &tm) {
     20a:	b510      	push	{r4, lr}
     20c:	460c      	mov	r4, r1
     20e:	b082      	sub	sp, #8
     210:	b32b      	cbz	r3, 25e <SDFile::getModifyTime(DateTimeFields&)+0x56>
     212:	f10d 0206 	add.w	r2, sp, #6
     216:	a901      	add	r1, sp, #4
     218:	4618      	mov	r0, r3
     21a:	f004 fe69 	bl	4ef0 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     21e:	b338      	cbz	r0, 270 <SDFile::getModifyTime(DateTimeFields&)+0x68>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     220:	f8bd 3004 	ldrh.w	r3, [sp, #4]
     224:	f8bd 2006 	ldrh.w	r2, [sp, #6]
     228:	ea53 0102 	orrs.w	r1, r3, r2
     22c:	d020      	beq.n	270 <SDFile::getModifyTime(DateTimeFields&)+0x68>
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted minute [0,59]
 */
static inline uint8_t FS_MINUTE(uint16_t fatTime) {
  return (fatTime >> 5) & 0X3F;
     22e:	f3c2 1c45 	ubfx	ip, r2, #5, #6
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
     232:	f002 001f 	and.w	r0, r2, #31
  return fatTime >> 11;
     236:	0ad2      	lsrs	r2, r2, #11
  return (fatDate >> 5) & 0XF;
     238:	f3c3 1143 	ubfx	r1, r3, #5, #4
  return 2*(fatTime & 0X1F);
     23c:	0040      	lsls	r0, r0, #1
		tm.min = FS_MINUTE(fat_time);
     23e:	f884 c001 	strb.w	ip, [r4, #1]
  return fatTime >> 11;
     242:	70a2      	strb	r2, [r4, #2]
  return 1980 + (fatDate >> 9);
     244:	0a5a      	lsrs	r2, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
     246:	3901      	subs	r1, #1
  return fatDate & 0X1F;
     248:	f003 031f 	and.w	r3, r3, #31
		tm.year = FS_YEAR(fat_date) - 1900;
     24c:	f502 62ea 	add.w	r2, r2, #1872	; 0x750
		tm.sec = FS_SECOND(fat_time);
     250:	7020      	strb	r0, [r4, #0]
		return true;
     252:	2001      	movs	r0, #1
		tm.mon = FS_MONTH(fat_date) - 1;
     254:	7161      	strb	r1, [r4, #5]
		tm.mday = FS_DAY(fat_date);
     256:	7123      	strb	r3, [r4, #4]
		tm.year = FS_YEAR(fat_date) - 1900;
     258:	71a2      	strb	r2, [r4, #6]
	}
     25a:	b002      	add	sp, #8
     25c:	bd10      	pop	{r4, pc}
     25e:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
     260:	b130      	cbz	r0, 270 <SDFile::getModifyTime(DateTimeFields&)+0x68>
     262:	f10d 0206 	add.w	r2, sp, #6
     266:	a901      	add	r1, sp, #4
     268:	f002 fd06 	bl	2c78 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
     26c:	2800      	cmp	r0, #0
     26e:	d1d7      	bne.n	220 <SDFile::getModifyTime(DateTimeFields&)+0x18>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     270:	2000      	movs	r0, #0
	}
     272:	b002      	add	sp, #8
     274:	bd10      	pop	{r4, pc}
        dir->name[0] = FAT_NAME_DELETED;  // mark item as deleted
     276:	bf00      	nop

00000278 <SDFile::getCreateTime(DateTimeFields&)>:
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
     278:	6d03      	ldr	r3, [r0, #80]	; 0x50
	virtual bool getCreateTime(DateTimeFields &tm) {
     27a:	b510      	push	{r4, lr}
     27c:	460c      	mov	r4, r1
     27e:	b082      	sub	sp, #8
     280:	b32b      	cbz	r3, 2ce <SDFile::getCreateTime(DateTimeFields&)+0x56>
     282:	f10d 0206 	add.w	r2, sp, #6
     286:	a901      	add	r1, sp, #4
     288:	4618      	mov	r0, r3
     28a:	f004 fe21 	bl	4ed0 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     28e:	b338      	cbz	r0, 2e0 <SDFile::getCreateTime(DateTimeFields&)+0x68>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     290:	f8bd 3004 	ldrh.w	r3, [sp, #4]
     294:	f8bd 2006 	ldrh.w	r2, [sp, #6]
     298:	ea53 0102 	orrs.w	r1, r3, r2
     29c:	d020      	beq.n	2e0 <SDFile::getCreateTime(DateTimeFields&)+0x68>
  return (fatTime >> 5) & 0X3F;
     29e:	f3c2 1c45 	ubfx	ip, r2, #5, #6
  return 2*(fatTime & 0X1F);
     2a2:	f002 001f 	and.w	r0, r2, #31
  return fatTime >> 11;
     2a6:	0ad2      	lsrs	r2, r2, #11
  return (fatDate >> 5) & 0XF;
     2a8:	f3c3 1143 	ubfx	r1, r3, #5, #4
  return 2*(fatTime & 0X1F);
     2ac:	0040      	lsls	r0, r0, #1
		tm.min = FS_MINUTE(fat_time);
     2ae:	f884 c001 	strb.w	ip, [r4, #1]
  return fatTime >> 11;
     2b2:	70a2      	strb	r2, [r4, #2]
  return 1980 + (fatDate >> 9);
     2b4:	0a5a      	lsrs	r2, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
     2b6:	3901      	subs	r1, #1
  return fatDate & 0X1F;
     2b8:	f003 031f 	and.w	r3, r3, #31
		tm.year = FS_YEAR(fat_date) - 1900;
     2bc:	f502 62ea 	add.w	r2, r2, #1872	; 0x750
		tm.sec = FS_SECOND(fat_time);
     2c0:	7020      	strb	r0, [r4, #0]
		return true;
     2c2:	2001      	movs	r0, #1
		tm.mon = FS_MONTH(fat_date) - 1;
     2c4:	7161      	strb	r1, [r4, #5]
		tm.mday = FS_DAY(fat_date);
     2c6:	7123      	strb	r3, [r4, #4]
		tm.year = FS_YEAR(fat_date) - 1900;
     2c8:	71a2      	strb	r2, [r4, #6]
	}
     2ca:	b002      	add	sp, #8
     2cc:	bd10      	pop	{r4, pc}
     2ce:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
     2d0:	b130      	cbz	r0, 2e0 <SDFile::getCreateTime(DateTimeFields&)+0x68>
     2d2:	f10d 0206 	add.w	r2, sp, #6
     2d6:	a901      	add	r1, sp, #4
     2d8:	f002 fcbc 	bl	2c54 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     2dc:	2800      	cmp	r0, #0
     2de:	d1d7      	bne.n	290 <SDFile::getCreateTime(DateTimeFields&)+0x18>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     2e0:	2000      	movs	r0, #0
	}
     2e2:	b002      	add	sp, #8
     2e4:	bd10      	pop	{r4, pc}
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     2e6:	bf00      	nop

000002e8 <File::write(unsigned char const*, unsigned int)>:
		return (f) ? f->read(buf, nbyte) : 0;
	}
	// Write bytes to a file
	virtual size_t write(const uint8_t *buf, size_t size) {
		// override print version
		return (f) ? f->write((void*)buf, size) : 0;
     2e8:	6903      	ldr	r3, [r0, #16]
     2ea:	b1d3      	cbz	r3, 322 <File::write(unsigned char const*, unsigned int)+0x3a>
     2ec:	480e      	ldr	r0, [pc, #56]	; (328 <File::write(unsigned char const*, unsigned int)+0x40>)
	virtual size_t write(const uint8_t *buf, size_t size) {
     2ee:	b410      	push	{r4}
		return (f) ? f->write((void*)buf, size) : 0;
     2f0:	681c      	ldr	r4, [r3, #0]
     2f2:	68e4      	ldr	r4, [r4, #12]
     2f4:	4284      	cmp	r4, r0
     2f6:	d10f      	bne.n	318 <File::write(unsigned char const*, unsigned int)+0x30>
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
     2f8:	6d18      	ldr	r0, [r3, #80]	; 0x50
     2fa:	b118      	cbz	r0, 304 <File::write(unsigned char const*, unsigned int)+0x1c>
	}
     2fc:	f85d 4b04 	ldr.w	r4, [sp], #4
     300:	f005 bc2c 	b.w	5b5c <FatFile::write(void const*, unsigned int)>
     304:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->write(buf, count) : 0;
     306:	b118      	cbz	r0, 310 <File::write(unsigned char const*, unsigned int)+0x28>
     308:	f85d 4b04 	ldr.w	r4, [sp], #4
     30c:	f003 bcfa 	b.w	3d04 <ExFatFile::write(void const*, unsigned int)>
     310:	2000      	movs	r0, #0
     312:	f85d 4b04 	ldr.w	r4, [sp], #4
     316:	4770      	bx	lr
		return (f) ? f->write((void*)buf, size) : 0;
     318:	4618      	mov	r0, r3
     31a:	4623      	mov	r3, r4
	}
     31c:	f85d 4b04 	ldr.w	r4, [sp], #4
		return (f) ? f->write((void*)buf, size) : 0;
     320:	4718      	bx	r3
	}
     322:	2000      	movs	r0, #0
     324:	4770      	bx	lr
     326:	bf00      	nop
     328:	000005f1 	.word	0x000005f1

0000032c <File::available()>:
	size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	// Returns the number of bytes which may be read from a file
	int available() {
		return (f) ? f->available() : 0;
     32c:	6900      	ldr	r0, [r0, #16]
     32e:	b190      	cbz	r0, 356 <File::available()+0x2a>
     330:	6803      	ldr	r3, [r0, #0]
     332:	4a15      	ldr	r2, [pc, #84]	; (388 <File::available()+0x5c>)
     334:	691b      	ldr	r3, [r3, #16]
     336:	4293      	cmp	r3, r2
     338:	d125      	bne.n	386 <File::available()+0x5a>
    return m_fFile ? m_fFile->available() :
     33a:	6d03      	ldr	r3, [r0, #80]	; 0x50
     33c:	b163      	cbz	r3, 358 <File::available()+0x2c>
    return isFile() ? fileSize() - curPosition() : 0;
     33e:	7818      	ldrb	r0, [r3, #0]
     340:	f010 0008 	ands.w	r0, r0, #8
     344:	d007      	beq.n	356 <File::available()+0x2a>
     346:	69d8      	ldr	r0, [r3, #28]
     348:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     34a:	1ac0      	subs	r0, r0, r3
     34c:	bf48      	it	mi
     34e:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     352:	4770      	bx	lr
     354:	4618      	mov	r0, r3
	}
     356:	4770      	bx	lr
     358:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->available() : 0;
     35a:	2b00      	cmp	r3, #0
     35c:	d0fa      	beq.n	354 <File::available()+0x28>
    return isFile() ? fileSize() - curPosition() : 0;
     35e:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
     362:	f010 0008 	ands.w	r0, r0, #8
     366:	d0f6      	beq.n	356 <File::available()+0x2a>
     368:	6918      	ldr	r0, [r3, #16]
     36a:	6819      	ldr	r1, [r3, #0]
     36c:	695a      	ldr	r2, [r3, #20]
     36e:	1a40      	subs	r0, r0, r1
     370:	685b      	ldr	r3, [r3, #4]
     372:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     376:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     37a:	f173 0300 	sbcs.w	r3, r3, #0
     37e:	d3ea      	bcc.n	356 <File::available()+0x2a>
     380:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     384:	4770      	bx	lr
		return (f) ? f->available() : 0;
     386:	4718      	bx	r3
     388:	000006a1 	.word	0x000006a1

0000038c <File::peek()>:
	int peek() {
		return (f) ? f->peek() : -1;
     38c:	6903      	ldr	r3, [r0, #16]
     38e:	b173      	cbz	r3, 3ae <File::peek()+0x22>
     390:	681a      	ldr	r2, [r3, #0]
     392:	4908      	ldr	r1, [pc, #32]	; (3b4 <File::peek()+0x28>)
     394:	6952      	ldr	r2, [r2, #20]
     396:	428a      	cmp	r2, r1
     398:	d107      	bne.n	3aa <File::peek()+0x1e>
    return m_fFile ? m_fFile->peek() :
     39a:	6d18      	ldr	r0, [r3, #80]	; 0x50
     39c:	b108      	cbz	r0, 3a2 <File::peek()+0x16>
     39e:	f005 b88d 	b.w	54bc <FatFile::peek()>
     3a2:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->peek() : -1;
     3a4:	b118      	cbz	r0, 3ae <File::peek()+0x22>
     3a6:	f002 bdab 	b.w	2f00 <ExFatFile::peek()>
     3aa:	4618      	mov	r0, r3
     3ac:	4710      	bx	r2
	}
     3ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     3b2:	4770      	bx	lr
     3b4:	00000521 	.word	0x00000521

000003b8 <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     3b8:	6903      	ldr	r3, [r0, #16]
     3ba:	b323      	cbz	r3, 406 <File::read()+0x4e>
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     3bc:	6819      	ldr	r1, [r3, #0]
     3be:	4a13      	ldr	r2, [pc, #76]	; (40c <File::read()+0x54>)
	int read() {
     3c0:	b510      	push	{r4, lr}
		if (f->read(&b, 1) < 1) return -1;
     3c2:	688c      	ldr	r4, [r1, #8]
	int read() {
     3c4:	b082      	sub	sp, #8
     3c6:	4294      	cmp	r4, r2
     3c8:	d114      	bne.n	3f4 <File::read()+0x3c>
    return m_fFile ? m_fFile->read(buf, count) :
     3ca:	6d18      	ldr	r0, [r3, #80]	; 0x50
     3cc:	b148      	cbz	r0, 3e2 <File::read()+0x2a>
     3ce:	2201      	movs	r2, #1
     3d0:	f10d 0107 	add.w	r1, sp, #7
     3d4:	f004 ff9e 	bl	5314 <FatFile::read(void*, unsigned int)>
		if (f->read(&b, 1) < 1) return -1;
     3d8:	b190      	cbz	r0, 400 <File::read()+0x48>
		return b;
     3da:	f89d 0007 	ldrb.w	r0, [sp, #7]
	}
     3de:	b002      	add	sp, #8
     3e0:	bd10      	pop	{r4, pc}
     3e2:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->read(buf, count) : -1;
     3e4:	2800      	cmp	r0, #0
     3e6:	d0f8      	beq.n	3da <File::read()+0x22>
     3e8:	2201      	movs	r2, #1
     3ea:	f10d 0107 	add.w	r1, sp, #7
     3ee:	f002 fcb7 	bl	2d60 <ExFatFile::read(void*, unsigned int)>
     3f2:	e7f1      	b.n	3d8 <File::read()+0x20>
		if (f->read(&b, 1) < 1) return -1;
     3f4:	2201      	movs	r2, #1
     3f6:	f10d 0107 	add.w	r1, sp, #7
     3fa:	4618      	mov	r0, r3
     3fc:	47a0      	blx	r4
     3fe:	e7eb      	b.n	3d8 <File::read()+0x20>
		if (!f) return -1;
     400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     404:	e7eb      	b.n	3de <File::read()+0x26>
     406:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
     40a:	4770      	bx	lr
     40c:	00000579 	.word	0x00000579

00000410 <File::flush()>:
		if (f) f->flush();
     410:	6903      	ldr	r3, [r0, #16]
     412:	b163      	cbz	r3, 42e <File::flush()+0x1e>
     414:	681a      	ldr	r2, [r3, #0]
     416:	4907      	ldr	r1, [pc, #28]	; (434 <File::flush()+0x24>)
     418:	6992      	ldr	r2, [r2, #24]
     41a:	428a      	cmp	r2, r1
     41c:	d108      	bne.n	430 <File::flush()+0x20>
    return m_fFile ? m_fFile->sync() :
     41e:	6d18      	ldr	r0, [r3, #80]	; 0x50
     420:	b108      	cbz	r0, 426 <File::flush()+0x16>
     422:	f005 baef 	b.w	5a04 <FatFile::sync()>
     426:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->sync() : false;
     428:	b108      	cbz	r0, 42e <File::flush()+0x1e>
     42a:	f003 b9c7 	b.w	37bc <ExFatFile::sync()>
	}
     42e:	4770      	bx	lr
		if (f) f->flush();
     430:	4618      	mov	r0, r3
     432:	4710      	bx	r2
     434:	000005dd 	.word	0x000005dd

00000438 <SDFile::position()>:
    return m_fFile ? m_fFile->curPosition() :
     438:	6d03      	ldr	r3, [r0, #80]	; 0x50
     43a:	b113      	cbz	r3, 442 <SDFile::position()+0xa>
     43c:	6958      	ldr	r0, [r3, #20]
     43e:	2100      	movs	r1, #0
     440:	4770      	bx	lr
     442:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->curPosition() : 0;
     444:	b113      	cbz	r3, 44c <SDFile::position()+0x14>
  uint64_t curPosition() const {return m_curPosition;}
     446:	e9d3 0100 	ldrd	r0, r1, [r3]
     44a:	4770      	bx	lr
     44c:	4618      	mov	r0, r3
     44e:	4619      	mov	r1, r3
	}
     450:	4770      	bx	lr
    return m_fFile ? m_fFile->write(buf, count) :
     452:	bf00      	nop

00000454 <SDFile::size()>:
    return m_fFile ? m_fFile->fileSize() :
     454:	6d03      	ldr	r3, [r0, #80]	; 0x50
     456:	b113      	cbz	r3, 45e <SDFile::size()+0xa>
     458:	69d8      	ldr	r0, [r3, #28]
     45a:	2100      	movs	r1, #0
     45c:	4770      	bx	lr
     45e:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->fileSize() : 0;
     460:	b113      	cbz	r3, 468 <SDFile::size()+0x14>
  uint64_t fileSize() const {return m_validLength;}
     462:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
     466:	4770      	bx	lr
     468:	4618      	mov	r0, r3
     46a:	4619      	mov	r1, r3
	}
     46c:	4770      	bx	lr
    return m_fFile ? m_fFile->write(buf, count) :
     46e:	bf00      	nop

00000470 <SDFile::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     470:	b5f0      	push	{r4, r5, r6, r7, lr}
     472:	b095      	sub	sp, #84	; 0x54
	constexpr Print() : write_error(0) {}
     474:	2200      	movs	r2, #0
enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     476:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     47a:	4f24      	ldr	r7, [pc, #144]	; (50c <SDFile::openNextFile(unsigned char)+0x9c>)
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     47c:	3118      	adds	r1, #24
     47e:	4605      	mov	r5, r0
     480:	a804      	add	r0, sp, #16
     482:	f88d 200c 	strb.w	r2, [sp, #12]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     486:	9700      	str	r7, [sp, #0]
     488:	e9cd 2401 	strd	r2, r4, [sp, #4]
  FsBaseFile() {}
     48c:	e9cd 2212 	strd	r2, r2, [sp, #72]	; 0x48
    tmpFile.openNext(this, oflag);
     490:	f007 f868 	bl	7564 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
     494:	9b12      	ldr	r3, [sp, #72]	; 0x48
     496:	2b00      	cmp	r3, #0
     498:	d02d      	beq.n	4f6 <SDFile::openNextFile(unsigned char)+0x86>
		if (file) return File(new SDFile(file));
     49a:	205c      	movs	r0, #92	; 0x5c
class FileImpl {
     49c:	2600      	movs	r6, #0
     49e:	f00b f9e1 	bl	b864 <operator new(unsigned int)>
class Print
     4a2:	9b01      	ldr	r3, [sp, #4]
     4a4:	4604      	mov	r4, r0
     4a6:	6046      	str	r6, [r0, #4]
     4a8:	60c3      	str	r3, [r0, #12]
class StreamFile : public stream_t, public BaseFile {
     4aa:	a904      	add	r1, sp, #16
class Stream : public Print
     4ac:	9b02      	ldr	r3, [sp, #8]
     4ae:	3018      	adds	r0, #24
     4b0:	f840 3c08 	str.w	r3, [r0, #-8]
     4b4:	f89d 300c 	ldrb.w	r3, [sp, #12]
     4b8:	f800 3c04 	strb.w	r3, [r0, #-4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     4bc:	4b14      	ldr	r3, [pc, #80]	; (510 <SDFile::openNextFile(unsigned char)+0xa0>)
     4be:	f840 3c18 	str.w	r3, [r0, #-24]
     4c2:	4b14      	ldr	r3, [pc, #80]	; (514 <SDFile::openNextFile(unsigned char)+0xa4>)
     4c4:	f840 3c10 	str.w	r3, [r0, #-16]
     4c8:	f006 ff9e 	bl	7408 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
	File(FileImpl *file) {
     4cc:	4b12      	ldr	r3, [pc, #72]	; (518 <SDFile::openNextFile(unsigned char)+0xa8>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
     4ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     4d2:	60a7      	str	r7, [r4, #8]
     4d4:	602b      	str	r3, [r5, #0]
		if (f) f->refcount++;
     4d6:	6863      	ldr	r3, [r4, #4]
     4d8:	65a6      	str	r6, [r4, #88]	; 0x58
     4da:	3301      	adds	r3, #1
	constexpr Print() : write_error(0) {}
     4dc:	606e      	str	r6, [r5, #4]
     4de:	732e      	strb	r6, [r5, #12]
     4e0:	60aa      	str	r2, [r5, #8]
		f = file;
     4e2:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
     4e4:	6063      	str	r3, [r4, #4]
     4e6:	4b0d      	ldr	r3, [pc, #52]	; (51c <SDFile::openNextFile(unsigned char)+0xac>)
  ~FsBaseFile() {close();}
     4e8:	a804      	add	r0, sp, #16
     4ea:	9300      	str	r3, [sp, #0]
     4ec:	f006 ffce 	bl	748c <FsBaseFile::close()>
	}
     4f0:	4628      	mov	r0, r5
     4f2:	b015      	add	sp, #84	; 0x54
     4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     4f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     4f8:	2b00      	cmp	r3, #0
     4fa:	d1ce      	bne.n	49a <SDFile::openNextFile(unsigned char)+0x2a>
	constexpr File() : f(nullptr) { }
     4fc:	4a06      	ldr	r2, [pc, #24]	; (518 <SDFile::openNextFile(unsigned char)+0xa8>)
     4fe:	732b      	strb	r3, [r5, #12]
     500:	602a      	str	r2, [r5, #0]
     502:	612b      	str	r3, [r5, #16]
     504:	e9c5 3401 	strd	r3, r4, [r5, #4]
     508:	e7ed      	b.n	4e6 <SDFile::openNextFile(unsigned char)+0x76>
     50a:	bf00      	nop
     50c:	20000fb4 	.word	0x20000fb4
     510:	20000fd8 	.word	0x20000fd8
     514:	20001034 	.word	0x20001034
     518:	20000f88 	.word	0x20000f88
     51c:	20000e2c 	.word	0x20000e2c

00000520 <SDFile::peek()>:
    return m_fFile ? m_fFile->peek() :
     520:	6d03      	ldr	r3, [r0, #80]	; 0x50
     522:	b113      	cbz	r3, 52a <SDFile::peek()+0xa>
     524:	4618      	mov	r0, r3
     526:	f004 bfc9 	b.w	54bc <FatFile::peek()>
     52a:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->peek() : -1;
     52c:	b108      	cbz	r0, 532 <SDFile::peek()+0x12>
     52e:	f002 bce7 	b.w	2f00 <ExFatFile::peek()>
	}
     532:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     536:	4770      	bx	lr

00000538 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
     538:	6c83      	ldr	r3, [r0, #72]	; 0x48
     53a:	b113      	cbz	r3, 542 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     53c:	4618      	mov	r0, r3
     53e:	f004 bfbd 	b.w	54bc <FatFile::peek()>
     542:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
     544:	b108      	cbz	r0, 54a <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     546:	f002 bcdb 	b.w	2f00 <ExFatFile::peek()>
  }
     54a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     54e:	4770      	bx	lr

00000550 <SDFile::isDirectory()>:
    return m_fFile ? m_fFile->isDir() :
     550:	6d03      	ldr	r3, [r0, #80]	; 0x50
     552:	b133      	cbz	r3, 562 <SDFile::isDirectory()+0x12>
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     554:	781b      	ldrb	r3, [r3, #0]
     556:	f013 0f70 	tst.w	r3, #112	; 0x70
     55a:	bf14      	ite	ne
     55c:	2001      	movne	r0, #1
     55e:	2000      	moveq	r0, #0
     560:	4770      	bx	lr
     562:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->isDir() : false;
     564:	b130      	cbz	r0, 574 <SDFile::isDirectory()+0x24>
     566:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
     56a:	f013 0f50 	tst.w	r3, #80	; 0x50
     56e:	bf14      	ite	ne
     570:	2001      	movne	r0, #1
     572:	2000      	moveq	r0, #0
	}
     574:	4770      	bx	lr
     576:	bf00      	nop

00000578 <SDFile::read(void*, unsigned int)>:
    return m_fFile ? m_fFile->read(buf, count) :
     578:	6d03      	ldr	r3, [r0, #80]	; 0x50
     57a:	b113      	cbz	r3, 582 <SDFile::read(void*, unsigned int)+0xa>
     57c:	4618      	mov	r0, r3
     57e:	f004 bec9 	b.w	5314 <FatFile::read(void*, unsigned int)>
     582:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->read(buf, count) : -1;
     584:	b108      	cbz	r0, 58a <SDFile::read(void*, unsigned int)+0x12>
     586:	f002 bbeb 	b.w	2d60 <ExFatFile::read(void*, unsigned int)>
	}
     58a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     58e:	4770      	bx	lr

00000590 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
     590:	6c83      	ldr	r3, [r0, #72]	; 0x48
  int read() {
     592:	b500      	push	{lr}
     594:	b083      	sub	sp, #12
     596:	b163      	cbz	r3, 5b2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     598:	2201      	movs	r2, #1
     59a:	f10d 0107 	add.w	r1, sp, #7
     59e:	4618      	mov	r0, r3
     5a0:	f004 feb8 	bl	5314 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     5a4:	2801      	cmp	r0, #1
     5a6:	d10c      	bne.n	5c2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     5a8:	f89d 0007 	ldrb.w	r0, [sp, #7]
  }
     5ac:	b003      	add	sp, #12
     5ae:	f85d fb04 	ldr.w	pc, [sp], #4
     5b2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
     5b4:	b128      	cbz	r0, 5c2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     5b6:	2201      	movs	r2, #1
     5b8:	f10d 0107 	add.w	r1, sp, #7
     5bc:	f002 fbd0 	bl	2d60 <ExFatFile::read(void*, unsigned int)>
     5c0:	e7f0      	b.n	5a4 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     5c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     5c6:	e7f1      	b.n	5ac <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

000005c8 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
    return m_fFile ? m_fFile->sync() :
     5c8:	6c83      	ldr	r3, [r0, #72]	; 0x48
     5ca:	b113      	cbz	r3, 5d2 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     5cc:	4618      	mov	r0, r3
     5ce:	f005 ba19 	b.w	5a04 <FatFile::sync()>
     5d2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
     5d4:	b108      	cbz	r0, 5da <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     5d6:	f003 b8f1 	b.w	37bc <ExFatFile::sync()>
  }
     5da:	4770      	bx	lr

000005dc <SDFile::flush()>:
    return m_fFile ? m_fFile->sync() :
     5dc:	6d03      	ldr	r3, [r0, #80]	; 0x50
     5de:	b113      	cbz	r3, 5e6 <SDFile::flush()+0xa>
     5e0:	4618      	mov	r0, r3
     5e2:	f005 ba0f 	b.w	5a04 <FatFile::sync()>
     5e6:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->sync() : false;
     5e8:	b108      	cbz	r0, 5ee <SDFile::flush()+0x12>
     5ea:	f003 b8e7 	b.w	37bc <ExFatFile::sync()>
	}
     5ee:	4770      	bx	lr

000005f0 <SDFile::write(void const*, unsigned int)>:
    return m_fFile ? m_fFile->write(buf, count) :
     5f0:	6d03      	ldr	r3, [r0, #80]	; 0x50
     5f2:	b113      	cbz	r3, 5fa <SDFile::write(void const*, unsigned int)+0xa>
     5f4:	4618      	mov	r0, r3
     5f6:	f005 bab1 	b.w	5b5c <FatFile::write(void const*, unsigned int)>
     5fa:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->write(buf, count) : 0;
     5fc:	b108      	cbz	r0, 602 <SDFile::write(void const*, unsigned int)+0x12>
     5fe:	f003 bb81 	b.w	3d04 <ExFatFile::write(void const*, unsigned int)>
	}
     602:	4770      	bx	lr

00000604 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile ? m_fFile->write(buf, count) :
     604:	6c83      	ldr	r3, [r0, #72]	; 0x48
     606:	b113      	cbz	r3, 60e <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     608:	4618      	mov	r0, r3
     60a:	f005 baa7 	b.w	5b5c <FatFile::write(void const*, unsigned int)>
     60e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
     610:	b108      	cbz	r0, 616 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     612:	f003 bb77 	b.w	3d04 <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
     616:	4770      	bx	lr

00000618 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) {
     618:	b500      	push	{lr}
    return m_fFile ? m_fFile->write(buf, count) :
     61a:	6c83      	ldr	r3, [r0, #72]	; 0x48
     61c:	b083      	sub	sp, #12
     61e:	f88d 1007 	strb.w	r1, [sp, #7]
     622:	b143      	cbz	r3, 636 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     624:	2201      	movs	r2, #1
     626:	f10d 0107 	add.w	r1, sp, #7
     62a:	4618      	mov	r0, r3
     62c:	f005 fa96 	bl	5b5c <FatFile::write(void const*, unsigned int)>
  }
     630:	b003      	add	sp, #12
     632:	f85d fb04 	ldr.w	pc, [sp], #4
     636:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
     638:	2800      	cmp	r0, #0
     63a:	d0f9      	beq.n	630 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     63c:	2201      	movs	r2, #1
     63e:	f10d 0107 	add.w	r1, sp, #7
     642:	f003 fb5f 	bl	3d04 <ExFatFile::write(void const*, unsigned int)>
     646:	b003      	add	sp, #12
     648:	f85d fb04 	ldr.w	pc, [sp], #4

0000064c <SDFile::setCreateTime(DateTimeFields const&)>:
		if (tm.year < 80 || tm.year > 207) return false;
     64c:	798a      	ldrb	r2, [r1, #6]
     64e:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
     652:	061b      	lsls	r3, r3, #24
     654:	d422      	bmi.n	69c <SDFile::setCreateTime(DateTimeFields const&)+0x50>
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     656:	f202 726c 	addw	r2, r2, #1900	; 0x76c
	virtual bool setCreateTime(const DateTimeFields &tm) {
     65a:	b5f0      	push	{r4, r5, r6, r7, lr}
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     65c:	794b      	ldrb	r3, [r1, #5]
	virtual bool setCreateTime(const DateTimeFields &tm) {
     65e:	b085      	sub	sp, #20
    return m_fFile ?
     660:	6d04      	ldr	r4, [r0, #80]	; 0x50
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     662:	3301      	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
     664:	790d      	ldrb	r5, [r1, #4]
     666:	788e      	ldrb	r6, [r1, #2]
     668:	784f      	ldrb	r7, [r1, #1]
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     66a:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     66c:	7809      	ldrb	r1, [r1, #0]
     66e:	b14c      	cbz	r4, 684 <SDFile::setCreateTime(DateTimeFields const&)+0x38>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
     670:	4620      	mov	r0, r4
     672:	9601      	str	r6, [sp, #4]
     674:	9500      	str	r5, [sp, #0]
     676:	e9cd 7102 	strd	r7, r1, [sp, #8]
     67a:	2102      	movs	r1, #2
     67c:	f005 f9c8 	bl	5a10 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     680:	b005      	add	sp, #20
     682:	bdf0      	pop	{r4, r5, r6, r7, pc}
     684:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ?
     686:	2800      	cmp	r0, #0
     688:	d0fa      	beq.n	680 <SDFile::setCreateTime(DateTimeFields const&)+0x34>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
     68a:	9601      	str	r6, [sp, #4]
     68c:	9500      	str	r5, [sp, #0]
     68e:	e9cd 7102 	strd	r7, r1, [sp, #8]
     692:	2102      	movs	r1, #2
     694:	f003 fa08 	bl	3aa8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     698:	b005      	add	sp, #20
     69a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (tm.year < 80 || tm.year > 207) return false;
     69c:	2000      	movs	r0, #0
	}
     69e:	4770      	bx	lr

000006a0 <SDFile::available()>:
    return m_fFile ? m_fFile->available() :
     6a0:	6d03      	ldr	r3, [r0, #80]	; 0x50
     6a2:	b153      	cbz	r3, 6ba <SDFile::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     6a4:	7818      	ldrb	r0, [r3, #0]
     6a6:	f010 0008 	ands.w	r0, r0, #8
     6aa:	d00d      	beq.n	6c8 <SDFile::available()+0x28>
     6ac:	69d8      	ldr	r0, [r3, #28]
     6ae:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     6b0:	1ac0      	subs	r0, r0, r3
     6b2:	bf48      	it	mi
     6b4:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     6b8:	4770      	bx	lr
     6ba:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->available() : 0;
     6bc:	b1a3      	cbz	r3, 6e8 <SDFile::available()+0x48>
    return isFile() ? fileSize() - curPosition() : 0;
     6be:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
     6c2:	f010 0008 	ands.w	r0, r0, #8
     6c6:	d100      	bne.n	6ca <SDFile::available()+0x2a>
	}
     6c8:	4770      	bx	lr
     6ca:	6918      	ldr	r0, [r3, #16]
     6cc:	6819      	ldr	r1, [r3, #0]
     6ce:	695a      	ldr	r2, [r3, #20]
     6d0:	1a40      	subs	r0, r0, r1
     6d2:	685b      	ldr	r3, [r3, #4]
     6d4:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     6d8:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     6dc:	f173 0300 	sbcs.w	r3, r3, #0
     6e0:	d3f2      	bcc.n	6c8 <SDFile::available()+0x28>
     6e2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     6e6:	4770      	bx	lr
     6e8:	4618      	mov	r0, r3
		return sdfatfile.available();
     6ea:	e7ed      	b.n	6c8 <SDFile::available()+0x28>

000006ec <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
     6ec:	6c83      	ldr	r3, [r0, #72]	; 0x48
     6ee:	b153      	cbz	r3, 706 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     6f0:	7818      	ldrb	r0, [r3, #0]
     6f2:	f010 0008 	ands.w	r0, r0, #8
     6f6:	d00d      	beq.n	714 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     6f8:	69d8      	ldr	r0, [r3, #28]
     6fa:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     6fc:	1ac0      	subs	r0, r0, r3
     6fe:	bf48      	it	mi
     700:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     704:	4770      	bx	lr
     706:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
     708:	b1a3      	cbz	r3, 734 <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
    return isFile() ? fileSize() - curPosition() : 0;
     70a:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
     70e:	f010 0008 	ands.w	r0, r0, #8
     712:	d100      	bne.n	716 <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  }
     714:	4770      	bx	lr
     716:	6918      	ldr	r0, [r3, #16]
     718:	6819      	ldr	r1, [r3, #0]
     71a:	695a      	ldr	r2, [r3, #20]
     71c:	1a40      	subs	r0, r0, r1
     71e:	685b      	ldr	r3, [r3, #4]
     720:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     724:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     728:	f173 0300 	sbcs.w	r3, r3, #0
     72c:	d3f2      	bcc.n	714 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     72e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     732:	4770      	bx	lr
     734:	4618      	mov	r0, r3
    return BaseFile::available();
     736:	e7ed      	b.n	714 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

00000738 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     738:	b500      	push	{lr}
		return (f) ? f->write(&b, 1) : 0;
     73a:	6900      	ldr	r0, [r0, #16]
	size_t write(uint8_t b) {
     73c:	b083      	sub	sp, #12
     73e:	f88d 1007 	strb.w	r1, [sp, #7]
		return (f) ? f->write(&b, 1) : 0;
     742:	b160      	cbz	r0, 75e <File::write(unsigned char)+0x26>
     744:	6803      	ldr	r3, [r0, #0]
     746:	4a10      	ldr	r2, [pc, #64]	; (788 <File::write(unsigned char)+0x50>)
     748:	68db      	ldr	r3, [r3, #12]
     74a:	4293      	cmp	r3, r2
     74c:	d115      	bne.n	77a <File::write(unsigned char)+0x42>
    return m_fFile ? m_fFile->write(buf, count) :
     74e:	6d03      	ldr	r3, [r0, #80]	; 0x50
     750:	b143      	cbz	r3, 764 <File::write(unsigned char)+0x2c>
     752:	2201      	movs	r2, #1
     754:	f10d 0107 	add.w	r1, sp, #7
     758:	4618      	mov	r0, r3
     75a:	f005 f9ff 	bl	5b5c <FatFile::write(void const*, unsigned int)>
	}
     75e:	b003      	add	sp, #12
     760:	f85d fb04 	ldr.w	pc, [sp], #4
     764:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->write(buf, count) : 0;
     766:	2800      	cmp	r0, #0
     768:	d0f9      	beq.n	75e <File::write(unsigned char)+0x26>
     76a:	2201      	movs	r2, #1
     76c:	f10d 0107 	add.w	r1, sp, #7
     770:	f003 fac8 	bl	3d04 <ExFatFile::write(void const*, unsigned int)>
     774:	b003      	add	sp, #12
     776:	f85d fb04 	ldr.w	pc, [sp], #4
		return (f) ? f->write(&b, 1) : 0;
     77a:	2201      	movs	r2, #1
     77c:	f10d 0107 	add.w	r1, sp, #7
     780:	4798      	blx	r3
	}
     782:	b003      	add	sp, #12
     784:	f85d fb04 	ldr.w	pc, [sp], #4
     788:	000005f1 	.word	0x000005f1

0000078c <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     78c:	b538      	push	{r3, r4, r5, lr}
     78e:	4604      	mov	r4, r0
     790:	4b0c      	ldr	r3, [pc, #48]	; (7c4 <SDFile::~SDFile()+0x38>)
		if (filename) {
     792:	6d80      	ldr	r0, [r0, #88]	; 0x58
	virtual ~SDFile(void) {
     794:	6023      	str	r3, [r4, #0]
		if (filename) {
     796:	b118      	cbz	r0, 7a0 <SDFile::~SDFile()+0x14>
			free(filename);
     798:	f00c fff4 	bl	d784 <free>
			filename = nullptr;
     79c:	2300      	movs	r3, #0
     79e:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
     7a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
     7a2:	f104 0518 	add.w	r5, r4, #24
     7a6:	b14b      	cbz	r3, 7bc <SDFile::~SDFile()+0x30>
     7a8:	4628      	mov	r0, r5
     7aa:	f006 fe6f 	bl	748c <FsBaseFile::close()>
class StreamFile : public stream_t, public BaseFile {
     7ae:	4b06      	ldr	r3, [pc, #24]	; (7c8 <SDFile::~SDFile()+0x3c>)
  ~FsBaseFile() {close();}
     7b0:	4628      	mov	r0, r5
     7b2:	60a3      	str	r3, [r4, #8]
     7b4:	f006 fe6a 	bl	748c <FsBaseFile::close()>
	}
     7b8:	4620      	mov	r0, r4
     7ba:	bd38      	pop	{r3, r4, r5, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     7bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
     7be:	2b00      	cmp	r3, #0
     7c0:	d1f2      	bne.n	7a8 <SDFile::~SDFile()+0x1c>
     7c2:	e7f4      	b.n	7ae <SDFile::~SDFile()+0x22>
     7c4:	20000fd8 	.word	0x20000fd8
     7c8:	20000e2c 	.word	0x20000e2c

000007cc <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     7cc:	b538      	push	{r3, r4, r5, lr}
     7ce:	4604      	mov	r4, r0
     7d0:	4b0e      	ldr	r3, [pc, #56]	; (80c <SDFile::~SDFile()+0x40>)
		if (filename) {
     7d2:	6d80      	ldr	r0, [r0, #88]	; 0x58
	virtual ~SDFile(void) {
     7d4:	6023      	str	r3, [r4, #0]
		if (filename) {
     7d6:	b118      	cbz	r0, 7e0 <SDFile::~SDFile()+0x14>
			free(filename);
     7d8:	f00c ffd4 	bl	d784 <free>
			filename = nullptr;
     7dc:	2300      	movs	r3, #0
     7de:	65a3      	str	r3, [r4, #88]	; 0x58
     7e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
     7e2:	f104 0518 	add.w	r5, r4, #24
     7e6:	b16b      	cbz	r3, 804 <SDFile::~SDFile()+0x38>
     7e8:	4628      	mov	r0, r5
     7ea:	f006 fe4f 	bl	748c <FsBaseFile::close()>
     7ee:	4b08      	ldr	r3, [pc, #32]	; (810 <SDFile::~SDFile()+0x44>)
  ~FsBaseFile() {close();}
     7f0:	4628      	mov	r0, r5
     7f2:	60a3      	str	r3, [r4, #8]
     7f4:	f006 fe4a 	bl	748c <FsBaseFile::close()>
	}
     7f8:	4620      	mov	r0, r4
     7fa:	215c      	movs	r1, #92	; 0x5c
     7fc:	f00b f834 	bl	b868 <operator delete(void*, unsigned int)>
     800:	4620      	mov	r0, r4
     802:	bd38      	pop	{r3, r4, r5, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     804:	6d63      	ldr	r3, [r4, #84]	; 0x54
     806:	2b00      	cmp	r3, #0
     808:	d1ee      	bne.n	7e8 <SDFile::~SDFile()+0x1c>
     80a:	e7f0      	b.n	7ee <SDFile::~SDFile()+0x22>
     80c:	20000fd8 	.word	0x20000fd8
     810:	20000e2c 	.word	0x20000e2c

00000814 <SDFile::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     814:	b430      	push	{r4, r5}
     816:	9c02      	ldr	r4, [sp, #8]
     818:	4611      	mov	r1, r2
     81a:	469c      	mov	ip, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     81c:	b134      	cbz	r4, 82c <SDFile::seek(unsigned long long, int)+0x18>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     81e:	2c01      	cmp	r4, #1
     820:	d01c      	beq.n	85c <SDFile::seek(unsigned long long, int)+0x48>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     822:	2c02      	cmp	r4, #2
     824:	d00e      	beq.n	844 <SDFile::seek(unsigned long long, int)+0x30>
	}
     826:	2000      	movs	r0, #0
     828:	bc30      	pop	{r4, r5}
     82a:	4770      	bx	lr
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     82c:	6d05      	ldr	r5, [r0, #80]	; 0x50
     82e:	b1f5      	cbz	r5, 86e <SDFile::seek(unsigned long long, int)+0x5a>
     830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     834:	4293      	cmp	r3, r2
     836:	eb74 040c 	sbcs.w	r4, r4, ip
     83a:	d3f4      	bcc.n	826 <SDFile::seek(unsigned long long, int)+0x12>
     83c:	4628      	mov	r0, r5
     83e:	bc30      	pop	{r4, r5}
     840:	f004 bfb0 	b.w	57a4 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->fileSize() :
     844:	6d02      	ldr	r2, [r0, #80]	; 0x50
     846:	b30a      	cbz	r2, 88c <SDFile::seek(unsigned long long, int)+0x78>
     848:	69d3      	ldr	r3, [r2, #28]
    return seekSet(fileSize() + offset);
     84a:	1859      	adds	r1, r3, r1
     84c:	f14c 0300 	adc.w	r3, ip, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     850:	2b00      	cmp	r3, #0
     852:	d1e8      	bne.n	826 <SDFile::seek(unsigned long long, int)+0x12>
     854:	4610      	mov	r0, r2
     856:	bc30      	pop	{r4, r5}
     858:	f004 bfa4 	b.w	57a4 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->curPosition() :
     85c:	6d02      	ldr	r2, [r0, #80]	; 0x50
     85e:	b162      	cbz	r2, 87a <SDFile::seek(unsigned long long, int)+0x66>
     860:	6953      	ldr	r3, [r2, #20]
    return seekSet(curPosition() + offset);
     862:	1859      	adds	r1, r3, r1
     864:	f14c 0300 	adc.w	r3, ip, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     868:	2b00      	cmp	r3, #0
     86a:	d1dc      	bne.n	826 <SDFile::seek(unsigned long long, int)+0x12>
     86c:	e7f2      	b.n	854 <SDFile::seek(unsigned long long, int)+0x40>
     86e:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->seekSet(pos) : false;
     870:	2800      	cmp	r0, #0
     872:	d0d8      	beq.n	826 <SDFile::seek(unsigned long long, int)+0x12>
     874:	bc30      	pop	{r4, r5}
     876:	f002 bb59 	b.w	2f2c <ExFatFile::seekSet(unsigned long long)>
     87a:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->curPosition() : 0;
     87c:	2800      	cmp	r0, #0
     87e:	d0d2      	beq.n	826 <SDFile::seek(unsigned long long, int)+0x12>
    return seekSet(curPosition() + offset);
     880:	e9d0 2300 	ldrd	r2, r3, [r0]
     884:	188a      	adds	r2, r1, r2
           m_xFile ? m_xFile->seekSet(pos) : false;
     886:	eb4c 0303 	adc.w	r3, ip, r3
     88a:	e7f3      	b.n	874 <SDFile::seek(unsigned long long, int)+0x60>
     88c:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->fileSize() : 0;
     88e:	2800      	cmp	r0, #0
     890:	d0c9      	beq.n	826 <SDFile::seek(unsigned long long, int)+0x12>
    return seekSet(fileSize() + offset);
     892:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
     896:	bc30      	pop	{r4, r5}
     898:	188a      	adds	r2, r1, r2
           m_xFile ? m_xFile->seekSet(pos) : false;
     89a:	eb4c 0303 	adc.w	r3, ip, r3
     89e:	f002 bb45 	b.w	2f2c <ExFatFile::seekSet(unsigned long long)>
     8a2:	bf00      	nop

000008a4 <File::~File()>:
	virtual ~File() {
     8a4:	b570      	push	{r4, r5, r6, lr}
     8a6:	4b24      	ldr	r3, [pc, #144]	; (938 <File::~File()+0x94>)
     8a8:	4604      	mov	r4, r0
		if (f) dec_refcount();
     8aa:	6905      	ldr	r5, [r0, #16]
	virtual ~File() {
     8ac:	6003      	str	r3, [r0, #0]
		if (f) dec_refcount();
     8ae:	2d00      	cmp	r5, #0
     8b0:	d032      	beq.n	918 <File::~File()+0x74>
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
		if (--(f->refcount) == 0) {
     8b2:	686e      	ldr	r6, [r5, #4]
     8b4:	3e01      	subs	r6, #1
     8b6:	606e      	str	r6, [r5, #4]
     8b8:	bb76      	cbnz	r6, 918 <File::~File()+0x74>
			f->close();
     8ba:	682b      	ldr	r3, [r5, #0]
     8bc:	4a1f      	ldr	r2, [pc, #124]	; (93c <File::~File()+0x98>)
     8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     8c0:	4293      	cmp	r3, r2
     8c2:	d12f      	bne.n	924 <File::~File()+0x80>
		if (filename) {
     8c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
     8c6:	b110      	cbz	r0, 8ce <File::~File()+0x2a>
			free(filename);
     8c8:	f00c ff5c 	bl	d784 <free>
			filename = nullptr;
     8cc:	65ae      	str	r6, [r5, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
     8ce:	6d2b      	ldr	r3, [r5, #80]	; 0x50
     8d0:	b323      	cbz	r3, 91c <File::~File()+0x78>
			sdfatfile.close();
     8d2:	f105 0018 	add.w	r0, r5, #24
     8d6:	f006 fdd9 	bl	748c <FsBaseFile::close()>
			delete f;
     8da:	6925      	ldr	r5, [r4, #16]
     8dc:	b1e5      	cbz	r5, 918 <File::~File()+0x74>
     8de:	682b      	ldr	r3, [r5, #0]
     8e0:	4a17      	ldr	r2, [pc, #92]	; (940 <File::~File()+0x9c>)
     8e2:	685b      	ldr	r3, [r3, #4]
     8e4:	4293      	cmp	r3, r2
     8e6:	d124      	bne.n	932 <File::~File()+0x8e>
	virtual ~SDFile(void) {
     8e8:	4b16      	ldr	r3, [pc, #88]	; (944 <File::~File()+0xa0>)
		if (filename) {
     8ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
     8ec:	602b      	str	r3, [r5, #0]
		if (filename) {
     8ee:	b118      	cbz	r0, 8f8 <File::~File()+0x54>
			free(filename);
     8f0:	f00c ff48 	bl	d784 <free>
			filename = nullptr;
     8f4:	2300      	movs	r3, #0
     8f6:	65ab      	str	r3, [r5, #88]	; 0x58
     8f8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
     8fa:	f105 0618 	add.w	r6, r5, #24
     8fe:	b1a3      	cbz	r3, 92a <File::~File()+0x86>
     900:	4630      	mov	r0, r6
     902:	f006 fdc3 	bl	748c <FsBaseFile::close()>
     906:	4b10      	ldr	r3, [pc, #64]	; (948 <File::~File()+0xa4>)
  ~FsBaseFile() {close();}
     908:	4630      	mov	r0, r6
     90a:	60ab      	str	r3, [r5, #8]
     90c:	f006 fdbe 	bl	748c <FsBaseFile::close()>
	}
     910:	215c      	movs	r1, #92	; 0x5c
     912:	4628      	mov	r0, r5
     914:	f00a ffa8 	bl	b868 <operator delete(void*, unsigned int)>
	}
     918:	4620      	mov	r0, r4
     91a:	bd70      	pop	{r4, r5, r6, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     91c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
     91e:	2b00      	cmp	r3, #0
     920:	d1d7      	bne.n	8d2 <File::~File()+0x2e>
     922:	e7da      	b.n	8da <File::~File()+0x36>
			f->close();
     924:	4628      	mov	r0, r5
     926:	4798      	blx	r3
     928:	e7d7      	b.n	8da <File::~File()+0x36>
     92a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
     92c:	2b00      	cmp	r3, #0
     92e:	d1e7      	bne.n	900 <File::~File()+0x5c>
     930:	e7e9      	b.n	906 <File::~File()+0x62>
			delete f;
     932:	4628      	mov	r0, r5
     934:	4798      	blx	r3
     936:	e7ef      	b.n	918 <File::~File()+0x74>
     938:	20000f88 	.word	0x20000f88
     93c:	00000089 	.word	0x00000089
     940:	000007cd 	.word	0x000007cd
     944:	20000fd8 	.word	0x20000fd8
     948:	20000e2c 	.word	0x20000e2c

0000094c <File::~File()>:
	virtual ~File() {
     94c:	b570      	push	{r4, r5, r6, lr}
     94e:	4b26      	ldr	r3, [pc, #152]	; (9e8 <File::~File()+0x9c>)
     950:	4604      	mov	r4, r0
		if (f) dec_refcount();
     952:	6905      	ldr	r5, [r0, #16]
	virtual ~File() {
     954:	6003      	str	r3, [r0, #0]
		if (f) dec_refcount();
     956:	2d00      	cmp	r5, #0
     958:	d032      	beq.n	9c0 <File::~File()+0x74>
		if (--(f->refcount) == 0) {
     95a:	686e      	ldr	r6, [r5, #4]
     95c:	3e01      	subs	r6, #1
     95e:	606e      	str	r6, [r5, #4]
     960:	bb76      	cbnz	r6, 9c0 <File::~File()+0x74>
			f->close();
     962:	682b      	ldr	r3, [r5, #0]
     964:	4a21      	ldr	r2, [pc, #132]	; (9ec <File::~File()+0xa0>)
     966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     968:	4293      	cmp	r3, r2
     96a:	d133      	bne.n	9d4 <File::~File()+0x88>
		if (filename) {
     96c:	6da8      	ldr	r0, [r5, #88]	; 0x58
     96e:	b110      	cbz	r0, 976 <File::~File()+0x2a>
			free(filename);
     970:	f00c ff08 	bl	d784 <free>
			filename = nullptr;
     974:	65ae      	str	r6, [r5, #88]	; 0x58
     976:	6d2b      	ldr	r3, [r5, #80]	; 0x50
     978:	b343      	cbz	r3, 9cc <File::~File()+0x80>
			sdfatfile.close();
     97a:	f105 0018 	add.w	r0, r5, #24
     97e:	f006 fd85 	bl	748c <FsBaseFile::close()>
			delete f;
     982:	6925      	ldr	r5, [r4, #16]
     984:	b1e5      	cbz	r5, 9c0 <File::~File()+0x74>
     986:	682b      	ldr	r3, [r5, #0]
     988:	4a19      	ldr	r2, [pc, #100]	; (9f0 <File::~File()+0xa4>)
     98a:	685b      	ldr	r3, [r3, #4]
     98c:	4293      	cmp	r3, r2
     98e:	d128      	bne.n	9e2 <File::~File()+0x96>
	virtual ~SDFile(void) {
     990:	4b18      	ldr	r3, [pc, #96]	; (9f4 <File::~File()+0xa8>)
		if (filename) {
     992:	6da8      	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
     994:	602b      	str	r3, [r5, #0]
		if (filename) {
     996:	b118      	cbz	r0, 9a0 <File::~File()+0x54>
			free(filename);
     998:	f00c fef4 	bl	d784 <free>
			filename = nullptr;
     99c:	2300      	movs	r3, #0
     99e:	65ab      	str	r3, [r5, #88]	; 0x58
     9a0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
     9a2:	f105 0618 	add.w	r6, r5, #24
     9a6:	b1c3      	cbz	r3, 9da <File::~File()+0x8e>
     9a8:	4630      	mov	r0, r6
     9aa:	f006 fd6f 	bl	748c <FsBaseFile::close()>
     9ae:	4b12      	ldr	r3, [pc, #72]	; (9f8 <File::~File()+0xac>)
  ~FsBaseFile() {close();}
     9b0:	4630      	mov	r0, r6
     9b2:	60ab      	str	r3, [r5, #8]
     9b4:	f006 fd6a 	bl	748c <FsBaseFile::close()>
	}
     9b8:	215c      	movs	r1, #92	; 0x5c
     9ba:	4628      	mov	r0, r5
     9bc:	f00a ff54 	bl	b868 <operator delete(void*, unsigned int)>
	}
     9c0:	4620      	mov	r0, r4
     9c2:	2114      	movs	r1, #20
     9c4:	f00a ff50 	bl	b868 <operator delete(void*, unsigned int)>
     9c8:	4620      	mov	r0, r4
     9ca:	bd70      	pop	{r4, r5, r6, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     9cc:	6d6b      	ldr	r3, [r5, #84]	; 0x54
     9ce:	2b00      	cmp	r3, #0
     9d0:	d1d3      	bne.n	97a <File::~File()+0x2e>
     9d2:	e7d6      	b.n	982 <File::~File()+0x36>
			f->close();
     9d4:	4628      	mov	r0, r5
     9d6:	4798      	blx	r3
     9d8:	e7d3      	b.n	982 <File::~File()+0x36>
     9da:	6d6b      	ldr	r3, [r5, #84]	; 0x54
     9dc:	2b00      	cmp	r3, #0
     9de:	d1e3      	bne.n	9a8 <File::~File()+0x5c>
     9e0:	e7e5      	b.n	9ae <File::~File()+0x62>
			delete f;
     9e2:	4628      	mov	r0, r5
     9e4:	4798      	blx	r3
     9e6:	e7eb      	b.n	9c0 <File::~File()+0x74>
     9e8:	20000f88 	.word	0x20000f88
     9ec:	00000089 	.word	0x00000089
     9f0:	000007cd 	.word	0x000007cd
     9f4:	20000fd8 	.word	0x20000fd8
     9f8:	20000e2c 	.word	0x20000e2c

000009fc <hw::async::async_master::update()>:
                    { return async_state::Idle; }
                else
                    { return wqueue.oldest()->status(); }
            }

            I2CError update()
     9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a00:	4606      	mov	r6, r0
     a02:	b087      	sub	sp, #28
            {
                ASYNC_GPRINTF("Master:%u begin update ... ", master_index);

                if (wqueue.is_empty())
     a04:	f100 0904 	add.w	r9, r0, #4
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
     a08:	f00c f8fc 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     a0c:	4b65      	ldr	r3, [pc, #404]	; (ba4 <hw::async::async_master::update()+0x1a8>)
     a0e:	781b      	ldrb	r3, [r3, #0]
     a10:	b11b      	cbz	r3, a1a <hw::async::async_master::update()+0x1e>
     a12:	4b65      	ldr	r3, [pc, #404]	; (ba8 <hw::async::async_master::update()+0x1ac>)
     a14:	781b      	ldrb	r3, [r3, #0]
     a16:	07df      	lsls	r7, r3, #31
     a18:	d41e      	bmi.n	a58 <hw::async::async_master::update()+0x5c>
     a1a:	68f3      	ldr	r3, [r6, #12]
     a1c:	454b      	cmp	r3, r9
     a1e:	f000 81d4 	beq.w	dca <hw::async::async_master::update()+0x3ce>
                    { return I2CError::ok; }
                
                if (!master.finished())
     a22:	6830      	ldr	r0, [r6, #0]
     a24:	6803      	ldr	r3, [r0, #0]
     a26:	689b      	ldr	r3, [r3, #8]
     a28:	4798      	blx	r3
     a2a:	2800      	cmp	r0, #0
     a2c:	f000 825d 	beq.w	eea <hw::async::async_master::update()+0x4ee>
                {
                    ASYNC_GPRINT_RAW("Busy bus");
                    return I2CError::master_not_ready;
                }

                ASYNC_IFG(
     a30:	4b5e      	ldr	r3, [pc, #376]	; (bac <hw::async::async_master::update()+0x1b0>)
     a32:	781b      	ldrb	r3, [r3, #0]
     a34:	2b00      	cmp	r3, #0
     a36:	f040 813a 	bne.w	cae <hw::async::async_master::update()+0x2b2>
                { return next == this; }
     a3a:	68f4      	ldr	r4, [r6, #12]
                { return is_empty() ? nullptr : next; }
     a3c:	454c      	cmp	r4, r9
     a3e:	f000 8273 	beq.w	f28 <hw::async::async_master::update()+0x52c>
                    Serial.printf("queue not empty ... ");
                    debug_queue();
                );

                write_queue* ptr = wqueue.oldest();
                switch (ptr->status())
     a42:	68e3      	ldr	r3, [r4, #12]
     a44:	2b04      	cmp	r3, #4
     a46:	f200 81ab 	bhi.w	da0 <hw::async::async_master::update()+0x3a4>
     a4a:	e8df f013 	tbh	[pc, r3, lsl #1]
     a4e:	008f      	.short	0x008f
     a50:	007400bd 	.word	0x007400bd
     a54:	00160032 	.word	0x00160032
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     a58:	4b55      	ldr	r3, [pc, #340]	; (bb0 <hw::async::async_master::update()+0x1b4>)
     a5a:	4a56      	ldr	r2, [pc, #344]	; (bb4 <hw::async::async_master::update()+0x1b8>)
     a5c:	681b      	ldr	r3, [r3, #0]
     a5e:	6812      	ldr	r2, [r2, #0]
     a60:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     a62:	2b0e      	cmp	r3, #14
     a64:	d9d9      	bls.n	a1a <hw::async::async_master::update()+0x1e>
                ASYNC_GPRINTF("Master:%u begin update ... ", master_index);
     a66:	4b51      	ldr	r3, [pc, #324]	; (bac <hw::async::async_master::update()+0x1b0>)
     a68:	781b      	ldrb	r3, [r3, #0]
     a6a:	2b00      	cmp	r3, #0
     a6c:	d0d5      	beq.n	a1a <hw::async::async_master::update()+0x1e>
     a6e:	7d32      	ldrb	r2, [r6, #20]
     a70:	4951      	ldr	r1, [pc, #324]	; (bb8 <hw::async::async_master::update()+0x1bc>)
     a72:	4852      	ldr	r0, [pc, #328]	; (bbc <hw::async::async_master::update()+0x1c0>)
     a74:	f00a fb30 	bl	b0d8 <Print::printf(char const*, ...)>
     a78:	e7cf      	b.n	a1a <hw::async::async_master::update()+0x1e>
		yield();
     a7a:	f00c f8c3 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     a7e:	4b49      	ldr	r3, [pc, #292]	; (ba4 <hw::async::async_master::update()+0x1a8>)
     a80:	781b      	ldrb	r3, [r3, #0]
     a82:	b17b      	cbz	r3, aa4 <hw::async::async_master::update()+0xa8>
     a84:	4b48      	ldr	r3, [pc, #288]	; (ba8 <hw::async::async_master::update()+0x1ac>)
     a86:	781b      	ldrb	r3, [r3, #0]
     a88:	07da      	lsls	r2, r3, #31
     a8a:	d50b      	bpl.n	aa4 <hw::async::async_master::update()+0xa8>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     a8c:	4b48      	ldr	r3, [pc, #288]	; (bb0 <hw::async::async_master::update()+0x1b4>)
     a8e:	4a49      	ldr	r2, [pc, #292]	; (bb4 <hw::async::async_master::update()+0x1b8>)
     a90:	681b      	ldr	r3, [r3, #0]
     a92:	6812      	ldr	r2, [r2, #0]
     a94:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     a96:	2b0e      	cmp	r3, #14
     a98:	d904      	bls.n	aa4 <hw::async::async_master::update()+0xa8>
                    ASYNC_GPRINT_RAW("state=Recoverable", master_index);
                    return call_coro(ptr);

                    /** Remove coroutine and recall for update */
                case async_state::Failed:
                    ASYNC_GPRINT_RAW("state=Failed", master_index);
     a9a:	4b44      	ldr	r3, [pc, #272]	; (bac <hw::async::async_master::update()+0x1b0>)
     a9c:	781b      	ldrb	r3, [r3, #0]
     a9e:	2b00      	cmp	r3, #0
     aa0:	f040 8210 	bne.w	ec4 <hw::async::async_master::update()+0x4c8>
                prev->next = next;
     aa4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
     aa8:	6093      	str	r3, [r2, #8]
                next->prev = prev;
     aaa:	605a      	str	r2, [r3, #4]
                next = prev = this;
     aac:	e9c4 4401 	strd	r4, r4, [r4, #4]
     ab0:	e7aa      	b.n	a08 <hw::async::async_master::update()+0xc>
		yield();
     ab2:	f00c f8a7 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     ab6:	4b3b      	ldr	r3, [pc, #236]	; (ba4 <hw::async::async_master::update()+0x1a8>)
     ab8:	781b      	ldrb	r3, [r3, #0]
     aba:	b15b      	cbz	r3, ad4 <hw::async::async_master::update()+0xd8>
     abc:	4b3a      	ldr	r3, [pc, #232]	; (ba8 <hw::async::async_master::update()+0x1ac>)
     abe:	781b      	ldrb	r3, [r3, #0]
     ac0:	07dd      	lsls	r5, r3, #31
     ac2:	d507      	bpl.n	ad4 <hw::async::async_master::update()+0xd8>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     ac4:	4b3a      	ldr	r3, [pc, #232]	; (bb0 <hw::async::async_master::update()+0x1b4>)
     ac6:	4a3b      	ldr	r2, [pc, #236]	; (bb4 <hw::async::async_master::update()+0x1b8>)
     ac8:	681b      	ldr	r3, [r3, #0]
     aca:	6812      	ldr	r2, [r2, #0]
     acc:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     ace:	2b0e      	cmp	r3, #14
     ad0:	f200 81c2 	bhi.w	e58 <hw::async::async_master::update()+0x45c>

            I2CError call_coro(write_queue* ptr)
            {
                // Serial.printf("Master:%u calling coro: ptr=%p writer=%p\n", master_index, ptr, ptr->writer);

                if (!master.finished())
     ad4:	6830      	ldr	r0, [r6, #0]
     ad6:	6803      	ldr	r3, [r0, #0]
     ad8:	689b      	ldr	r3, [r3, #8]
     ada:	4798      	blx	r3
     adc:	2800      	cmp	r0, #0
     ade:	f000 80e1 	beq.w	ca4 <hw::async::async_master::update()+0x2a8>
                    { return I2CError::master_not_ready; }

                I2CError err = (*(ptr->writer))(master);
     ae2:	6825      	ldr	r5, [r4, #0]
     ae4:	6836      	ldr	r6, [r6, #0]
                master.write_async(address, buffer, num_bytes, send_stop);
     ae6:	7829      	ldrb	r1, [r5, #0]
     ae8:	6830      	ldr	r0, [r6, #0]
     aea:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
     aee:	7b2d      	ldrb	r5, [r5, #12]
     af0:	9500      	str	r5, [sp, #0]
     af2:	6905      	ldr	r5, [r0, #16]
     af4:	4630      	mov	r0, r6
     af6:	47a8      	blx	r5
    explicit I2CDriver();

    // Indicates whether the driver is working or what happened
    // in the last read/write
    inline I2CError error() {
        return _error;
     af8:	6875      	ldr	r5, [r6, #4]
		yield();
     afa:	f00c f883 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     afe:	4b29      	ldr	r3, [pc, #164]	; (ba4 <hw::async::async_master::update()+0x1a8>)
     b00:	781b      	ldrb	r3, [r3, #0]
     b02:	b17b      	cbz	r3, b24 <hw::async::async_master::update()+0x128>
     b04:	4b28      	ldr	r3, [pc, #160]	; (ba8 <hw::async::async_master::update()+0x1ac>)
     b06:	781b      	ldrb	r3, [r3, #0]
     b08:	07d8      	lsls	r0, r3, #31
     b0a:	d50b      	bpl.n	b24 <hw::async::async_master::update()+0x128>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     b0c:	4b28      	ldr	r3, [pc, #160]	; (bb0 <hw::async::async_master::update()+0x1b4>)
     b0e:	4a29      	ldr	r2, [pc, #164]	; (bb4 <hw::async::async_master::update()+0x1b8>)
     b10:	681b      	ldr	r3, [r3, #0]
     b12:	6812      	ldr	r2, [r2, #0]
     b14:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     b16:	2b0e      	cmp	r3, #14
     b18:	d904      	bls.n	b24 <hw::async::async_master::update()+0x128>
                ASYNC_GPRINT_RAW("\n\tupdate_coro: err=%u ok_state=%u", err, ok_state);
     b1a:	4b24      	ldr	r3, [pc, #144]	; (bac <hw::async::async_master::update()+0x1b0>)
     b1c:	781b      	ldrb	r3, [r3, #0]
     b1e:	2b00      	cmp	r3, #0
     b20:	f040 81c6 	bne.w	eb0 <hw::async::async_master::update()+0x4b4>
                if (I2CError::ok == err)
     b24:	2d00      	cmp	r5, #0
     b26:	f040 80ad 	bne.w	c84 <hw::async::async_master::update()+0x288>
                    { ptr->state = ok_state; }
     b2a:	2301      	movs	r3, #1
            }
     b2c:	4628      	mov	r0, r5
                    { ptr->state = ok_state; }
     b2e:	60e3      	str	r3, [r4, #12]
            }
     b30:	b007      	add	sp, #28
     b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
     b36:	f00c f865 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     b3a:	4b1a      	ldr	r3, [pc, #104]	; (ba4 <hw::async::async_master::update()+0x1a8>)
     b3c:	781b      	ldrb	r3, [r3, #0]
     b3e:	2b00      	cmp	r3, #0
     b40:	d0b0      	beq.n	aa4 <hw::async::async_master::update()+0xa8>
     b42:	4b19      	ldr	r3, [pc, #100]	; (ba8 <hw::async::async_master::update()+0x1ac>)
     b44:	781b      	ldrb	r3, [r3, #0]
     b46:	07df      	lsls	r7, r3, #31
     b48:	d5ac      	bpl.n	aa4 <hw::async::async_master::update()+0xa8>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     b4a:	4b19      	ldr	r3, [pc, #100]	; (bb0 <hw::async::async_master::update()+0x1b4>)
     b4c:	4a19      	ldr	r2, [pc, #100]	; (bb4 <hw::async::async_master::update()+0x1b8>)
     b4e:	681b      	ldr	r3, [r3, #0]
     b50:	6812      	ldr	r2, [r2, #0]
     b52:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     b54:	2b0e      	cmp	r3, #14
     b56:	d9a5      	bls.n	aa4 <hw::async::async_master::update()+0xa8>
                    ASYNC_GPRINT_RAW("state=Finished", master_index);
     b58:	4b14      	ldr	r3, [pc, #80]	; (bac <hw::async::async_master::update()+0x1b0>)
     b5a:	781b      	ldrb	r3, [r3, #0]
     b5c:	2b00      	cmp	r3, #0
     b5e:	d0a1      	beq.n	aa4 <hw::async::async_master::update()+0xa8>
     b60:	7d32      	ldrb	r2, [r6, #20]
     b62:	4917      	ldr	r1, [pc, #92]	; (bc0 <hw::async::async_master::update()+0x1c4>)
     b64:	4815      	ldr	r0, [pc, #84]	; (bbc <hw::async::async_master::update()+0x1c0>)
     b66:	f00a fab7 	bl	b0d8 <Print::printf(char const*, ...)>
                prev->next = next;
     b6a:	e79b      	b.n	aa4 <hw::async::async_master::update()+0xa8>
		yield();
     b6c:	f00c f84a 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     b70:	4b0c      	ldr	r3, [pc, #48]	; (ba4 <hw::async::async_master::update()+0x1a8>)
     b72:	781b      	ldrb	r3, [r3, #0]
     b74:	2b00      	cmp	r3, #0
     b76:	d0ad      	beq.n	ad4 <hw::async::async_master::update()+0xd8>
     b78:	4b0b      	ldr	r3, [pc, #44]	; (ba8 <hw::async::async_master::update()+0x1ac>)
     b7a:	781b      	ldrb	r3, [r3, #0]
     b7c:	07dd      	lsls	r5, r3, #31
     b7e:	d5a9      	bpl.n	ad4 <hw::async::async_master::update()+0xd8>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     b80:	4b0b      	ldr	r3, [pc, #44]	; (bb0 <hw::async::async_master::update()+0x1b4>)
     b82:	4a0c      	ldr	r2, [pc, #48]	; (bb4 <hw::async::async_master::update()+0x1b8>)
     b84:	681b      	ldr	r3, [r3, #0]
     b86:	6812      	ldr	r2, [r2, #0]
     b88:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     b8a:	2b0e      	cmp	r3, #14
     b8c:	d9a2      	bls.n	ad4 <hw::async::async_master::update()+0xd8>
                    ASYNC_GPRINT_RAW("state=Idle", master_index);
     b8e:	4b07      	ldr	r3, [pc, #28]	; (bac <hw::async::async_master::update()+0x1b0>)
     b90:	781b      	ldrb	r3, [r3, #0]
     b92:	2b00      	cmp	r3, #0
     b94:	d09e      	beq.n	ad4 <hw::async::async_master::update()+0xd8>
     b96:	7d32      	ldrb	r2, [r6, #20]
     b98:	490a      	ldr	r1, [pc, #40]	; (bc4 <hw::async::async_master::update()+0x1c8>)
     b9a:	4808      	ldr	r0, [pc, #32]	; (bbc <hw::async::async_master::update()+0x1c0>)
     b9c:	f00a fa9c 	bl	b0d8 <Print::printf(char const*, ...)>
     ba0:	e798      	b.n	ad4 <hw::async::async_master::update()+0xd8>
     ba2:	bf00      	nop
     ba4:	2000390c 	.word	0x2000390c
     ba8:	2000390b 	.word	0x2000390b
     bac:	200022a8 	.word	0x200022a8
     bb0:	200038d8 	.word	0x200038d8
     bb4:	200038e8 	.word	0x200038e8
     bb8:	20000c08 	.word	0x20000c08
     bbc:	20001a70 	.word	0x20001a70
     bc0:	20000d68 	.word	0x20000d68
     bc4:	20000cf8 	.word	0x20000cf8
		yield();
     bc8:	f00c f81c 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     bcc:	4b91      	ldr	r3, [pc, #580]	; (e14 <hw::async::async_master::update()+0x418>)
     bce:	781b      	ldrb	r3, [r3, #0]
     bd0:	b17b      	cbz	r3, bf2 <hw::async::async_master::update()+0x1f6>
     bd2:	4b91      	ldr	r3, [pc, #580]	; (e18 <hw::async::async_master::update()+0x41c>)
     bd4:	781b      	ldrb	r3, [r3, #0]
     bd6:	07d8      	lsls	r0, r3, #31
     bd8:	d50b      	bpl.n	bf2 <hw::async::async_master::update()+0x1f6>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     bda:	4b90      	ldr	r3, [pc, #576]	; (e1c <hw::async::async_master::update()+0x420>)
     bdc:	4a90      	ldr	r2, [pc, #576]	; (e20 <hw::async::async_master::update()+0x424>)
     bde:	681b      	ldr	r3, [r3, #0]
     be0:	6812      	ldr	r2, [r2, #0]
     be2:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     be4:	2b0e      	cmp	r3, #14
     be6:	d904      	bls.n	bf2 <hw::async::async_master::update()+0x1f6>
                    ASYNC_GPRINT_RAW("state=Waiting", master_index);
     be8:	4b8e      	ldr	r3, [pc, #568]	; (e24 <hw::async::async_master::update()+0x428>)
     bea:	781b      	ldrb	r3, [r3, #0]
     bec:	2b00      	cmp	r3, #0
     bee:	f040 816f 	bne.w	ed0 <hw::async::async_master::update()+0x4d4>
                    if (!master.finished())
     bf2:	6830      	ldr	r0, [r6, #0]
     bf4:	6803      	ldr	r3, [r0, #0]
     bf6:	689b      	ldr	r3, [r3, #8]
     bf8:	4798      	blx	r3
     bfa:	2800      	cmp	r0, #0
     bfc:	d052      	beq.n	ca4 <hw::async::async_master::update()+0x2a8>
                        if (!master.has_error() && ptr->writer->successfull(master))
     bfe:	6830      	ldr	r0, [r6, #0]
    }

    // True if the last operation failed. i.e. if last_error returns anything other than ok.
    inline bool has_error() {
        return _error > I2CError::ok;
     c00:	6843      	ldr	r3, [r0, #4]
     c02:	2b00      	cmp	r3, #0
     c04:	f340 8133 	ble.w	e6e <hw::async::async_master::update()+0x472>
		yield();
     c08:	f00b fffc 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     c0c:	4b81      	ldr	r3, [pc, #516]	; (e14 <hw::async::async_master::update()+0x418>)
     c0e:	781b      	ldrb	r3, [r3, #0]
     c10:	b1e3      	cbz	r3, c4c <hw::async::async_master::update()+0x250>
     c12:	4b81      	ldr	r3, [pc, #516]	; (e18 <hw::async::async_master::update()+0x41c>)
     c14:	781b      	ldrb	r3, [r3, #0]
     c16:	07d9      	lsls	r1, r3, #31
     c18:	d518      	bpl.n	c4c <hw::async::async_master::update()+0x250>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     c1a:	4b80      	ldr	r3, [pc, #512]	; (e1c <hw::async::async_master::update()+0x420>)
     c1c:	4a80      	ldr	r2, [pc, #512]	; (e20 <hw::async::async_master::update()+0x424>)
     c1e:	681b      	ldr	r3, [r3, #0]
     c20:	6812      	ldr	r2, [r2, #0]
     c22:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     c24:	2b0e      	cmp	r3, #14
     c26:	d911      	bls.n	c4c <hw::async::async_master::update()+0x250>
                                ASYNC_GPRINT_RAW("\n\tERROR: errno=%u sent_bytes=%lu expected=%u",
     c28:	4b7e      	ldr	r3, [pc, #504]	; (e24 <hw::async::async_master::update()+0x428>)
     c2a:	781b      	ldrb	r3, [r3, #0]
     c2c:	b173      	cbz	r3, c4c <hw::async::async_master::update()+0x250>
     c2e:	6830      	ldr	r0, [r6, #0]
        return _error;
     c30:	6842      	ldr	r2, [r0, #4]
     c32:	6803      	ldr	r3, [r0, #0]
     c34:	9205      	str	r2, [sp, #20]
     c36:	68db      	ldr	r3, [r3, #12]
     c38:	4798      	blx	r3
     c3a:	6821      	ldr	r1, [r4, #0]
     c3c:	4603      	mov	r3, r0
     c3e:	9a05      	ldr	r2, [sp, #20]
     c40:	6889      	ldr	r1, [r1, #8]
     c42:	4879      	ldr	r0, [pc, #484]	; (e28 <hw::async::async_master::update()+0x42c>)
     c44:	9100      	str	r1, [sp, #0]
     c46:	4979      	ldr	r1, [pc, #484]	; (e2c <hw::async::async_master::update()+0x430>)
     c48:	f00a fa46 	bl	b0d8 <Print::printf(char const*, ...)>
                                return update_coro_state(ptr, master.error(), async_state::Recoverable);
     c4c:	6833      	ldr	r3, [r6, #0]
     c4e:	685d      	ldr	r5, [r3, #4]
		yield();
     c50:	f00b ffd8 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     c54:	4b6f      	ldr	r3, [pc, #444]	; (e14 <hw::async::async_master::update()+0x418>)
     c56:	781b      	ldrb	r3, [r3, #0]
     c58:	b19b      	cbz	r3, c82 <hw::async::async_master::update()+0x286>
     c5a:	4b6f      	ldr	r3, [pc, #444]	; (e18 <hw::async::async_master::update()+0x41c>)
     c5c:	781b      	ldrb	r3, [r3, #0]
     c5e:	07db      	lsls	r3, r3, #31
     c60:	d50f      	bpl.n	c82 <hw::async::async_master::update()+0x286>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     c62:	4b6e      	ldr	r3, [pc, #440]	; (e1c <hw::async::async_master::update()+0x420>)
     c64:	4a6e      	ldr	r2, [pc, #440]	; (e20 <hw::async::async_master::update()+0x424>)
     c66:	681b      	ldr	r3, [r3, #0]
     c68:	6812      	ldr	r2, [r2, #0]
     c6a:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     c6c:	2b0e      	cmp	r3, #14
     c6e:	d908      	bls.n	c82 <hw::async::async_master::update()+0x286>
                ASYNC_GPRINT_RAW("\n\tupdate_coro: err=%u ok_state=%u", err, ok_state);
     c70:	4b6c      	ldr	r3, [pc, #432]	; (e24 <hw::async::async_master::update()+0x428>)
     c72:	781b      	ldrb	r3, [r3, #0]
     c74:	b12b      	cbz	r3, c82 <hw::async::async_master::update()+0x286>
     c76:	2303      	movs	r3, #3
     c78:	462a      	mov	r2, r5
     c7a:	496d      	ldr	r1, [pc, #436]	; (e30 <hw::async::async_master::update()+0x434>)
     c7c:	486a      	ldr	r0, [pc, #424]	; (e28 <hw::async::async_master::update()+0x42c>)
     c7e:	f00a fa2b 	bl	b0d8 <Print::printf(char const*, ...)>
                if (I2CError::ok == err)
     c82:	b14d      	cbz	r5, c98 <hw::async::async_master::update()+0x29c>
            switch (err)
     c84:	1e6a      	subs	r2, r5, #1
     c86:	2a0a      	cmp	r2, #10
     c88:	f200 80bd 	bhi.w	e06 <hw::async::async_master::update()+0x40a>
     c8c:	f240 63e1 	movw	r3, #1761	; 0x6e1
     c90:	40d3      	lsrs	r3, r2
     c92:	07d9      	lsls	r1, r3, #31
     c94:	f140 80b7 	bpl.w	e06 <hw::async::async_master::update()+0x40a>
                    { ptr->state = async_state::Recoverable; }
     c98:	2303      	movs	r3, #3
            }
     c9a:	4628      	mov	r0, r5
                    { ptr->state = async_state::Recoverable; }
     c9c:	60e3      	str	r3, [r4, #12]
            }
     c9e:	b007      	add	sp, #28
     ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    return I2CError::master_not_ready;
     ca4:	2506      	movs	r5, #6
            }
     ca6:	4628      	mov	r0, r5
     ca8:	b007      	add	sp, #28
     caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                ASYNC_IFG(
     cae:	4961      	ldr	r1, [pc, #388]	; (e34 <hw::async::async_master::update()+0x438>)
     cb0:	485d      	ldr	r0, [pc, #372]	; (e28 <hw::async::async_master::update()+0x42c>)
     cb2:	f00a fa11 	bl	b0d8 <Print::printf(char const*, ...)>
                Serial.printf("\nMaster=%u\nAnchor", master_index);
     cb6:	7d32      	ldrb	r2, [r6, #20]
     cb8:	495f      	ldr	r1, [pc, #380]	; (e38 <hw::async::async_master::update()+0x43c>)
     cba:	485b      	ldr	r0, [pc, #364]	; (e28 <hw::async::async_master::update()+0x42c>)
     cbc:	f00a fa0c 	bl	b0d8 <Print::printf(char const*, ...)>
                Serial.printf("\n\tnode=%-10p writer=%-10p next=%-10p prev=%-10p state=%u",
     cc0:	7c33      	ldrb	r3, [r6, #16]
     cc2:	464a      	mov	r2, r9
     cc4:	495d      	ldr	r1, [pc, #372]	; (e3c <hw::async::async_master::update()+0x440>)
     cc6:	9302      	str	r3, [sp, #8]
     cc8:	68b3      	ldr	r3, [r6, #8]
     cca:	4857      	ldr	r0, [pc, #348]	; (e28 <hw::async::async_master::update()+0x42c>)
     ccc:	9301      	str	r3, [sp, #4]
     cce:	68f3      	ldr	r3, [r6, #12]
     cd0:	9300      	str	r3, [sp, #0]
     cd2:	6873      	ldr	r3, [r6, #4]
     cd4:	f00a fa00 	bl	b0d8 <Print::printf(char const*, ...)>
                if (writer)
     cd8:	6874      	ldr	r4, [r6, #4]
     cda:	b164      	cbz	r4, cf6 <hw::async::async_master::update()+0x2fa>
                Serial.printf("\taddress=%u num_bytes=%lu send_stop=%u datas_ptr=%p",
     cdc:	7822      	ldrb	r2, [r4, #0]
     cde:	4852      	ldr	r0, [pc, #328]	; (e28 <hw::async::async_master::update()+0x42c>)
     ce0:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
     ce4:	9101      	str	r1, [sp, #4]
     ce6:	7b21      	ldrb	r1, [r4, #12]
     ce8:	9100      	str	r1, [sp, #0]
     cea:	4955      	ldr	r1, [pc, #340]	; (e40 <hw::async::async_master::update()+0x444>)
     cec:	f00a f9f4 	bl	b0d8 <Print::printf(char const*, ...)>
                if (num_bytes != 0)
     cf0:	68a3      	ldr	r3, [r4, #8]
     cf2:	2b00      	cmp	r3, #0
     cf4:	d16e      	bne.n	dd4 <hw::async::async_master::update()+0x3d8>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     cf6:	2105      	movs	r1, #5
     cf8:	4852      	ldr	r0, [pc, #328]	; (e44 <hw::async::async_master::update()+0x448>)
     cfa:	f00b ff05 	bl	cb08 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     cfe:	484a      	ldr	r0, [pc, #296]	; (e28 <hw::async::async_master::update()+0x42c>)
     d00:	f00a f9ce 	bl	b0a0 <Print::println()>
                for (write_queue* ptr=wqueue.next; n<10 && ptr != &wqueue; ptr=ptr->next, ++n)
     d04:	270a      	movs	r7, #10
     d06:	68f4      	ldr	r4, [r6, #12]
                Serial.printf("\n\tnode=%-10p writer=%-10p next=%-10p prev=%-10p state=%u",
     d08:	f8df a130 	ldr.w	sl, [pc, #304]	; e3c <hw::async::async_master::update()+0x440>
     d0c:	f8df 8118 	ldr.w	r8, [pc, #280]	; e28 <hw::async::async_master::update()+0x42c>
     d10:	9605      	str	r6, [sp, #20]
     d12:	e002      	b.n	d1a <hw::async::async_master::update()+0x31e>
                for (write_queue* ptr=wqueue.next; n<10 && ptr != &wqueue; ptr=ptr->next, ++n)
     d14:	3f01      	subs	r7, #1
     d16:	68a4      	ldr	r4, [r4, #8]
     d18:	d039      	beq.n	d8e <hw::async::async_master::update()+0x392>
     d1a:	454c      	cmp	r4, r9
     d1c:	d037      	beq.n	d8e <hw::async::async_master::update()+0x392>
                Serial.printf("\n\tnode=%-10p writer=%-10p next=%-10p prev=%-10p state=%u",
     d1e:	7b22      	ldrb	r2, [r4, #12]
     d20:	4651      	mov	r1, sl
     d22:	6823      	ldr	r3, [r4, #0]
     d24:	4640      	mov	r0, r8
     d26:	9202      	str	r2, [sp, #8]
     d28:	6862      	ldr	r2, [r4, #4]
     d2a:	9201      	str	r2, [sp, #4]
     d2c:	68a2      	ldr	r2, [r4, #8]
     d2e:	9200      	str	r2, [sp, #0]
     d30:	4622      	mov	r2, r4
     d32:	f00a f9d1 	bl	b0d8 <Print::printf(char const*, ...)>
                if (writer)
     d36:	6825      	ldr	r5, [r4, #0]
     d38:	2d00      	cmp	r5, #0
     d3a:	d0eb      	beq.n	d14 <hw::async::async_master::update()+0x318>
                Serial.printf("\taddress=%u num_bytes=%lu send_stop=%u datas_ptr=%p",
     d3c:	782a      	ldrb	r2, [r5, #0]
     d3e:	4640      	mov	r0, r8
     d40:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
     d44:	9101      	str	r1, [sp, #4]
     d46:	7b29      	ldrb	r1, [r5, #12]
     d48:	9100      	str	r1, [sp, #0]
     d4a:	493d      	ldr	r1, [pc, #244]	; (e40 <hw::async::async_master::update()+0x444>)
     d4c:	f00a f9c4 	bl	b0d8 <Print::printf(char const*, ...)>
                if (num_bytes != 0)
     d50:	68ab      	ldr	r3, [r5, #8]
     d52:	2b00      	cmp	r3, #0
     d54:	d0de      	beq.n	d14 <hw::async::async_master::update()+0x318>
     d56:	2104      	movs	r1, #4
     d58:	483b      	ldr	r0, [pc, #236]	; (e48 <hw::async::async_master::update()+0x44c>)
     d5a:	f00b fed5 	bl	cb08 <usb_serial_write>
                    for (size_t i=0; i<num_bytes; ++i)
     d5e:	68ab      	ldr	r3, [r5, #8]
     d60:	b173      	cbz	r3, d80 <hw::async::async_master::update()+0x384>
     d62:	f04f 0b00 	mov.w	fp, #0
                        { Serial.printf(" %x", buffer[i]); }
     d66:	4e39      	ldr	r6, [pc, #228]	; (e4c <hw::async::async_master::update()+0x450>)
     d68:	686b      	ldr	r3, [r5, #4]
     d6a:	4631      	mov	r1, r6
     d6c:	4640      	mov	r0, r8
     d6e:	f813 200b 	ldrb.w	r2, [r3, fp]
                    for (size_t i=0; i<num_bytes; ++i)
     d72:	f10b 0b01 	add.w	fp, fp, #1
                        { Serial.printf(" %x", buffer[i]); }
     d76:	f00a f9af 	bl	b0d8 <Print::printf(char const*, ...)>
                    for (size_t i=0; i<num_bytes; ++i)
     d7a:	68ab      	ldr	r3, [r5, #8]
     d7c:	459b      	cmp	fp, r3
     d7e:	d3f3      	bcc.n	d68 <hw::async::async_master::update()+0x36c>
     d80:	2102      	movs	r1, #2
     d82:	4833      	ldr	r0, [pc, #204]	; (e50 <hw::async::async_master::update()+0x454>)
     d84:	f00b fec0 	bl	cb08 <usb_serial_write>
                for (write_queue* ptr=wqueue.next; n<10 && ptr != &wqueue; ptr=ptr->next, ++n)
     d88:	3f01      	subs	r7, #1
     d8a:	68a4      	ldr	r4, [r4, #8]
     d8c:	d1c5      	bne.n	d1a <hw::async::async_master::update()+0x31e>
     d8e:	2104      	movs	r1, #4
     d90:	4830      	ldr	r0, [pc, #192]	; (e54 <hw::async::async_master::update()+0x458>)
     d92:	9e05      	ldr	r6, [sp, #20]
     d94:	f00b feb8 	bl	cb08 <usb_serial_write>
     d98:	4823      	ldr	r0, [pc, #140]	; (e28 <hw::async::async_master::update()+0x42c>)
     d9a:	f00a f981 	bl	b0a0 <Print::println()>
     d9e:	e64c      	b.n	a3a <hw::async::async_master::update()+0x3e>
		yield();
     da0:	f00b ff30 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     da4:	4b1b      	ldr	r3, [pc, #108]	; (e14 <hw::async::async_master::update()+0x418>)
     da6:	781b      	ldrb	r3, [r3, #0]
     da8:	b17b      	cbz	r3, dca <hw::async::async_master::update()+0x3ce>
     daa:	4b1b      	ldr	r3, [pc, #108]	; (e18 <hw::async::async_master::update()+0x41c>)
     dac:	781b      	ldrb	r3, [r3, #0]
     dae:	07db      	lsls	r3, r3, #31
     db0:	d50b      	bpl.n	dca <hw::async::async_master::update()+0x3ce>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     db2:	4b1a      	ldr	r3, [pc, #104]	; (e1c <hw::async::async_master::update()+0x420>)
     db4:	4a1a      	ldr	r2, [pc, #104]	; (e20 <hw::async::async_master::update()+0x424>)
     db6:	681b      	ldr	r3, [r3, #0]
     db8:	6812      	ldr	r2, [r2, #0]
     dba:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     dbc:	2b0e      	cmp	r3, #14
     dbe:	d904      	bls.n	dca <hw::async::async_master::update()+0x3ce>
                    ASYNC_GPRINT_RAW("\n\tBAD STATE");
     dc0:	4b18      	ldr	r3, [pc, #96]	; (e24 <hw::async::async_master::update()+0x428>)
     dc2:	781b      	ldrb	r3, [r3, #0]
     dc4:	2b00      	cmp	r3, #0
     dc6:	f040 80b2 	bne.w	f2e <hw::async::async_master::update()+0x532>
                    { return I2CError::ok; }
     dca:	2500      	movs	r5, #0
            }
     dcc:	4628      	mov	r0, r5
     dce:	b007      	add	sp, #28
     dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     dd4:	2104      	movs	r1, #4
     dd6:	481c      	ldr	r0, [pc, #112]	; (e48 <hw::async::async_master::update()+0x44c>)
     dd8:	f00b fe96 	bl	cb08 <usb_serial_write>
                    for (size_t i=0; i<num_bytes; ++i)
     ddc:	68a3      	ldr	r3, [r4, #8]
     dde:	b16b      	cbz	r3, dfc <hw::async::async_master::update()+0x400>
     de0:	2500      	movs	r5, #0
                        { Serial.printf(" %x", buffer[i]); }
     de2:	f8df 8068 	ldr.w	r8, [pc, #104]	; e4c <hw::async::async_master::update()+0x450>
     de6:	4f10      	ldr	r7, [pc, #64]	; (e28 <hw::async::async_master::update()+0x42c>)
     de8:	6863      	ldr	r3, [r4, #4]
     dea:	4641      	mov	r1, r8
     dec:	4638      	mov	r0, r7
     dee:	5d5a      	ldrb	r2, [r3, r5]
                    for (size_t i=0; i<num_bytes; ++i)
     df0:	3501      	adds	r5, #1
                        { Serial.printf(" %x", buffer[i]); }
     df2:	f00a f971 	bl	b0d8 <Print::printf(char const*, ...)>
                    for (size_t i=0; i<num_bytes; ++i)
     df6:	68a3      	ldr	r3, [r4, #8]
     df8:	429d      	cmp	r5, r3
     dfa:	d3f5      	bcc.n	de8 <hw::async::async_master::update()+0x3ec>
     dfc:	2102      	movs	r1, #2
     dfe:	4814      	ldr	r0, [pc, #80]	; (e50 <hw::async::async_master::update()+0x454>)
     e00:	f00b fe82 	bl	cb08 <usb_serial_write>
     e04:	e777      	b.n	cf6 <hw::async::async_master::update()+0x2fa>
                    { ptr->state = async_state::Failed; }
     e06:	2304      	movs	r3, #4
            }
     e08:	4628      	mov	r0, r5
                    { ptr->state = async_state::Failed; }
     e0a:	60e3      	str	r3, [r4, #12]
            }
     e0c:	b007      	add	sp, #28
     e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e12:	bf00      	nop
     e14:	2000390c 	.word	0x2000390c
     e18:	2000390b 	.word	0x2000390b
     e1c:	200038d8 	.word	0x200038d8
     e20:	200038e8 	.word	0x200038e8
     e24:	200022a8 	.word	0x200022a8
     e28:	20001a70 	.word	0x20001a70
     e2c:	20000d38 	.word	0x20000d38
     e30:	20000d04 	.word	0x20000d04
     e34:	20000c3c 	.word	0x20000c3c
     e38:	20000c54 	.word	0x20000c54
     e3c:	20000c68 	.word	0x20000c68
     e40:	20000ca4 	.word	0x20000ca4
     e44:	20000ce8 	.word	0x20000ce8
     e48:	20000cd8 	.word	0x20000cd8
     e4c:	20000ce4 	.word	0x20000ce4
     e50:	20000ce0 	.word	0x20000ce0
     e54:	20000cf0 	.word	0x20000cf0
                    ASYNC_GPRINT_RAW("state=Recoverable", master_index);
     e58:	4b38      	ldr	r3, [pc, #224]	; (f3c <hw::async::async_master::update()+0x540>)
     e5a:	781b      	ldrb	r3, [r3, #0]
     e5c:	2b00      	cmp	r3, #0
     e5e:	f43f ae39 	beq.w	ad4 <hw::async::async_master::update()+0xd8>
     e62:	7d32      	ldrb	r2, [r6, #20]
     e64:	4936      	ldr	r1, [pc, #216]	; (f40 <hw::async::async_master::update()+0x544>)
     e66:	4837      	ldr	r0, [pc, #220]	; (f44 <hw::async::async_master::update()+0x548>)
     e68:	f00a f936 	bl	b0d8 <Print::printf(char const*, ...)>
     e6c:	e632      	b.n	ad4 <hw::async::async_master::update()+0xd8>
     e6e:	6823      	ldr	r3, [r4, #0]
     e70:	689d      	ldr	r5, [r3, #8]
                { return num_bytes == 0 || num_bytes == master.get_bytes_transferred(); }
     e72:	2d00      	cmp	r5, #0
     e74:	d132      	bne.n	edc <hw::async::async_master::update()+0x4e0>
		yield();
     e76:	f00b fec5 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     e7a:	4b33      	ldr	r3, [pc, #204]	; (f48 <hw::async::async_master::update()+0x54c>)
     e7c:	781b      	ldrb	r3, [r3, #0]
     e7e:	b19b      	cbz	r3, ea8 <hw::async::async_master::update()+0x4ac>
     e80:	4b32      	ldr	r3, [pc, #200]	; (f4c <hw::async::async_master::update()+0x550>)
     e82:	781b      	ldrb	r3, [r3, #0]
     e84:	07da      	lsls	r2, r3, #31
     e86:	d50f      	bpl.n	ea8 <hw::async::async_master::update()+0x4ac>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     e88:	4b31      	ldr	r3, [pc, #196]	; (f50 <hw::async::async_master::update()+0x554>)
     e8a:	4a32      	ldr	r2, [pc, #200]	; (f54 <hw::async::async_master::update()+0x558>)
     e8c:	681b      	ldr	r3, [r3, #0]
     e8e:	6812      	ldr	r2, [r2, #0]
     e90:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     e92:	2b0e      	cmp	r3, #14
     e94:	d908      	bls.n	ea8 <hw::async::async_master::update()+0x4ac>
                ASYNC_GPRINT_RAW("\n\tupdate_coro: err=%u ok_state=%u", err, ok_state);
     e96:	4b29      	ldr	r3, [pc, #164]	; (f3c <hw::async::async_master::update()+0x540>)
     e98:	781b      	ldrb	r3, [r3, #0]
     e9a:	b12b      	cbz	r3, ea8 <hw::async::async_master::update()+0x4ac>
     e9c:	2302      	movs	r3, #2
     e9e:	2200      	movs	r2, #0
     ea0:	492d      	ldr	r1, [pc, #180]	; (f58 <hw::async::async_master::update()+0x55c>)
     ea2:	4828      	ldr	r0, [pc, #160]	; (f44 <hw::async::async_master::update()+0x548>)
     ea4:	f00a f918 	bl	b0d8 <Print::printf(char const*, ...)>
                    { ptr->state = ok_state; }
     ea8:	2302      	movs	r3, #2
                            { return update_coro_state(ptr, I2CError::ok, async_state::Finished); }
     eaa:	2500      	movs	r5, #0
                    { ptr->state = ok_state; }
     eac:	60e3      	str	r3, [r4, #12]
                            { return update_coro_state(ptr, I2CError::ok, async_state::Finished); }
     eae:	e6fa      	b.n	ca6 <hw::async::async_master::update()+0x2aa>
                ASYNC_GPRINT_RAW("\n\tupdate_coro: err=%u ok_state=%u", err, ok_state);
     eb0:	2301      	movs	r3, #1
     eb2:	462a      	mov	r2, r5
     eb4:	4928      	ldr	r1, [pc, #160]	; (f58 <hw::async::async_master::update()+0x55c>)
     eb6:	4823      	ldr	r0, [pc, #140]	; (f44 <hw::async::async_master::update()+0x548>)
     eb8:	f00a f90e 	bl	b0d8 <Print::printf(char const*, ...)>
                if (I2CError::ok == err)
     ebc:	2d00      	cmp	r5, #0
     ebe:	f47f aee1 	bne.w	c84 <hw::async::async_master::update()+0x288>
     ec2:	e632      	b.n	b2a <hw::async::async_master::update()+0x12e>
                    ASYNC_GPRINT_RAW("state=Failed", master_index);
     ec4:	7d32      	ldrb	r2, [r6, #20]
     ec6:	4925      	ldr	r1, [pc, #148]	; (f5c <hw::async::async_master::update()+0x560>)
     ec8:	481e      	ldr	r0, [pc, #120]	; (f44 <hw::async::async_master::update()+0x548>)
     eca:	f00a f905 	bl	b0d8 <Print::printf(char const*, ...)>
     ece:	e5e9      	b.n	aa4 <hw::async::async_master::update()+0xa8>
                    ASYNC_GPRINT_RAW("state=Waiting", master_index);
     ed0:	7d32      	ldrb	r2, [r6, #20]
     ed2:	4923      	ldr	r1, [pc, #140]	; (f60 <hw::async::async_master::update()+0x564>)
     ed4:	481b      	ldr	r0, [pc, #108]	; (f44 <hw::async::async_master::update()+0x548>)
     ed6:	f00a f8ff 	bl	b0d8 <Print::printf(char const*, ...)>
     eda:	e68a      	b.n	bf2 <hw::async::async_master::update()+0x1f6>
                { return num_bytes == 0 || num_bytes == master.get_bytes_transferred(); }
     edc:	6803      	ldr	r3, [r0, #0]
     ede:	68db      	ldr	r3, [r3, #12]
     ee0:	4798      	blx	r3
     ee2:	4285      	cmp	r5, r0
     ee4:	f47f ae90 	bne.w	c08 <hw::async::async_master::update()+0x20c>
     ee8:	e7c5      	b.n	e76 <hw::async::async_master::update()+0x47a>
		yield();
     eea:	f00b fe8b 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     eee:	4b16      	ldr	r3, [pc, #88]	; (f48 <hw::async::async_master::update()+0x54c>)
     ef0:	781b      	ldrb	r3, [r3, #0]
     ef2:	2b00      	cmp	r3, #0
     ef4:	f43f aed6 	beq.w	ca4 <hw::async::async_master::update()+0x2a8>
     ef8:	4b14      	ldr	r3, [pc, #80]	; (f4c <hw::async::async_master::update()+0x550>)
     efa:	781b      	ldrb	r3, [r3, #0]
     efc:	07de      	lsls	r6, r3, #31
     efe:	f57f aed1 	bpl.w	ca4 <hw::async::async_master::update()+0x2a8>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     f02:	4b13      	ldr	r3, [pc, #76]	; (f50 <hw::async::async_master::update()+0x554>)
     f04:	4a13      	ldr	r2, [pc, #76]	; (f54 <hw::async::async_master::update()+0x558>)
     f06:	681b      	ldr	r3, [r3, #0]
     f08:	6812      	ldr	r2, [r2, #0]
     f0a:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     f0c:	2b0e      	cmp	r3, #14
     f0e:	f67f aec9 	bls.w	ca4 <hw::async::async_master::update()+0x2a8>
                    ASYNC_GPRINT_RAW("Busy bus");
     f12:	4b0a      	ldr	r3, [pc, #40]	; (f3c <hw::async::async_master::update()+0x540>)
     f14:	781b      	ldrb	r3, [r3, #0]
     f16:	2b00      	cmp	r3, #0
     f18:	f43f aec4 	beq.w	ca4 <hw::async::async_master::update()+0x2a8>
     f1c:	4911      	ldr	r1, [pc, #68]	; (f64 <hw::async::async_master::update()+0x568>)
                    return I2CError::master_not_ready;
     f1e:	2506      	movs	r5, #6
                    ASYNC_GPRINT_RAW("Busy bus");
     f20:	4808      	ldr	r0, [pc, #32]	; (f44 <hw::async::async_master::update()+0x548>)
     f22:	f00a f8d9 	bl	b0d8 <Print::printf(char const*, ...)>
     f26:	e6be      	b.n	ca6 <hw::async::async_master::update()+0x2aa>
                { return state; }
     f28:	2300      	movs	r3, #0
     f2a:	68db      	ldr	r3, [r3, #12]
     f2c:	deff      	udf	#255	; 0xff
                    ASYNC_GPRINT_RAW("\n\tBAD STATE");
     f2e:	490e      	ldr	r1, [pc, #56]	; (f68 <hw::async::async_master::update()+0x56c>)
                    return I2CError::ok;
     f30:	2500      	movs	r5, #0
                    ASYNC_GPRINT_RAW("\n\tBAD STATE");
     f32:	4804      	ldr	r0, [pc, #16]	; (f44 <hw::async::async_master::update()+0x548>)
     f34:	f00a f8d0 	bl	b0d8 <Print::printf(char const*, ...)>
     f38:	e6b5      	b.n	ca6 <hw::async::async_master::update()+0x2aa>
     f3a:	bf00      	nop
     f3c:	200022a8 	.word	0x200022a8
     f40:	20000d78 	.word	0x20000d78
     f44:	20001a70 	.word	0x20001a70
     f48:	2000390c 	.word	0x2000390c
     f4c:	2000390b 	.word	0x2000390b
     f50:	200038d8 	.word	0x200038d8
     f54:	200038e8 	.word	0x200038e8
     f58:	20000d04 	.word	0x20000d04
     f5c:	20000d8c 	.word	0x20000d8c
     f60:	20000d28 	.word	0x20000d28
     f64:	20000c30 	.word	0x20000c30
     f68:	20000d9c 	.word	0x20000d9c

00000f6c <setup_sd_card()>:

    return static_cast<bool>(Serial);
}

bool setup_sd_card()
{
     f6c:	b510      	push	{r4, lr}
    if (!SD.begin(BUILTIN_SDCARD))
     f6e:	21fe      	movs	r1, #254	; 0xfe
     f70:	4806      	ldr	r0, [pc, #24]	; (f8c <setup_sd_card()+0x20>)
     f72:	f001 fd9d 	bl	2ab0 <SDClass::begin(unsigned char)>
     f76:	4604      	mov	r4, r0
     f78:	b130      	cbz	r0, f88 <setup_sd_card()+0x1c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     f7a:	2113      	movs	r1, #19
     f7c:	4804      	ldr	r0, [pc, #16]	; (f90 <setup_sd_card()+0x24>)
     f7e:	f00b fdc3 	bl	cb08 <usb_serial_write>
     f82:	4804      	ldr	r0, [pc, #16]	; (f94 <setup_sd_card()+0x28>)
     f84:	f00a f88c 	bl	b0a0 <Print::println()>

    if (logging::is_logging_enabled_for(logging::severity::DEBUG))
        { Serial.println("SD Card initialised"); }

    return true;
}
     f88:	4620      	mov	r0, r4
     f8a:	bd10      	pop	{r4, pc}
     f8c:	20002b44 	.word	0x20002b44
     f90:	2000037c 	.word	0x2000037c
     f94:	20001a70 	.word	0x20001a70

00000f98 <setup_i2c_buses()>:

void setup_i2c_buses()
{
     f98:	b5f0      	push	{r4, r5, r6, r7, lr}
    constexpr const size_t MASTERS_COUNT = 3;
    I2CMaster* masters[MASTERS_COUNT] = {&Master, &Master1, &Master2};
     f9a:	4b0a      	ldr	r3, [pc, #40]	; (fc4 <setup_i2c_buses()+0x2c>)
{
     f9c:	b085      	sub	sp, #20

    // Enables or disables the internal pullup resistors.
    // You may need external pullups even if you enable the internal ones.
    // This change takes effect the next time you call begin() or listen().
    inline void set_internal_pullups(InternalPullup pullup) {
        pullup_config = pullup;
     f9e:	2602      	movs	r6, #2
         * @warning Pullup are mandatory as I2C is interrupt driven
         *  they should only be disabled with a complete hardware
         *  that is proper board with extern pullups
         */
        masters[i]->set_internal_pullups(InternalPullup::enabled_100k_ohm);
        masters[i]->begin(400'000);
     fa0:	4d09      	ldr	r5, [pc, #36]	; (fc8 <setup_i2c_buses()+0x30>)
    I2CMaster* masters[MASTERS_COUNT] = {&Master, &Master1, &Master2};
     fa2:	ac01      	add	r4, sp, #4
     fa4:	af04      	add	r7, sp, #16
     fa6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     faa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        masters[i]->set_internal_pullups(InternalPullup::enabled_100k_ohm);
     fae:	f854 0b04 	ldr.w	r0, [r4], #4
        masters[i]->begin(400'000);
     fb2:	4629      	mov	r1, r5
     fb4:	6803      	ldr	r3, [r0, #0]
     fb6:	60c6      	str	r6, [r0, #12]
     fb8:	681b      	ldr	r3, [r3, #0]
     fba:	4798      	blx	r3
    for (size_t i=0; i<MASTERS_COUNT; ++i)
     fbc:	42bc      	cmp	r4, r7
     fbe:	d1f6      	bne.n	fae <setup_i2c_buses()+0x16>
    }
}
     fc0:	b005      	add	sp, #20
     fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fc4:	20000370 	.word	0x20000370
     fc8:	00061a80 	.word	0x00061a80

00000fcc <hw::LedsDriver::clear_all()>:

    return errno;
}

void hw::LedsDriver::clear_all()
{
     fcc:	b570      	push	{r4, r5, r6, lr}
        for (uint8_t m=0; m<MCP_COUNT; ++m)
        {
            /**
             * Clear internal buffer
             */
            _mcp_write_buffer[i][m][0] = static_cast<uint8_t>(mcp23017::registers::GPIOA);
     fce:	2212      	movs	r2, #18
            _mcp_write_buffer[i][m][1] = 0; // GPIOA
     fd0:	2400      	movs	r4, #0
{
     fd2:	4605      	mov	r5, r0
     fd4:	4603      	mov	r3, r0
     fd6:	f100 0148 	add.w	r1, r0, #72	; 0x48
            _mcp_write_buffer[i][m][0] = static_cast<uint8_t>(mcp23017::registers::GPIOA);
     fda:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i<MULTIPLEX_COLUMS_COUNT; ++i)
     fdc:	3309      	adds	r3, #9
            _mcp_write_buffer[i][m][1] = 0; // GPIOA
     fde:	f803 4c08 	strb.w	r4, [r3, #-8]
            _mcp_write_buffer[i][m][2] = 0; // GPIOB
     fe2:	f803 4c07 	strb.w	r4, [r3, #-7]
            _mcp_write_buffer[i][m][0] = static_cast<uint8_t>(mcp23017::registers::GPIOA);
     fe6:	f803 2c06 	strb.w	r2, [r3, #-6]
            _mcp_write_buffer[i][m][1] = 0; // GPIOA
     fea:	f803 4c05 	strb.w	r4, [r3, #-5]
            _mcp_write_buffer[i][m][2] = 0; // GPIOB
     fee:	f803 4c04 	strb.w	r4, [r3, #-4]
            _mcp_write_buffer[i][m][0] = static_cast<uint8_t>(mcp23017::registers::GPIOA);
     ff2:	f803 2c03 	strb.w	r2, [r3, #-3]
            _mcp_write_buffer[i][m][1] = 0; // GPIOA
     ff6:	f803 4c02 	strb.w	r4, [r3, #-2]
            _mcp_write_buffer[i][m][2] = 0; // GPIOB
     ffa:	f803 4c01 	strb.w	r4, [r3, #-1]
    for (uint8_t i=0; i<MULTIPLEX_COLUMS_COUNT; ++i)
     ffe:	428b      	cmp	r3, r1
    1000:	d1eb      	bne.n	fda <hw::LedsDriver::clear_all()+0xe>
        }
    }

    /* forces the next update() call to write values */
    _elapsed_time = elapsedMicros(_refresh_period);
    1002:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
{
private:
	unsigned long us;
public:
	elapsedMicros(void) { us = micros(); }
	elapsedMicros(unsigned long val) { us = micros() - val; }
    1006:	f00a faed 	bl	b5e4 <micros>
    _cycle_state = CycleState::READY;
    100a:	f8a5 40b0 	strh.w	r4, [r5, #176]	; 0xb0
    100e:	1b80      	subs	r0, r0, r6
	elapsedMicros(const elapsedMicros &orig) { us = orig.us; }
	operator unsigned long () const { return micros() - us; }
	elapsedMicros & operator = (const elapsedMicros &rhs) { us = rhs.us; return *this; }
    1010:	f8c5 00ac 	str.w	r0, [r5, #172]	; 0xac
    _current_index = 0;
}
    1014:	bd70      	pop	{r4, r5, r6, pc}
    1016:	bf00      	nop

00001018 <hw::LedsDriver::update_mcps()>:

    return err::errcode::OK;
}
err::errcode hw::LedsDriver::update_mcps()
{
    if (_cycle_state != CycleState::UPDATING_GPIOS)
    1018:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
{
    101c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (_cycle_state != CycleState::UPDATING_GPIOS)
    1020:	2b01      	cmp	r3, #1
{
    1022:	b083      	sub	sp, #12
    1024:	9001      	str	r0, [sp, #4]
    if (_cycle_state != CycleState::UPDATING_GPIOS)
    1026:	f040 80f1 	bne.w	120c <hw::LedsDriver::update_mcps()+0x1f4>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    102a:	4f8a      	ldr	r7, [pc, #552]	; (1254 <hw::LedsDriver::update_mcps()+0x23c>)
		yield();
    102c:	f00b fdea 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1030:	783b      	ldrb	r3, [r7, #0]
    1032:	2b00      	cmp	r3, #0
    1034:	f040 80d3 	bne.w	11de <hw::LedsDriver::update_mcps()+0x1c6>
    1038:	4e87      	ldr	r6, [pc, #540]	; (1258 <hw::LedsDriver::update_mcps()+0x240>)
{
    103a:	f04f 0901 	mov.w	r9, #1
    103e:	f8df a240 	ldr.w	sl, [pc, #576]	; 1280 <hw::LedsDriver::update_mcps()+0x268>
    1042:	f106 080c 	add.w	r8, r6, #12
        return err::errcode::INVALID_CALL;
    }
    LEDS_GPRINTF("Updating drivers ... ");

    bool all_masters_ok = true;
    for (auto master: _targeted_masters.datas)
    1046:	f856 4b04 	ldr.w	r4, [r6], #4
    {
        if (nullptr == master)
    104a:	2c00      	cmp	r4, #0
    104c:	d07a      	beq.n	1144 <hw::LedsDriver::update_mcps()+0x12c>
		yield();
    104e:	f00b fdd9 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1052:	783b      	ldrb	r3, [r7, #0]
    1054:	b173      	cbz	r3, 1074 <hw::LedsDriver::update_mcps()+0x5c>
    1056:	f89a 3000 	ldrb.w	r3, [sl]
    105a:	07da      	lsls	r2, r3, #31
    105c:	d50a      	bpl.n	1074 <hw::LedsDriver::update_mcps()+0x5c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    105e:	4a7f      	ldr	r2, [pc, #508]	; (125c <hw::LedsDriver::update_mcps()+0x244>)
    1060:	4b7f      	ldr	r3, [pc, #508]	; (1260 <hw::LedsDriver::update_mcps()+0x248>)
    1062:	681b      	ldr	r3, [r3, #0]
    1064:	6812      	ldr	r2, [r2, #0]
    1066:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1068:	2b0e      	cmp	r3, #14
    106a:	d903      	bls.n	1074 <hw::LedsDriver::update_mcps()+0x5c>
            { continue; }
        LEDS_GPRINT_RAW("\tbus=%u ... ", master->id())
    106c:	4b7d      	ldr	r3, [pc, #500]	; (1264 <hw::LedsDriver::update_mcps()+0x24c>)
    106e:	781b      	ldrb	r3, [r3, #0]
    1070:	2b00      	cmp	r3, #0
    1072:	d175      	bne.n	1160 <hw::LedsDriver::update_mcps()+0x148>
                { return wqueue.oldest(); }
    1074:	f104 0b04 	add.w	fp, r4, #4
                { return next == this; }
    1078:	68e2      	ldr	r2, [r4, #12]

        if (master->next_call() == nullptr)
    107a:	4593      	cmp	fp, r2
    107c:	bf18      	it	ne
    107e:	2a00      	cmpne	r2, #0
    1080:	d060      	beq.n	1144 <hw::LedsDriver::update_mcps()+0x12c>
            { continue; }
        else
            { all_masters_ok = false; }

        I2CError errno = master->update();
    1082:	4620      	mov	r0, r4
    1084:	f7ff fcba 	bl	9fc <hw::async::async_master::update()>
    1088:	4605      	mov	r5, r0
		yield();
    108a:	f00b fdbb 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    108e:	783a      	ldrb	r2, [r7, #0]
    1090:	b172      	cbz	r2, 10b0 <hw::LedsDriver::update_mcps()+0x98>
    1092:	f89a 2000 	ldrb.w	r2, [sl]
    1096:	07d3      	lsls	r3, r2, #31
    1098:	d50a      	bpl.n	10b0 <hw::LedsDriver::update_mcps()+0x98>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    109a:	4970      	ldr	r1, [pc, #448]	; (125c <hw::LedsDriver::update_mcps()+0x244>)
    109c:	4b70      	ldr	r3, [pc, #448]	; (1260 <hw::LedsDriver::update_mcps()+0x248>)
    109e:	681a      	ldr	r2, [r3, #0]
    10a0:	6809      	ldr	r1, [r1, #0]
    10a2:	1a52      	subs	r2, r2, r1
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    10a4:	2a0e      	cmp	r2, #14
    10a6:	d903      	bls.n	10b0 <hw::LedsDriver::update_mcps()+0x98>
        LEDS_GPRINTF("Returned errno: %u ... ", static_cast<uint8_t>(errno));
    10a8:	4a6e      	ldr	r2, [pc, #440]	; (1264 <hw::LedsDriver::update_mcps()+0x24c>)
    10aa:	7812      	ldrb	r2, [r2, #0]
    10ac:	2a00      	cmp	r2, #0
    10ae:	d15d      	bne.n	116c <hw::LedsDriver::update_mcps()+0x154>

        if (errno == I2CError::ok)
            { continue; }
        else            
        {
            if (errno == I2CError::master_not_ready)
    10b0:	2d00      	cmp	r5, #0
    10b2:	bf18      	it	ne
    10b4:	2d06      	cmpne	r5, #6
    10b6:	bf0c      	ite	eq
    10b8:	f04f 0901 	moveq.w	r9, #1
    10bc:	f04f 0900 	movne.w	r9, #0
    10c0:	d04b      	beq.n	115a <hw::LedsDriver::update_mcps()+0x142>
            switch (err)
    10c2:	2d0b      	cmp	r5, #11
    10c4:	d804      	bhi.n	10d0 <hw::LedsDriver::update_mcps()+0xb8>
    10c6:	f640 5283 	movw	r2, #3459	; 0xd83
    10ca:	40ea      	lsrs	r2, r5
    10cc:	07d5      	lsls	r5, r2, #31
    10ce:	d439      	bmi.n	1144 <hw::LedsDriver::update_mcps()+0x12c>
		yield();
    10d0:	f00b fd98 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    10d4:	783a      	ldrb	r2, [r7, #0]
    10d6:	b11a      	cbz	r2, 10e0 <hw::LedsDriver::update_mcps()+0xc8>
    10d8:	f89a 2000 	ldrb.w	r2, [sl]
    10dc:	07d0      	lsls	r0, r2, #31
    10de:	d44b      	bmi.n	1178 <hw::LedsDriver::update_mcps()+0x160>
                { return next == this; }
    10e0:	68e4      	ldr	r4, [r4, #12]
                { return is_empty() ? nullptr : next; }
    10e2:	45a3      	cmp	fp, r4
    10e4:	d05a      	beq.n	119c <hw::LedsDriver::update_mcps()+0x184>
                { continue; /* nothing to be done, only hopes */ }
            else
                { 
                    LEDS_GPRINT_RAW("Unrecoverable error: ");
                    auto* bad_write = master->next_call();
                    const size_t mcp_index = bad_write - _write_nodes;
    10e6:	9a01      	ldr	r2, [sp, #4]
    10e8:	f102 0378 	add.w	r3, r2, #120	; 0x78
    10ec:	1ae5      	subs	r5, r4, r3
    10ee:	112d      	asrs	r5, r5, #4

                    if (
    10f0:	2c00      	cmp	r4, #0
    10f2:	d058      	beq.n	11a6 <hw::LedsDriver::update_mcps()+0x18e>
                        nullptr == bad_write
                        || bad_write < _write_nodes+0
    10f4:	429c      	cmp	r4, r3
    10f6:	d356      	bcc.n	11a6 <hw::LedsDriver::update_mcps()+0x18e>
                        || _write_nodes+MCP_COUNT <= bad_write
    10f8:	f102 03a8 	add.w	r3, r2, #168	; 0xa8
    10fc:	429c      	cmp	r4, r3
    10fe:	d252      	bcs.n	11a6 <hw::LedsDriver::update_mcps()+0x18e>
		yield();
    1100:	f00b fd80 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1104:	783b      	ldrb	r3, [r7, #0]
    1106:	b193      	cbz	r3, 112e <hw::LedsDriver::update_mcps()+0x116>
    1108:	f89a 3000 	ldrb.w	r3, [sl]
    110c:	07da      	lsls	r2, r3, #31
    110e:	d50e      	bpl.n	112e <hw::LedsDriver::update_mcps()+0x116>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1110:	4a52      	ldr	r2, [pc, #328]	; (125c <hw::LedsDriver::update_mcps()+0x244>)
    1112:	4b53      	ldr	r3, [pc, #332]	; (1260 <hw::LedsDriver::update_mcps()+0x248>)
    1114:	681b      	ldr	r3, [r3, #0]
    1116:	6812      	ldr	r2, [r2, #0]
    1118:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    111a:	2b0e      	cmp	r3, #14
    111c:	d907      	bls.n	112e <hw::LedsDriver::update_mcps()+0x116>
                        {
                            LEDS_GPRINT_RAW("ILLEGAL STATE: next_write=%p mcp_index=%lu ... ABORT",
                                bad_write, mcp_index);
                            return err::errcode::INVALID_STATE;
                        }
                    LEDS_GPRINT_RAW("Abort transaction for mcp=%lu", mcp_index);
    111e:	4b51      	ldr	r3, [pc, #324]	; (1264 <hw::LedsDriver::update_mcps()+0x24c>)
    1120:	781b      	ldrb	r3, [r3, #0]
    1122:	b123      	cbz	r3, 112e <hw::LedsDriver::update_mcps()+0x116>
    1124:	462a      	mov	r2, r5
    1126:	4950      	ldr	r1, [pc, #320]	; (1268 <hw::LedsDriver::update_mcps()+0x250>)
    1128:	4850      	ldr	r0, [pc, #320]	; (126c <hw::LedsDriver::update_mcps()+0x254>)
    112a:	f009 ffd5 	bl	b0d8 <Print::printf(char const*, ...)>

                    /** Abort transaction for this device */
                    bad_write->pop_self();
                    MCP_DEVICES[mcp_index].status = hw::async::async_device::state::Failed;
    112e:	4b50      	ldr	r3, [pc, #320]	; (1270 <hw::LedsDriver::update_mcps()+0x258>)
    1130:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
                prev->next = next;
    1134:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    1138:	6093      	str	r3, [r2, #8]
                next->prev = prev;
    113a:	605a      	str	r2, [r3, #4]
    113c:	2302      	movs	r3, #2
                next = prev = this;
    113e:	e9c4 4401 	strd	r4, r4, [r4, #4]
    1142:	716b      	strb	r3, [r5, #5]
    for (auto master: _targeted_masters.datas)
    1144:	4546      	cmp	r6, r8
    1146:	f47f af7e 	bne.w	1046 <hw::LedsDriver::update_mcps()+0x2e>
                }
        }
    }

    if (all_masters_ok)
    114a:	f1b9 0f00 	cmp.w	r9, #0
    114e:	f040 809f 	bne.w	1290 <hw::LedsDriver::update_mcps()+0x278>
        { LEDS_GPRINTF("Cycle done"); _cycle_state = CycleState::ENDING; }
    
    return err::errcode::OK;
    1152:	4648      	mov	r0, r9
}
    1154:	b003      	add	sp, #12
    1156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            { all_masters_ok = false; }
    115a:	f04f 0900 	mov.w	r9, #0
    115e:	e7f1      	b.n	1144 <hw::LedsDriver::update_mcps()+0x12c>
        LEDS_GPRINT_RAW("\tbus=%u ... ", master->id())
    1160:	7d22      	ldrb	r2, [r4, #20]
    1162:	4944      	ldr	r1, [pc, #272]	; (1274 <hw::LedsDriver::update_mcps()+0x25c>)
    1164:	4841      	ldr	r0, [pc, #260]	; (126c <hw::LedsDriver::update_mcps()+0x254>)
    1166:	f009 ffb7 	bl	b0d8 <Print::printf(char const*, ...)>
    116a:	e783      	b.n	1074 <hw::LedsDriver::update_mcps()+0x5c>
        LEDS_GPRINTF("Returned errno: %u ... ", static_cast<uint8_t>(errno));
    116c:	b2ea      	uxtb	r2, r5
    116e:	4942      	ldr	r1, [pc, #264]	; (1278 <hw::LedsDriver::update_mcps()+0x260>)
    1170:	483e      	ldr	r0, [pc, #248]	; (126c <hw::LedsDriver::update_mcps()+0x254>)
    1172:	f009 ffb1 	bl	b0d8 <Print::printf(char const*, ...)>
    1176:	e79b      	b.n	10b0 <hw::LedsDriver::update_mcps()+0x98>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1178:	4938      	ldr	r1, [pc, #224]	; (125c <hw::LedsDriver::update_mcps()+0x244>)
    117a:	4b39      	ldr	r3, [pc, #228]	; (1260 <hw::LedsDriver::update_mcps()+0x248>)
    117c:	681a      	ldr	r2, [r3, #0]
    117e:	6809      	ldr	r1, [r1, #0]
    1180:	1a52      	subs	r2, r2, r1
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1182:	2a0e      	cmp	r2, #14
    1184:	d9ac      	bls.n	10e0 <hw::LedsDriver::update_mcps()+0xc8>
                    LEDS_GPRINT_RAW("Unrecoverable error: ");
    1186:	4a37      	ldr	r2, [pc, #220]	; (1264 <hw::LedsDriver::update_mcps()+0x24c>)
    1188:	7812      	ldrb	r2, [r2, #0]
    118a:	2a00      	cmp	r2, #0
    118c:	d0a8      	beq.n	10e0 <hw::LedsDriver::update_mcps()+0xc8>
    118e:	493b      	ldr	r1, [pc, #236]	; (127c <hw::LedsDriver::update_mcps()+0x264>)
    1190:	4836      	ldr	r0, [pc, #216]	; (126c <hw::LedsDriver::update_mcps()+0x254>)
    1192:	f009 ffa1 	bl	b0d8 <Print::printf(char const*, ...)>
                { return next == this; }
    1196:	68e4      	ldr	r4, [r4, #12]
                { return is_empty() ? nullptr : next; }
    1198:	45a3      	cmp	fp, r4
    119a:	d1a4      	bne.n	10e6 <hw::LedsDriver::update_mcps()+0xce>
                    const size_t mcp_index = bad_write - _write_nodes;
    119c:	9d01      	ldr	r5, [sp, #4]
    119e:	2400      	movs	r4, #0
    11a0:	3578      	adds	r5, #120	; 0x78
    11a2:	426d      	negs	r5, r5
    11a4:	112d      	asrs	r5, r5, #4
		yield();
    11a6:	f00b fd2d 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    11aa:	783b      	ldrb	r3, [r7, #0]
    11ac:	2b00      	cmp	r3, #0
    11ae:	d04d      	beq.n	124c <hw::LedsDriver::update_mcps()+0x234>
    11b0:	4b33      	ldr	r3, [pc, #204]	; (1280 <hw::LedsDriver::update_mcps()+0x268>)
    11b2:	781b      	ldrb	r3, [r3, #0]
    11b4:	07d9      	lsls	r1, r3, #31
    11b6:	d549      	bpl.n	124c <hw::LedsDriver::update_mcps()+0x234>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    11b8:	4b29      	ldr	r3, [pc, #164]	; (1260 <hw::LedsDriver::update_mcps()+0x248>)
    11ba:	4a28      	ldr	r2, [pc, #160]	; (125c <hw::LedsDriver::update_mcps()+0x244>)
    11bc:	681b      	ldr	r3, [r3, #0]
    11be:	6812      	ldr	r2, [r2, #0]
    11c0:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    11c2:	2b0e      	cmp	r3, #14
    11c4:	d942      	bls.n	124c <hw::LedsDriver::update_mcps()+0x234>
                            LEDS_GPRINT_RAW("ILLEGAL STATE: next_write=%p mcp_index=%lu ... ABORT",
    11c6:	4b27      	ldr	r3, [pc, #156]	; (1264 <hw::LedsDriver::update_mcps()+0x24c>)
    11c8:	781b      	ldrb	r3, [r3, #0]
    11ca:	2b00      	cmp	r3, #0
    11cc:	d03e      	beq.n	124c <hw::LedsDriver::update_mcps()+0x234>
    11ce:	462b      	mov	r3, r5
    11d0:	4622      	mov	r2, r4
    11d2:	492c      	ldr	r1, [pc, #176]	; (1284 <hw::LedsDriver::update_mcps()+0x26c>)
    11d4:	4825      	ldr	r0, [pc, #148]	; (126c <hw::LedsDriver::update_mcps()+0x254>)
    11d6:	f009 ff7f 	bl	b0d8 <Print::printf(char const*, ...)>
                            return err::errcode::INVALID_STATE;
    11da:	2082      	movs	r0, #130	; 0x82
    11dc:	e7ba      	b.n	1154 <hw::LedsDriver::update_mcps()+0x13c>
    11de:	4b28      	ldr	r3, [pc, #160]	; (1280 <hw::LedsDriver::update_mcps()+0x268>)
    11e0:	781b      	ldrb	r3, [r3, #0]
    11e2:	07d9      	lsls	r1, r3, #31
    11e4:	f57f af28 	bpl.w	1038 <hw::LedsDriver::update_mcps()+0x20>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    11e8:	4b1d      	ldr	r3, [pc, #116]	; (1260 <hw::LedsDriver::update_mcps()+0x248>)
    11ea:	4a1c      	ldr	r2, [pc, #112]	; (125c <hw::LedsDriver::update_mcps()+0x244>)
    11ec:	681b      	ldr	r3, [r3, #0]
    11ee:	6812      	ldr	r2, [r2, #0]
    11f0:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    11f2:	2b0e      	cmp	r3, #14
    11f4:	f67f af20 	bls.w	1038 <hw::LedsDriver::update_mcps()+0x20>
    LEDS_GPRINTF("Updating drivers ... ");
    11f8:	4b1a      	ldr	r3, [pc, #104]	; (1264 <hw::LedsDriver::update_mcps()+0x24c>)
    11fa:	781b      	ldrb	r3, [r3, #0]
    11fc:	2b00      	cmp	r3, #0
    11fe:	f43f af1b 	beq.w	1038 <hw::LedsDriver::update_mcps()+0x20>
    1202:	4921      	ldr	r1, [pc, #132]	; (1288 <hw::LedsDriver::update_mcps()+0x270>)
    1204:	4819      	ldr	r0, [pc, #100]	; (126c <hw::LedsDriver::update_mcps()+0x254>)
    1206:	f009 ff67 	bl	b0d8 <Print::printf(char const*, ...)>
    120a:	e715      	b.n	1038 <hw::LedsDriver::update_mcps()+0x20>
		yield();
    120c:	f00b fcfa 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1210:	4b10      	ldr	r3, [pc, #64]	; (1254 <hw::LedsDriver::update_mcps()+0x23c>)
    1212:	781b      	ldrb	r3, [r3, #0]
    1214:	b1b3      	cbz	r3, 1244 <hw::LedsDriver::update_mcps()+0x22c>
    1216:	4b1a      	ldr	r3, [pc, #104]	; (1280 <hw::LedsDriver::update_mcps()+0x268>)
    1218:	781b      	ldrb	r3, [r3, #0]
    121a:	07d8      	lsls	r0, r3, #31
    121c:	d512      	bpl.n	1244 <hw::LedsDriver::update_mcps()+0x22c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    121e:	4b10      	ldr	r3, [pc, #64]	; (1260 <hw::LedsDriver::update_mcps()+0x248>)
    1220:	4a0e      	ldr	r2, [pc, #56]	; (125c <hw::LedsDriver::update_mcps()+0x244>)
    1222:	681b      	ldr	r3, [r3, #0]
    1224:	6812      	ldr	r2, [r2, #0]
    1226:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1228:	2b0e      	cmp	r3, #14
    122a:	d90b      	bls.n	1244 <hw::LedsDriver::update_mcps()+0x22c>
        LEDS_GPRINTF("INVALID CALL: update_mcps caled with state=%u", static_cast<uint8_t>(_cycle_state));
    122c:	4b0d      	ldr	r3, [pc, #52]	; (1264 <hw::LedsDriver::update_mcps()+0x24c>)
    122e:	781b      	ldrb	r3, [r3, #0]
    1230:	b143      	cbz	r3, 1244 <hw::LedsDriver::update_mcps()+0x22c>
    1232:	9b01      	ldr	r3, [sp, #4]
    1234:	4915      	ldr	r1, [pc, #84]	; (128c <hw::LedsDriver::update_mcps()+0x274>)
    1236:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
    123a:	480c      	ldr	r0, [pc, #48]	; (126c <hw::LedsDriver::update_mcps()+0x254>)
    123c:	f009 ff4c 	bl	b0d8 <Print::printf(char const*, ...)>
        return err::errcode::INVALID_CALL;
    1240:	2081      	movs	r0, #129	; 0x81
    1242:	e787      	b.n	1154 <hw::LedsDriver::update_mcps()+0x13c>
    1244:	2081      	movs	r0, #129	; 0x81
}
    1246:	b003      	add	sp, #12
    1248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            return err::errcode::INVALID_STATE;
    124c:	2082      	movs	r0, #130	; 0x82
}
    124e:	b003      	add	sp, #12
    1250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1254:	2000390c 	.word	0x2000390c
    1258:	20003830 	.word	0x20003830
    125c:	200038e8 	.word	0x200038e8
    1260:	200038d8 	.word	0x200038d8
    1264:	200022a7 	.word	0x200022a7
    1268:	20000810 	.word	0x20000810
    126c:	20001a70 	.word	0x20001a70
    1270:	20001ba0 	.word	0x20001ba0
    1274:	20000788 	.word	0x20000788
    1278:	20000798 	.word	0x20000798
    127c:	200007c0 	.word	0x200007c0
    1280:	2000390b 	.word	0x2000390b
    1284:	200007d8 	.word	0x200007d8
    1288:	20000764 	.word	0x20000764
    128c:	20000728 	.word	0x20000728
		yield();
    1290:	f00b fcb8 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1294:	783b      	ldrb	r3, [r7, #0]
    1296:	b18b      	cbz	r3, 12bc <hw::LedsDriver::update_mcps()+0x2a4>
    1298:	4b0c      	ldr	r3, [pc, #48]	; (12cc <hw::LedsDriver::update_mcps()+0x2b4>)
    129a:	781b      	ldrb	r3, [r3, #0]
    129c:	07db      	lsls	r3, r3, #31
    129e:	d50d      	bpl.n	12bc <hw::LedsDriver::update_mcps()+0x2a4>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    12a0:	4b0b      	ldr	r3, [pc, #44]	; (12d0 <hw::LedsDriver::update_mcps()+0x2b8>)
    12a2:	4a0c      	ldr	r2, [pc, #48]	; (12d4 <hw::LedsDriver::update_mcps()+0x2bc>)
    12a4:	681b      	ldr	r3, [r3, #0]
    12a6:	6812      	ldr	r2, [r2, #0]
    12a8:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    12aa:	2b0e      	cmp	r3, #14
    12ac:	d906      	bls.n	12bc <hw::LedsDriver::update_mcps()+0x2a4>
        { LEDS_GPRINTF("Cycle done"); _cycle_state = CycleState::ENDING; }
    12ae:	4b0a      	ldr	r3, [pc, #40]	; (12d8 <hw::LedsDriver::update_mcps()+0x2c0>)
    12b0:	781b      	ldrb	r3, [r3, #0]
    12b2:	b11b      	cbz	r3, 12bc <hw::LedsDriver::update_mcps()+0x2a4>
    12b4:	4909      	ldr	r1, [pc, #36]	; (12dc <hw::LedsDriver::update_mcps()+0x2c4>)
    12b6:	480a      	ldr	r0, [pc, #40]	; (12e0 <hw::LedsDriver::update_mcps()+0x2c8>)
    12b8:	f009 ff0e 	bl	b0d8 <Print::printf(char const*, ...)>
    12bc:	2302      	movs	r3, #2
    return err::errcode::OK;
    12be:	2000      	movs	r0, #0
        { LEDS_GPRINTF("Cycle done"); _cycle_state = CycleState::ENDING; }
    12c0:	9a01      	ldr	r2, [sp, #4]
    12c2:	f882 30b0 	strb.w	r3, [r2, #176]	; 0xb0
}
    12c6:	b003      	add	sp, #12
    12c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12cc:	2000390b 	.word	0x2000390b
    12d0:	200038d8 	.word	0x200038d8
    12d4:	200038e8 	.word	0x200038e8
    12d8:	200022a7 	.word	0x200022a7
    12dc:	20000830 	.word	0x20000830
    12e0:	20001a70 	.word	0x20001a70

000012e4 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::MidiInterface(midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>&)>:

BEGIN_MIDI_NAMESPACE

/// \brief Constructor for MidiInterface.
template<class Transport, class Settings, class Platform>
inline MidiInterface<Transport, Settings, Platform>::MidiInterface(Transport& inTransport)
    12e4:	b538      	push	{r3, r4, r5, lr}
    12e6:	4604      	mov	r4, r0
    , mThruFilterMode(Thru::Full)
    , mLastMessageSentTime(0)
    , mLastMessageReceivedTime(0)
    , mSenderActiveSensingPeriodicity(0)
    , mReceiverActiveSensingActivated(false)
    , mLastError(0)
    12e8:	2500      	movs	r5, #0
    , mCurrentRpnNumber(0xffff)
    12ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
    , mThruActivated(true)
    12ee:	2003      	movs	r0, #3
        , type(MIDI_NAMESPACE::InvalidType)
        , data1(0)
        , data2(0)
        , valid(false)
    {
        memset(sysexArray, 0, sSysExMaxSize * sizeof(DataByte));
    12f0:	2280      	movs	r2, #128	; 0x80
    , mInputChannel(0)
    12f2:	f8a4 5058 	strh.w	r5, [r4, #88]	; 0x58
    , mThruActivated(true)
    12f6:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    12fa:	f104 0078 	add.w	r0, r4, #120	; 0x78
    , mRunningStatus_TX(InvalidType)
    12fe:	f884 505a 	strb.w	r5, [r4, #90]	; 0x5a
        : channel(0)
    1302:	6765      	str	r5, [r4, #116]	; 0x74
        , valid(false)
    1304:	f884 50f8 	strb.w	r5, [r4, #248]	; 0xf8
    : mTransport(inTransport)
    1308:	e9c4 5114 	strd	r5, r1, [r4, #80]	; 0x50
    , mLastError(0)
    130c:	e9c4 5500 	strd	r5, r5, [r4]
        memset(sysexArray, 0, sSysExMaxSize * sizeof(DataByte));
    1310:	4629      	mov	r1, r5
    1312:	e9c4 5502 	strd	r5, r5, [r4, #8]
    1316:	e9c4 5504 	strd	r5, r5, [r4, #16]
    131a:	e9c4 5506 	strd	r5, r5, [r4, #24]
    131e:	e9c4 5508 	strd	r5, r5, [r4, #32]
    1322:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
    1326:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
    132a:	e9c4 550e 	strd	r5, r5, [r4, #56]	; 0x38
    132e:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
    1332:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    , mPendingMessageIndex(0)
    1336:	e9c4 5518 	strd	r5, r5, [r4, #96]	; 0x60
    , mCurrentNrpnNumber(0xffff)
    133a:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
    133e:	f00c fda5 	bl	de8c <memset>
{
        mSenderActiveSensingPeriodicity = Settings::SenderActiveSensingPeriodicity;
}
    1342:	4620      	mov	r0, r4
    , mSenderActiveSensingPeriodicity(0)
    1344:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
    , mReceiverActiveSensingActivated(false)
    1348:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
    , mLastMessageReceivedTime(0)
    134c:	e9c4 5540 	strd	r5, r5, [r4, #256]	; 0x100
}
    1350:	bd38      	pop	{r3, r4, r5, pc}
    1352:	bf00      	nop

00001354 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::begin(unsigned char)>:
 All parameters are set to their default values:
 - Input channel set to 1 if no value is specified
 - Full thru mirroring
 */
template<class Transport, class Settings, class Platform>
void MidiInterface<Transport, Settings, Platform>::begin(Channel inChannel)
    1354:	b538      	push	{r3, r4, r5, lr}
    1356:	6d43      	ldr	r3, [r0, #84]	; 0x54
    1358:	4604      	mov	r4, r0
    135a:	460d      	mov	r5, r1
	{
        // Initialise the Serial port
        #if defined(AVR_CAKE)
            mSerial. template open<Settings::BaudRate>();
        #else
            mSerial.begin(Settings::BaudRate);
    135c:	2200      	movs	r2, #0
    135e:	6818      	ldr	r0, [r3, #0]
    1360:	f647 2112 	movw	r1, #31250	; 0x7a12
    1364:	6803      	ldr	r3, [r0, #0]
    1366:	69db      	ldr	r3, [r3, #28]
    1368:	4798      	blx	r3
    mRunningStatus_RX = InvalidType;

    mPendingMessageIndex = 0;
    mPendingMessageExpectedLength = 0;

    mCurrentRpnNumber  = 0xffff;
    136a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    136e:	490c      	ldr	r1, [pc, #48]	; (13a0 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::begin(unsigned char)+0x4c>)
    mRunningStatus_TX = InvalidType;
    1370:	2300      	movs	r3, #0
    mInputChannel = inChannel;
    1372:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
    1376:	6809      	ldr	r1, [r1, #0]
    mRunningStatus_TX = InvalidType;
    1378:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
    mRunningStatus_RX = InvalidType;
    137c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
    mCurrentNrpnNumber = 0xffff;

    mLastMessageSentTime = Platform::now();
    1380:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100

    mMessage.valid   = false;
    1384:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
    mMessage.type    = InvalidType;
    mMessage.channel = 0;
    1388:	6763      	str	r3, [r4, #116]	; 0x74
    mMessage.data1   = 0;
    mMessage.data2   = 0;
    mMessage.length  = 0;
    138a:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    mCurrentNrpnNumber = 0xffff;
    138e:	e9c4 221a 	strd	r2, r2, [r4, #104]	; 0x68

    mThruFilterMode = Thru::Full;
    mThruActivated  = mTransport.thruActivated;
    1392:	2203      	movs	r2, #3
    mPendingMessageExpectedLength = 0;
    1394:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
    mThruActivated  = mTransport.thruActivated;
    1398:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
}
    139c:	bd38      	pop	{r3, r4, r5, pc}
    139e:	bf00      	nop
    13a0:	200038d8 	.word	0x200038d8

000013a4 <setup_raw_io()>:
{
    13a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    13a8:	4c40      	ldr	r4, [pc, #256]	; (14ac <setup_raw_io()+0x108>)
    13aa:	2009      	movs	r0, #9
    13ac:	f104 0508 	add.w	r5, r4, #8
    13b0:	e001      	b.n	13b6 <setup_raw_io()+0x12>
    for (const auto pin: hw::OUTPUT_PINS)
    13b2:	f814 0f01 	ldrb.w	r0, [r4, #1]!
        { pinMode(pin, OUTPUT); }           ///< Pins used for all raw outs
    13b6:	2101      	movs	r1, #1
    13b8:	f00a f97a 	bl	b6b0 <pinMode>
    for (const auto pin: hw::OUTPUT_PINS)
    13bc:	42ac      	cmp	r4, r5
    13be:	d1f8      	bne.n	13b2 <setup_raw_io()+0xe>
    for (uint8_t pin=26; pin<=39; ++pin)
    13c0:	241a      	movs	r4, #26
        { pinMode(pin, INPUT_PULLUP); }     ///< Pads source pins (active @low)
    13c2:	4620      	mov	r0, r4
    for (uint8_t pin=26; pin<=39; ++pin)
    13c4:	3401      	adds	r4, #1
        { pinMode(pin, INPUT_PULLUP); }     ///< Pads source pins (active @low)
    13c6:	2102      	movs	r1, #2
    for (uint8_t pin=26; pin<=39; ++pin)
    13c8:	b2e4      	uxtb	r4, r4
        { pinMode(pin, INPUT_PULLUP); }     ///< Pads source pins (active @low)
    13ca:	f00a f971 	bl	b6b0 <pinMode>
    for (uint8_t pin=26; pin<=39; ++pin)
    13ce:	2c28      	cmp	r4, #40	; 0x28
    13d0:	d1f7      	bne.n	13c2 <setup_raw_io()+0x1e>
    for (uint8_t pin=20; pin<=23; ++pin)
    13d2:	2414      	movs	r4, #20
        { pinMode(pin, INPUT_PULLUP); }     ///< Encoders input pins (active ??)
    13d4:	4620      	mov	r0, r4
    for (uint8_t pin=20; pin<=23; ++pin)
    13d6:	3401      	adds	r4, #1
        { pinMode(pin, INPUT_PULLUP); }     ///< Encoders input pins (active ??)
    13d8:	2102      	movs	r1, #2
    for (uint8_t pin=20; pin<=23; ++pin)
    13da:	b2e4      	uxtb	r4, r4
        { pinMode(pin, INPUT_PULLUP); }     ///< Encoders input pins (active ??)
    13dc:	f00a f968 	bl	b6b0 <pinMode>
    for (uint8_t pin=20; pin<=23; ++pin)
    13e0:	2c18      	cmp	r4, #24
    13e2:	d1f7      	bne.n	13d4 <setup_raw_io()+0x30>
    pinMode(A16, INPUT_DISABLE);            ///< Master faders polling pins
    13e4:	2105      	movs	r1, #5
    13e6:	2028      	movs	r0, #40	; 0x28
    13e8:	f00a f962 	bl	b6b0 <pinMode>
		uint32_t millis_begin = systick_millis_count;
    13ec:	4d30      	ldr	r5, [pc, #192]	; (14b0 <setup_raw_io()+0x10c>)
    pinMode(A17, INPUT_DISABLE);            ///< Track faders polling pins
    13ee:	2105      	movs	r1, #5
    13f0:	2029      	movs	r0, #41	; 0x29
    13f2:	f00a f95d 	bl	b6b0 <pinMode>
    pinMode(LED_BUILTIN, OUTPUT);           ///< Used for heart beat
    13f6:	2101      	movs	r1, #1
    13f8:	200d      	movs	r0, #13
    13fa:	4c2e      	ldr	r4, [pc, #184]	; (14b4 <setup_raw_io()+0x110>)
    13fc:	f00a f958 	bl	b6b0 <pinMode>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1400:	4f2d      	ldr	r7, [pc, #180]	; (14b8 <setup_raw_io()+0x114>)
		uint32_t millis_begin = systick_millis_count;
    1402:	682e      	ldr	r6, [r5, #0]
				if (elapsed > 750) break;
    1404:	f240 28ee 	movw	r8, #750	; 0x2ee
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1408:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 14c4 <setup_raw_io()+0x120>
		yield();
    140c:	f00b fbfa 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1410:	7823      	ldrb	r3, [r4, #0]
    1412:	2b00      	cmp	r3, #0
    1414:	d036      	beq.n	1484 <setup_raw_io()+0xe0>
    1416:	783b      	ldrb	r3, [r7, #0]
    1418:	07da      	lsls	r2, r3, #31
    141a:	d533      	bpl.n	1484 <setup_raw_io()+0xe0>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    141c:	682b      	ldr	r3, [r5, #0]
    141e:	f8d9 2000 	ldr.w	r2, [r9]
    1422:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1424:	2b0e      	cmp	r3, #14
    1426:	d92d      	bls.n	1484 <setup_raw_io()+0xe0>
    MIDIA.begin(MIDI_CHANNEL_OMNI);         ///< Connection to MIDI matrix
    1428:	2100      	movs	r1, #0
    142a:	4824      	ldr	r0, [pc, #144]	; (14bc <setup_raw_io()+0x118>)
    142c:	f7ff ff92 	bl	1354 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::begin(unsigned char)>
    MIDIB.begin(MIDI_CHANNEL_OMNI);         ///< Connection to Foot controler
    1430:	2100      	movs	r1, #0
    1432:	4823      	ldr	r0, [pc, #140]	; (14c0 <setup_raw_io()+0x11c>)
    1434:	f7ff ff8e 	bl	1354 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::begin(unsigned char)>
    1438:	4f1f      	ldr	r7, [pc, #124]	; (14b8 <setup_raw_io()+0x114>)
    143a:	682e      	ldr	r6, [r5, #0]
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    143c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 14c4 <setup_raw_io()+0x120>
		yield();
    1440:	f00b fbe0 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1444:	7823      	ldrb	r3, [r4, #0]
    1446:	b33b      	cbz	r3, 1498 <setup_raw_io()+0xf4>
    1448:	783b      	ldrb	r3, [r7, #0]
    144a:	07db      	lsls	r3, r3, #31
    144c:	d524      	bpl.n	1498 <setup_raw_io()+0xf4>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    144e:	682b      	ldr	r3, [r5, #0]
    1450:	f8d8 2000 	ldr.w	r2, [r8]
    1454:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1456:	2b0e      	cmp	r3, #14
    1458:	d91e      	bls.n	1498 <setup_raw_io()+0xf4>
		yield();
    145a:	f00b fbd3 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    145e:	7823      	ldrb	r3, [r4, #0]
    1460:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    1464:	b163      	cbz	r3, 1480 <setup_raw_io()+0xdc>
    1466:	4b14      	ldr	r3, [pc, #80]	; (14b8 <setup_raw_io()+0x114>)
    1468:	7818      	ldrb	r0, [r3, #0]
    146a:	f010 0001 	ands.w	r0, r0, #1
    146e:	d007      	beq.n	1480 <setup_raw_io()+0xdc>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1470:	4b14      	ldr	r3, [pc, #80]	; (14c4 <setup_raw_io()+0x120>)
    1472:	6828      	ldr	r0, [r5, #0]
    1474:	681b      	ldr	r3, [r3, #0]
    1476:	1ac0      	subs	r0, r0, r3
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1478:	280e      	cmp	r0, #14
    147a:	bf94      	ite	ls
    147c:	2000      	movls	r0, #0
    147e:	2001      	movhi	r0, #1
}
    1480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
    1484:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
    1486:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    1488:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
    148a:	b15a      	cbz	r2, 14a4 <setup_raw_io()+0x100>
				if (elapsed > 2000) break;
    148c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    1490:	d8ca      	bhi.n	1428 <setup_raw_io()+0x84>
			yield();
    1492:	f00b fbb7 	bl	cc04 <yield>
    1496:	e7b9      	b.n	140c <setup_raw_io()+0x68>
    1498:	682b      	ldr	r3, [r5, #0]
	operator unsigned long () const { return millis() - ms; }
    149a:	1b9b      	subs	r3, r3, r6
    while (!Serial && elapsed < 2000)
    149c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    14a0:	d3ce      	bcc.n	1440 <setup_raw_io()+0x9c>
    14a2:	e7da      	b.n	145a <setup_raw_io()+0xb6>
				if (elapsed > 750) break;
    14a4:	4543      	cmp	r3, r8
    14a6:	d9f4      	bls.n	1492 <setup_raw_io()+0xee>
    14a8:	e7be      	b.n	1428 <setup_raw_io()+0x84>
    14aa:	bf00      	nop
    14ac:	20000da8 	.word	0x20000da8
    14b0:	200038d8 	.word	0x200038d8
    14b4:	2000390c 	.word	0x2000390c
    14b8:	2000390b 	.word	0x2000390b
    14bc:	20002888 	.word	0x20002888
    14c0:	20002998 	.word	0x20002998
    14c4:	200038e8 	.word	0x200038e8

000014c8 <_GLOBAL__sub_I__ZN7logging22is_logging_enabled_forENS_8severityE>:
        : mSerial(inSerial)
    14c8:	4b22      	ldr	r3, [pc, #136]	; (1554 <_GLOBAL__sub_I__ZN7logging22is_logging_enabled_forENS_8severityE+0x8c>)
    14ca:	4923      	ldr	r1, [pc, #140]	; (1558 <_GLOBAL__sub_I__ZN7logging22is_logging_enabled_forENS_8severityE+0x90>)
MIDI_CREATE_INSTANCE(HardwareSerial, Serial1, MIDIA);
    14cc:	4823      	ldr	r0, [pc, #140]	; (155c <_GLOBAL__sub_I__ZN7logging22is_logging_enabled_forENS_8severityE+0x94>)

    if (SERIAL_AVAILABLE && is_logging_enabled_for(severity::DEBUG))
        { Serial.printf("@flush_to_logfile: SUCCESS: bytes_written=%d, time_taken=%lu(us)", bytes_written, static_cast<unsigned long>(elapsed)); }

    return true;
    14ce:	b570      	push	{r4, r5, r6, lr}
    14d0:	600b      	str	r3, [r1, #0]
    14d2:	f7ff ff07 	bl	12e4 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::MidiInterface(midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>&)>
    14d6:	4a22      	ldr	r2, [pc, #136]	; (1560 <_GLOBAL__sub_I__ZN7logging22is_logging_enabled_forENS_8severityE+0x98>)
    14d8:	4922      	ldr	r1, [pc, #136]	; (1564 <_GLOBAL__sub_I__ZN7logging22is_logging_enabled_forENS_8severityE+0x9c>)
    14da:	4820      	ldr	r0, [pc, #128]	; (155c <_GLOBAL__sub_I__ZN7logging22is_logging_enabled_forENS_8severityE+0x94>)
    14dc:	f00c f892 	bl	d604 <__aeabi_atexit>
    14e0:	4b21      	ldr	r3, [pc, #132]	; (1568 <_GLOBAL__sub_I__ZN7logging22is_logging_enabled_forENS_8severityE+0xa0>)
    14e2:	4922      	ldr	r1, [pc, #136]	; (156c <_GLOBAL__sub_I__ZN7logging22is_logging_enabled_forENS_8severityE+0xa4>)
    14e4:	4c22      	ldr	r4, [pc, #136]	; (1570 <_GLOBAL__sub_I__ZN7logging22is_logging_enabled_forENS_8severityE+0xa8>)
    14e6:	600b      	str	r3, [r1, #0]
MIDI_CREATE_INSTANCE(HardwareSerial, Serial2, MIDIB);
    14e8:	4822      	ldr	r0, [pc, #136]	; (1574 <_GLOBAL__sub_I__ZN7logging22is_logging_enabled_forENS_8severityE+0xac>)
    14ea:	f7ff fefb 	bl	12e4 <midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::MidiInterface(midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>&)>
    14ee:	491d      	ldr	r1, [pc, #116]	; (1564 <_GLOBAL__sub_I__ZN7logging22is_logging_enabled_forENS_8severityE+0x9c>)
    14f0:	4a1b      	ldr	r2, [pc, #108]	; (1560 <_GLOBAL__sub_I__ZN7logging22is_logging_enabled_forENS_8severityE+0x98>)
    14f2:	4820      	ldr	r0, [pc, #128]	; (1574 <_GLOBAL__sub_I__ZN7logging22is_logging_enabled_forENS_8severityE+0xac>)
    14f4:	f00c f886 	bl	d604 <__aeabi_atexit>
{

    // static constexpr uint8_t LED_ERROR_DESCRIPTOR_COUNT = 3;
    // using led_err_stack = err::err_stack<led_error, LED_ERROR_DESCRIPTOR_COUNT>;
    
    class LedsDriver
    14f8:	4623      	mov	r3, r4
    14fa:	f104 0030 	add.w	r0, r4, #48	; 0x30
                writer{nullptr}, prev{this}, next{this}, state{async_state::Idle}
    14fe:	2100      	movs	r1, #0
    1500:	6799      	str	r1, [r3, #120]	; 0x78
    1502:	f103 0278 	add.w	r2, r3, #120	; 0x78
    1506:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    150a:	3310      	adds	r3, #16
    150c:	4283      	cmp	r3, r0
    150e:	e9c3 221b 	strd	r2, r2, [r3, #108]	; 0x6c
    1512:	d1f5      	bne.n	1500 <_GLOBAL__sub_I__ZN7logging22is_logging_enabled_forENS_8severityE+0x38>
                static async_master m(MASTER, index);
    1514:	4e18      	ldr	r6, [pc, #96]	; (1578 <_GLOBAL__sub_I__ZN7logging22is_logging_enabled_forENS_8severityE+0xb0>)
	elapsedMicros(void) { us = micros(); }
    1516:	f00a f865 	bl	b5e4 <micros>
    151a:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
    151e:	6833      	ldr	r3, [r6, #0]
    1520:	07d9      	lsls	r1, r3, #31
    1522:	d401      	bmi.n	1528 <_GLOBAL__sub_I__ZN7logging22is_logging_enabled_forENS_8severityE+0x60>
    1524:	f7fe fdc4 	bl	b0 <hw::async::async_master& hw::async::async_master::get<Master>() [clone .part.0]>
    1528:	6833      	ldr	r3, [r6, #0]
};
    152a:	4c14      	ldr	r4, [pc, #80]	; (157c <_GLOBAL__sub_I__ZN7logging22is_logging_enabled_forENS_8severityE+0xb4>)
    152c:	4d14      	ldr	r5, [pc, #80]	; (1580 <_GLOBAL__sub_I__ZN7logging22is_logging_enabled_forENS_8severityE+0xb8>)
    152e:	07da      	lsls	r2, r3, #31
    1530:	6025      	str	r5, [r4, #0]
    1532:	d401      	bmi.n	1538 <_GLOBAL__sub_I__ZN7logging22is_logging_enabled_forENS_8severityE+0x70>
    1534:	f7fe fdbc 	bl	b0 <hw::async::async_master& hw::async::async_master::get<Master>() [clone .part.0]>
    1538:	6833      	ldr	r3, [r6, #0]
    153a:	60a5      	str	r5, [r4, #8]
    153c:	07db      	lsls	r3, r3, #31
    153e:	d401      	bmi.n	1544 <_GLOBAL__sub_I__ZN7logging22is_logging_enabled_forENS_8severityE+0x7c>
    1540:	f7fe fdb6 	bl	b0 <hw::async::async_master& hw::async::async_master::get<Master>() [clone .part.0]>
        static constexpr const size_type MaxSize = Size;

        value_type datas[MaxSize];
        size_type size;

        explicit fixed_size_set(value_type val): datas{{val}}, size{0}
    1544:	4b0f      	ldr	r3, [pc, #60]	; (1584 <_GLOBAL__sub_I__ZN7logging22is_logging_enabled_forENS_8severityE+0xbc>)
    1546:	2200      	movs	r2, #0
    1548:	6125      	str	r5, [r4, #16]
    154a:	609a      	str	r2, [r3, #8]
    154c:	731a      	strb	r2, [r3, #12]
    154e:	e9c3 2200 	strd	r2, r2, [r3]
    1552:	bd70      	pop	{r4, r5, r6, pc}
    1554:	20001a80 	.word	0x20001a80
    1558:	200038cc 	.word	0x200038cc
    155c:	20002888 	.word	0x20002888
    1560:	20001bc0 	.word	0x20001bc0
    1564:	00000085 	.word	0x00000085
    1568:	20001ae0 	.word	0x20001ae0
    156c:	200038d0 	.word	0x200038d0
    1570:	20003434 	.word	0x20003434
    1574:	20002998 	.word	0x20002998
    1578:	200032d4 	.word	0x200032d4
    157c:	20001ba0 	.word	0x20001ba0
    1580:	20003508 	.word	0x20003508
    1584:	20003830 	.word	0x20003830

00001588 <hw::LedsDriver::setup(unsigned long, unsigned long)>:
{
    1588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    158c:	b0db      	sub	sp, #364	; 0x16c
    158e:	4613      	mov	r3, r2
    async_write  addr_poll[MCP_COUNT]       = {0};
    1590:	2230      	movs	r2, #48	; 0x30
{
    1592:	9307      	str	r3, [sp, #28]
    1594:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
    async_write  addr_poll[MCP_COUNT]       = {0};
    1598:	2100      	movs	r1, #0
    159a:	a812      	add	r0, sp, #72	; 0x48
    159c:	f00c fc76 	bl	de8c <memset>
    async_write  iocons[MCP_COUNT]          = {0};
    15a0:	2230      	movs	r2, #48	; 0x30
    15a2:	2100      	movs	r1, #0
    15a4:	a81e      	add	r0, sp, #120	; 0x78
    15a6:	f00c fc71 	bl	de8c <memset>
    async_write  iodirs[MCP_COUNT]          = {0};
    15aa:	2230      	movs	r2, #48	; 0x30
    15ac:	2100      	movs	r1, #0
    15ae:	a82a      	add	r0, sp, #168	; 0xa8
    15b0:	f00c fc6c 	bl	de8c <memset>
    write_queue  wnodes[WRITE_NODES_COUNT];
    15b4:	ab36      	add	r3, sp, #216	; 0xd8
    15b6:	aa5a      	add	r2, sp, #360	; 0x168
                writer{nullptr}, prev{this}, next{this}, state{async_state::Idle}
    15b8:	2100      	movs	r1, #0
    15ba:	9309      	str	r3, [sp, #36]	; 0x24
    15bc:	e9c3 1300 	strd	r1, r3, [r3]
    15c0:	e9c3 3102 	strd	r3, r1, [r3, #8]
    15c4:	3310      	adds	r3, #16
    15c6:	4293      	cmp	r3, r2
    15c8:	d1f8      	bne.n	15bc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x34>
    tmp_buffer[0] = static_cast<uint8_t>(mcp23017::registers::IODIRA);
    15ca:	4a52      	ldr	r2, [pc, #328]	; (1714 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x18c>)
    Master.write_async(mcp23017::MCP_BASE_ADDR+3, tmp_buffer, 2, true);
    15cc:	2301      	movs	r3, #1
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    15ce:	4e52      	ldr	r6, [pc, #328]	; (1718 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x190>)
    tmp_buffer[0] = static_cast<uint8_t>(mcp23017::registers::IODIRA);
    15d0:	8011      	strh	r1, [r2, #0]
    Master.write_async(mcp23017::MCP_BASE_ADDR+3, tmp_buffer, 2, true);
    15d2:	2123      	movs	r1, #35	; 0x23
    15d4:	4851      	ldr	r0, [pc, #324]	; (171c <hw::LedsDriver::setup(unsigned long, unsigned long)+0x194>)
    15d6:	9300      	str	r3, [sp, #0]
    15d8:	2302      	movs	r3, #2
    15da:	f009 f9a9 	bl	a930 <IMX_RT1060_I2CMaster::write_async(unsigned char, unsigned char const*, unsigned int, bool)>
		yield();
    15de:	f00b fb11 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    15e2:	7833      	ldrb	r3, [r6, #0]
    15e4:	b123      	cbz	r3, 15f0 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x68>
    15e6:	4b4e      	ldr	r3, [pc, #312]	; (1720 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x198>)
    15e8:	781b      	ldrb	r3, [r3, #0]
    15ea:	07dd      	lsls	r5, r3, #31
    15ec:	f100 838c 	bmi.w	1d08 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x780>
    15f0:	4b4c      	ldr	r3, [pc, #304]	; (1724 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x19c>)
    15f2:	9304      	str	r3, [sp, #16]
    LEDS_GPRINTLN("Creating Queues");
    15f4:	f8df a144 	ldr.w	sl, [pc, #324]	; 173c <hw::LedsDriver::setup(unsigned long, unsigned long)+0x1b4>
    15f8:	f89a 7000 	ldrb.w	r7, [sl]
    15fc:	2200      	movs	r2, #0
    15fe:	ab0e      	add	r3, sp, #56	; 0x38
    1600:	f10d 0878 	add.w	r8, sp, #120	; 0x78
    1604:	f10d 0ba8 	add.w	fp, sp, #168	; 0xa8
    _targeted_masters = masters_set(nullptr);
    1608:	920e      	str	r2, [sp, #56]	; 0x38
    160a:	f10d 0948 	add.w	r9, sp, #72	; 0x48
    160e:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
    1612:	ac36      	add	r4, sp, #216	; 0xd8
    1614:	9206      	str	r2, [sp, #24]
    1616:	4d44      	ldr	r5, [pc, #272]	; (1728 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x1a0>)
    1618:	f8cd a020 	str.w	sl, [sp, #32]
    161c:	e9cd 220f 	strd	r2, r2, [sp, #60]	; 0x3c
    1620:	4a42      	ldr	r2, [pc, #264]	; (172c <hw::LedsDriver::setup(unsigned long, unsigned long)+0x1a4>)
    1622:	920a      	str	r2, [sp, #40]	; 0x28
    1624:	9205      	str	r2, [sp, #20]
    1626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1628:	c507      	stmia	r5!, {r0, r1, r2}
    162a:	463a      	mov	r2, r7
    162c:	702b      	strb	r3, [r5, #0]
    162e:	4647      	mov	r7, r8
    1630:	465d      	mov	r5, fp
        addr_poll[i] = async_address_poll(MCP_DEVICES[i], true);
    1632:	4b3f      	ldr	r3, [pc, #252]	; (1730 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x1a8>)
    1634:	f04f 0800 	mov.w	r8, #0
                this->writer = writer;
    1638:	f8c4 9000 	str.w	r9, [r4]
    163c:	f8c9 3004 	str.w	r3, [r9, #4]
        iocons[i] = async_setup_iocon(MCP_DEVICES[i], true);
    1640:	4b3c      	ldr	r3, [pc, #240]	; (1734 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x1ac>)
    1642:	6127      	str	r7, [r4, #16]
    1644:	607b      	str	r3, [r7, #4]
        iodirs[i] = async_setup_iodir(MCP_DEVICES[i], true);
    1646:	4b3c      	ldr	r3, [pc, #240]	; (1738 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x1b0>)
    1648:	6225      	str	r5, [r4, #32]
    164a:	606b      	str	r3, [r5, #4]
    return { .address=dev.address, .buffer=buffer, .num_bytes=0, .send_stop=send_stop };
    164c:	9b05      	ldr	r3, [sp, #20]
        addr_poll[i] = async_address_poll(MCP_DEVICES[i], true);
    164e:	f8c9 8008 	str.w	r8, [r9, #8]
    return { .address=dev.address, .buffer=buffer, .num_bytes=0, .send_stop=send_stop };
    1652:	791b      	ldrb	r3, [r3, #4]
                this->state = async_state::Idle;
    1654:	f8c4 800c 	str.w	r8, [r4, #12]
        addr_poll[i] = async_address_poll(MCP_DEVICES[i], true);
    1658:	f889 3000 	strb.w	r3, [r9]
        iocons[i] = async_setup_iocon(MCP_DEVICES[i], true);
    165c:	703b      	strb	r3, [r7, #0]
        iodirs[i] = async_setup_iodir(MCP_DEVICES[i], true);
    165e:	702b      	strb	r3, [r5, #0]
        addr_poll[i] = async_address_poll(MCP_DEVICES[i], true);
    1660:	2301      	movs	r3, #1
    1662:	f8c4 801c 	str.w	r8, [r4, #28]
    1666:	f889 300c 	strb.w	r3, [r9, #12]
        iocons[i] = async_setup_iocon(MCP_DEVICES[i], true);
    166a:	733b      	strb	r3, [r7, #12]
        iodirs[i] = async_setup_iodir(MCP_DEVICES[i], true);
    166c:	732b      	strb	r3, [r5, #12]
        iocons[i] = async_setup_iocon(MCP_DEVICES[i], true);
    166e:	2302      	movs	r3, #2
    1670:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    1674:	60bb      	str	r3, [r7, #8]
        iodirs[i] = async_setup_iodir(MCP_DEVICES[i], true);
    1676:	2303      	movs	r3, #3
    1678:	60ab      	str	r3, [r5, #8]
        LEDS_IFG(
    167a:	2a00      	cmp	r2, #0
    167c:	f040 820c 	bne.w	1a98 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x510>
    1680:	f104 0a10 	add.w	sl, r4, #16
    1684:	f104 0820 	add.w	r8, r4, #32
        MCP_DEVICES[i].master.push(wnodes + base_indexof(i) +0);
    1688:	9b05      	ldr	r3, [sp, #20]
                if (node->is_anchor())
    168a:	6821      	ldr	r1, [r4, #0]
    168c:	681b      	ldr	r3, [r3, #0]
                { wqueue.push(node); }
    168e:	1d1a      	adds	r2, r3, #4
                if (node->is_anchor())
    1690:	2900      	cmp	r1, #0
    1692:	f000 8295 	beq.w	1bc0 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x638>
                    write_queue* current_last = prev;
    1696:	6899      	ldr	r1, [r3, #8]
                    prev->next = node;
    1698:	608c      	str	r4, [r1, #8]
                    node->prev->next = this;
    169a:	6860      	ldr	r0, [r4, #4]
    169c:	6082      	str	r2, [r0, #8]
                    prev = node->prev;
    169e:	6098      	str	r0, [r3, #8]
                    node->prev = current_last;
    16a0:	6061      	str	r1, [r4, #4]
                if (node->is_anchor())
    16a2:	6921      	ldr	r1, [r4, #16]
    16a4:	2900      	cmp	r1, #0
    16a6:	f000 829f 	beq.w	1be8 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x660>
                    write_queue* current_last = prev;
    16aa:	6899      	ldr	r1, [r3, #8]
                    prev->next = node;
    16ac:	f8c1 a008 	str.w	sl, [r1, #8]
                    node->prev->next = this;
    16b0:	6960      	ldr	r0, [r4, #20]
    16b2:	6082      	str	r2, [r0, #8]
                    prev = node->prev;
    16b4:	6098      	str	r0, [r3, #8]
                    node->prev = current_last;
    16b6:	6161      	str	r1, [r4, #20]
                if (node->is_anchor())
    16b8:	6a21      	ldr	r1, [r4, #32]
    16ba:	2900      	cmp	r1, #0
    16bc:	f000 82a8 	beq.w	1c10 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x688>
                    write_queue* current_last = prev;
    16c0:	6899      	ldr	r1, [r3, #8]
                    prev->next = node;
    16c2:	f8c1 8008 	str.w	r8, [r1, #8]
                    node->prev->next = this;
    16c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    16c8:	6082      	str	r2, [r0, #8]
                    prev = node->prev;
    16ca:	6098      	str	r0, [r3, #8]
                    node->prev = current_last;
    16cc:	6261      	str	r1, [r4, #36]	; 0x24
            {}

        bool is_full() const
            { return MaxSize <= size; }
    16ce:	4816      	ldr	r0, [pc, #88]	; (1728 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x1a0>)
    16d0:	7b02      	ldrb	r2, [r0, #12]
        
        bool add(value_type val)
        {
            if (is_full())
    16d2:	2a02      	cmp	r2, #2
    16d4:	d80d      	bhi.n	16f2 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x16a>
                { return false; }

            for (size_type i=0; i<size; ++i)
    16d6:	b13a      	cbz	r2, 16e8 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x160>
            {
                if (datas[i] == val)
    16d8:	6801      	ldr	r1, [r0, #0]
    16da:	428b      	cmp	r3, r1
    16dc:	d009      	beq.n	16f2 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x16a>
            for (size_type i=0; i<size; ++i)
    16de:	2a02      	cmp	r2, #2
    16e0:	d102      	bne.n	16e8 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x160>
                if (datas[i] == val)
    16e2:	6841      	ldr	r1, [r0, #4]
    16e4:	428b      	cmp	r3, r1
    16e6:	d004      	beq.n	16f2 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x16a>
                    { return false; }
            }

            datas[size] = val;
    16e8:	490f      	ldr	r1, [pc, #60]	; (1728 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x1a0>)
    16ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
            size += 1;
    16ee:	3201      	adds	r2, #1
    16f0:	730a      	strb	r2, [r1, #12]
    for (mcp_count_type i=0; i<MCP_COUNT; ++i)
    16f2:	9b06      	ldr	r3, [sp, #24]
    16f4:	f109 0910 	add.w	r9, r9, #16
    16f8:	9a05      	ldr	r2, [sp, #20]
    16fa:	3710      	adds	r7, #16
    16fc:	3301      	adds	r3, #1
    16fe:	3510      	adds	r5, #16
    1700:	3208      	adds	r2, #8
    1702:	3430      	adds	r4, #48	; 0x30
    1704:	2b03      	cmp	r3, #3
    1706:	9306      	str	r3, [sp, #24]
    1708:	9205      	str	r2, [sp, #20]
    170a:	d019      	beq.n	1740 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x1b8>
        LEDS_IFG(
    170c:	9b08      	ldr	r3, [sp, #32]
    170e:	781a      	ldrb	r2, [r3, #0]
    1710:	e78f      	b.n	1632 <hw::LedsDriver::setup(unsigned long, unsigned long)+0xaa>
    1712:	bf00      	nop
    1714:	20003500 	.word	0x20003500
    1718:	2000390c 	.word	0x2000390c
    171c:	20002aa8 	.word	0x20002aa8
    1720:	2000390b 	.word	0x2000390b
    1724:	200038d8 	.word	0x200038d8
    1728:	20003830 	.word	0x20003830
    172c:	20001ba0 	.word	0x20001ba0
    1730:	200034f8 	.word	0x200034f8
    1734:	200010f0 	.word	0x200010f0
    1738:	200010f4 	.word	0x200010f4
    173c:	200022a7 	.word	0x200022a7
		yield();
    1740:	f8dd a020 	ldr.w	sl, [sp, #32]
    1744:	f00b fa5e 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1748:	7833      	ldrb	r3, [r6, #0]
    174a:	2b00      	cmp	r3, #0
    174c:	f000 815c 	beq.w	1a08 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x480>
    1750:	4ba0      	ldr	r3, [pc, #640]	; (19d4 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x44c>)
    1752:	781b      	ldrb	r3, [r3, #0]
    1754:	07dc      	lsls	r4, r3, #31
    1756:	f140 8157 	bpl.w	1a08 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x480>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    175a:	4a9f      	ldr	r2, [pc, #636]	; (19d8 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x450>)
    175c:	9b04      	ldr	r3, [sp, #16]
    175e:	681b      	ldr	r3, [r3, #0]
    1760:	6812      	ldr	r2, [r2, #0]
    1762:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1764:	2b0e      	cmp	r3, #14
    1766:	f240 814f 	bls.w	1a08 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x480>
    SHOW_MASTERS(_targeted_masters);
    176a:	f89a 3000 	ldrb.w	r3, [sl]
    176e:	2b00      	cmp	r3, #0
    1770:	f040 8146 	bne.w	1a00 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x478>
		yield();
    1774:	f00b fa46 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1778:	7833      	ldrb	r3, [r6, #0]
    177a:	b123      	cbz	r3, 1786 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x1fe>
    177c:	4b95      	ldr	r3, [pc, #596]	; (19d4 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x44c>)
    177e:	781b      	ldrb	r3, [r3, #0]
    1780:	07d8      	lsls	r0, r3, #31
    1782:	f100 8283 	bmi.w	1c8c <hw::LedsDriver::setup(unsigned long, unsigned long)+0x704>
    1786:	9b04      	ldr	r3, [sp, #16]
    1788:	681a      	ldr	r2, [r3, #0]
    178a:	681b      	ldr	r3, [r3, #0]
    178c:	9206      	str	r2, [sp, #24]
	operator unsigned long () const { return millis() - ms; }
    178e:	1a9b      	subs	r3, r3, r2
    while (elapsed < timeout_ms && !all_masters_ok)
    1790:	9a07      	ldr	r2, [sp, #28]
    1792:	429a      	cmp	r2, r3
    1794:	f240 80e3 	bls.w	195e <hw::LedsDriver::setup(unsigned long, unsigned long)+0x3d6>
    1798:	4f90      	ldr	r7, [pc, #576]	; (19dc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x454>)
    179a:	46b8      	mov	r8, r7
		yield();
    179c:	f00b fa32 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    17a0:	7833      	ldrb	r3, [r6, #0]
    17a2:	b17b      	cbz	r3, 17c4 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x23c>
    17a4:	4b8b      	ldr	r3, [pc, #556]	; (19d4 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x44c>)
    17a6:	781b      	ldrb	r3, [r3, #0]
    17a8:	07d8      	lsls	r0, r3, #31
    17aa:	d50b      	bpl.n	17c4 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x23c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    17ac:	9b04      	ldr	r3, [sp, #16]
    17ae:	4a8a      	ldr	r2, [pc, #552]	; (19d8 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x450>)
    17b0:	681b      	ldr	r3, [r3, #0]
    17b2:	6812      	ldr	r2, [r2, #0]
    17b4:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    17b6:	2b0e      	cmp	r3, #14
    17b8:	d904      	bls.n	17c4 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x23c>
        LEDS_GPRINTF("Elapsed: %lu", static_cast<unsigned long int>(elapsed));
    17ba:	f89a 3000 	ldrb.w	r3, [sl]
    17be:	2b00      	cmp	r3, #0
    17c0:	f040 8234 	bne.w	1c2c <hw::LedsDriver::setup(unsigned long, unsigned long)+0x6a4>
    17c4:	4f86      	ldr	r7, [pc, #536]	; (19e0 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x458>)
    SHOW_MASTERS(_targeted_masters);
    17c6:	f04f 0901 	mov.w	r9, #1
        for (auto master: _targeted_masters.datas)
    17ca:	f857 4b04 	ldr.w	r4, [r7], #4
            if (nullptr == master)
    17ce:	2c00      	cmp	r4, #0
    17d0:	f000 80a7 	beq.w	1922 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x39a>
		yield();
    17d4:	f00b fa16 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    17d8:	7833      	ldrb	r3, [r6, #0]
    17da:	b17b      	cbz	r3, 17fc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x274>
    17dc:	4b7d      	ldr	r3, [pc, #500]	; (19d4 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x44c>)
    17de:	781b      	ldrb	r3, [r3, #0]
    17e0:	07d9      	lsls	r1, r3, #31
    17e2:	d50b      	bpl.n	17fc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x274>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    17e4:	9b04      	ldr	r3, [sp, #16]
    17e6:	4a7c      	ldr	r2, [pc, #496]	; (19d8 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x450>)
    17e8:	681b      	ldr	r3, [r3, #0]
    17ea:	6812      	ldr	r2, [r2, #0]
    17ec:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    17ee:	2b0e      	cmp	r3, #14
    17f0:	d904      	bls.n	17fc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x274>
            LEDS_GPRINT_RAW("\tbus=%u ... ", master->id())
    17f2:	f89a 3000 	ldrb.w	r3, [sl]
    17f6:	2b00      	cmp	r3, #0
    17f8:	f040 811d 	bne.w	1a36 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x4ae>
                { return wqueue.oldest(); }
    17fc:	1d25      	adds	r5, r4, #4
                { return next == this; }
    17fe:	68e3      	ldr	r3, [r4, #12]
            if (master->next_call() == nullptr)
    1800:	2b00      	cmp	r3, #0
    1802:	bf18      	it	ne
    1804:	429d      	cmpne	r5, r3
    1806:	f000 808c 	beq.w	1922 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x39a>
            I2CError errno = master->update();
    180a:	4620      	mov	r0, r4
    180c:	f7ff f8f6 	bl	9fc <hw::async::async_master::update()>
    1810:	4683      	mov	fp, r0
		yield();
    1812:	f00b f9f7 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1816:	7832      	ldrb	r2, [r6, #0]
    1818:	b17a      	cbz	r2, 183a <hw::LedsDriver::setup(unsigned long, unsigned long)+0x2b2>
    181a:	4b6e      	ldr	r3, [pc, #440]	; (19d4 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x44c>)
    181c:	781a      	ldrb	r2, [r3, #0]
    181e:	07d2      	lsls	r2, r2, #31
    1820:	d50b      	bpl.n	183a <hw::LedsDriver::setup(unsigned long, unsigned long)+0x2b2>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1822:	9b04      	ldr	r3, [sp, #16]
    1824:	681a      	ldr	r2, [r3, #0]
    1826:	4b6c      	ldr	r3, [pc, #432]	; (19d8 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x450>)
    1828:	6819      	ldr	r1, [r3, #0]
    182a:	1a52      	subs	r2, r2, r1
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    182c:	2a0e      	cmp	r2, #14
    182e:	d904      	bls.n	183a <hw::LedsDriver::setup(unsigned long, unsigned long)+0x2b2>
            LEDS_GPRINTF("Returned errno: %u ... ", static_cast<uint8_t>(errno));
    1830:	f89a 2000 	ldrb.w	r2, [sl]
    1834:	2a00      	cmp	r2, #0
    1836:	f040 8104 	bne.w	1a42 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x4ba>
                if (errno == I2CError::master_not_ready)
    183a:	f1bb 0f00 	cmp.w	fp, #0
    183e:	bf18      	it	ne
    1840:	f1bb 0f06 	cmpne.w	fp, #6
    1844:	bf0c      	ite	eq
    1846:	f04f 0901 	moveq.w	r9, #1
    184a:	f04f 0900 	movne.w	r9, #0
    184e:	f000 80ef 	beq.w	1a30 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x4a8>
            switch (err)
    1852:	f1bb 0f0b 	cmp.w	fp, #11
    1856:	d805      	bhi.n	1864 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x2dc>
    1858:	f640 5283 	movw	r2, #3459	; 0xd83
    185c:	fa22 f30b 	lsr.w	r3, r2, fp
    1860:	07db      	lsls	r3, r3, #31
    1862:	d45e      	bmi.n	1922 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x39a>
		yield();
    1864:	f00b f9ce 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1868:	7833      	ldrb	r3, [r6, #0]
    186a:	b17b      	cbz	r3, 188c <hw::LedsDriver::setup(unsigned long, unsigned long)+0x304>
    186c:	4b59      	ldr	r3, [pc, #356]	; (19d4 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x44c>)
    186e:	781b      	ldrb	r3, [r3, #0]
    1870:	07d8      	lsls	r0, r3, #31
    1872:	d50b      	bpl.n	188c <hw::LedsDriver::setup(unsigned long, unsigned long)+0x304>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1874:	9b04      	ldr	r3, [sp, #16]
    1876:	4a58      	ldr	r2, [pc, #352]	; (19d8 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x450>)
    1878:	681b      	ldr	r3, [r3, #0]
    187a:	6812      	ldr	r2, [r2, #0]
    187c:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    187e:	2b0e      	cmp	r3, #14
    1880:	d904      	bls.n	188c <hw::LedsDriver::setup(unsigned long, unsigned long)+0x304>
                        LEDS_GPRINT_RAW("Unrecoverable error: ");
    1882:	f89a 3000 	ldrb.w	r3, [sl]
    1886:	2b00      	cmp	r3, #0
    1888:	f040 80e2 	bne.w	1a50 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x4c8>
                { return next == this; }
    188c:	68e4      	ldr	r4, [r4, #12]
                        const size_t node_offset = bad_write - wnodes;
    188e:	ab36      	add	r3, sp, #216	; 0xd8
                { return is_empty() ? nullptr : next; }
    1890:	42a5      	cmp	r5, r4
    1892:	f000 80e6 	beq.w	1a62 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x4da>
    1896:	1ae3      	subs	r3, r4, r3
                        const size_t mcp_index = node_offset / PER_DEV_MSGS_COUNT;
    1898:	4a52      	ldr	r2, [pc, #328]	; (19e4 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x45c>)
                        const size_t node_offset = bad_write - wnodes;
    189a:	111b      	asrs	r3, r3, #4
                        const size_t mcp_index = node_offset / PER_DEV_MSGS_COUNT;
    189c:	fba2 2503 	umull	r2, r5, r2, r3
    18a0:	086d      	lsrs	r5, r5, #1
                        if (
    18a2:	2c00      	cmp	r4, #0
    18a4:	f000 81cb 	beq.w	1c3e <hw::LedsDriver::setup(unsigned long, unsigned long)+0x6b6>
                            || bad_write < wnodes+0
    18a8:	aa36      	add	r2, sp, #216	; 0xd8
    18aa:	4294      	cmp	r4, r2
    18ac:	aa5a      	add	r2, sp, #360	; 0x168
    18ae:	bf2c      	ite	cs
    18b0:	f04f 0900 	movcs.w	r9, #0
    18b4:	f04f 0901 	movcc.w	r9, #1
    18b8:	4294      	cmp	r4, r2
    18ba:	bf28      	it	cs
    18bc:	f049 0901 	orrcs.w	r9, r9, #1
                            || wnodes+WRITE_NODES_COUNT <= bad_write
    18c0:	f1b9 0f00 	cmp.w	r9, #0
    18c4:	f040 81bb 	bne.w	1c3e <hw::LedsDriver::setup(unsigned long, unsigned long)+0x6b6>
		yield();
    18c8:	9305      	str	r3, [sp, #20]
    18ca:	f00b f99b 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    18ce:	7832      	ldrb	r2, [r6, #0]
    18d0:	9b05      	ldr	r3, [sp, #20]
    18d2:	b17a      	cbz	r2, 18f4 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x36c>
    18d4:	4a3f      	ldr	r2, [pc, #252]	; (19d4 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x44c>)
    18d6:	7812      	ldrb	r2, [r2, #0]
    18d8:	07d2      	lsls	r2, r2, #31
    18da:	d50b      	bpl.n	18f4 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x36c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    18dc:	9a04      	ldr	r2, [sp, #16]
    18de:	493e      	ldr	r1, [pc, #248]	; (19d8 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x450>)
    18e0:	6812      	ldr	r2, [r2, #0]
    18e2:	6809      	ldr	r1, [r1, #0]
    18e4:	1a52      	subs	r2, r2, r1
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    18e6:	2a0e      	cmp	r2, #14
    18e8:	d904      	bls.n	18f4 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x36c>
                        LEDS_GPRINT_RAW("Abort transaction for mcp=%lu", mcp_index);
    18ea:	f89a 2000 	ldrb.w	r2, [sl]
    18ee:	2a00      	cmp	r2, #0
    18f0:	f040 80cb 	bne.w	1a8a <hw::LedsDriver::setup(unsigned long, unsigned long)+0x502>
                        for (size_t i=node_offset; i<base_indexof(mcp_index+1); ++i)
    18f4:	1c68      	adds	r0, r5, #1
        { return PER_DEV_MSGS_COUNT * mcp; };
    18f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    18fa:	b2c0      	uxtb	r0, r0
                        for (size_t i=node_offset; i<base_indexof(mcp_index+1); ++i)
    18fc:	4283      	cmp	r3, r0
    18fe:	d20b      	bcs.n	1918 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x390>
    1900:	ab36      	add	r3, sp, #216	; 0xd8
    1902:	eb03 1000 	add.w	r0, r3, r0, lsl #4
                prev->next = next;
    1906:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    190a:	6093      	str	r3, [r2, #8]
                next->prev = prev;
    190c:	605a      	str	r2, [r3, #4]
                next = prev = this;
    190e:	e9c4 4401 	strd	r4, r4, [r4, #4]
    1912:	3410      	adds	r4, #16
    1914:	42a0      	cmp	r0, r4
    1916:	d1f6      	bne.n	1906 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x37e>
                        MCP_DEVICES[mcp_index].status = async_device::state::Failed;
    1918:	4b33      	ldr	r3, [pc, #204]	; (19e8 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x460>)
    191a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    191e:	2302      	movs	r3, #2
    1920:	716b      	strb	r3, [r5, #5]
        for (auto master: _targeted_masters.datas)
    1922:	45b8      	cmp	r8, r7
    1924:	f47f af51 	bne.w	17ca <hw::LedsDriver::setup(unsigned long, unsigned long)+0x242>
// Wait for a number of microseconds.  During this time, interrupts remain
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1928:	4930      	ldr	r1, [pc, #192]	; (19ec <hw::LedsDriver::setup(unsigned long, unsigned long)+0x464>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    192a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    192e:	4a30      	ldr	r2, [pc, #192]	; (19f0 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x468>)
	uint32_t begin = ARM_DWT_CYCCNT;
    1930:	6848      	ldr	r0, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1932:	4c30      	ldr	r4, [pc, #192]	; (19f4 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x46c>)
    1934:	6812      	ldr	r2, [r2, #0]
    1936:	fba4 4202 	umull	r4, r2, r4, r2
    193a:	0c92      	lsrs	r2, r2, #18
    193c:	fb03 f202 	mul.w	r2, r3, r2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1940:	684b      	ldr	r3, [r1, #4]
    1942:	1a1b      	subs	r3, r3, r0
    1944:	429a      	cmp	r2, r3
    1946:	d8fb      	bhi.n	1940 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x3b8>
	return systick_millis_count;
    1948:	9b04      	ldr	r3, [sp, #16]
    194a:	9a06      	ldr	r2, [sp, #24]
    194c:	681b      	ldr	r3, [r3, #0]
    194e:	1a9b      	subs	r3, r3, r2
    while (elapsed < timeout_ms && !all_masters_ok)
    1950:	9a07      	ldr	r2, [sp, #28]
    1952:	429a      	cmp	r2, r3
    1954:	d903      	bls.n	195e <hw::LedsDriver::setup(unsigned long, unsigned long)+0x3d6>
    1956:	f1b9 0f00 	cmp.w	r9, #0
    195a:	f43f af1f 	beq.w	179c <hw::LedsDriver::setup(unsigned long, unsigned long)+0x214>
                { all_masters_ok = false; }
    195e:	2700      	movs	r7, #0
    1960:	2401      	movs	r4, #1
    1962:	f8df 9070 	ldr.w	r9, [pc, #112]	; 19d4 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x44c>
                LEDS_GPRINTF("Device succesfully initialised on bus=%u addr=%x", device.master.id(), device.address);
    1966:	9705      	str	r7, [sp, #20]
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1968:	f8df 806c 	ldr.w	r8, [pc, #108]	; 19d8 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x450>
    196c:	f8df b08c 	ldr.w	fp, [pc, #140]	; 19fc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x474>
    1970:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    1972:	9f09      	ldr	r7, [sp, #36]	; 0x24
    1974:	f8cd a018 	str.w	sl, [sp, #24]
        if (device.status == async::async_device::state::Failed)
    1978:	f895 a005 	ldrb.w	sl, [r5, #5]
    197c:	f1ba 0f02 	cmp.w	sl, #2
    1980:	f000 824e 	beq.w	1e20 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x898>
                { return state; }
    1984:	f8d7 a02c 	ldr.w	sl, [r7, #44]	; 0x2c
        else if (auto status=wnodes[base_indexof(i+1)-1].status(); status != async::async_state::Finished)
    1988:	f1ba 0f02 	cmp.w	sl, #2
    198c:	f000 822c 	beq.w	1de8 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x860>
		yield();
    1990:	f00b f938 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1994:	7833      	ldrb	r3, [r6, #0]
    1996:	2b00      	cmp	r3, #0
    1998:	f040 81d0 	bne.w	1d3c <hw::LedsDriver::setup(unsigned long, unsigned long)+0x7b4>
                errno = err::errcode::TIMEOUT_ERROR;
    199c:	f04f 0a02 	mov.w	sl, #2
    19a0:	f8cd a014 	str.w	sl, [sp, #20]
    for (hw::mcp_count_type i=0; i<MCP_COUNT; ++i)
    19a4:	3401      	adds	r4, #1
                device.status = async::async_device::state::Failed;
    19a6:	f885 a005 	strb.w	sl, [r5, #5]
    for (hw::mcp_count_type i=0; i<MCP_COUNT; ++i)
    19aa:	3730      	adds	r7, #48	; 0x30
    19ac:	3508      	adds	r5, #8
    19ae:	b2e4      	uxtb	r4, r4
    19b0:	2c04      	cmp	r4, #4
    19b2:	d1e1      	bne.n	1978 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x3f0>
    clear_all();
    19b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    19b6:	9f05      	ldr	r7, [sp, #20]
    19b8:	4620      	mov	r0, r4
    19ba:	f7ff fb07 	bl	fcc <hw::LedsDriver::clear_all()>
    _refresh_period = 1'000'000 / refresh_rate;
    19be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    19c0:	4b0d      	ldr	r3, [pc, #52]	; (19f8 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x470>)
}
    19c2:	4638      	mov	r0, r7
    _refresh_period = 1'000'000 / refresh_rate;
    19c4:	fbb3 f3f2 	udiv	r3, r3, r2
    19c8:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
    19cc:	b05b      	add	sp, #364	; 0x16c
    19ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19d2:	bf00      	nop
    19d4:	2000390b 	.word	0x2000390b
    19d8:	200038e8 	.word	0x200038e8
    19dc:	2000383c 	.word	0x2000383c
    19e0:	20003830 	.word	0x20003830
    19e4:	aaaaaaab 	.word	0xaaaaaaab
    19e8:	20001ba0 	.word	0x20001ba0
    19ec:	e0001000 	.word	0xe0001000
    19f0:	20001a1c 	.word	0x20001a1c
    19f4:	431bde83 	.word	0x431bde83
    19f8:	000f4240 	.word	0x000f4240
    19fc:	2000098c 	.word	0x2000098c
    SHOW_MASTERS(_targeted_masters);
    1a00:	49ad      	ldr	r1, [pc, #692]	; (1cb8 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x730>)
    1a02:	48ae      	ldr	r0, [pc, #696]	; (1cbc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x734>)
    1a04:	f009 fb68 	bl	b0d8 <Print::printf(char const*, ...)>
    1a08:	f89a 3000 	ldrb.w	r3, [sl]
    1a0c:	2b00      	cmp	r3, #0
    1a0e:	f43f aeb1 	beq.w	1774 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x1ec>
    1a12:	4cab      	ldr	r4, [pc, #684]	; (1cc0 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x738>)
    1a14:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 1d04 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x77c>
    1a18:	4da8      	ldr	r5, [pc, #672]	; (1cbc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x734>)
    1a1a:	f104 070c 	add.w	r7, r4, #12
    1a1e:	f854 2b04 	ldr.w	r2, [r4], #4
    1a22:	4641      	mov	r1, r8
    1a24:	4628      	mov	r0, r5
    1a26:	f009 fb57 	bl	b0d8 <Print::printf(char const*, ...)>
    1a2a:	42bc      	cmp	r4, r7
    1a2c:	d1f7      	bne.n	1a1e <hw::LedsDriver::setup(unsigned long, unsigned long)+0x496>
    1a2e:	e6a1      	b.n	1774 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x1ec>
                { all_masters_ok = false; }
    1a30:	f04f 0900 	mov.w	r9, #0
    1a34:	e775      	b.n	1922 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x39a>
            LEDS_GPRINT_RAW("\tbus=%u ... ", master->id())
    1a36:	7d22      	ldrb	r2, [r4, #20]
    1a38:	49a2      	ldr	r1, [pc, #648]	; (1cc4 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x73c>)
    1a3a:	48a0      	ldr	r0, [pc, #640]	; (1cbc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x734>)
    1a3c:	f009 fb4c 	bl	b0d8 <Print::printf(char const*, ...)>
    1a40:	e6dc      	b.n	17fc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x274>
            LEDS_GPRINTF("Returned errno: %u ... ", static_cast<uint8_t>(errno));
    1a42:	fa5f f28b 	uxtb.w	r2, fp
    1a46:	49a0      	ldr	r1, [pc, #640]	; (1cc8 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x740>)
    1a48:	489c      	ldr	r0, [pc, #624]	; (1cbc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x734>)
    1a4a:	f009 fb45 	bl	b0d8 <Print::printf(char const*, ...)>
    1a4e:	e6f4      	b.n	183a <hw::LedsDriver::setup(unsigned long, unsigned long)+0x2b2>
                        LEDS_GPRINT_RAW("Unrecoverable error: ");
    1a50:	499e      	ldr	r1, [pc, #632]	; (1ccc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x744>)
    1a52:	489a      	ldr	r0, [pc, #616]	; (1cbc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x734>)
    1a54:	f009 fb40 	bl	b0d8 <Print::printf(char const*, ...)>
                { return next == this; }
    1a58:	68e4      	ldr	r4, [r4, #12]
                        const size_t node_offset = bad_write - wnodes;
    1a5a:	ab36      	add	r3, sp, #216	; 0xd8
                { return is_empty() ? nullptr : next; }
    1a5c:	42a5      	cmp	r5, r4
    1a5e:	f47f af1a 	bne.w	1896 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x30e>
    1a62:	425b      	negs	r3, r3
                        const size_t mcp_index = node_offset / PER_DEV_MSGS_COUNT;
    1a64:	4a9a      	ldr	r2, [pc, #616]	; (1cd0 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x748>)
    1a66:	2400      	movs	r4, #0
                        const size_t node_offset = bad_write - wnodes;
    1a68:	111b      	asrs	r3, r3, #4
                        const size_t mcp_index = node_offset / PER_DEV_MSGS_COUNT;
    1a6a:	fba2 2b03 	umull	r2, fp, r2, r3
    1a6e:	9305      	str	r3, [sp, #20]
		yield();
    1a70:	f00b f8c8 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1a74:	7832      	ldrb	r2, [r6, #0]
    1a76:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    1a7a:	2a00      	cmp	r2, #0
    1a7c:	f040 80e7 	bne.w	1c4e <hw::LedsDriver::setup(unsigned long, unsigned long)+0x6c6>
                                return err::errcode::INVALID_STATE;
    1a80:	2782      	movs	r7, #130	; 0x82
}
    1a82:	4638      	mov	r0, r7
    1a84:	b05b      	add	sp, #364	; 0x16c
    1a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        LEDS_GPRINT_RAW("Abort transaction for mcp=%lu", mcp_index);
    1a8a:	462a      	mov	r2, r5
    1a8c:	4991      	ldr	r1, [pc, #580]	; (1cd4 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x74c>)
    1a8e:	488b      	ldr	r0, [pc, #556]	; (1cbc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x734>)
    1a90:	f009 fb22 	bl	b0d8 <Print::printf(char const*, ...)>
    1a94:	9b05      	ldr	r3, [sp, #20]
    1a96:	e72d      	b.n	18f4 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x36c>
        LEDS_IFG(
    1a98:	9a06      	ldr	r2, [sp, #24]
    1a9a:	498f      	ldr	r1, [pc, #572]	; (1cd8 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x750>)
    1a9c:	4887      	ldr	r0, [pc, #540]	; (1cbc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x734>)
    1a9e:	f009 fb1b 	bl	b0d8 <Print::printf(char const*, ...)>
                Serial.printf("\n\tnode=%-10p writer=%-10p next=%-10p prev=%-10p state=%u",
    1aa2:	7b23      	ldrb	r3, [r4, #12]
    1aa4:	4622      	mov	r2, r4
    1aa6:	498d      	ldr	r1, [pc, #564]	; (1cdc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x754>)
    1aa8:	9302      	str	r3, [sp, #8]
    1aaa:	6863      	ldr	r3, [r4, #4]
    1aac:	4883      	ldr	r0, [pc, #524]	; (1cbc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x734>)
    1aae:	9301      	str	r3, [sp, #4]
    1ab0:	68a3      	ldr	r3, [r4, #8]
    1ab2:	9300      	str	r3, [sp, #0]
    1ab4:	6823      	ldr	r3, [r4, #0]
    1ab6:	f009 fb0f 	bl	b0d8 <Print::printf(char const*, ...)>
                if (writer)
    1aba:	f8d4 a000 	ldr.w	sl, [r4]
    1abe:	f1ba 0f00 	cmp.w	sl, #0
    1ac2:	d010      	beq.n	1ae6 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x55e>
                Serial.printf("\taddress=%u num_bytes=%lu send_stop=%u datas_ptr=%p",
    1ac4:	f89a 2000 	ldrb.w	r2, [sl]
    1ac8:	487c      	ldr	r0, [pc, #496]	; (1cbc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x734>)
    1aca:	e9da 1301 	ldrd	r1, r3, [sl, #4]
    1ace:	9101      	str	r1, [sp, #4]
    1ad0:	f89a 100c 	ldrb.w	r1, [sl, #12]
    1ad4:	9100      	str	r1, [sp, #0]
    1ad6:	4982      	ldr	r1, [pc, #520]	; (1ce0 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x758>)
    1ad8:	f009 fafe 	bl	b0d8 <Print::printf(char const*, ...)>
                if (num_bytes != 0)
    1adc:	f8da 3008 	ldr.w	r3, [sl, #8]
    1ae0:	2b00      	cmp	r3, #0
    1ae2:	f040 8165 	bne.w	1db0 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x828>
                Serial.printf("\n\tnode=%-10p writer=%-10p next=%-10p prev=%-10p state=%u",
    1ae6:	7f23      	ldrb	r3, [r4, #28]
    1ae8:	46a2      	mov	sl, r4
    1aea:	497c      	ldr	r1, [pc, #496]	; (1cdc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x754>)
    1aec:	9302      	str	r3, [sp, #8]
    1aee:	6963      	ldr	r3, [r4, #20]
    1af0:	4872      	ldr	r0, [pc, #456]	; (1cbc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x734>)
    1af2:	9301      	str	r3, [sp, #4]
    1af4:	69a3      	ldr	r3, [r4, #24]
    1af6:	9300      	str	r3, [sp, #0]
    1af8:	f85a 3f10 	ldr.w	r3, [sl, #16]!
    1afc:	4652      	mov	r2, sl
    1afe:	f009 faeb 	bl	b0d8 <Print::printf(char const*, ...)>
                if (writer)
    1b02:	f8d4 8010 	ldr.w	r8, [r4, #16]
    1b06:	f1b8 0f00 	cmp.w	r8, #0
    1b0a:	d010      	beq.n	1b2e <hw::LedsDriver::setup(unsigned long, unsigned long)+0x5a6>
                Serial.printf("\taddress=%u num_bytes=%lu send_stop=%u datas_ptr=%p",
    1b0c:	f898 2000 	ldrb.w	r2, [r8]
    1b10:	486a      	ldr	r0, [pc, #424]	; (1cbc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x734>)
    1b12:	e9d8 1301 	ldrd	r1, r3, [r8, #4]
    1b16:	9101      	str	r1, [sp, #4]
    1b18:	f898 100c 	ldrb.w	r1, [r8, #12]
    1b1c:	9100      	str	r1, [sp, #0]
    1b1e:	4970      	ldr	r1, [pc, #448]	; (1ce0 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x758>)
    1b20:	f009 fada 	bl	b0d8 <Print::printf(char const*, ...)>
                if (num_bytes != 0)
    1b24:	f8d8 3008 	ldr.w	r3, [r8, #8]
    1b28:	2b00      	cmp	r3, #0
    1b2a:	f040 8124 	bne.w	1d76 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x7ee>
                Serial.printf("\n\tnode=%-10p writer=%-10p next=%-10p prev=%-10p state=%u",
    1b2e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    1b32:	46a0      	mov	r8, r4
    1b34:	4969      	ldr	r1, [pc, #420]	; (1cdc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x754>)
    1b36:	9302      	str	r3, [sp, #8]
    1b38:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1b3a:	4860      	ldr	r0, [pc, #384]	; (1cbc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x734>)
    1b3c:	9301      	str	r3, [sp, #4]
    1b3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1b40:	9300      	str	r3, [sp, #0]
    1b42:	f858 3f20 	ldr.w	r3, [r8, #32]!
    1b46:	4642      	mov	r2, r8
    1b48:	f009 fac6 	bl	b0d8 <Print::printf(char const*, ...)>
                if (writer)
    1b4c:	f8d4 b020 	ldr.w	fp, [r4, #32]
    1b50:	f1bb 0f00 	cmp.w	fp, #0
    1b54:	f43f ad98 	beq.w	1688 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x100>
                Serial.printf("\taddress=%u num_bytes=%lu send_stop=%u datas_ptr=%p",
    1b58:	f89b 2000 	ldrb.w	r2, [fp]
    1b5c:	4857      	ldr	r0, [pc, #348]	; (1cbc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x734>)
    1b5e:	e9db 1301 	ldrd	r1, r3, [fp, #4]
    1b62:	9101      	str	r1, [sp, #4]
    1b64:	f89b 100c 	ldrb.w	r1, [fp, #12]
    1b68:	9100      	str	r1, [sp, #0]
    1b6a:	495d      	ldr	r1, [pc, #372]	; (1ce0 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x758>)
    1b6c:	f009 fab4 	bl	b0d8 <Print::printf(char const*, ...)>
                if (num_bytes != 0)
    1b70:	f8db 3008 	ldr.w	r3, [fp, #8]
    1b74:	2b00      	cmp	r3, #0
    1b76:	f43f ad87 	beq.w	1688 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x100>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1b7a:	2104      	movs	r1, #4
    1b7c:	4859      	ldr	r0, [pc, #356]	; (1ce4 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x75c>)
    1b7e:	f00a ffc3 	bl	cb08 <usb_serial_write>
                    for (size_t i=0; i<num_bytes; ++i)
    1b82:	f8db 3008 	ldr.w	r3, [fp, #8]
    1b86:	b1b3      	cbz	r3, 1bb6 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x62e>
    1b88:	2300      	movs	r3, #0
                        { Serial.printf(" %x", buffer[i]); }
    1b8a:	940d      	str	r4, [sp, #52]	; 0x34
    1b8c:	4956      	ldr	r1, [pc, #344]	; (1ce8 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x760>)
    1b8e:	461c      	mov	r4, r3
    1b90:	4643      	mov	r3, r8
    1b92:	46b8      	mov	r8, r7
    1b94:	462f      	mov	r7, r5
    1b96:	465d      	mov	r5, fp
    1b98:	469b      	mov	fp, r3
    1b9a:	686a      	ldr	r2, [r5, #4]
    1b9c:	4847      	ldr	r0, [pc, #284]	; (1cbc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x734>)
    1b9e:	5d12      	ldrb	r2, [r2, r4]
                    for (size_t i=0; i<num_bytes; ++i)
    1ba0:	3401      	adds	r4, #1
                        { Serial.printf(" %x", buffer[i]); }
    1ba2:	f009 fa99 	bl	b0d8 <Print::printf(char const*, ...)>
                    for (size_t i=0; i<num_bytes; ++i)
    1ba6:	68aa      	ldr	r2, [r5, #8]
    1ba8:	494f      	ldr	r1, [pc, #316]	; (1ce8 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x760>)
    1baa:	4294      	cmp	r4, r2
    1bac:	d3f5      	bcc.n	1b9a <hw::LedsDriver::setup(unsigned long, unsigned long)+0x612>
    1bae:	463d      	mov	r5, r7
    1bb0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    1bb2:	4647      	mov	r7, r8
    1bb4:	46d8      	mov	r8, fp
    1bb6:	2102      	movs	r1, #2
    1bb8:	484c      	ldr	r0, [pc, #304]	; (1cec <hw::LedsDriver::setup(unsigned long, unsigned long)+0x764>)
    1bba:	f00a ffa5 	bl	cb08 <usb_serial_write>
    1bbe:	e563      	b.n	1688 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x100>
                { return next == this; }
    1bc0:	68a1      	ldr	r1, [r4, #8]
                    if (node->is_empty())
    1bc2:	42a1      	cmp	r1, r4
    1bc4:	f43f ad6d 	beq.w	16a2 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x11a>
                    node->next->prev = prev;
    1bc8:	6898      	ldr	r0, [r3, #8]
    1bca:	6048      	str	r0, [r1, #4]
                    node->prev->next = this;
    1bcc:	f8d4 c004 	ldr.w	ip, [r4, #4]
    1bd0:	f8cc 2008 	str.w	r2, [ip, #8]
                    prev->next = node->next;
    1bd4:	68a1      	ldr	r1, [r4, #8]
    1bd6:	6081      	str	r1, [r0, #8]
                if (node->is_anchor())
    1bd8:	6921      	ldr	r1, [r4, #16]
                    prev = node->prev;
    1bda:	f8c3 c008 	str.w	ip, [r3, #8]
                    node->next = node->prev = node;
    1bde:	e9c4 4401 	strd	r4, r4, [r4, #4]
                if (node->is_anchor())
    1be2:	2900      	cmp	r1, #0
    1be4:	f47f ad61 	bne.w	16aa <hw::LedsDriver::setup(unsigned long, unsigned long)+0x122>
                { return next == this; }
    1be8:	69a1      	ldr	r1, [r4, #24]
                    if (node->is_empty())
    1bea:	4551      	cmp	r1, sl
    1bec:	f43f ad64 	beq.w	16b8 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x130>
                    node->next->prev = prev;
    1bf0:	6898      	ldr	r0, [r3, #8]
    1bf2:	6048      	str	r0, [r1, #4]
                    node->prev->next = this;
    1bf4:	f8d4 c014 	ldr.w	ip, [r4, #20]
    1bf8:	f8cc 2008 	str.w	r2, [ip, #8]
                    prev->next = node->next;
    1bfc:	69a1      	ldr	r1, [r4, #24]
    1bfe:	6081      	str	r1, [r0, #8]
                if (node->is_anchor())
    1c00:	6a21      	ldr	r1, [r4, #32]
                    prev = node->prev;
    1c02:	f8c3 c008 	str.w	ip, [r3, #8]
                    node->next = node->prev = node;
    1c06:	e9c4 aa05 	strd	sl, sl, [r4, #20]
                if (node->is_anchor())
    1c0a:	2900      	cmp	r1, #0
    1c0c:	f47f ad58 	bne.w	16c0 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x138>
                { return next == this; }
    1c10:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                    if (node->is_empty())
    1c12:	4541      	cmp	r1, r8
    1c14:	f43f ad5b 	beq.w	16ce <hw::LedsDriver::setup(unsigned long, unsigned long)+0x146>
                    node->next->prev = prev;
    1c18:	6898      	ldr	r0, [r3, #8]
    1c1a:	6048      	str	r0, [r1, #4]
                    node->prev->next = this;
    1c1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1c1e:	608a      	str	r2, [r1, #8]
                    prev->next = node->next;
    1c20:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1c22:	6082      	str	r2, [r0, #8]
                    prev = node->prev;
    1c24:	6099      	str	r1, [r3, #8]
                    node->next = node->prev = node;
    1c26:	e9c4 8809 	strd	r8, r8, [r4, #36]	; 0x24
    1c2a:	e550      	b.n	16ce <hw::LedsDriver::setup(unsigned long, unsigned long)+0x146>
    1c2c:	9b04      	ldr	r3, [sp, #16]
        LEDS_GPRINTF("Elapsed: %lu", static_cast<unsigned long int>(elapsed));
    1c2e:	4930      	ldr	r1, [pc, #192]	; (1cf0 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x768>)
    1c30:	681a      	ldr	r2, [r3, #0]
    1c32:	9b06      	ldr	r3, [sp, #24]
    1c34:	4821      	ldr	r0, [pc, #132]	; (1cbc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x734>)
    1c36:	1ad2      	subs	r2, r2, r3
    1c38:	f009 fa4e 	bl	b0d8 <Print::printf(char const*, ...)>
    1c3c:	e5c2      	b.n	17c4 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x23c>
    1c3e:	9305      	str	r3, [sp, #20]
		yield();
    1c40:	f00a ffe0 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1c44:	7832      	ldrb	r2, [r6, #0]
    1c46:	46ab      	mov	fp, r5
    1c48:	2a00      	cmp	r2, #0
    1c4a:	f43f af19 	beq.w	1a80 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x4f8>
    1c4e:	4a29      	ldr	r2, [pc, #164]	; (1cf4 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x76c>)
    1c50:	7812      	ldrb	r2, [r2, #0]
    1c52:	07d1      	lsls	r1, r2, #31
    1c54:	f57f af14 	bpl.w	1a80 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x4f8>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1c58:	9b04      	ldr	r3, [sp, #16]
    1c5a:	4927      	ldr	r1, [pc, #156]	; (1cf8 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x770>)
    1c5c:	681a      	ldr	r2, [r3, #0]
    1c5e:	6809      	ldr	r1, [r1, #0]
    1c60:	1a52      	subs	r2, r2, r1
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1c62:	2a0e      	cmp	r2, #14
    1c64:	f67f af0c 	bls.w	1a80 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x4f8>
                                LEDS_GPRINT_RAW("ILLEGAL STATE: next_write=%p node_offset=%lu mcp_index=%lu ... ABORT",
    1c68:	f89a 2000 	ldrb.w	r2, [sl]
    1c6c:	9b05      	ldr	r3, [sp, #20]
    1c6e:	2a00      	cmp	r2, #0
    1c70:	f43f af06 	beq.w	1a80 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x4f8>
                                return err::errcode::INVALID_STATE;
    1c74:	2782      	movs	r7, #130	; 0x82
                                LEDS_GPRINT_RAW("ILLEGAL STATE: next_write=%p node_offset=%lu mcp_index=%lu ... ABORT",
    1c76:	4622      	mov	r2, r4
    1c78:	4920      	ldr	r1, [pc, #128]	; (1cfc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x774>)
    1c7a:	f8cd b000 	str.w	fp, [sp]
    1c7e:	480f      	ldr	r0, [pc, #60]	; (1cbc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x734>)
    1c80:	f009 fa2a 	bl	b0d8 <Print::printf(char const*, ...)>
}
    1c84:	4638      	mov	r0, r7
    1c86:	b05b      	add	sp, #364	; 0x16c
    1c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1c8c:	4a1a      	ldr	r2, [pc, #104]	; (1cf8 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x770>)
    1c8e:	9b04      	ldr	r3, [sp, #16]
    1c90:	681b      	ldr	r3, [r3, #0]
    1c92:	6812      	ldr	r2, [r2, #0]
    1c94:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1c96:	2b0e      	cmp	r3, #14
    1c98:	f67f ad75 	bls.w	1786 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x1fe>
    LEDS_GPRINTLN("Sending registers");
    1c9c:	f89a 3000 	ldrb.w	r3, [sl]
    1ca0:	2b00      	cmp	r3, #0
    1ca2:	f43f ad70 	beq.w	1786 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x1fe>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1ca6:	211f      	movs	r1, #31
    1ca8:	4815      	ldr	r0, [pc, #84]	; (1d00 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x778>)
    1caa:	f00a ff2d 	bl	cb08 <usb_serial_write>
    1cae:	4803      	ldr	r0, [pc, #12]	; (1cbc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x734>)
    1cb0:	f009 f9f6 	bl	b0a0 <Print::println()>
    1cb4:	e567      	b.n	1786 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x1fe>
    1cb6:	bf00      	nop
    1cb8:	2000087c 	.word	0x2000087c
    1cbc:	20001a70 	.word	0x20001a70
    1cc0:	20003830 	.word	0x20003830
    1cc4:	20000788 	.word	0x20000788
    1cc8:	20000798 	.word	0x20000798
    1ccc:	200007c0 	.word	0x200007c0
    1cd0:	aaaaaaab 	.word	0xaaaaaaab
    1cd4:	20000810 	.word	0x20000810
    1cd8:	2000086c 	.word	0x2000086c
    1cdc:	20000c68 	.word	0x20000c68
    1ce0:	20000ca4 	.word	0x20000ca4
    1ce4:	20000cd8 	.word	0x20000cd8
    1ce8:	20000ce4 	.word	0x20000ce4
    1cec:	20000ce0 	.word	0x20000ce0
    1cf0:	200008c4 	.word	0x200008c4
    1cf4:	2000390b 	.word	0x2000390b
    1cf8:	200038e8 	.word	0x200038e8
    1cfc:	200008e0 	.word	0x200008e0
    1d00:	200008a4 	.word	0x200008a4
    1d04:	2000089c 	.word	0x2000089c
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1d08:	4b53      	ldr	r3, [pc, #332]	; (1e58 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x8d0>)
    1d0a:	4a54      	ldr	r2, [pc, #336]	; (1e5c <hw::LedsDriver::setup(unsigned long, unsigned long)+0x8d4>)
    1d0c:	9304      	str	r3, [sp, #16]
    1d0e:	681b      	ldr	r3, [r3, #0]
    1d10:	6812      	ldr	r2, [r2, #0]
    1d12:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1d14:	2b0e      	cmp	r3, #14
    1d16:	f67f ac6d 	bls.w	15f4 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x6c>
    LEDS_GPRINTLN("Creating Queues");
    1d1a:	f8df a160 	ldr.w	sl, [pc, #352]	; 1e7c <hw::LedsDriver::setup(unsigned long, unsigned long)+0x8f4>
    1d1e:	f89a 7000 	ldrb.w	r7, [sl]
    1d22:	2f00      	cmp	r7, #0
    1d24:	f43f ac6a 	beq.w	15fc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x74>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1d28:	211d      	movs	r1, #29
    1d2a:	484d      	ldr	r0, [pc, #308]	; (1e60 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x8d8>)
    1d2c:	f00a feec 	bl	cb08 <usb_serial_write>
    1d30:	484c      	ldr	r0, [pc, #304]	; (1e64 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x8dc>)
    1d32:	f009 f9b5 	bl	b0a0 <Print::println()>
        LEDS_IFG(
    1d36:	f89a 7000 	ldrb.w	r7, [sl]
    1d3a:	e45f      	b.n	15fc <hw::LedsDriver::setup(unsigned long, unsigned long)+0x74>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1d3c:	f899 3000 	ldrb.w	r3, [r9]
    1d40:	07da      	lsls	r2, r3, #31
    1d42:	f57f ae2b 	bpl.w	199c <hw::LedsDriver::setup(unsigned long, unsigned long)+0x414>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1d46:	9b04      	ldr	r3, [sp, #16]
    1d48:	681b      	ldr	r3, [r3, #0]
    1d4a:	f8d8 2000 	ldr.w	r2, [r8]
    1d4e:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1d50:	2b0e      	cmp	r3, #14
    1d52:	f67f ae23 	bls.w	199c <hw::LedsDriver::setup(unsigned long, unsigned long)+0x414>
                LEDS_GPRINTF("Timeout on bus=%u addr=%x\tlast state=%u", device.master.id(), device.address, static_cast<uint8_t>(status));
    1d56:	9b06      	ldr	r3, [sp, #24]
    1d58:	781b      	ldrb	r3, [r3, #0]
    1d5a:	2b00      	cmp	r3, #0
    1d5c:	f43f ae1e 	beq.w	199c <hw::LedsDriver::setup(unsigned long, unsigned long)+0x414>
    1d60:	fa5f f38a 	uxtb.w	r3, sl
                { return master_index; }
    1d64:	682a      	ldr	r2, [r5, #0]
    1d66:	4940      	ldr	r1, [pc, #256]	; (1e68 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x8e0>)
    1d68:	7d12      	ldrb	r2, [r2, #20]
    1d6a:	483e      	ldr	r0, [pc, #248]	; (1e64 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x8dc>)
    1d6c:	9300      	str	r3, [sp, #0]
    1d6e:	792b      	ldrb	r3, [r5, #4]
    1d70:	f009 f9b2 	bl	b0d8 <Print::printf(char const*, ...)>
    1d74:	e612      	b.n	199c <hw::LedsDriver::setup(unsigned long, unsigned long)+0x414>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1d76:	2104      	movs	r1, #4
    1d78:	483c      	ldr	r0, [pc, #240]	; (1e6c <hw::LedsDriver::setup(unsigned long, unsigned long)+0x8e4>)
    1d7a:	f00a fec5 	bl	cb08 <usb_serial_write>
                    for (size_t i=0; i<num_bytes; ++i)
    1d7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
    1d82:	b183      	cbz	r3, 1da6 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x81e>
    1d84:	f04f 0b00 	mov.w	fp, #0
                        { Serial.printf(" %x", buffer[i]); }
    1d88:	4939      	ldr	r1, [pc, #228]	; (1e70 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x8e8>)
    1d8a:	f8d8 3004 	ldr.w	r3, [r8, #4]
    1d8e:	4835      	ldr	r0, [pc, #212]	; (1e64 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x8dc>)
    1d90:	f813 200b 	ldrb.w	r2, [r3, fp]
                    for (size_t i=0; i<num_bytes; ++i)
    1d94:	f10b 0b01 	add.w	fp, fp, #1
                        { Serial.printf(" %x", buffer[i]); }
    1d98:	f009 f99e 	bl	b0d8 <Print::printf(char const*, ...)>
                    for (size_t i=0; i<num_bytes; ++i)
    1d9c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    1da0:	4933      	ldr	r1, [pc, #204]	; (1e70 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x8e8>)
    1da2:	459b      	cmp	fp, r3
    1da4:	d3f1      	bcc.n	1d8a <hw::LedsDriver::setup(unsigned long, unsigned long)+0x802>
    1da6:	2102      	movs	r1, #2
    1da8:	4832      	ldr	r0, [pc, #200]	; (1e74 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x8ec>)
    1daa:	f00a fead 	bl	cb08 <usb_serial_write>
    1dae:	e6be      	b.n	1b2e <hw::LedsDriver::setup(unsigned long, unsigned long)+0x5a6>
    1db0:	2104      	movs	r1, #4
    1db2:	482e      	ldr	r0, [pc, #184]	; (1e6c <hw::LedsDriver::setup(unsigned long, unsigned long)+0x8e4>)
    1db4:	f00a fea8 	bl	cb08 <usb_serial_write>
    1db8:	f8da 3008 	ldr.w	r3, [sl, #8]
    1dbc:	b17b      	cbz	r3, 1dde <hw::LedsDriver::setup(unsigned long, unsigned long)+0x856>
                        { Serial.printf(" %x", buffer[i]); }
    1dbe:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 1e70 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x8e8>
    1dc2:	f8da 3004 	ldr.w	r3, [sl, #4]
    1dc6:	4659      	mov	r1, fp
    1dc8:	4826      	ldr	r0, [pc, #152]	; (1e64 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x8dc>)
    1dca:	f813 2008 	ldrb.w	r2, [r3, r8]
                    for (size_t i=0; i<num_bytes; ++i)
    1dce:	f108 0801 	add.w	r8, r8, #1
                        { Serial.printf(" %x", buffer[i]); }
    1dd2:	f009 f981 	bl	b0d8 <Print::printf(char const*, ...)>
                    for (size_t i=0; i<num_bytes; ++i)
    1dd6:	f8da 3008 	ldr.w	r3, [sl, #8]
    1dda:	4598      	cmp	r8, r3
    1ddc:	d3f1      	bcc.n	1dc2 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x83a>
    1dde:	2102      	movs	r1, #2
    1de0:	4824      	ldr	r0, [pc, #144]	; (1e74 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x8ec>)
    1de2:	f00a fe91 	bl	cb08 <usb_serial_write>
    1de6:	e67e      	b.n	1ae6 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x55e>
		yield();
    1de8:	f00a ff0c 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1dec:	7833      	ldrb	r3, [r6, #0]
    1dee:	b1a3      	cbz	r3, 1e1a <hw::LedsDriver::setup(unsigned long, unsigned long)+0x892>
    1df0:	f899 3000 	ldrb.w	r3, [r9]
    1df4:	07db      	lsls	r3, r3, #31
    1df6:	d510      	bpl.n	1e1a <hw::LedsDriver::setup(unsigned long, unsigned long)+0x892>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1df8:	9b04      	ldr	r3, [sp, #16]
    1dfa:	681b      	ldr	r3, [r3, #0]
    1dfc:	f8d8 2000 	ldr.w	r2, [r8]
    1e00:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1e02:	2b0e      	cmp	r3, #14
    1e04:	d909      	bls.n	1e1a <hw::LedsDriver::setup(unsigned long, unsigned long)+0x892>
                LEDS_GPRINTF("Device succesfully initialised on bus=%u addr=%x", device.master.id(), device.address);
    1e06:	9b06      	ldr	r3, [sp, #24]
    1e08:	781b      	ldrb	r3, [r3, #0]
    1e0a:	b133      	cbz	r3, 1e1a <hw::LedsDriver::setup(unsigned long, unsigned long)+0x892>
                { return master_index; }
    1e0c:	682b      	ldr	r3, [r5, #0]
    1e0e:	4659      	mov	r1, fp
    1e10:	4814      	ldr	r0, [pc, #80]	; (1e64 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x8dc>)
    1e12:	7d1a      	ldrb	r2, [r3, #20]
    1e14:	792b      	ldrb	r3, [r5, #4]
    1e16:	f009 f95f 	bl	b0d8 <Print::printf(char const*, ...)>
                errno = err::errcode::TIMEOUT_ERROR;
    1e1a:	f04f 0a01 	mov.w	sl, #1
    1e1e:	e5c1      	b.n	19a4 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x41c>
		yield();
    1e20:	f00a fef0 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1e24:	7833      	ldrb	r3, [r6, #0]
    1e26:	b1a3      	cbz	r3, 1e52 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x8ca>
    1e28:	f899 3000 	ldrb.w	r3, [r9]
    1e2c:	07d9      	lsls	r1, r3, #31
    1e2e:	d510      	bpl.n	1e52 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x8ca>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1e30:	9b04      	ldr	r3, [sp, #16]
    1e32:	681b      	ldr	r3, [r3, #0]
    1e34:	f8d8 2000 	ldr.w	r2, [r8]
    1e38:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1e3a:	2b0e      	cmp	r3, #14
    1e3c:	d909      	bls.n	1e52 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x8ca>
                LEDS_GPRINTF("Bad device for bus=%u addr=%x", device.master.id(), device.address);
    1e3e:	9b06      	ldr	r3, [sp, #24]
    1e40:	781b      	ldrb	r3, [r3, #0]
    1e42:	b133      	cbz	r3, 1e52 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x8ca>
    1e44:	682b      	ldr	r3, [r5, #0]
    1e46:	490c      	ldr	r1, [pc, #48]	; (1e78 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x8f0>)
    1e48:	7d1a      	ldrb	r2, [r3, #20]
    1e4a:	4806      	ldr	r0, [pc, #24]	; (1e64 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x8dc>)
    1e4c:	792b      	ldrb	r3, [r5, #4]
    1e4e:	f009 f943 	bl	b0d8 <Print::printf(char const*, ...)>
                errno = err::errcode::HWERROR;
    1e52:	2301      	movs	r3, #1
    1e54:	9305      	str	r3, [sp, #20]
    1e56:	e5a5      	b.n	19a4 <hw::LedsDriver::setup(unsigned long, unsigned long)+0x41c>
    1e58:	200038d8 	.word	0x200038d8
    1e5c:	200038e8 	.word	0x200038e8
    1e60:	2000084c 	.word	0x2000084c
    1e64:	20001a70 	.word	0x20001a70
    1e68:	20000954 	.word	0x20000954
    1e6c:	20000cd8 	.word	0x20000cd8
    1e70:	20000ce4 	.word	0x20000ce4
    1e74:	20000ce0 	.word	0x20000ce0
    1e78:	20000928 	.word	0x20000928
    1e7c:	200022a7 	.word	0x200022a7

00001e80 <setup>:

void setup() {
    1e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    
    hw::test = 1;
    1e84:	2201      	movs	r2, #1
    1e86:	4b7e      	ldr	r3, [pc, #504]	; (2080 <setup+0x200>)

    elapsedMicros elapsed;

    // Clear all global bits
    memset(&global_flags, 0, sizeof(global_flags_t));
    1e88:	4d7e      	ldr	r5, [pc, #504]	; (2084 <setup+0x204>)
    hw::test = 1;
    1e8a:	601a      	str	r2, [r3, #0]
	elapsedMicros(void) { us = micros(); }
    1e8c:	f009 fbaa 	bl	b5e4 <micros>
    1e90:	4c7d      	ldr	r4, [pc, #500]	; (2088 <setup+0x208>)
    memset(&global_flags, 0, sizeof(global_flags_t));
    1e92:	2300      	movs	r3, #0
    1e94:	4606      	mov	r6, r0
    1e96:	802b      	strh	r3, [r5, #0]
		yield();
    1e98:	f00a feb4 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1e9c:	7823      	ldrb	r3, [r4, #0]
    1e9e:	b123      	cbz	r3, 1eaa <setup+0x2a>
    1ea0:	4b7a      	ldr	r3, [pc, #488]	; (208c <setup+0x20c>)
    1ea2:	781b      	ldrb	r3, [r3, #0]
    1ea4:	07db      	lsls	r3, r3, #31
    1ea6:	f100 80d2 	bmi.w	204e <setup+0x1ce>
	elapsedMicros & operator = (unsigned long val) { us = micros() - val; return *this; }
    1eaa:	f009 fb9b 	bl	b5e4 <micros>
    1eae:	4606      	mov	r6, r0
        /**
         * Setup raw hardware
         */
    
    elapsed = 0;
    global_flags.serial_available = setup_raw_io();
    1eb0:	f7ff fa78 	bl	13a4 <setup_raw_io()>
    1eb4:	7028      	strb	r0, [r5, #0]
		yield();
    1eb6:	f00a fea5 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1eba:	7823      	ldrb	r3, [r4, #0]
    1ebc:	b123      	cbz	r3, 1ec8 <setup+0x48>
    1ebe:	4b73      	ldr	r3, [pc, #460]	; (208c <setup+0x20c>)
    1ec0:	781b      	ldrb	r3, [r3, #0]
    1ec2:	07df      	lsls	r7, r3, #31
    1ec4:	f100 80af 	bmi.w	2026 <setup+0x1a6>
    1ec8:	f009 fb8c 	bl	b5e4 <micros>
    1ecc:	4606      	mov	r6, r0
        else
            { /* can't print failure to init serial */ }
    }

    elapsed = 0;
    global_flags.sd_available = setup_sd_card();
    1ece:	f7ff f84d 	bl	f6c <setup_sd_card()>
    1ed2:	7068      	strb	r0, [r5, #1]
		yield();
    1ed4:	f00a fe96 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1ed8:	7823      	ldrb	r3, [r4, #0]
    1eda:	b123      	cbz	r3, 1ee6 <setup+0x66>
    1edc:	4b6b      	ldr	r3, [pc, #428]	; (208c <setup+0x20c>)
    1ede:	781b      	ldrb	r3, [r3, #0]
    1ee0:	07d8      	lsls	r0, r3, #31
    1ee2:	f100 808e 	bmi.w	2002 <setup+0x182>
    1ee6:	f009 fb7d 	bl	b5e4 <micros>
    1eea:	4606      	mov	r6, r0
        else
            { Serial.printf("Failed init SD card: time taken %lu(us)\n", static_cast<unsigned long>(elapsed)); }
    }

    elapsed = 0;
    setup_i2c_buses();
    1eec:	f7ff f854 	bl	f98 <setup_i2c_buses()>
		yield();
    1ef0:	f00a fe88 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1ef4:	7823      	ldrb	r3, [r4, #0]
    1ef6:	b11b      	cbz	r3, 1f00 <setup+0x80>
    1ef8:	4b64      	ldr	r3, [pc, #400]	; (208c <setup+0x20c>)
    1efa:	781b      	ldrb	r3, [r3, #0]
    1efc:	07d9      	lsls	r1, r3, #31
    1efe:	d471      	bmi.n	1fe4 <setup+0x164>
    1f00:	f009 fb70 	bl	b5e4 <micros>
        /**
         * Setup software facilities
         */
    
    elapsed = 0;
    hw::LedsDriver::GlobalDriver.setup(800);
    1f04:	22c8      	movs	r2, #200	; 0xc8
    1f06:	f44f 7148 	mov.w	r1, #800	; 0x320
    1f0a:	4606      	mov	r6, r0
    1f0c:	4860      	ldr	r0, [pc, #384]	; (2090 <setup+0x210>)
    1f0e:	f7ff fb3b 	bl	1588 <hw::LedsDriver::setup(unsigned long, unsigned long)>
		yield();
    1f12:	f00a fe77 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1f16:	7823      	ldrb	r3, [r4, #0]
    1f18:	b11b      	cbz	r3, 1f22 <setup+0xa2>
    1f1a:	4b5c      	ldr	r3, [pc, #368]	; (208c <setup+0x20c>)
    1f1c:	781b      	ldrb	r3, [r3, #0]
    1f1e:	07da      	lsls	r2, r3, #31
    1f20:	d451      	bmi.n	1fc6 <setup+0x146>
    1f22:	495c      	ldr	r1, [pc, #368]	; (2094 <setup+0x214>)
void setup() {
    1f24:	2302      	movs	r3, #2
    1f26:	4a5c      	ldr	r2, [pc, #368]	; (2098 <setup+0x218>)
        err::errcode end_cycle();


        err::errcode unsafe_write(const addr::output& addr, const bool state)
        {
            const uint8_t anode_bit = static_cast<uint8_t>(0x01) << addr.annode_index_in_reg();
    1f28:	f04f 0c01 	mov.w	ip, #1
    1f2c:	f101 001c 	add.w	r0, r1, #28
            const uint8_t buffer_index = addr.is_port_A() ? 1 : 2;

            if (state)
                { _mcp_write_buffer[addr.cathode_address][addr.mcp_index][buffer_index] |= anode_bit; }
    1f30:	4f57      	ldr	r7, [pc, #348]	; (2090 <setup+0x210>)
    1f32:	e002      	b.n	1f3a <setup+0xba>

    // for (size_t row=0; row<5; ++row)
    const uint8_t row=4;
    for (size_t col=0; col<8; ++col)
    {
        hw::LedsDriver::GlobalDriver.safe_write(hw::ios::CLIP_Y_X[row][col]->led, true);
    1f34:	f851 2f04 	ldr.w	r2, [r1, #4]!
                addr.mcp_index < MCP_COUNT
    1f38:	7893      	ldrb	r3, [r2, #2]
            if (
    1f3a:	2b02      	cmp	r3, #2
    1f3c:	d81e      	bhi.n	1f7c <setup+0xfc>
                && addr.annode_index < mcp23017::PINS_COUNT
    1f3e:	f892 8003 	ldrb.w	r8, [r2, #3]
                { _mcp_write_buffer[addr.cathode_address][addr.mcp_index][buffer_index] |= anode_bit; }
    1f42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
            const uint8_t anode_bit = static_cast<uint8_t>(0x01) << addr.annode_index_in_reg();
    1f46:	f008 0e07 	and.w	lr, r8, #7
                && addr.annode_index < mcp23017::PINS_COUNT
    1f4a:	f1b8 0f0f 	cmp.w	r8, #15
            const uint8_t anode_bit = static_cast<uint8_t>(0x01) << addr.annode_index_in_reg();
    1f4e:	fa0c fe0e 	lsl.w	lr, ip, lr
                && addr.annode_index < mcp23017::PINS_COUNT
    1f52:	d813      	bhi.n	1f7c <setup+0xfc>
                && addr.cathode_address < MULTIPLEX_COLUMS_COUNT
    1f54:	7912      	ldrb	r2, [r2, #4]
                { _mcp_write_buffer[addr.cathode_address][addr.mcp_index][buffer_index] |= anode_bit; }
    1f56:	eb02 09c2 	add.w	r9, r2, r2, lsl #3
                && addr.cathode_address < MULTIPLEX_COLUMS_COUNT
    1f5a:	2a07      	cmp	r2, #7
                { _mcp_write_buffer[addr.cathode_address][addr.mcp_index][buffer_index] |= anode_bit; }
    1f5c:	444b      	add	r3, r9
                && addr.cathode_address < MULTIPLEX_COLUMS_COUNT
    1f5e:	d80d      	bhi.n	1f7c <setup+0xfc>
            const uint8_t buffer_index = addr.is_port_A() ? 1 : 2;
    1f60:	f1b8 0f08 	cmp.w	r8, #8
                { _mcp_write_buffer[addr.cathode_address][addr.mcp_index][buffer_index] |= anode_bit; }
    1f64:	443b      	add	r3, r7
            const uint8_t buffer_index = addr.is_port_A() ? 1 : 2;
    1f66:	bf34      	ite	cc
    1f68:	f04f 0801 	movcc.w	r8, #1
    1f6c:	f04f 0802 	movcs.w	r8, #2
                { _mcp_write_buffer[addr.cathode_address][addr.mcp_index][buffer_index] |= anode_bit; }
    1f70:	f813 2008 	ldrb.w	r2, [r3, r8]
    1f74:	ea4e 0202 	orr.w	r2, lr, r2
    1f78:	f803 2008 	strb.w	r2, [r3, r8]
    for (size_t col=0; col<8; ++col)
    1f7c:	4281      	cmp	r1, r0
    1f7e:	d1d9      	bne.n	1f34 <setup+0xb4>
		yield();
    1f80:	f00a fe40 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1f84:	7823      	ldrb	r3, [r4, #0]
    1f86:	b1bb      	cbz	r3, 1fb8 <setup+0x138>
    1f88:	4b40      	ldr	r3, [pc, #256]	; (208c <setup+0x20c>)
    1f8a:	781b      	ldrb	r3, [r3, #0]
    1f8c:	07db      	lsls	r3, r3, #31
    1f8e:	d513      	bpl.n	1fb8 <setup+0x138>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1f90:	4b42      	ldr	r3, [pc, #264]	; (209c <setup+0x21c>)
    1f92:	4a43      	ldr	r2, [pc, #268]	; (20a0 <setup+0x220>)
    1f94:	681b      	ldr	r3, [r3, #0]
    1f96:	6812      	ldr	r2, [r2, #0]
    1f98:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1f9a:	2b0e      	cmp	r3, #14
    1f9c:	d90c      	bls.n	1fb8 <setup+0x138>
	operator unsigned long () const { return micros() - us; }
    1f9e:	f009 fb21 	bl	b5e4 <micros>
    1fa2:	4602      	mov	r2, r0
    }

    if (Serial)
    {
        Serial.printf("\nSetup done in %lu(us)\n", static_cast<unsigned long>(elapsed));
    1fa4:	493f      	ldr	r1, [pc, #252]	; (20a4 <setup+0x224>)
    1fa6:	1b92      	subs	r2, r2, r6
    1fa8:	483f      	ldr	r0, [pc, #252]	; (20a8 <setup+0x228>)
    1faa:	f009 f895 	bl	b0d8 <Print::printf(char const*, ...)>
        Serial.printf("\tsd_available=%d\n", static_cast<int>(global_flags.sd_available));
    1fae:	786a      	ldrb	r2, [r5, #1]
    1fb0:	493e      	ldr	r1, [pc, #248]	; (20ac <setup+0x22c>)
    1fb2:	483d      	ldr	r0, [pc, #244]	; (20a8 <setup+0x228>)
    1fb4:	f009 f890 	bl	b0d8 <Print::printf(char const*, ...)>
    }

    hw::LedsDriver::DebugDriver = false;
    1fb8:	2300      	movs	r3, #0
    1fba:	493d      	ldr	r1, [pc, #244]	; (20b0 <setup+0x230>)
    hw::async::DebugAsync = false;
    1fbc:	4a3d      	ldr	r2, [pc, #244]	; (20b4 <setup+0x234>)
    hw::LedsDriver::DebugDriver = false;
    1fbe:	700b      	strb	r3, [r1, #0]
    hw::async::DebugAsync = false;
    1fc0:	7013      	strb	r3, [r2, #0]
}
    1fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1fc6:	4b35      	ldr	r3, [pc, #212]	; (209c <setup+0x21c>)
    1fc8:	4a35      	ldr	r2, [pc, #212]	; (20a0 <setup+0x220>)
    1fca:	681b      	ldr	r3, [r3, #0]
    1fcc:	6812      	ldr	r2, [r2, #0]
    1fce:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1fd0:	2b0e      	cmp	r3, #14
    1fd2:	d9a6      	bls.n	1f22 <setup+0xa2>
    1fd4:	f009 fb06 	bl	b5e4 <micros>
        { Serial.printf("\nLedsDriver initialised in %lu(us)\n", static_cast<unsigned long>(elapsed)); }
    1fd8:	4937      	ldr	r1, [pc, #220]	; (20b8 <setup+0x238>)
    1fda:	1b82      	subs	r2, r0, r6
    1fdc:	4832      	ldr	r0, [pc, #200]	; (20a8 <setup+0x228>)
    1fde:	f009 f87b 	bl	b0d8 <Print::printf(char const*, ...)>
    1fe2:	e79e      	b.n	1f22 <setup+0xa2>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1fe4:	4b2d      	ldr	r3, [pc, #180]	; (209c <setup+0x21c>)
    1fe6:	4a2e      	ldr	r2, [pc, #184]	; (20a0 <setup+0x220>)
    1fe8:	681b      	ldr	r3, [r3, #0]
    1fea:	6812      	ldr	r2, [r2, #0]
    1fec:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1fee:	2b0e      	cmp	r3, #14
    1ff0:	d986      	bls.n	1f00 <setup+0x80>
    1ff2:	f009 faf7 	bl	b5e4 <micros>
        { Serial.printf("I2C buses initialised in %lu(us)\n", static_cast<unsigned long>(elapsed)); }
    1ff6:	4931      	ldr	r1, [pc, #196]	; (20bc <setup+0x23c>)
    1ff8:	1b82      	subs	r2, r0, r6
    1ffa:	482b      	ldr	r0, [pc, #172]	; (20a8 <setup+0x228>)
    1ffc:	f009 f86c 	bl	b0d8 <Print::printf(char const*, ...)>
    2000:	e77e      	b.n	1f00 <setup+0x80>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    2002:	4b26      	ldr	r3, [pc, #152]	; (209c <setup+0x21c>)
    2004:	4a26      	ldr	r2, [pc, #152]	; (20a0 <setup+0x220>)
    2006:	681b      	ldr	r3, [r3, #0]
    2008:	6812      	ldr	r2, [r2, #0]
    200a:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    200c:	2b0e      	cmp	r3, #14
    200e:	f67f af6a 	bls.w	1ee6 <setup+0x66>
        if (global_flags.sd_available)
    2012:	786b      	ldrb	r3, [r5, #1]
    2014:	b35b      	cbz	r3, 206e <setup+0x1ee>
    2016:	f009 fae5 	bl	b5e4 <micros>
            { Serial.printf("SD card Initialised in %lu(us)\n", static_cast<unsigned long>(elapsed)); }
    201a:	4929      	ldr	r1, [pc, #164]	; (20c0 <setup+0x240>)
    201c:	1b82      	subs	r2, r0, r6
    201e:	4822      	ldr	r0, [pc, #136]	; (20a8 <setup+0x228>)
    2020:	f009 f85a 	bl	b0d8 <Print::printf(char const*, ...)>
    2024:	e75f      	b.n	1ee6 <setup+0x66>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    2026:	4b1d      	ldr	r3, [pc, #116]	; (209c <setup+0x21c>)
    2028:	4a1d      	ldr	r2, [pc, #116]	; (20a0 <setup+0x220>)
    202a:	681b      	ldr	r3, [r3, #0]
    202c:	6812      	ldr	r2, [r2, #0]
    202e:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2030:	2b0e      	cmp	r3, #14
    2032:	f67f af49 	bls.w	1ec8 <setup+0x48>
        if (global_flags.serial_available)
    2036:	782b      	ldrb	r3, [r5, #0]
    2038:	2b00      	cmp	r3, #0
    203a:	f43f af45 	beq.w	1ec8 <setup+0x48>
    203e:	f009 fad1 	bl	b5e4 <micros>
            { Serial.printf("Serial Initialised in %lu(us)\n", static_cast<unsigned long>(elapsed)); }
    2042:	4920      	ldr	r1, [pc, #128]	; (20c4 <setup+0x244>)
    2044:	1b82      	subs	r2, r0, r6
    2046:	4818      	ldr	r0, [pc, #96]	; (20a8 <setup+0x228>)
    2048:	f009 f846 	bl	b0d8 <Print::printf(char const*, ...)>
    204c:	e73c      	b.n	1ec8 <setup+0x48>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    204e:	4b13      	ldr	r3, [pc, #76]	; (209c <setup+0x21c>)
    2050:	4a13      	ldr	r2, [pc, #76]	; (20a0 <setup+0x220>)
    2052:	681b      	ldr	r3, [r3, #0]
    2054:	6812      	ldr	r2, [r2, #0]
    2056:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2058:	2b0e      	cmp	r3, #14
    205a:	f67f af26 	bls.w	1eaa <setup+0x2a>
    205e:	f009 fac1 	bl	b5e4 <micros>
        { Serial.printf("global flags initialised in %lu(us)\n", static_cast<unsigned long>(elapsed)); }
    2062:	4919      	ldr	r1, [pc, #100]	; (20c8 <setup+0x248>)
    2064:	1b82      	subs	r2, r0, r6
    2066:	4810      	ldr	r0, [pc, #64]	; (20a8 <setup+0x228>)
    2068:	f009 f836 	bl	b0d8 <Print::printf(char const*, ...)>
    206c:	e71d      	b.n	1eaa <setup+0x2a>
    206e:	f009 fab9 	bl	b5e4 <micros>
            { Serial.printf("Failed init SD card: time taken %lu(us)\n", static_cast<unsigned long>(elapsed)); }
    2072:	4916      	ldr	r1, [pc, #88]	; (20cc <setup+0x24c>)
    2074:	1b82      	subs	r2, r0, r6
    2076:	480c      	ldr	r0, [pc, #48]	; (20a8 <setup+0x228>)
    2078:	f009 f82e 	bl	b0d8 <Print::printf(char const*, ...)>
    207c:	e733      	b.n	1ee6 <setup+0x66>
    207e:	bf00      	nop
    2080:	200034e8 	.word	0x200034e8
    2084:	20003864 	.word	0x20003864
    2088:	2000390c 	.word	0x2000390c
    208c:	2000390b 	.word	0x2000390b
    2090:	20003434 	.word	0x20003434
    2094:	20000be8 	.word	0x20000be8
    2098:	20000b28 	.word	0x20000b28
    209c:	200038d8 	.word	0x200038d8
    20a0:	200038e8 	.word	0x200038e8
    20a4:	200017e4 	.word	0x200017e4
    20a8:	20001a70 	.word	0x20001a70
    20ac:	200017fc 	.word	0x200017fc
    20b0:	200022a7 	.word	0x200022a7
    20b4:	200022a8 	.word	0x200022a8
    20b8:	200017c0 	.word	0x200017c0
    20bc:	2000179c 	.word	0x2000179c
    20c0:	20001750 	.word	0x20001750
    20c4:	20001730 	.word	0x20001730
    20c8:	20001708 	.word	0x20001708
    20cc:	20001770 	.word	0x20001770

000020d0 <hw::LedsDriver::begin_cycle()>:
{
    20d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (_cycle_state != CycleState::READY)
    20d4:	f890 70b0 	ldrb.w	r7, [r0, #176]	; 0xb0
{
    20d8:	b089      	sub	sp, #36	; 0x24
    20da:	4605      	mov	r5, r0
    if (_cycle_state != CycleState::READY)
    20dc:	2f00      	cmp	r7, #0
    20de:	f040 80e2 	bne.w	22a6 <hw::LedsDriver::begin_cycle()+0x1d6>
		yield();
    20e2:	f00a fd8f 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    20e6:	4b81      	ldr	r3, [pc, #516]	; (22ec <hw::LedsDriver::begin_cycle()+0x21c>)
    20e8:	781b      	ldrb	r3, [r3, #0]
    20ea:	2b00      	cmp	r3, #0
    20ec:	f040 80b5 	bne.w	225a <hw::LedsDriver::begin_cycle()+0x18a>
    20f0:	4b7f      	ldr	r3, [pc, #508]	; (22f0 <hw::LedsDriver::begin_cycle()+0x220>)
    20f2:	f8df 9224 	ldr.w	r9, [pc, #548]	; 2318 <hw::LedsDriver::begin_cycle()+0x248>
    20f6:	9303      	str	r3, [sp, #12]
    digitalWrite(CATHODE_ENABLE_PIN, LOW);
    20f8:	2100      	movs	r1, #0
    20fa:	200c      	movs	r0, #12
    20fc:	f009 fa9c 	bl	b638 <digitalWrite>
    digitalWrite(CATHODE_ADDR_PINA0, static_cast<bool>(_current_index & 0x01));
    2100:	f895 10b1 	ldrb.w	r1, [r5, #177]	; 0xb1
    2104:	2009      	movs	r0, #9
    Master.write_async(mcp23017::MCP_BASE_ADDR+3, tmp_buffer, 2, true);
    2106:	f04f 0801 	mov.w	r8, #1
    digitalWrite(CATHODE_ADDR_PINA0, static_cast<bool>(_current_index & 0x01));
    210a:	f001 0101 	and.w	r1, r1, #1
    210e:	4e79      	ldr	r6, [pc, #484]	; (22f4 <hw::LedsDriver::begin_cycle()+0x224>)
    2110:	f009 fa92 	bl	b638 <digitalWrite>
    digitalWrite(CATHODE_ADDR_PINA1, static_cast<bool>(_current_index & 0x02));
    2114:	f895 10b1 	ldrb.w	r1, [r5, #177]	; 0xb1
    2118:	200a      	movs	r0, #10
    211a:	f105 0478 	add.w	r4, r5, #120	; 0x78
    211e:	f3c1 0140 	ubfx	r1, r1, #1, #1
            .buffer = _mcp_write_buffer[_current_index][i],
    2122:	f04f 0a09 	mov.w	sl, #9
    digitalWrite(CATHODE_ADDR_PINA1, static_cast<bool>(_current_index & 0x02));
    2126:	f009 fa87 	bl	b638 <digitalWrite>
    digitalWrite(CATHODE_ADDR_PINA2, static_cast<bool>(_current_index & 0x04));
    212a:	f895 10b1 	ldrb.w	r1, [r5, #177]	; 0xb1
    212e:	200b      	movs	r0, #11
    2130:	f3c1 0180 	ubfx	r1, r1, #2, #1
    2134:	f009 fa80 	bl	b638 <digitalWrite>
    tmp_buffer[0] = static_cast<uint8_t>(mcp23017::registers::GPIOA);
    2138:	4a6f      	ldr	r2, [pc, #444]	; (22f8 <hw::LedsDriver::begin_cycle()+0x228>)
    213a:	f64f 7312 	movw	r3, #65298	; 0xff12
    Master.write_async(mcp23017::MCP_BASE_ADDR+3, tmp_buffer, 2, true);
    213e:	2123      	movs	r1, #35	; 0x23
    2140:	486e      	ldr	r0, [pc, #440]	; (22fc <hw::LedsDriver::begin_cycle()+0x22c>)
    2142:	f8cd 8000 	str.w	r8, [sp]
    tmp_buffer[0] = static_cast<uint8_t>(mcp23017::registers::GPIOA);
    2146:	8013      	strh	r3, [r2, #0]
    Master.write_async(mcp23017::MCP_BASE_ADDR+3, tmp_buffer, 2, true);
    2148:	2302      	movs	r3, #2
    214a:	f008 fbf1 	bl	a930 <IMX_RT1060_I2CMaster::write_async(unsigned char, unsigned char const*, unsigned int, bool)>
        explicit fixed_size_set(value_type val): datas{{val}}, size{0}
    214e:	2300      	movs	r3, #0
    _targeted_masters = masters_set(nullptr);
    2150:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 2310 <hw::LedsDriver::begin_cycle()+0x240>
    2154:	9304      	str	r3, [sp, #16]
    2156:	469c      	mov	ip, r3
    2158:	f88d 301c 	strb.w	r3, [sp, #28]
    215c:	46f3      	mov	fp, lr
    215e:	e9cd 3305 	strd	r3, r3, [sp, #20]
    2162:	ab08      	add	r3, sp, #32
    2164:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
    2168:	e8ab 0007 	stmia.w	fp!, {r0, r1, r2}
    216c:	f88b 3000 	strb.w	r3, [fp]
        if (!device)
    2170:	7973      	ldrb	r3, [r6, #5]
    2172:	2b02      	cmp	r3, #2
    2174:	d031      	beq.n	21da <hw::LedsDriver::begin_cycle()+0x10a>
            .buffer = _mcp_write_buffer[_current_index][i],
    2176:	f895 30b1 	ldrb.w	r3, [r5, #177]	; 0xb1
            .address = device.address,
    217a:	7932      	ldrb	r2, [r6, #4]
            .buffer = _mcp_write_buffer[_current_index][i],
    217c:	fb1a c303 	smlabb	r3, sl, r3, ip
        _write_calls[i] = hw::async::async_write{
    2180:	f804 8c24 	strb.w	r8, [r4, #-36]
    2184:	f804 2c30 	strb.w	r2, [r4, #-48]
                this->writer = writer;
    2188:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
            .buffer = _mcp_write_buffer[_current_index][i],
    218c:	442b      	add	r3, r5
    218e:	6022      	str	r2, [r4, #0]
        _write_calls[i] = hw::async::async_write{
    2190:	f844 3c2c 	str.w	r3, [r4, #-44]
    2194:	2303      	movs	r3, #3
    2196:	f844 3c28 	str.w	r3, [r4, #-40]
                this->state = async_state::Idle;
    219a:	2300      	movs	r3, #0
    219c:	60e3      	str	r3, [r4, #12]
        device.master.push(_write_nodes +i);
    219e:	6833      	ldr	r3, [r6, #0]
                { wqueue.push(node); }
    21a0:	1d18      	adds	r0, r3, #4
                if (node->is_anchor())
    21a2:	2a00      	cmp	r2, #0
    21a4:	d072      	beq.n	228c <hw::LedsDriver::begin_cycle()+0x1bc>
                    write_queue* current_last = prev;
    21a6:	689a      	ldr	r2, [r3, #8]
                    prev->next = node;
    21a8:	6094      	str	r4, [r2, #8]
                    node->prev->next = this;
    21aa:	6861      	ldr	r1, [r4, #4]
    21ac:	6088      	str	r0, [r1, #8]
                    prev = node->prev;
    21ae:	6099      	str	r1, [r3, #8]
                    node->prev = current_last;
    21b0:	6062      	str	r2, [r4, #4]
            { return MaxSize <= size; }
    21b2:	f89e 100c 	ldrb.w	r1, [lr, #12]
            if (is_full())
    21b6:	2902      	cmp	r1, #2
    21b8:	d80f      	bhi.n	21da <hw::LedsDriver::begin_cycle()+0x10a>
            for (size_type i=0; i<size; ++i)
    21ba:	b149      	cbz	r1, 21d0 <hw::LedsDriver::begin_cycle()+0x100>
                if (datas[i] == val)
    21bc:	f8de 2000 	ldr.w	r2, [lr]
    21c0:	4293      	cmp	r3, r2
    21c2:	d00a      	beq.n	21da <hw::LedsDriver::begin_cycle()+0x10a>
            for (size_type i=0; i<size; ++i)
    21c4:	2902      	cmp	r1, #2
    21c6:	d103      	bne.n	21d0 <hw::LedsDriver::begin_cycle()+0x100>
                if (datas[i] == val)
    21c8:	f8de 2004 	ldr.w	r2, [lr, #4]
    21cc:	4293      	cmp	r3, r2
    21ce:	d004      	beq.n	21da <hw::LedsDriver::begin_cycle()+0x10a>
            datas[size] = val;
    21d0:	f84e 3021 	str.w	r3, [lr, r1, lsl #2]
            size += 1;
    21d4:	3101      	adds	r1, #1
    21d6:	f88e 100c 	strb.w	r1, [lr, #12]
    for (mcp_count_type i=0; i<MCP_COUNT; ++i)
    21da:	f10c 0c03 	add.w	ip, ip, #3
    21de:	3608      	adds	r6, #8
    21e0:	3410      	adds	r4, #16
    21e2:	f1bc 0f09 	cmp.w	ip, #9
    21e6:	d1c3      	bne.n	2170 <hw::LedsDriver::begin_cycle()+0xa0>
		yield();
    21e8:	f00a fd0c 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    21ec:	4b3f      	ldr	r3, [pc, #252]	; (22ec <hw::LedsDriver::begin_cycle()+0x21c>)
    21ee:	781b      	ldrb	r3, [r3, #0]
    21f0:	b18b      	cbz	r3, 2216 <hw::LedsDriver::begin_cycle()+0x146>
    21f2:	4b43      	ldr	r3, [pc, #268]	; (2300 <hw::LedsDriver::begin_cycle()+0x230>)
    21f4:	781b      	ldrb	r3, [r3, #0]
    21f6:	07db      	lsls	r3, r3, #31
    21f8:	d50d      	bpl.n	2216 <hw::LedsDriver::begin_cycle()+0x146>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    21fa:	4a42      	ldr	r2, [pc, #264]	; (2304 <hw::LedsDriver::begin_cycle()+0x234>)
    21fc:	f8d9 3000 	ldr.w	r3, [r9]
    2200:	6812      	ldr	r2, [r2, #0]
    2202:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2204:	2b0e      	cmp	r3, #14
    2206:	d906      	bls.n	2216 <hw::LedsDriver::begin_cycle()+0x146>
    SHOW_MASTERS(_targeted_masters);
    2208:	9b03      	ldr	r3, [sp, #12]
    220a:	781b      	ldrb	r3, [r3, #0]
    220c:	b1a3      	cbz	r3, 2238 <hw::LedsDriver::begin_cycle()+0x168>
    220e:	493e      	ldr	r1, [pc, #248]	; (2308 <hw::LedsDriver::begin_cycle()+0x238>)
    2210:	483e      	ldr	r0, [pc, #248]	; (230c <hw::LedsDriver::begin_cycle()+0x23c>)
    2212:	f008 ff61 	bl	b0d8 <Print::printf(char const*, ...)>
    2216:	9b03      	ldr	r3, [sp, #12]
    2218:	781b      	ldrb	r3, [r3, #0]
    221a:	b16b      	cbz	r3, 2238 <hw::LedsDriver::begin_cycle()+0x168>
    221c:	4c3c      	ldr	r4, [pc, #240]	; (2310 <hw::LedsDriver::begin_cycle()+0x240>)
    221e:	f8df 8100 	ldr.w	r8, [pc, #256]	; 2320 <hw::LedsDriver::begin_cycle()+0x250>
    2222:	f104 0a0c 	add.w	sl, r4, #12
    2226:	4e39      	ldr	r6, [pc, #228]	; (230c <hw::LedsDriver::begin_cycle()+0x23c>)
    2228:	f854 2b04 	ldr.w	r2, [r4], #4
    222c:	4641      	mov	r1, r8
    222e:	4630      	mov	r0, r6
    2230:	f008 ff52 	bl	b0d8 <Print::printf(char const*, ...)>
    2234:	4554      	cmp	r4, sl
    2236:	d1f7      	bne.n	2228 <hw::LedsDriver::begin_cycle()+0x158>
    2238:	f8d9 4000 	ldr.w	r4, [r9]
    _cycle_state = CycleState::UPDATING_GPIOS;
    223c:	2301      	movs	r3, #1
    223e:	f8d9 6000 	ldr.w	r6, [r9]
    2242:	f885 30b0 	strb.w	r3, [r5, #176]	; 0xb0
	elapsedMicros & operator = (unsigned long val) { us = micros() - val; return *this; }
    2246:	1ba4      	subs	r4, r4, r6
    2248:	f009 f9cc 	bl	b5e4 <micros>
    224c:	4404      	add	r4, r0
    224e:	f8c5 40ac 	str.w	r4, [r5, #172]	; 0xac
}
    2252:	4638      	mov	r0, r7
    2254:	b009      	add	sp, #36	; 0x24
    2256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    225a:	4b29      	ldr	r3, [pc, #164]	; (2300 <hw::LedsDriver::begin_cycle()+0x230>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    225c:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 2318 <hw::LedsDriver::begin_cycle()+0x248>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2260:	781b      	ldrb	r3, [r3, #0]
    2262:	07da      	lsls	r2, r3, #31
    2264:	d537      	bpl.n	22d6 <hw::LedsDriver::begin_cycle()+0x206>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    2266:	4a27      	ldr	r2, [pc, #156]	; (2304 <hw::LedsDriver::begin_cycle()+0x234>)
    2268:	f8d9 3000 	ldr.w	r3, [r9]
    226c:	6812      	ldr	r2, [r2, #0]
    226e:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2270:	2b0e      	cmp	r3, #14
    LEDS_GPRINTF("Begin write cycle ... ");
    2272:	4b1f      	ldr	r3, [pc, #124]	; (22f0 <hw::LedsDriver::begin_cycle()+0x220>)
    2274:	9303      	str	r3, [sp, #12]
    2276:	f67f af3f 	bls.w	20f8 <hw::LedsDriver::begin_cycle()+0x28>
    227a:	781b      	ldrb	r3, [r3, #0]
    227c:	2b00      	cmp	r3, #0
    227e:	f43f af3b 	beq.w	20f8 <hw::LedsDriver::begin_cycle()+0x28>
    2282:	4924      	ldr	r1, [pc, #144]	; (2314 <hw::LedsDriver::begin_cycle()+0x244>)
    2284:	4821      	ldr	r0, [pc, #132]	; (230c <hw::LedsDriver::begin_cycle()+0x23c>)
    2286:	f008 ff27 	bl	b0d8 <Print::printf(char const*, ...)>
    228a:	e735      	b.n	20f8 <hw::LedsDriver::begin_cycle()+0x28>
                { return next == this; }
    228c:	68a2      	ldr	r2, [r4, #8]
                    if (node->is_empty())
    228e:	4294      	cmp	r4, r2
    2290:	d08f      	beq.n	21b2 <hw::LedsDriver::begin_cycle()+0xe2>
                    node->next->prev = prev;
    2292:	6899      	ldr	r1, [r3, #8]
    2294:	6051      	str	r1, [r2, #4]
                    node->prev->next = this;
    2296:	6862      	ldr	r2, [r4, #4]
    2298:	6090      	str	r0, [r2, #8]
                    prev->next = node->next;
    229a:	68a0      	ldr	r0, [r4, #8]
    229c:	6088      	str	r0, [r1, #8]
                    prev = node->prev;
    229e:	609a      	str	r2, [r3, #8]
                    node->next = node->prev = node;
    22a0:	e9c4 4401 	strd	r4, r4, [r4, #4]
    22a4:	e785      	b.n	21b2 <hw::LedsDriver::begin_cycle()+0xe2>
		yield();
    22a6:	f00a fcad 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    22aa:	4b10      	ldr	r3, [pc, #64]	; (22ec <hw::LedsDriver::begin_cycle()+0x21c>)
    22ac:	781b      	ldrb	r3, [r3, #0]
    22ae:	b16b      	cbz	r3, 22cc <hw::LedsDriver::begin_cycle()+0x1fc>
    22b0:	4b13      	ldr	r3, [pc, #76]	; (2300 <hw::LedsDriver::begin_cycle()+0x230>)
    22b2:	781b      	ldrb	r3, [r3, #0]
    22b4:	07d9      	lsls	r1, r3, #31
    22b6:	d509      	bpl.n	22cc <hw::LedsDriver::begin_cycle()+0x1fc>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    22b8:	4b17      	ldr	r3, [pc, #92]	; (2318 <hw::LedsDriver::begin_cycle()+0x248>)
    22ba:	4a12      	ldr	r2, [pc, #72]	; (2304 <hw::LedsDriver::begin_cycle()+0x234>)
    22bc:	681b      	ldr	r3, [r3, #0]
    22be:	6812      	ldr	r2, [r2, #0]
    22c0:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    22c2:	2b0e      	cmp	r3, #14
    22c4:	d902      	bls.n	22cc <hw::LedsDriver::begin_cycle()+0x1fc>
        LEDS_GPRINTF("INVALID CALL: begin_cycle caled with state=%u", static_cast<uint8_t>(_cycle_state));
    22c6:	4b0a      	ldr	r3, [pc, #40]	; (22f0 <hw::LedsDriver::begin_cycle()+0x220>)
    22c8:	781b      	ldrb	r3, [r3, #0]
    22ca:	b93b      	cbnz	r3, 22dc <hw::LedsDriver::begin_cycle()+0x20c>
        return err::errcode::INVALID_CALL;
    22cc:	2781      	movs	r7, #129	; 0x81
}
    22ce:	4638      	mov	r0, r7
    22d0:	b009      	add	sp, #36	; 0x24
    22d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22d6:	4b06      	ldr	r3, [pc, #24]	; (22f0 <hw::LedsDriver::begin_cycle()+0x220>)
    22d8:	9303      	str	r3, [sp, #12]
    22da:	e70d      	b.n	20f8 <hw::LedsDriver::begin_cycle()+0x28>
        LEDS_GPRINTF("INVALID CALL: begin_cycle caled with state=%u", static_cast<uint8_t>(_cycle_state));
    22dc:	f895 20b0 	ldrb.w	r2, [r5, #176]	; 0xb0
        return err::errcode::INVALID_CALL;
    22e0:	2781      	movs	r7, #129	; 0x81
        LEDS_GPRINTF("INVALID CALL: begin_cycle caled with state=%u", static_cast<uint8_t>(_cycle_state));
    22e2:	490e      	ldr	r1, [pc, #56]	; (231c <hw::LedsDriver::begin_cycle()+0x24c>)
    22e4:	4809      	ldr	r0, [pc, #36]	; (230c <hw::LedsDriver::begin_cycle()+0x23c>)
    22e6:	f008 fef7 	bl	b0d8 <Print::printf(char const*, ...)>
    22ea:	e7b2      	b.n	2252 <hw::LedsDriver::begin_cycle()+0x182>
    22ec:	2000390c 	.word	0x2000390c
    22f0:	200022a7 	.word	0x200022a7
    22f4:	20001ba0 	.word	0x20001ba0
    22f8:	200034fc 	.word	0x200034fc
    22fc:	20002aa8 	.word	0x20002aa8
    2300:	2000390b 	.word	0x2000390b
    2304:	200038e8 	.word	0x200038e8
    2308:	2000087c 	.word	0x2000087c
    230c:	20001a70 	.word	0x20001a70
    2310:	20003830 	.word	0x20003830
    2314:	20000700 	.word	0x20000700
    2318:	200038d8 	.word	0x200038d8
    231c:	200006c4 	.word	0x200006c4
    2320:	2000089c 	.word	0x2000089c

00002324 <hw::LedsDriver::end_cycle()>:

err::errcode hw::LedsDriver::end_cycle()
{
    if (_cycle_state != CycleState::ENDING)
    2324:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
    2328:	2b02      	cmp	r3, #2
{
    232a:	b5f0      	push	{r4, r5, r6, r7, lr}
    232c:	4607      	mov	r7, r0
    232e:	b083      	sub	sp, #12
    if (_cycle_state != CycleState::ENDING)
    2330:	d145      	bne.n	23be <hw::LedsDriver::end_cycle()+0x9a>
		yield();
    2332:	f00a fc67 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2336:	4b31      	ldr	r3, [pc, #196]	; (23fc <hw::LedsDriver::end_cycle()+0xd8>)
    2338:	781b      	ldrb	r3, [r3, #0]
    233a:	bb63      	cbnz	r3, 2396 <hw::LedsDriver::end_cycle()+0x72>
    233c:	4c30      	ldr	r4, [pc, #192]	; (2400 <hw::LedsDriver::end_cycle()+0xdc>)
    LEDS_GPRINTF("Ending cycle ... ");


    static uint8_t tmp_buffer[2] = {0};
    tmp_buffer[0] = static_cast<uint8_t>(mcp23017::registers::GPIOA);
    tmp_buffer[1] = ~(static_cast<uint8_t>(0x01) << _current_index);
    233e:	f897 10b1 	ldrb.w	r1, [r7, #177]	; 0xb1
    2342:	2301      	movs	r3, #1
    tmp_buffer[0] = static_cast<uint8_t>(mcp23017::registers::GPIOA);
    2344:	4a2f      	ldr	r2, [pc, #188]	; (2404 <hw::LedsDriver::end_cycle()+0xe0>)
    tmp_buffer[1] = ~(static_cast<uint8_t>(0x01) << _current_index);
    2346:	fa03 f101 	lsl.w	r1, r3, r1

    Master.write_async(mcp23017::MCP_BASE_ADDR+3, tmp_buffer, 2, true);
    234a:	9300      	str	r3, [sp, #0]
    234c:	482e      	ldr	r0, [pc, #184]	; (2408 <hw::LedsDriver::end_cycle()+0xe4>)
    234e:	2302      	movs	r3, #2
    tmp_buffer[1] = ~(static_cast<uint8_t>(0x01) << _current_index);
    2350:	43c9      	mvns	r1, r1
    elapsedMillis elapsed;
    while (elapsed < 10 && !Master.finished())
    2352:	4e2d      	ldr	r6, [pc, #180]	; (2408 <hw::LedsDriver::end_cycle()+0xe4>)
    tmp_buffer[1] = ~(static_cast<uint8_t>(0x01) << _current_index);
    2354:	7051      	strb	r1, [r2, #1]
    tmp_buffer[0] = static_cast<uint8_t>(mcp23017::registers::GPIOA);
    2356:	2112      	movs	r1, #18
    2358:	7011      	strb	r1, [r2, #0]
    Master.write_async(mcp23017::MCP_BASE_ADDR+3, tmp_buffer, 2, true);
    235a:	2123      	movs	r1, #35	; 0x23
    235c:	f008 fae8 	bl	a930 <IMX_RT1060_I2CMaster::write_async(unsigned char, unsigned char const*, unsigned int, bool)>
    2360:	6825      	ldr	r5, [r4, #0]
	elapsedMillis(void) { ms = millis(); }
    2362:	e002      	b.n	236a <hw::LedsDriver::end_cycle()+0x46>
    while (elapsed < 10 && !Master.finished())
    2364:	f008 f800 	bl	a368 <IMX_RT1060_I2CMaster::finished()>
    2368:	b920      	cbnz	r0, 2374 <hw::LedsDriver::end_cycle()+0x50>
    236a:	6823      	ldr	r3, [r4, #0]
    236c:	4630      	mov	r0, r6
	operator unsigned long () const { return millis() - ms; }
    236e:	1b5b      	subs	r3, r3, r5
    2370:	2b09      	cmp	r3, #9
    2372:	d9f7      	bls.n	2364 <hw::LedsDriver::end_cycle()+0x40>
        { /* noting */ }

    
    /* enable selected column */
    digitalWrite(hw::CATHODE_ENABLE_PIN, HIGH);
    2374:	200c      	movs	r0, #12
    2376:	2101      	movs	r1, #1
    2378:	f009 f95e 	bl	b638 <digitalWrite>
    /* prepare next cycle */
    _current_index = (_current_index+1) % hw::MULTIPLEX_COLUMS_COUNT;
    237c:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
    _cycle_state = CycleState::READY;
    2380:	2200      	movs	r2, #0
    _current_index = (_current_index+1) % hw::MULTIPLEX_COLUMS_COUNT;
    2382:	3301      	adds	r3, #1
    _cycle_state = CycleState::READY;
    2384:	4610      	mov	r0, r2
    2386:	f887 20b0 	strb.w	r2, [r7, #176]	; 0xb0
    _current_index = (_current_index+1) % hw::MULTIPLEX_COLUMS_COUNT;
    238a:	f003 0307 	and.w	r3, r3, #7
    238e:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

    return err::errcode::OK;
}
    2392:	b003      	add	sp, #12
    2394:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2396:	4b1d      	ldr	r3, [pc, #116]	; (240c <hw::LedsDriver::end_cycle()+0xe8>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    2398:	4c19      	ldr	r4, [pc, #100]	; (2400 <hw::LedsDriver::end_cycle()+0xdc>)
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    239a:	781b      	ldrb	r3, [r3, #0]
    239c:	07db      	lsls	r3, r3, #31
    239e:	d5ce      	bpl.n	233e <hw::LedsDriver::end_cycle()+0x1a>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    23a0:	4a1b      	ldr	r2, [pc, #108]	; (2410 <hw::LedsDriver::end_cycle()+0xec>)
    23a2:	6823      	ldr	r3, [r4, #0]
    23a4:	6812      	ldr	r2, [r2, #0]
    23a6:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    23a8:	2b0e      	cmp	r3, #14
    23aa:	d9c8      	bls.n	233e <hw::LedsDriver::end_cycle()+0x1a>
    LEDS_GPRINTF("Ending cycle ... ");
    23ac:	4b19      	ldr	r3, [pc, #100]	; (2414 <hw::LedsDriver::end_cycle()+0xf0>)
    23ae:	781b      	ldrb	r3, [r3, #0]
    23b0:	2b00      	cmp	r3, #0
    23b2:	d0c4      	beq.n	233e <hw::LedsDriver::end_cycle()+0x1a>
    23b4:	4918      	ldr	r1, [pc, #96]	; (2418 <hw::LedsDriver::end_cycle()+0xf4>)
    23b6:	4819      	ldr	r0, [pc, #100]	; (241c <hw::LedsDriver::end_cycle()+0xf8>)
    23b8:	f008 fe8e 	bl	b0d8 <Print::printf(char const*, ...)>
    23bc:	e7bf      	b.n	233e <hw::LedsDriver::end_cycle()+0x1a>
		yield();
    23be:	f00a fc21 	bl	cc04 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    23c2:	4b0e      	ldr	r3, [pc, #56]	; (23fc <hw::LedsDriver::end_cycle()+0xd8>)
    23c4:	781b      	ldrb	r3, [r3, #0]
    23c6:	b1ab      	cbz	r3, 23f4 <hw::LedsDriver::end_cycle()+0xd0>
    23c8:	4b10      	ldr	r3, [pc, #64]	; (240c <hw::LedsDriver::end_cycle()+0xe8>)
    23ca:	781b      	ldrb	r3, [r3, #0]
    23cc:	07da      	lsls	r2, r3, #31
    23ce:	d511      	bpl.n	23f4 <hw::LedsDriver::end_cycle()+0xd0>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    23d0:	4b0b      	ldr	r3, [pc, #44]	; (2400 <hw::LedsDriver::end_cycle()+0xdc>)
    23d2:	4a0f      	ldr	r2, [pc, #60]	; (2410 <hw::LedsDriver::end_cycle()+0xec>)
    23d4:	681b      	ldr	r3, [r3, #0]
    23d6:	6812      	ldr	r2, [r2, #0]
    23d8:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    23da:	2b0e      	cmp	r3, #14
    23dc:	d90a      	bls.n	23f4 <hw::LedsDriver::end_cycle()+0xd0>
        LEDS_GPRINTF("INVALID CALL: end_cycle caled with state=%u", static_cast<uint8_t>(_cycle_state));
    23de:	4b0d      	ldr	r3, [pc, #52]	; (2414 <hw::LedsDriver::end_cycle()+0xf0>)
    23e0:	781b      	ldrb	r3, [r3, #0]
    23e2:	b13b      	cbz	r3, 23f4 <hw::LedsDriver::end_cycle()+0xd0>
    23e4:	f897 20b0 	ldrb.w	r2, [r7, #176]	; 0xb0
    23e8:	490d      	ldr	r1, [pc, #52]	; (2420 <hw::LedsDriver::end_cycle()+0xfc>)
    23ea:	480c      	ldr	r0, [pc, #48]	; (241c <hw::LedsDriver::end_cycle()+0xf8>)
    23ec:	f008 fe74 	bl	b0d8 <Print::printf(char const*, ...)>
        return err::errcode::INVALID_CALL;
    23f0:	2081      	movs	r0, #129	; 0x81
    23f2:	e7ce      	b.n	2392 <hw::LedsDriver::end_cycle()+0x6e>
    23f4:	2081      	movs	r0, #129	; 0x81
}
    23f6:	b003      	add	sp, #12
    23f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23fa:	bf00      	nop
    23fc:	2000390c 	.word	0x2000390c
    2400:	200038d8 	.word	0x200038d8
    2404:	20003504 	.word	0x20003504
    2408:	20002aa8 	.word	0x20002aa8
    240c:	2000390b 	.word	0x2000390b
    2410:	200038e8 	.word	0x200038e8
    2414:	200022a7 	.word	0x200022a7
    2418:	20000a08 	.word	0x20000a08
    241c:	20001a70 	.word	0x20001a70
    2420:	200009cc 	.word	0x200009cc

00002424 <hw::LedsDriver::update()>:
{
    2424:	b538      	push	{r3, r4, r5, lr}
    switch (_cycle_state)
    2426:	f890 40b0 	ldrb.w	r4, [r0, #176]	; 0xb0
{
    242a:	4605      	mov	r5, r0
    switch (_cycle_state)
    242c:	2c01      	cmp	r4, #1
    242e:	d012      	beq.n	2456 <hw::LedsDriver::update()+0x32>
    2430:	2c02      	cmp	r4, #2
    2432:	d015      	beq.n	2460 <hw::LedsDriver::update()+0x3c>
    2434:	b114      	cbz	r4, 243c <hw::LedsDriver::update()+0x18>
    2436:	2400      	movs	r4, #0
}
    2438:	4620      	mov	r0, r4
    243a:	bd38      	pop	{r3, r4, r5, pc}
	operator unsigned long () const { return micros() - us; }
    243c:	f009 f8d2 	bl	b5e4 <micros>
            if (_elapsed_time < _refresh_period)
    2440:	e9d5 322a 	ldrd	r3, r2, [r5, #168]	; 0xa8
    2444:	1a80      	subs	r0, r0, r2
    2446:	4283      	cmp	r3, r0
    2448:	d8f6      	bhi.n	2438 <hw::LedsDriver::update()+0x14>
            if (err::errcode errno = begin_cycle(); errno != err::errcode::OK)
    244a:	4628      	mov	r0, r5
    244c:	f7ff fe40 	bl	20d0 <hw::LedsDriver::begin_cycle()>
    2450:	4604      	mov	r4, r0
    2452:	2800      	cmp	r0, #0
    2454:	d1f0      	bne.n	2438 <hw::LedsDriver::update()+0x14>
            return update_mcps();
    2456:	4628      	mov	r0, r5
}
    2458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            return update_mcps();
    245c:	f7fe bddc 	b.w	1018 <hw::LedsDriver::update_mcps()>
}
    2460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            return end_cycle();
    2464:	f7ff bf5e 	b.w	2324 <hw::LedsDriver::end_cycle()>

00002468 <loop>:

void loop() {

    static elapsedMillis elapsed_since_heartbeat = 0;
    2468:	4b12      	ldr	r3, [pc, #72]	; (24b4 <loop+0x4c>)
    246a:	681a      	ldr	r2, [r3, #0]
    246c:	07d2      	lsls	r2, r2, #31
void loop() {
    246e:	b570      	push	{r4, r5, r6, lr}
    static elapsedMillis elapsed_since_heartbeat = 0;
    2470:	d518      	bpl.n	24a4 <loop+0x3c>
	operator unsigned long () const { return millis() - ms; }
    2472:	4d11      	ldr	r5, [pc, #68]	; (24b8 <loop+0x50>)
    2474:	4c11      	ldr	r4, [pc, #68]	; (24bc <loop+0x54>)
    2476:	682a      	ldr	r2, [r5, #0]
    2478:	6823      	ldr	r3, [r4, #0]
    247a:	1a9b      	subs	r3, r3, r2
    static constexpr const unsigned long heartbeat_ms = 100;
    static bool heartbeat_state = true;

    if (heartbeat_ms < elapsed_since_heartbeat)
    247c:	2b64      	cmp	r3, #100	; 0x64
    247e:	d90a      	bls.n	2496 <loop+0x2e>
    {
        digitalWrite(LED_BUILTIN, heartbeat_state ? HIGH : LOW);
    2480:	4e0f      	ldr	r6, [pc, #60]	; (24c0 <loop+0x58>)
    2482:	200d      	movs	r0, #13
    2484:	7831      	ldrb	r1, [r6, #0]
    2486:	f009 f8d7 	bl	b638 <digitalWrite>
        elapsed_since_heartbeat = 0;
        heartbeat_state = !heartbeat_state;
    248a:	7833      	ldrb	r3, [r6, #0]
    248c:	6822      	ldr	r2, [r4, #0]
    248e:	f083 0301 	eor.w	r3, r3, #1
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    2492:	602a      	str	r2, [r5, #0]
    2494:	7033      	strb	r3, [r6, #0]
	elapsedMicros(void) { us = micros(); }
    2496:	f009 f8a5 	bl	b5e4 <micros>
    }

    elapsedMicros elapsed;
    hw::LedsDriver::GlobalDriver.update();
    249a:	480a      	ldr	r0, [pc, #40]	; (24c4 <loop+0x5c>)
    // Serial.printf("%lu\n", static_cast<unsigned long>(elapsed));

    // delay(100);
}
    249c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    hw::LedsDriver::GlobalDriver.update();
    24a0:	f7ff bfc0 	b.w	2424 <hw::LedsDriver::update()>
    24a4:	4c05      	ldr	r4, [pc, #20]	; (24bc <loop+0x54>)
    static elapsedMillis elapsed_since_heartbeat = 0;
    24a6:	2101      	movs	r1, #1
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    24a8:	4d03      	ldr	r5, [pc, #12]	; (24b8 <loop+0x50>)
    24aa:	6822      	ldr	r2, [r4, #0]
    24ac:	6019      	str	r1, [r3, #0]
    24ae:	602a      	str	r2, [r5, #0]
    24b0:	e7e2      	b.n	2478 <loop+0x10>
    24b2:	bf00      	nop
    24b4:	200032d0 	.word	0x200032d0
    24b8:	200034f4 	.word	0x200034f4
    24bc:	200038d8 	.word	0x200038d8
    24c0:	200022a9 	.word	0x200022a9
    24c4:	20003434 	.word	0x20003434

000024c8 <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    24c8:	4770      	bx	lr
    24ca:	bf00      	nop

000024cc <SDClass::dateTime(unsigned short*, unsigned short*)>:
{
    24cc:	b530      	push	{r4, r5, lr}
    24ce:	b083      	sub	sp, #12
    24d0:	4605      	mov	r5, r0
    24d2:	460c      	mov	r4, r1
uint32_t makeTime(const DateTimeFields &tm); // convert DateTimeFields to 32 bit time

class teensy3_clock_class
{
public:
        static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
    24d4:	f009 f9fc 	bl	b8d0 <rtc_get>
	if (now < 315532800) { // before 1980
    24d8:	4b1c      	ldr	r3, [pc, #112]	; (254c <SDClass::dateTime(unsigned short*, unsigned short*)+0x80>)
    24da:	4298      	cmp	r0, r3
    24dc:	d804      	bhi.n	24e8 <SDClass::dateTime(unsigned short*, unsigned short*)+0x1c>
		*date = 0;
    24de:	2300      	movs	r3, #0
    24e0:	802b      	strh	r3, [r5, #0]
		*time = 0;
    24e2:	8023      	strh	r3, [r4, #0]
}
    24e4:	b003      	add	sp, #12
    24e6:	bd30      	pop	{r4, r5, pc}
		breakTime(now, datetime);
    24e8:	4669      	mov	r1, sp
    24ea:	f008 fe03 	bl	b0f4 <breakTime(unsigned long, DateTimeFields&)>
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    24ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
    24f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
    24f6:	3301      	adds	r3, #1
    24f8:	f89d 1004 	ldrb.w	r1, [sp, #4]
  year -= 1980;
    24fc:	3a50      	subs	r2, #80	; 0x50
    24fe:	b2db      	uxtb	r3, r3
    2500:	b292      	uxth	r2, r2
  return year > 127 || month > 12 || day > 31 ? 0 :
    2502:	291f      	cmp	r1, #31
    2504:	bf98      	it	ls
    2506:	2b0c      	cmpls	r3, #12
    2508:	d801      	bhi.n	250e <SDClass::dateTime(unsigned short*, unsigned short*)+0x42>
    250a:	2a7f      	cmp	r2, #127	; 0x7f
    250c:	d918      	bls.n	2540 <SDClass::dateTime(unsigned short*, unsigned short*)+0x74>
         year << 9 | month << 5 | day;
    250e:	2100      	movs	r1, #0
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    2510:	f89d 2002 	ldrb.w	r2, [sp, #2]
    2514:	f89d 3001 	ldrb.w	r3, [sp, #1]
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    2518:	8029      	strh	r1, [r5, #0]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    251a:	2a17      	cmp	r2, #23
    251c:	bf98      	it	ls
    251e:	2b3b      	cmpls	r3, #59	; 0x3b
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    2520:	f89d 1000 	ldrb.w	r1, [sp]
    2524:	d801      	bhi.n	252a <SDClass::dateTime(unsigned short*, unsigned short*)+0x5e>
    2526:	293b      	cmp	r1, #59	; 0x3b
    2528:	d903      	bls.n	2532 <SDClass::dateTime(unsigned short*, unsigned short*)+0x66>
         hour << 11 | minute << 5 | second >> 1;
    252a:	2300      	movs	r3, #0
    252c:	8023      	strh	r3, [r4, #0]
}
    252e:	b003      	add	sp, #12
    2530:	bd30      	pop	{r4, r5, pc}
    2532:	015b      	lsls	r3, r3, #5
    2534:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    2538:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    253c:	b29b      	uxth	r3, r3
    253e:	e7f5      	b.n	252c <SDClass::dateTime(unsigned short*, unsigned short*)+0x60>
         year << 9 | month << 5 | day;
    2540:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    2544:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
    2548:	b289      	uxth	r1, r1
    254a:	e7e1      	b.n	2510 <SDClass::dateTime(unsigned short*, unsigned short*)+0x44>
    254c:	12cea5ff 	.word	0x12cea5ff

00002550 <SDClass::open(char const*, unsigned char)>:
public:
	SDClass() { }
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    2550:	2b01      	cmp	r3, #1
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    2552:	b5f0      	push	{r4, r5, r6, r7, lr}
    2554:	4605      	mov	r5, r0
    2556:	b095      	sub	sp, #84	; 0x54
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    2558:	d03d      	beq.n	25d6 <SDClass::open(char const*, unsigned char)+0x86>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    255a:	2b02      	cmp	r3, #2
    255c:	f240 2002 	movw	r0, #514	; 0x202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    2560:	f101 0104 	add.w	r1, r1, #4
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    2564:	bf0c      	ite	eq
    2566:	4603      	moveq	r3, r0
    2568:	2300      	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
    256a:	4668      	mov	r0, sp
    256c:	f005 f8a8 	bl	76c0 <FsVolume::open(char const*, int)>
    2570:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2572:	2b00      	cmp	r3, #0
    2574:	d038      	beq.n	25e8 <SDClass::open(char const*, unsigned char)+0x98>
		if (file) return File(new SDFile(file));
    2576:	205c      	movs	r0, #92	; 0x5c
class FileImpl {
    2578:	2600      	movs	r6, #0
    257a:	f009 f973 	bl	b864 <operator new(unsigned int)>
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    257e:	4b21      	ldr	r3, [pc, #132]	; (2604 <SDClass::open(char const*, unsigned char)+0xb4>)
    2580:	af04      	add	r7, sp, #16
		if (file) return File(new SDFile(file));
    2582:	4604      	mov	r4, r0
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    2584:	e9c0 3600 	strd	r3, r6, [r0]
class Print
    2588:	9b01      	ldr	r3, [sp, #4]
    258a:	4639      	mov	r1, r7
    258c:	3018      	adds	r0, #24
    258e:	f840 3c0c 	str.w	r3, [r0, #-12]
class Stream : public Print
    2592:	4b1d      	ldr	r3, [pc, #116]	; (2608 <SDClass::open(char const*, unsigned char)+0xb8>)
    2594:	f840 3c10 	str.w	r3, [r0, #-16]
    2598:	9b02      	ldr	r3, [sp, #8]
    259a:	f840 3c08 	str.w	r3, [r0, #-8]
    259e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    25a2:	f800 3c04 	strb.w	r3, [r0, #-4]
    25a6:	f004 ff2f 	bl	7408 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    25aa:	4b18      	ldr	r3, [pc, #96]	; (260c <SDClass::open(char const*, unsigned char)+0xbc>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    25ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    25b0:	65a6      	str	r6, [r4, #88]	; 0x58
    25b2:	60a3      	str	r3, [r4, #8]
	File(FileImpl *file) {
    25b4:	4b16      	ldr	r3, [pc, #88]	; (2610 <SDClass::open(char const*, unsigned char)+0xc0>)
	constexpr Print() : write_error(0) {}
    25b6:	606e      	str	r6, [r5, #4]
    25b8:	602b      	str	r3, [r5, #0]
		if (f) f->refcount++;
    25ba:	6863      	ldr	r3, [r4, #4]
    25bc:	732e      	strb	r6, [r5, #12]
    25be:	3301      	adds	r3, #1
    25c0:	60aa      	str	r2, [r5, #8]
		f = file;
    25c2:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
    25c4:	6063      	str	r3, [r4, #4]
    25c6:	4b13      	ldr	r3, [pc, #76]	; (2614 <SDClass::open(char const*, unsigned char)+0xc4>)
  ~FsBaseFile() {close();}
    25c8:	4638      	mov	r0, r7
    25ca:	9300      	str	r3, [sp, #0]
    25cc:	f004 ff5e 	bl	748c <FsBaseFile::close()>
		return File();
	}
    25d0:	4628      	mov	r0, r5
    25d2:	b015      	add	sp, #84	; 0x54
    25d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    25d6:	f244 2302 	movw	r3, #16898	; 0x4202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    25da:	3104      	adds	r1, #4
    25dc:	4668      	mov	r0, sp
    25de:	f005 f86f 	bl	76c0 <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    25e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    25e4:	2b00      	cmp	r3, #0
    25e6:	d1c6      	bne.n	2576 <SDClass::open(char const*, unsigned char)+0x26>
    25e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    25ea:	2b00      	cmp	r3, #0
    25ec:	d1c3      	bne.n	2576 <SDClass::open(char const*, unsigned char)+0x26>
    25ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	constexpr File() : f(nullptr) { }
    25f2:	4a07      	ldr	r2, [pc, #28]	; (2610 <SDClass::open(char const*, unsigned char)+0xc0>)
    25f4:	af04      	add	r7, sp, #16
    25f6:	732b      	strb	r3, [r5, #12]
    25f8:	602a      	str	r2, [r5, #0]
    25fa:	612b      	str	r3, [r5, #16]
    25fc:	e9c5 3101 	strd	r3, r1, [r5, #4]
    2600:	e7e1      	b.n	25c6 <SDClass::open(char const*, unsigned char)+0x76>
    2602:	bf00      	nop
    2604:	20000fd8 	.word	0x20000fd8
    2608:	20001034 	.word	0x20001034
    260c:	20000fb4 	.word	0x20000fb4
    2610:	20000f88 	.word	0x20000f88
    2614:	20000e2c 	.word	0x20000e2c

00002618 <SDClass::rmdir(char const*)>:
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
    2618:	b510      	push	{r4, lr}
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
    261a:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    261e:	b08e      	sub	sp, #56	; 0x38
    2620:	460a      	mov	r2, r1
    2622:	b144      	cbz	r4, 2636 <SDClass::rmdir(char const*)+0x1e>
  FatFile() {}
    2624:	2300      	movs	r3, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    2626:	4621      	mov	r1, r4
    2628:	4668      	mov	r0, sp
    262a:	9300      	str	r3, [sp, #0]
    262c:	f002 fe1e 	bl	526c <FatFile::open(FatVolume*, char const*, int)>
    2630:	b980      	cbnz	r0, 2654 <SDClass::rmdir(char const*)+0x3c>
		return sdfs.rmdir(filepath);
	}
    2632:	b00e      	add	sp, #56	; 0x38
    2634:	bd10      	pop	{r4, pc}
    2636:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->rmdir(path) : false;
    263a:	b141      	cbz	r1, 264e <SDClass::rmdir(char const*)+0x36>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    263c:	4623      	mov	r3, r4
    263e:	4668      	mov	r0, sp
  ExFatFile() {}
    2640:	940c      	str	r4, [sp, #48]	; 0x30
    2642:	f000 ff31 	bl	34a8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2646:	b950      	cbnz	r0, 265e <SDClass::rmdir(char const*)+0x46>
    2648:	2000      	movs	r0, #0
    264a:	b00e      	add	sp, #56	; 0x38
    264c:	bd10      	pop	{r4, pc}
    264e:	4608      	mov	r0, r1
    2650:	b00e      	add	sp, #56	; 0x38
    2652:	bd10      	pop	{r4, pc}
    2654:	4668      	mov	r0, sp
    2656:	f003 f85d 	bl	5714 <FatFile::rmdir()>
    265a:	b00e      	add	sp, #56	; 0x38
    265c:	bd10      	pop	{r4, pc}
    265e:	4668      	mov	r0, sp
    2660:	f000 ffe0 	bl	3624 <ExFatFile::rmdir()>
    2664:	2800      	cmp	r0, #0
    2666:	d0ef      	beq.n	2648 <SDClass::rmdir(char const*)+0x30>
    2668:	e7e3      	b.n	2632 <SDClass::rmdir(char const*)+0x1a>
    266a:	bf00      	nop

0000266c <SDClass::rename(char const*, char const*)>:
	bool rename(const char *oldfilepath, const char *newfilepath) {
    266c:	b570      	push	{r4, r5, r6, lr}
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    266e:	f8d0 5484 	ldr.w	r5, [r0, #1156]	; 0x484
    2672:	b08e      	sub	sp, #56	; 0x38
    2674:	4616      	mov	r6, r2
    2676:	b15d      	cbz	r5, 2690 <SDClass::rename(char const*, char const*)+0x24>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    2678:	f505 6589 	add.w	r5, r5, #1096	; 0x448
    267c:	2300      	movs	r3, #0
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    267e:	460a      	mov	r2, r1
    2680:	4668      	mov	r0, sp
    2682:	4629      	mov	r1, r5
    2684:	9300      	str	r3, [sp, #0]
    2686:	f002 fd6f 	bl	5168 <FatFile::open(FatFile*, char const*, int)>
    268a:	b990      	cbnz	r0, 26b2 <SDClass::rename(char const*, char const*)+0x46>
	}
    268c:	b00e      	add	sp, #56	; 0x38
    268e:	bd70      	pop	{r4, r5, r6, pc}
    2690:	f8d0 0488 	ldr.w	r0, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    2694:	2800      	cmp	r0, #0
    2696:	d0f9      	beq.n	268c <SDClass::rename(char const*, char const*)+0x20>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    2698:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    269c:	460a      	mov	r2, r1
    269e:	462b      	mov	r3, r5
    26a0:	4668      	mov	r0, sp
    26a2:	4621      	mov	r1, r4
    26a4:	950c      	str	r5, [sp, #48]	; 0x30
    26a6:	f000 fe83 	bl	33b0 <ExFatFile::open(ExFatFile*, char const*, int)>
    26aa:	b948      	cbnz	r0, 26c0 <SDClass::rename(char const*, char const*)+0x54>
    26ac:	2000      	movs	r0, #0
    26ae:	b00e      	add	sp, #56	; 0x38
    26b0:	bd70      	pop	{r4, r5, r6, pc}
    26b2:	4632      	mov	r2, r6
    26b4:	4629      	mov	r1, r5
    26b6:	4668      	mov	r0, sp
    26b8:	f002 ff36 	bl	5528 <FatFile::rename(FatFile*, char const*)>
    26bc:	b00e      	add	sp, #56	; 0x38
    26be:	bd70      	pop	{r4, r5, r6, pc}
    26c0:	4632      	mov	r2, r6
    26c2:	4621      	mov	r1, r4
    26c4:	4668      	mov	r0, sp
    26c6:	f001 f901 	bl	38cc <ExFatFile::rename(ExFatFile*, char const*)>
    26ca:	2800      	cmp	r0, #0
    26cc:	d0ee      	beq.n	26ac <SDClass::rename(char const*, char const*)+0x40>
    26ce:	e7dd      	b.n	268c <SDClass::rename(char const*, char const*)+0x20>

000026d0 <SDClass::remove(char const*)>:
	bool remove(const char *filepath) {
    26d0:	b510      	push	{r4, lr}
    return m_fVol ? m_fVol->remove(path) :
    26d2:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    26d6:	b08e      	sub	sp, #56	; 0x38
    26d8:	460a      	mov	r2, r1
    26da:	b14c      	cbz	r4, 26f0 <SDClass::remove(char const*)+0x20>
    26dc:	2000      	movs	r0, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    26de:	2301      	movs	r3, #1
    26e0:	4621      	mov	r1, r4
    26e2:	9000      	str	r0, [sp, #0]
    26e4:	4668      	mov	r0, sp
    26e6:	f002 fdc1 	bl	526c <FatFile::open(FatVolume*, char const*, int)>
    26ea:	b980      	cbnz	r0, 270e <SDClass::remove(char const*)+0x3e>
	}
    26ec:	b00e      	add	sp, #56	; 0x38
    26ee:	bd10      	pop	{r4, pc}
    26f0:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->remove(path) : false;
    26f4:	b141      	cbz	r1, 2708 <SDClass::remove(char const*)+0x38>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    26f6:	2301      	movs	r3, #1
    26f8:	4668      	mov	r0, sp
    26fa:	940c      	str	r4, [sp, #48]	; 0x30
    26fc:	f000 fed4 	bl	34a8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2700:	b950      	cbnz	r0, 2718 <SDClass::remove(char const*)+0x48>
    2702:	2000      	movs	r0, #0
    2704:	b00e      	add	sp, #56	; 0x38
    2706:	bd10      	pop	{r4, pc}
    2708:	4608      	mov	r0, r1
    270a:	b00e      	add	sp, #56	; 0x38
    270c:	bd10      	pop	{r4, pc}
    270e:	4668      	mov	r0, sp
    2710:	f003 feb2 	bl	6478 <FatFile::remove()>
    2714:	b00e      	add	sp, #56	; 0x38
    2716:	bd10      	pop	{r4, pc}
    2718:	4668      	mov	r0, sp
    271a:	f000 ff29 	bl	3570 <ExFatFile::remove()>
    271e:	2800      	cmp	r0, #0
    2720:	d0ef      	beq.n	2702 <SDClass::remove(char const*)+0x32>
    2722:	e7e3      	b.n	26ec <SDClass::remove(char const*)+0x1c>

00002724 <SDClass::mkdir(char const*)>:
	bool mkdir(const char *filepath) {
    2724:	b530      	push	{r4, r5, lr}
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    2726:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    272a:	b08f      	sub	sp, #60	; 0x3c
    272c:	460a      	mov	r2, r1
    272e:	b14c      	cbz	r4, 2744 <SDClass::mkdir(char const*)+0x20>
    2730:	2500      	movs	r5, #0
    return sub.mkdir(vwd(), path, pFlag);
    2732:	2301      	movs	r3, #1
    2734:	f504 6189 	add.w	r1, r4, #1096	; 0x448
    2738:	4668      	mov	r0, sp
    273a:	9500      	str	r5, [sp, #0]
    273c:	f002 fc9e 	bl	507c <FatFile::mkdir(FatFile*, char const*, bool)>
	}
    2740:	b00f      	add	sp, #60	; 0x3c
    2742:	bd30      	pop	{r4, r5, pc}
    2744:	f8d0 0488 	ldr.w	r0, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    2748:	2800      	cmp	r0, #0
    274a:	d0f9      	beq.n	2740 <SDClass::mkdir(char const*)+0x1c>
    return sub.mkdir(vwd(), path, pFlag);
    274c:	f500 6189 	add.w	r1, r0, #1096	; 0x448
    2750:	2301      	movs	r3, #1
    2752:	4668      	mov	r0, sp
    2754:	940c      	str	r4, [sp, #48]	; 0x30
    2756:	f001 f93b 	bl	39d0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    275a:	b00f      	add	sp, #60	; 0x3c
    275c:	bd30      	pop	{r4, r5, pc}
    275e:	bf00      	nop

00002760 <SDClass::exists(char const*)>:
	bool exists(const char *filepath) {
    2760:	b510      	push	{r4, lr}
    return m_fVol ? m_fVol->exists(path) :
    2762:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    2766:	b08e      	sub	sp, #56	; 0x38
    2768:	460a      	mov	r2, r1
    276a:	b13c      	cbz	r4, 277c <SDClass::exists(char const*)+0x1c>
    276c:	2300      	movs	r3, #0
    return tmp.open(this, path, O_RDONLY);
    276e:	4621      	mov	r1, r4
    2770:	4668      	mov	r0, sp
    2772:	9300      	str	r3, [sp, #0]
    2774:	f002 fd7a 	bl	526c <FatFile::open(FatVolume*, char const*, int)>
	}
    2778:	b00e      	add	sp, #56	; 0x38
    277a:	bd10      	pop	{r4, pc}
    277c:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->exists(path) : false;
    2780:	b131      	cbz	r1, 2790 <SDClass::exists(char const*)+0x30>
    return tmp.open(this, path, O_RDONLY);
    2782:	4623      	mov	r3, r4
    2784:	4668      	mov	r0, sp
    2786:	940c      	str	r4, [sp, #48]	; 0x30
    2788:	f000 fe8e 	bl	34a8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    278c:	b00e      	add	sp, #56	; 0x38
    278e:	bd10      	pop	{r4, pc}
    2790:	4608      	mov	r0, r1
    2792:	b00e      	add	sp, #56	; 0x38
    2794:	bd10      	pop	{r4, pc}
    2796:	bf00      	nop

00002798 <SDClass::usedSize()>:
	uint64_t usedSize() {
    2798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    279a:	4605      	mov	r5, r0
		if (!cardPreviouslyPresent) return (uint64_t)0;
    279c:	f890 04d0 	ldrb.w	r0, [r0, #1232]	; 0x4d0
    27a0:	b908      	cbnz	r0, 27a6 <SDClass::usedSize()+0xe>
    27a2:	4601      	mov	r1, r0
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
    27a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return m_fVol ? m_fVol->clusterCount() :
    27a6:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    27aa:	2b00      	cmp	r3, #0
    27ac:	d04c      	beq.n	2848 <SDClass::usedSize()+0xb0>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    27ae:	69dc      	ldr	r4, [r3, #28]
    27b0:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    27b4:	3c01      	subs	r4, #1
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    27b6:	2800      	cmp	r0, #0
    27b8:	d054      	beq.n	2864 <SDClass::usedSize()+0xcc>
    27ba:	6803      	ldr	r3, [r0, #0]
    27bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    27be:	4798      	blx	r3
    27c0:	b1e0      	cbz	r0, 27fc <SDClass::usedSize()+0x64>
    27c2:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    }
    errorPrint(pr);
  }
  //----------------------------------------------------------------------------
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
    27c6:	b378      	cbz	r0, 2828 <SDClass::usedSize()+0x90>
    27c8:	6803      	ldr	r3, [r0, #0]
    27ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    27cc:	4798      	blx	r3
    27ce:	b9a8      	cbnz	r0, 27fc <SDClass::usedSize()+0x64>
    27d0:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
    27d4:	b340      	cbz	r0, 2828 <SDClass::usedSize()+0x90>
      return m_card->setDedicatedSpi(value);
    27d6:	6803      	ldr	r3, [r0, #0]
    27d8:	2101      	movs	r1, #1
    27da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    27dc:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    27de:	4607      	mov	r7, r0
    27e0:	b310      	cbz	r0, 2828 <SDClass::usedSize()+0x90>
    return m_fVol ? m_fVol->freeClusterCount() :
    27e2:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
    27e6:	bb58      	cbnz	r0, 2840 <SDClass::usedSize()+0xa8>
    27e8:	f8d5 6488 	ldr.w	r6, [r5, #1160]	; 0x488
    27ec:	4633      	mov	r3, r6
           m_xVol ? m_xVol->freeClusterCount() : 0;
    27ee:	b96e      	cbnz	r6, 280c <SDClass::usedSize()+0x74>
    27f0:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    if (m_card) {
    27f4:	b990      	cbnz	r0, 281c <SDClass::usedSize()+0x84>
  uint32_t bytesPerCluster() const {
    27f6:	2000      	movs	r0, #0
    27f8:	4601      	mov	r1, r0
    27fa:	e7d3      	b.n	27a4 <SDClass::usedSize()+0xc>
    return m_fVol ? m_fVol->freeClusterCount() :
    27fc:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
    2800:	b9e8      	cbnz	r0, 283e <SDClass::usedSize()+0xa6>
    2802:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
           m_xVol ? m_xVol->freeClusterCount() : 0;
    2806:	2b00      	cmp	r3, #0
    2808:	d0f5      	beq.n	27f6 <SDClass::usedSize()+0x5e>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    280a:	4607      	mov	r7, r0
    280c:	4618      	mov	r0, r3
    280e:	f002 f9b3 	bl	4b78 <ExFatPartition::freeClusterCount()>
    2812:	4606      	mov	r6, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    2814:	b13f      	cbz	r7, 2826 <SDClass::usedSize()+0x8e>
    2816:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    if (m_card) {
    281a:	b128      	cbz	r0, 2828 <SDClass::usedSize()+0x90>
      return m_card->setDedicatedSpi(value);
    281c:	6803      	ldr	r3, [r0, #0]
    281e:	2100      	movs	r1, #0
    2820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2822:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
    2824:	b100      	cbz	r0, 2828 <SDClass::usedSize()+0x90>
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    2826:	1ba4      	subs	r4, r4, r6
    return m_fVol ? m_fVol->bytesPerCluster() :
    2828:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    282c:	b1fb      	cbz	r3, 286e <SDClass::usedSize()+0xd6>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    282e:	799b      	ldrb	r3, [r3, #6]
    2830:	f44f 7100 	mov.w	r1, #512	; 0x200
    2834:	4099      	lsls	r1, r3
		  * (uint64_t)sdfs.bytesPerCluster();
    2836:	b289      	uxth	r1, r1
    2838:	fba1 0104 	umull	r0, r1, r1, r4
	}
    283c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    283e:	2700      	movs	r7, #0
    return m_fVol ? m_fVol->freeClusterCount() :
    2840:	f004 fc6c 	bl	711c <FatPartition::freeClusterCount()>
    2844:	4606      	mov	r6, r0
    2846:	e7e5      	b.n	2814 <SDClass::usedSize()+0x7c>
    2848:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
  uint32_t clusterCount() const {
    284c:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
           m_xVol ? m_xVol->clusterCount() : 0;
    2850:	b1b3      	cbz	r3, 2880 <SDClass::usedSize()+0xe8>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
    2852:	f8d3 4430 	ldr.w	r4, [r3, #1072]	; 0x430
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    2856:	2800      	cmp	r0, #0
    2858:	d1af      	bne.n	27ba <SDClass::usedSize()+0x22>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    285a:	4618      	mov	r0, r3
    285c:	f002 f98c 	bl	4b78 <ExFatPartition::freeClusterCount()>
    2860:	4606      	mov	r6, r0
    2862:	e7e0      	b.n	2826 <SDClass::usedSize()+0x8e>
    return m_fVol ? m_fVol->freeClusterCount() :
    2864:	4618      	mov	r0, r3
    2866:	f004 fc59 	bl	711c <FatPartition::freeClusterCount()>
    286a:	4606      	mov	r6, r0
    286c:	e7db      	b.n	2826 <SDClass::usedSize()+0x8e>
    286e:	f8d5 6488 	ldr.w	r6, [r5, #1160]	; 0x488
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    2872:	2e00      	cmp	r6, #0
    2874:	d0bf      	beq.n	27f6 <SDClass::usedSize()+0x5e>
		  * (uint64_t)sdfs.bytesPerCluster();
    2876:	f8d6 143c 	ldr.w	r1, [r6, #1084]	; 0x43c
    287a:	fba1 0104 	umull	r0, r1, r1, r4
	}
    287e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2880:	2800      	cmp	r0, #0
    2882:	d0b8      	beq.n	27f6 <SDClass::usedSize()+0x5e>
           m_xVol ? m_xVol->clusterCount() : 0;
    2884:	461c      	mov	r4, r3
    2886:	e798      	b.n	27ba <SDClass::usedSize()+0x22>

00002888 <SDClass::totalSize()>:
	uint64_t totalSize() {
		if (!cardPreviouslyPresent) return (uint64_t)0;
    2888:	f890 34d0 	ldrb.w	r3, [r0, #1232]	; 0x4d0
    288c:	b163      	cbz	r3, 28a8 <SDClass::totalSize()+0x20>
    return m_fVol ? m_fVol->clusterCount() :
    288e:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
    2892:	b163      	cbz	r3, 28ae <SDClass::totalSize()+0x26>
    2894:	799a      	ldrb	r2, [r3, #6]
    2896:	f44f 7000 	mov.w	r0, #512	; 0x200
    return m_lastCluster - 1;
    289a:	69d9      	ldr	r1, [r3, #28]
    return m_bytesPerSector << m_sectorsPerClusterShift;
    289c:	4090      	lsls	r0, r2
    return m_lastCluster - 1;
    289e:	3901      	subs	r1, #1
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    28a0:	b280      	uxth	r0, r0
    28a2:	fba0 0101 	umull	r0, r1, r0, r1
    28a6:	4770      	bx	lr
		if (!cardPreviouslyPresent) return (uint64_t)0;
    28a8:	4618      	mov	r0, r3
    28aa:	4601      	mov	r1, r0
	}
    28ac:	4770      	bx	lr
    28ae:	f8d0 0488 	ldr.w	r0, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->clusterCount() : 0;
    28b2:	2800      	cmp	r0, #0
    28b4:	d0f9      	beq.n	28aa <SDClass::totalSize()+0x22>
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    28b6:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
    28ba:	f8d0 0430 	ldr.w	r0, [r0, #1072]	; 0x430
    28be:	fba1 0100 	umull	r0, r1, r1, r0
    28c2:	4770      	bx	lr

000028c4 <SDClass::format(int, char, Print&)>:
{
    28c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SdCard* card() {return m_card;}
    28c8:	f8d0 5490 	ldr.w	r5, [r0, #1168]	; 0x490
    28cc:	b08d      	sub	sp, #52	; 0x34
	if (!card) return false; // no SD card
    28ce:	b14d      	cbz	r5, 28e4 <SDClass::format(int, char, Print&)+0x20>
    28d0:	4698      	mov	r8, r3
	uint32_t sectors = card->sectorCount();
    28d2:	682b      	ldr	r3, [r5, #0]
    28d4:	4604      	mov	r4, r0
    28d6:	4628      	mov	r0, r5
    28d8:	69db      	ldr	r3, [r3, #28]
    28da:	4798      	blx	r3
	if (sectors <= 12288) return false; // card too small
    28dc:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
	uint32_t sectors = card->sectorCount();
    28e0:	4606      	mov	r6, r0
	if (sectors <= 12288) return false; // card too small
    28e2:	d804      	bhi.n	28ee <SDClass::format(int, char, Print&)+0x2a>
	if (!card) return false; // no SD card
    28e4:	2600      	movs	r6, #0
}
    28e6:	4630      	mov	r0, r6
    28e8:	b00d      	add	sp, #52	; 0x34
    28ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t *buf = (uint8_t *)malloc(512);
    28ee:	f44f 7000 	mov.w	r0, #512	; 0x200
    28f2:	f00a ff3f 	bl	d774 <malloc>
	if (!buf) return false; // unable to allocate memory
    28f6:	4607      	mov	r7, r0
    28f8:	2800      	cmp	r0, #0
    28fa:	d0f3      	beq.n	28e4 <SDClass::format(int, char, Print&)+0x20>
		ret = exFatFormatter.format(card, buf, &pr);
    28fc:	f10d 0904 	add.w	r9, sp, #4
	if (sectors > 67108864) {
    2900:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
		ret = exFatFormatter.format(card, buf, &pr);
    2904:	4602      	mov	r2, r0
    2906:	4643      	mov	r3, r8
    2908:	4629      	mov	r1, r5
    290a:	4648      	mov	r0, r9
	if (sectors > 67108864) {
    290c:	d92e      	bls.n	296c <SDClass::format(int, char, Print&)+0xa8>
		ret = exFatFormatter.format(card, buf, &pr);
    290e:	f001 fbff 	bl	4110 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    2912:	4606      	mov	r6, r0
	free(buf);
    2914:	4638      	mov	r0, r7
    2916:	f00a ff35 	bl	d784 <free>
	if (ret) {
    291a:	2e00      	cmp	r6, #0
    291c:	d0e2      	beq.n	28e4 <SDClass::format(int, char, Print&)+0x20>
		card->syncDevice();
    291e:	682b      	ldr	r3, [r5, #0]
    2920:	4628      	mov	r0, r5
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
    2922:	1d27      	adds	r7, r4, #4
		card->syncDevice();
    2924:	6a1b      	ldr	r3, [r3, #32]
    2926:	4798      	blx	r3
    if (spiConfigBackupPin == 255) {
    2928:	f894 34c0 	ldrb.w	r3, [r4, #1216]	; 0x4c0
    292c:	2bff      	cmp	r3, #255	; 0xff
    292e:	d021      	beq.n	2974 <SDClass::format(int, char, Print&)+0xb0>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    2930:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
    2934:	f504 6594 	add.w	r5, r4, #1184	; 0x4a0
    2938:	9302      	str	r3, [sp, #8]
    293a:	4628      	mov	r0, r5
    293c:	f8d4 34c8 	ldr.w	r3, [r4, #1224]	; 0x4c8
  bool cardBegin(SdSpiConfig spiConfig) {
    2940:	9303      	str	r3, [sp, #12]
    2942:	f8b4 34c0 	ldrh.w	r3, [r4, #1216]	; 0x4c0
    2946:	f8ad 3004 	strh.w	r3, [sp, #4]
    294a:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
    294e:	f005 fd7d 	bl	844c <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    2952:	f894 34b1 	ldrb.w	r3, [r4, #1201]	; 0x4b1
    m_card = m_cardFactory.newCard(spiConfig);
    2956:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    295a:	2b00      	cmp	r3, #0
    295c:	d1c3      	bne.n	28e6 <SDClass::format(int, char, Print&)+0x22>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    295e:	2301      	movs	r3, #1
    2960:	4629      	mov	r1, r5
    2962:	4638      	mov	r0, r7
    2964:	461a      	mov	r2, r3
    2966:	f004 fe39 	bl	75dc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    296a:	e7bc      	b.n	28e6 <SDClass::format(int, char, Print&)+0x22>
		ret = fatFormatter.format(card, buf, &pr);
    296c:	f004 f89c 	bl	6aa8 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    2970:	4606      	mov	r6, r0
    2972:	e7cf      	b.n	2914 <SDClass::format(int, char, Print&)+0x50>
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    2974:	f204 4594 	addw	r5, r4, #1172	; 0x494
    2978:	f894 14cc 	ldrb.w	r1, [r4, #1228]	; 0x4cc
    297c:	4628      	mov	r0, r5
    297e:	f006 fbad 	bl	90dc <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    2982:	4628      	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    2984:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    2988:	f005 fe0a 	bl	85a0 <SdioCard::errorCode() const>
    298c:	2800      	cmp	r0, #0
    298e:	d1aa      	bne.n	28e6 <SDClass::format(int, char, Print&)+0x22>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2990:	2301      	movs	r3, #1
    2992:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    2996:	4638      	mov	r0, r7
    2998:	461a      	mov	r2, r3
    299a:	f004 fe1f 	bl	75dc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    299e:	e7a2      	b.n	28e6 <SDClass::format(int, char, Print&)+0x22>

000029a0 <SDClass::mediaPresent()>:
{
    29a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  SdCard* card() {return m_card;}
    29a2:	f8d0 6490 	ldr.w	r6, [r0, #1168]	; 0x490
    29a6:	b085      	sub	sp, #20
    29a8:	4604      	mov	r4, r0
	if (card) {
    29aa:	2e00      	cmp	r6, #0
    29ac:	d042      	beq.n	2a34 <SDClass::mediaPresent()+0x94>
		if (cardPreviouslyPresent) {
    29ae:	f890 54d0 	ldrb.w	r5, [r0, #1232]	; 0x4d0
			if (csPin_ == BUILTIN_SDCARD) {
    29b2:	f890 34d1 	ldrb.w	r3, [r0, #1233]	; 0x4d1
		if (cardPreviouslyPresent) {
    29b6:	b185      	cbz	r5, 29da <SDClass::mediaPresent()+0x3a>
			if (csPin_ == BUILTIN_SDCARD) {
    29b8:	2bfe      	cmp	r3, #254	; 0xfe
    29ba:	d063      	beq.n	2a84 <SDClass::mediaPresent()+0xe4>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    29bc:	f894 04d2 	ldrb.w	r0, [r4, #1234]	; 0x4d2
    29c0:	2836      	cmp	r0, #54	; 0x36
    29c2:	d93d      	bls.n	2a40 <SDClass::mediaPresent()+0xa0>
					ret = card->readCID(&cid);
    29c4:	6833      	ldr	r3, [r6, #0]
    29c6:	4669      	mov	r1, sp
    29c8:	4630      	mov	r0, r6
    29ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    29cc:	4798      	blx	r3
    29ce:	4605      	mov	r5, r0
}
    29d0:	4628      	mov	r0, r5
	cardPreviouslyPresent = ret;
    29d2:	f884 54d0 	strb.w	r5, [r4, #1232]	; 0x4d0
}
    29d6:	b005      	add	sp, #20
    29d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (csPin_ == BUILTIN_SDCARD) ret = digitalReadFast(_SD_DAT3);
    29da:	2bfe      	cmp	r3, #254	; 0xfe
    29dc:	d026      	beq.n	2a2c <SDClass::mediaPresent()+0x8c>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    29de:	f890 04d2 	ldrb.w	r0, [r0, #1234]	; 0x4d2
    29e2:	2836      	cmp	r0, #54	; 0x36
    29e4:	d949      	bls.n	2a7a <SDClass::mediaPresent()+0xda>
    if (spiConfigBackupPin == 255) {
    29e6:	f894 34c0 	ldrb.w	r3, [r4, #1216]	; 0x4c0
				ret = sdfs.restart();
    29ea:	1d27      	adds	r7, r4, #4
    29ec:	2bff      	cmp	r3, #255	; 0xff
    29ee:	d02d      	beq.n	2a4c <SDClass::mediaPresent()+0xac>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    29f0:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    m_spiCard.begin(config);
    29f4:	f504 6694 	add.w	r6, r4, #1184	; 0x4a0
    29f8:	f8d4 24c8 	ldr.w	r2, [r4, #1224]	; 0x4c8
  bool cardBegin(SdSpiConfig spiConfig) {
    29fc:	9301      	str	r3, [sp, #4]
    29fe:	4630      	mov	r0, r6
    2a00:	f8b4 34c0 	ldrh.w	r3, [r4, #1216]	; 0x4c0
    2a04:	9202      	str	r2, [sp, #8]
    2a06:	f8ad 3000 	strh.w	r3, [sp]
    2a0a:	466b      	mov	r3, sp
    2a0c:	cb0e      	ldmia	r3, {r1, r2, r3}
    2a0e:	f005 fd1d 	bl	844c <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    2a12:	f894 34b1 	ldrb.w	r3, [r4, #1201]	; 0x4b1
    m_card = m_cardFactory.newCard(spiConfig);
    2a16:	f8c4 6490 	str.w	r6, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    2a1a:	b963      	cbnz	r3, 2a36 <SDClass::mediaPresent()+0x96>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2a1c:	2301      	movs	r3, #1
    2a1e:	4631      	mov	r1, r6
    2a20:	4638      	mov	r0, r7
    2a22:	461a      	mov	r2, r3
    2a24:	f004 fdda 	bl	75dc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    2a28:	4605      	mov	r5, r0
    2a2a:	e004      	b.n	2a36 <SDClass::mediaPresent()+0x96>
			return (CORE_PIN46_PINREG & CORE_PIN46_BITMASK) ? 1 : 0;
    2a2c:	4b1f      	ldr	r3, [pc, #124]	; (2aac <SDClass::mediaPresent()+0x10c>)
    2a2e:	689b      	ldr	r3, [r3, #8]
			if (ret)
    2a30:	039b      	lsls	r3, r3, #14
    2a32:	d4d8      	bmi.n	29e6 <SDClass::mediaPresent()+0x46>
		ret = false;
    2a34:	2500      	movs	r5, #0
}
    2a36:	4628      	mov	r0, r5
	cardPreviouslyPresent = ret;
    2a38:	f884 54d0 	strb.w	r5, [r4, #1232]	; 0x4d0
}
    2a3c:	b005      	add	sp, #20
    2a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    2a40:	f008 fe24 	bl	b68c <digitalRead>
    2a44:	1e05      	subs	r5, r0, #0
    2a46:	bf18      	it	ne
    2a48:	2501      	movne	r5, #1
    2a4a:	e7f4      	b.n	2a36 <SDClass::mediaPresent()+0x96>
    m_sdioCard.begin(config);
    2a4c:	f204 4694 	addw	r6, r4, #1172	; 0x494
    2a50:	f894 14cc 	ldrb.w	r1, [r4, #1228]	; 0x4cc
    2a54:	4630      	mov	r0, r6
    2a56:	f006 fb41 	bl	90dc <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    2a5a:	4630      	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
    2a5c:	f8c4 6490 	str.w	r6, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    2a60:	f005 fd9e 	bl	85a0 <SdioCard::errorCode() const>
    2a64:	2800      	cmp	r0, #0
    2a66:	d1e6      	bne.n	2a36 <SDClass::mediaPresent()+0x96>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2a68:	2301      	movs	r3, #1
    2a6a:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    2a6e:	4638      	mov	r0, r7
    2a70:	461a      	mov	r2, r3
    2a72:	f004 fdb3 	bl	75dc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    2a76:	4605      	mov	r5, r0
    2a78:	e7dd      	b.n	2a36 <SDClass::mediaPresent()+0x96>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    2a7a:	f008 fe07 	bl	b68c <digitalRead>
			if (ret)
    2a7e:	2800      	cmp	r0, #0
    2a80:	d1b1      	bne.n	29e6 <SDClass::mediaPresent()+0x46>
    2a82:	e7d7      	b.n	2a34 <SDClass::mediaPresent()+0x94>
				s = card->status();
    2a84:	6833      	ldr	r3, [r6, #0]
    2a86:	4630      	mov	r0, r6
    2a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    2a8a:	4798      	blx	r3
			if (s == 0xFFFFFFFF) {
    2a8c:	1c42      	adds	r2, r0, #1
				s = card->status();
    2a8e:	4603      	mov	r3, r0
			if (s == 0xFFFFFFFF) {
    2a90:	d094      	beq.n	29bc <SDClass::mediaPresent()+0x1c>
			} else if (s == 0) {
    2a92:	2800      	cmp	r0, #0
    2a94:	d1cf      	bne.n	2a36 <SDClass::mediaPresent()+0x96>
				if (csPin_ == BUILTIN_SDCARD) 
    2a96:	f894 24d1 	ldrb.w	r2, [r4, #1233]	; 0x4d1
    2a9a:	2afe      	cmp	r2, #254	; 0xfe
    2a9c:	d1ca      	bne.n	2a34 <SDClass::mediaPresent()+0x94>
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    2a9e:	2103      	movs	r1, #3
    2aa0:	202e      	movs	r0, #46	; 0x2e
				ret = false;
    2aa2:	461d      	mov	r5, r3
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    2aa4:	f008 fe04 	bl	b6b0 <pinMode>
    2aa8:	e7c5      	b.n	2a36 <SDClass::mediaPresent()+0x96>
    2aaa:	bf00      	nop
    2aac:	42008000 	.word	0x42008000

00002ab0 <SDClass::begin(unsigned char)>:
bool SDClass::begin(uint8_t csPin) {
    2ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ab2:	460d      	mov	r5, r1
    2ab4:	4604      	mov	r4, r0
    2ab6:	b085      	sub	sp, #20
	FsDateTime::setCallback(dateTime);
    2ab8:	4830      	ldr	r0, [pc, #192]	; (2b7c <SDClass::begin(unsigned char)+0xcc>)
    2aba:	f007 f84f 	bl	9b5c <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>
	if (csPin == BUILTIN_SDCARD) {
    2abe:	2dfe      	cmp	r5, #254	; 0xfe
	csPin_ = csPin; // remember which one passed in. 
    2ac0:	f884 54d1 	strb.w	r5, [r4, #1233]	; 0x4d1
	if (csPin == BUILTIN_SDCARD) {
    2ac4:	d026      	beq.n	2b14 <SDClass::begin(unsigned char)+0x64>
	if (csPin < NUM_DIGITAL_PINS) {
    2ac6:	2d36      	cmp	r5, #54	; 0x36
    2ac8:	d902      	bls.n	2ad0 <SDClass::begin(unsigned char)+0x20>
	return false;
    2aca:	2000      	movs	r0, #0
}
    2acc:	b005      	add	sp, #20
    2ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
    spiConfigBackupOptions = spiConfig.options;
    2ad0:	2600      	movs	r6, #0
    spiConfigBackupClock = spiConfig.maxSck;
    2ad2:	4b2b      	ldr	r3, [pc, #172]	; (2b80 <SDClass::begin(unsigned char)+0xd0>)
    m_spiCard.begin(config);
    2ad4:	f504 6794 	add.w	r7, r4, #1184	; 0x4a0
    2ad8:	f88d 5004 	strb.w	r5, [sp, #4]
    2adc:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    2ae0:	f88d 6005 	strb.w	r6, [sp, #5]
    2ae4:	4638      	mov	r0, r7
    spiConfigBackupPin = spiConfig.csPin;
    2ae6:	f884 54c0 	strb.w	r5, [r4, #1216]	; 0x4c0
    spiConfigBackupOptions = spiConfig.options;
    2aea:	f884 64c1 	strb.w	r6, [r4, #1217]	; 0x4c1
    spiConfigBackupPort = spiConfig.spiPort;
    2aee:	f8c4 64c8 	str.w	r6, [r4, #1224]	; 0x4c8
    2af2:	e9cd 3602 	strd	r3, r6, [sp, #8]
    2af6:	ab04      	add	r3, sp, #16
    2af8:	e913 000e 	ldmdb	r3, {r1, r2, r3}
    2afc:	f005 fca6 	bl	844c <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    2b00:	f894 34b1 	ldrb.w	r3, [r4, #1201]	; 0x4b1
    m_card = m_cardFactory.newCard(spiConfig);
    2b04:	f8c4 7490 	str.w	r7, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    2b08:	b383      	cbz	r3, 2b6c <SDClass::begin(unsigned char)+0xbc>
    return cardBegin(spiConfig) && Vol::begin(m_card);
    2b0a:	4630      	mov	r0, r6
		cardPreviouslyPresent = ret;
    2b0c:	f884 04d0 	strb.w	r0, [r4, #1232]	; 0x4d0
}
    2b10:	b005      	add	sp, #20
    2b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_sdioCard.begin(config);
    2b14:	f204 4594 	addw	r5, r4, #1172	; 0x494
    sdioConfigBackup = sdioConfig;
    2b18:	2300      	movs	r3, #0
    spiConfigBackupPin = 255;
    2b1a:	22ff      	movs	r2, #255	; 0xff
    2b1c:	4619      	mov	r1, r3
    2b1e:	4628      	mov	r0, r5
    sdioConfigBackup = sdioConfig;
    2b20:	f884 34cc 	strb.w	r3, [r4, #1228]	; 0x4cc
    spiConfigBackupPin = 255;
    2b24:	f884 24c0 	strb.w	r2, [r4, #1216]	; 0x4c0
    2b28:	f006 fad8 	bl	90dc <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    2b2c:	4628      	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    2b2e:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    2b32:	f005 fd35 	bl	85a0 <SdioCard::errorCode() const>
    2b36:	b970      	cbnz	r0, 2b56 <SDClass::begin(unsigned char)+0xa6>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2b38:	2301      	movs	r3, #1
    2b3a:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    2b3e:	1d20      	adds	r0, r4, #4
    2b40:	461a      	mov	r2, r3
    2b42:	f004 fd4b 	bl	75dc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    2b46:	b130      	cbz	r0, 2b56 <SDClass::begin(unsigned char)+0xa6>
		cardPreviouslyPresent = ret;
    2b48:	2201      	movs	r2, #1
		cdPin_ = _SD_DAT3;
    2b4a:	232e      	movs	r3, #46	; 0x2e
		cardPreviouslyPresent = ret;
    2b4c:	f884 24d0 	strb.w	r2, [r4, #1232]	; 0x4d0
		cdPin_ = _SD_DAT3;
    2b50:	f884 34d2 	strb.w	r3, [r4, #1234]	; 0x4d2
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    2b54:	e7ba      	b.n	2acc <SDClass::begin(unsigned char)+0x1c>
		cdPin_ = _SD_DAT3;
    2b56:	202e      	movs	r0, #46	; 0x2e
		cardPreviouslyPresent = ret;
    2b58:	2500      	movs	r5, #0
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    2b5a:	2103      	movs	r1, #3
		cdPin_ = _SD_DAT3;
    2b5c:	f884 04d2 	strb.w	r0, [r4, #1234]	; 0x4d2
		cardPreviouslyPresent = ret;
    2b60:	f884 54d0 	strb.w	r5, [r4, #1232]	; 0x4d0
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    2b64:	f008 fda4 	bl	b6b0 <pinMode>
    2b68:	4628      	mov	r0, r5
    2b6a:	e7af      	b.n	2acc <SDClass::begin(unsigned char)+0x1c>
    2b6c:	2301      	movs	r3, #1
    2b6e:	4639      	mov	r1, r7
    2b70:	1d20      	adds	r0, r4, #4
    2b72:	461a      	mov	r2, r3
    2b74:	f004 fd32 	bl	75dc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    2b78:	e7c8      	b.n	2b0c <SDClass::begin(unsigned char)+0x5c>
    2b7a:	bf00      	nop
    2b7c:	000024cd 	.word	0x000024cd
    2b80:	017d7840 	.word	0x017d7840

00002b84 <_GLOBAL__sub_I_SD>:
	SDClass() { }
    2b84:	4818      	ldr	r0, [pc, #96]	; (2be8 <_GLOBAL__sub_I_SD+0x64>)
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
    2b86:	f04f 0c29 	mov.w	ip, #41	; 0x29
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    2b8a:	4a18      	ldr	r2, [pc, #96]	; (2bec <_GLOBAL__sub_I_SD+0x68>)
  FsVolume() {}
    2b8c:	2300      	movs	r3, #0
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    2b8e:	4918      	ldr	r1, [pc, #96]	; (2bf0 <_GLOBAL__sub_I_SD+0x6c>)
	}
	return true;
}
    2b90:	b410      	push	{r4}
    2b92:	f8c0 2494 	str.w	r2, [r0, #1172]	; 0x494
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    2b96:	2207      	movs	r2, #7
    2b98:	f880 c4b1 	strb.w	ip, [r0, #1201]	; 0x4b1
    2b9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
	SPISettings() : _clock(4000000) {
    2ba0:	f8c0 14a8 	str.w	r1, [r0, #1192]	; 0x4a8
    2ba4:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    2ba8:	4c12      	ldr	r4, [pc, #72]	; (2bf4 <_GLOBAL__sub_I_SD+0x70>)
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    2baa:	f8c0 24ac 	str.w	r2, [r0, #1196]	; 0x4ac
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
    2bae:	4a12      	ldr	r2, [pc, #72]	; (2bf8 <_GLOBAL__sub_I_SD+0x74>)
    2bb0:	f8a0 14d0 	strh.w	r1, [r0, #1232]	; 0x4d0
  SdioConfig() {}
    2bb4:	f8a0 349c 	strh.w	r3, [r0, #1180]	; 0x49c
  SharedSpiCard() {}
    2bb8:	f880 34b5 	strb.w	r3, [r0, #1205]	; 0x4b5
    2bbc:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
    2bc0:	f880 c4d2 	strb.w	ip, [r0, #1234]	; 0x4d2
    2bc4:	6004      	str	r4, [r0, #0]
  DedicatedSpiCard() {}
    2bc6:	f8c0 24a0 	str.w	r2, [r0, #1184]	; 0x4a0
SDClass SD;
    2bca:	490c      	ldr	r1, [pc, #48]	; (2bfc <_GLOBAL__sub_I_SD+0x78>)
    2bcc:	4a0c      	ldr	r2, [pc, #48]	; (2c00 <_GLOBAL__sub_I_SD+0x7c>)
}
    2bce:	f85d 4b04 	ldr.w	r4, [sp], #4
    2bd2:	f8c0 3484 	str.w	r3, [r0, #1156]	; 0x484
    2bd6:	f8c0 3488 	str.w	r3, [r0, #1160]	; 0x488
class SdBase : public Vol {
    2bda:	f8c0 3490 	str.w	r3, [r0, #1168]	; 0x490
    2bde:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
SDClass SD;
    2be2:	f00a bd0f 	b.w	d604 <__aeabi_atexit>
    2be6:	bf00      	nop
    2be8:	20002b44 	.word	0x20002b44
    2bec:	20001088 	.word	0x20001088
    2bf0:	003d0900 	.word	0x003d0900
    2bf4:	20001058 	.word	0x20001058
    2bf8:	20000e74 	.word	0x20000e74
    2bfc:	000024c9 	.word	0x000024c9
    2c00:	20001bc0 	.word	0x20001bc0

00002c04 <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    2c04:	b570      	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    2c06:	f100 0324 	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    2c0a:	b084      	sub	sp, #16
    2c0c:	468c      	mov	ip, r1
    2c0e:	4604      	mov	r4, r0
  DirPos_t pos = m_dirPos;
    2c10:	ad01      	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    2c12:	4616      	mov	r6, r2
  DirPos_t pos = m_dirPos;
    2c14:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    2c18:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    2c1c:	ea4f 124c 	mov.w	r2, ip, lsl #5
    2c20:	4629      	mov	r1, r5
    2c22:	6a20      	ldr	r0, [r4, #32]
    2c24:	f001 fec4 	bl	49b0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    2c28:	2801      	cmp	r0, #1
    2c2a:	d106      	bne.n	2c3a <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    2c2c:	4632      	mov	r2, r6
    2c2e:	4629      	mov	r1, r5
    2c30:	6a20      	ldr	r0, [r4, #32]
    2c32:	f001 fea1 	bl	4978 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    2c36:	b004      	add	sp, #16
    2c38:	bd70      	pop	{r4, r5, r6, pc}
    return nullptr;
    2c3a:	2000      	movs	r0, #0
}
    2c3c:	b004      	add	sp, #16
    2c3e:	bd70      	pop	{r4, r5, r6, pc}

00002c40 <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    2c40:	b510      	push	{r4, lr}
    2c42:	4604      	mov	r4, r0
  bool rtn = sync();
    2c44:	f000 fdba 	bl	37bc <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    2c48:	2300      	movs	r3, #0
    2c4a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    2c4e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    2c52:	bd10      	pop	{r4, pc}

00002c54 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    2c54:	b538      	push	{r3, r4, r5, lr}
    2c56:	4614      	mov	r4, r2
    2c58:	460d      	mov	r5, r1
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    2c5a:	2200      	movs	r2, #0
    2c5c:	f100 0124 	add.w	r1, r0, #36	; 0x24
    2c60:	6a00      	ldr	r0, [r0, #32]
    2c62:	f001 fe89 	bl	4978 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    2c66:	4603      	mov	r3, r0
    2c68:	b120      	cbz	r0, 2c74 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x20>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    2c6a:	8942      	ldrh	r2, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
  *ptime = getLe16(df->createTime);
  return true;
    2c6c:	2001      	movs	r0, #1
  *pdate = getLe16(df->createDate);
    2c6e:	802a      	strh	r2, [r5, #0]
    2c70:	891b      	ldrh	r3, [r3, #8]
  *ptime = getLe16(df->createTime);
    2c72:	8023      	strh	r3, [r4, #0]

 fail:
  return false;
}
    2c74:	bd38      	pop	{r3, r4, r5, pc}
    2c76:	bf00      	nop

00002c78 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    2c78:	b538      	push	{r3, r4, r5, lr}
    2c7a:	4614      	mov	r4, r2
    2c7c:	460d      	mov	r5, r1
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    2c7e:	2200      	movs	r2, #0
    2c80:	f100 0124 	add.w	r1, r0, #36	; 0x24
    2c84:	6a00      	ldr	r0, [r0, #32]
    2c86:	f001 fe77 	bl	4978 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    2c8a:	4603      	mov	r3, r0
    2c8c:	b120      	cbz	r0, 2c98 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x20>
    2c8e:	89c2      	ldrh	r2, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
  *ptime = getLe16(df->modifyTime);
  return true;
    2c90:	2001      	movs	r0, #1
  *pdate = getLe16(df->modifyDate);
    2c92:	802a      	strh	r2, [r5, #0]
    2c94:	899b      	ldrh	r3, [r3, #12]
  *ptime = getLe16(df->modifyTime);
    2c96:	8023      	strh	r3, [r4, #0]

 fail:
  return false;
}
    2c98:	bd38      	pop	{r3, r4, r5, pc}
    2c9a:	bf00      	nop

00002c9c <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    2c9c:	b538      	push	{r3, r4, r5, lr}
    2c9e:	460d      	mov	r5, r1
  if (isOpen()) {
    2ca0:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
    2ca4:	b109      	cbz	r1, 2caa <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    2ca6:	2000      	movs	r0, #0
}
    2ca8:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    2caa:	2238      	movs	r2, #56	; 0x38
    2cac:	4604      	mov	r4, r0
    2cae:	f00b f8ed 	bl	de8c <memset>
  m_flags = FILE_FLAG_READ;
    2cb2:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    2cb4:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    2cb6:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    2cb8:	4618      	mov	r0, r3
    2cba:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    2cbe:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
}
    2cc2:	bd38      	pop	{r3, r4, r5, pc}

00002cc4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    2cc4:	b4f0      	push	{r4, r5, r6, r7}
    2cc6:	460d      	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    2cc8:	7809      	ldrb	r1, [r1, #0]
    2cca:	2920      	cmp	r1, #32
    2ccc:	d103      	bne.n	2cd6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    2cce:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    2cd2:	2c20      	cmp	r4, #32
    2cd4:	d0fb      	beq.n	2cce <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    2cd6:	6015      	str	r5, [r2, #0]
  fname->end = path;
    2cd8:	6095      	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    2cda:	782c      	ldrb	r4, [r5, #0]
    2cdc:	2c2f      	cmp	r4, #47	; 0x2f
    2cde:	d011      	beq.n	2d04 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    2ce0:	b184      	cbz	r4, 2d04 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    2ce2:	1c6e      	adds	r6, r5, #1
    2ce4:	2c3c      	cmp	r4, #60	; 0x3c
    2ce6:	4f1d      	ldr	r7, [pc, #116]	; (2d5c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x98>)
    uint8_t c = *path++;
    2ce8:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    2cea:	d82a      	bhi.n	2d42 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    2cec:	2c21      	cmp	r4, #33	; 0x21
    2cee:	d812      	bhi.n	2d16 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    2cf0:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
    2cf4:	f1bc 0f1e 	cmp.w	ip, #30
    2cf8:	d816      	bhi.n	2d28 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    2cfa:	2000      	movs	r0, #0
    2cfc:	bcf0      	pop	{r4, r5, r6, r7}
    2cfe:	4770      	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    2d00:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    2d04:	2c20      	cmp	r4, #32
    2d06:	d0fb      	beq.n	2d00 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    2d08:	2c2f      	cmp	r4, #47	; 0x2f
    2d0a:	d0f9      	beq.n	2d00 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    2d0c:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    2d0e:	4611      	mov	r1, r2
}
    2d10:	bcf0      	pop	{r4, r5, r6, r7}
  return hashName(fname);
    2d12:	f001 bd1f 	b.w	4754 <ExFatFile::hashName(ExName_t*)>
    2d16:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    2d1a:	fa5f fc8c 	uxtb.w	ip, ip
    2d1e:	fa27 fc0c 	lsr.w	ip, r7, ip
    2d22:	f01c 0f01 	tst.w	ip, #1
    2d26:	d1e8      	bne.n	2cfa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    2d28:	2c2e      	cmp	r4, #46	; 0x2e
    2d2a:	d001      	beq.n	2d30 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    2d2c:	2c20      	cmp	r4, #32
    2d2e:	d10d      	bne.n	2d4c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
  while (*path && !isDirSeparator(*path)) {
    2d30:	f816 4b01 	ldrb.w	r4, [r6], #1
    2d34:	2c00      	cmp	r4, #0
    2d36:	d0e5      	beq.n	2d04 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    2d38:	2c2f      	cmp	r4, #47	; 0x2f
    2d3a:	d0e3      	beq.n	2d04 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    2d3c:	2c3c      	cmp	r4, #60	; 0x3c
    2d3e:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    2d40:	d9d4      	bls.n	2cec <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    2d42:	2c5c      	cmp	r4, #92	; 0x5c
    2d44:	d0d9      	beq.n	2cfa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    2d46:	d903      	bls.n	2d50 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
    2d48:	2c7c      	cmp	r4, #124	; 0x7c
    2d4a:	d0d6      	beq.n	2cfa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    2d4c:	6096      	str	r6, [r2, #8]
    2d4e:	e7ef      	b.n	2d30 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    2d50:	3c3e      	subs	r4, #62	; 0x3e
    2d52:	2c01      	cmp	r4, #1
    2d54:	d8fa      	bhi.n	2d4c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
}
    2d56:	2000      	movs	r0, #0
    2d58:	bcf0      	pop	{r4, r5, r6, r7}
    2d5a:	4770      	bx	lr
    2d5c:	05002101 	.word	0x05002101

00002d60 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    2d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    2d64:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    2d68:	b083      	sub	sp, #12
    2d6a:	4605      	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    2d6c:	07dc      	lsls	r4, r3, #31
    2d6e:	d574      	bpl.n	2e5a <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    2d70:	0658      	lsls	r0, r3, #25
    2d72:	460f      	mov	r7, r1
    2d74:	4690      	mov	r8, r2
    2d76:	f140 80b0 	bpl.w	2eda <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    2d7a:	e9d5 2300 	ldrd	r2, r3, [r5]
    2d7e:	e9d5 1004 	ldrd	r1, r0, [r5, #16]
    2d82:	eb18 0402 	adds.w	r4, r8, r2
    2d86:	f143 0300 	adc.w	r3, r3, #0
    2d8a:	42a1      	cmp	r1, r4
    2d8c:	eb70 0303 	sbcs.w	r3, r0, r3
    2d90:	f0c0 80a9 	bcc.w	2ee6 <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    2d94:	f1b8 0f00 	cmp.w	r8, #0
    2d98:	d05b      	beq.n	2e52 <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    2d9a:	4646      	mov	r6, r8
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    2d9c:	f105 0918 	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    2da0:	e9d5 3200 	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    2da4:	f8d5 a020 	ldr.w	sl, [r5, #32]
    2da8:	f8da 4438 	ldr.w	r4, [sl, #1080]	; 0x438
    2dac:	401c      	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    2dae:	f3c4 0b08 	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    2db2:	2c00      	cmp	r4, #0
    2db4:	d170      	bne.n	2e98 <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    2db6:	4313      	orrs	r3, r2
    2db8:	d170      	bne.n	2e9c <ExFatFile::read(void*, unsigned int)+0x13c>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    2dba:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    2dbe:	065a      	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    2dc0:	bf4c      	ite	mi
    2dc2:	f8da 2434 	ldrmi.w	r2, [sl, #1076]	; 0x434
    2dc6:	69ea      	ldrpl	r2, [r5, #28]
        m_curCluster++;
    2dc8:	61aa      	str	r2, [r5, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    2dca:	f89a 0445 	ldrb.w	r0, [sl, #1093]	; 0x445
    2dce:	3a02      	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    2dd0:	f8da 142c 	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    2dd4:	0a63      	lsrs	r3, r4, #9
    2dd6:	4082      	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    2dd8:	eb01 2154 	add.w	r1, r1, r4, lsr #9
    2ddc:	4411      	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    2dde:	f1bb 0f00 	cmp.w	fp, #0
    2de2:	d145      	bne.n	2e70 <ExFatFile::read(void*, unsigned int)+0x110>
    2de4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    2de8:	d342      	bcc.n	2e70 <ExFatFile::read(void*, unsigned int)+0x110>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    2dea:	f8da 221c 	ldr.w	r2, [sl, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    2dee:	4291      	cmp	r1, r2
    2df0:	d03e      	beq.n	2e70 <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    2df2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    2df6:	d358      	bcc.n	2eaa <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    2df8:	f04f 0b01 	mov.w	fp, #1
    2dfc:	fa0b fb00 	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    2e00:	ebab 0b03 	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    2e04:	0a73      	lsrs	r3, r6, #9
    2e06:	459b      	cmp	fp, r3
    2e08:	bf28      	it	cs
    2e0a:	469b      	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    2e0c:	4291      	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    2e0e:	ea4f 244b 	mov.w	r4, fp, lsl #9
    2e12:	d80a      	bhi.n	2e2a <ExFatFile::read(void*, unsigned int)+0xca>
    2e14:	eb01 030b 	add.w	r3, r1, fp
    2e18:	429a      	cmp	r2, r3
    2e1a:	d206      	bcs.n	2e2a <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    2e1c:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    2e20:	9101      	str	r1, [sp, #4]
    2e22:	f006 fe3d 	bl	9aa0 <FsCache::sync()>
    2e26:	9901      	ldr	r1, [sp, #4]
    2e28:	b1b8      	cbz	r0, 2e5a <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    2e2a:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    2e2e:	465b      	mov	r3, fp
    2e30:	6802      	ldr	r2, [r0, #0]
    2e32:	f8d2 a014 	ldr.w	sl, [r2, #20]
    2e36:	463a      	mov	r2, r7
    2e38:	47d0      	blx	sl
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    2e3a:	b170      	cbz	r0, 2e5a <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    2e3c:	4623      	mov	r3, r4
    dst += n;
    2e3e:	4427      	add	r7, r4
    m_curPosition += n;
    2e40:	e9d5 1200 	ldrd	r1, r2, [r5]
    2e44:	185b      	adds	r3, r3, r1
    2e46:	f142 0200 	adc.w	r2, r2, #0
  while (toRead) {
    2e4a:	1b36      	subs	r6, r6, r4
    m_curPosition += n;
    2e4c:	e9c5 3200 	strd	r3, r2, [r5]
  while (toRead) {
    2e50:	d1a8      	bne.n	2da4 <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    2e52:	4640      	mov	r0, r8

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    2e54:	b003      	add	sp, #12
    2e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    2e5a:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    2e5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  m_error |= READ_ERROR;
    2e62:	f043 0302 	orr.w	r3, r3, #2
    2e66:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
}
    2e6a:	b003      	add	sp, #12
    2e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    2e70:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    2e74:	2200      	movs	r2, #0
    2e76:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    2e7a:	42b4      	cmp	r4, r6
    2e7c:	bf28      	it	cs
    2e7e:	4634      	movcs	r4, r6
    2e80:	f006 fe3a 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    2e84:	2800      	cmp	r0, #0
    2e86:	d0e8      	beq.n	2e5a <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    2e88:	eb00 010b 	add.w	r1, r0, fp
    2e8c:	4622      	mov	r2, r4
    2e8e:	4638      	mov	r0, r7
    2e90:	f008 fc4e 	bl	b730 <memcpy>
    m_curPosition += n;
    2e94:	4623      	mov	r3, r4
    2e96:	e7d2      	b.n	2e3e <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    2e98:	69aa      	ldr	r2, [r5, #24]
    2e9a:	e796      	b.n	2dca <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    2e9c:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    2ea0:	065b      	lsls	r3, r3, #25
    2ea2:	d50e      	bpl.n	2ec2 <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    2ea4:	69aa      	ldr	r2, [r5, #24]
    2ea6:	3201      	adds	r2, #1
    2ea8:	e78e      	b.n	2dc8 <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    2eaa:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    2eae:	463a      	mov	r2, r7
    2eb0:	6803      	ldr	r3, [r0, #0]
    2eb2:	691b      	ldr	r3, [r3, #16]
    2eb4:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    2eb6:	2800      	cmp	r0, #0
    2eb8:	d0cf      	beq.n	2e5a <ExFatFile::read(void*, unsigned int)+0xfa>
    2eba:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    2ebe:	461c      	mov	r4, r3
    2ec0:	e7bd      	b.n	2e3e <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    2ec2:	464a      	mov	r2, r9
    2ec4:	4650      	mov	r0, sl
    2ec6:	69a9      	ldr	r1, [r5, #24]
    2ec8:	f001 fdb4 	bl	4a34 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    2ecc:	2800      	cmp	r0, #0
    2ece:	dbc4      	blt.n	2e5a <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    2ed0:	d00c      	beq.n	2eec <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    2ed2:	f8d5 a020 	ldr.w	sl, [r5, #32]
    2ed6:	69aa      	ldr	r2, [r5, #24]
    2ed8:	e777      	b.n	2dca <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    2eda:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    2ede:	0719      	lsls	r1, r3, #28
    2ee0:	f57f af58 	bpl.w	2d94 <ExFatFile::read(void*, unsigned int)+0x34>
    2ee4:	e749      	b.n	2d7a <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    2ee6:	eba1 0802 	sub.w	r8, r1, r2
    2eea:	e753      	b.n	2d94 <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    2eec:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    2ef0:	f013 0f50 	tst.w	r3, #80	; 0x50
    2ef4:	d0b1      	beq.n	2e5a <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    2ef6:	eba8 0806 	sub.w	r8, r8, r6
    2efa:	4640      	mov	r0, r8
    2efc:	e7aa      	b.n	2e54 <ExFatFile::read(void*, unsigned int)+0xf4>
    2efe:	bf00      	nop

00002f00 <ExFatFile::peek()>:
int ExFatFile::peek() {
    2f00:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f02:	b083      	sub	sp, #12
    return read(&b, 1) == 1 ? b : -1;
    2f04:	2201      	movs	r2, #1
    2f06:	4604      	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    2f08:	6985      	ldr	r5, [r0, #24]
    2f0a:	f10d 0107 	add.w	r1, sp, #7
  uint64_t curPosition = m_curPosition;
    2f0e:	e9d0 6700 	ldrd	r6, r7, [r0]
    2f12:	f7ff ff25 	bl	2d60 <ExFatFile::read(void*, unsigned int)>
    2f16:	2801      	cmp	r0, #1
  m_curCluster = curCluster;
    2f18:	61a5      	str	r5, [r4, #24]
    2f1a:	bf0c      	ite	eq
    2f1c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    2f20:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curPosition = curPosition;
    2f24:	e9c4 6700 	strd	r6, r7, [r4]
}
    2f28:	b003      	add	sp, #12
    2f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002f2c <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    2f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f30:	461f      	mov	r7, r3
  bool isOpen() const {return m_attributes;}
    2f32:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    2f36:	b083      	sub	sp, #12
    2f38:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    2f3a:	f8d0 8018 	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    2f3e:	2b00      	cmp	r3, #0
    2f40:	d051      	beq.n	2fe6 <ExFatFile::seekSet(unsigned long long)+0xba>
    2f42:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    2f44:	e9d0 1c00 	ldrd	r1, ip, [r0]
    2f48:	45bc      	cmp	ip, r7
    2f4a:	bf08      	it	eq
    2f4c:	4291      	cmpeq	r1, r2
    2f4e:	d05c      	beq.n	300a <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    2f50:	ea56 0207 	orrs.w	r2, r6, r7
    2f54:	d04d      	beq.n	2ff2 <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    2f56:	071d      	lsls	r5, r3, #28
    2f58:	d504      	bpl.n	2f64 <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    2f5a:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
    2f5e:	42b0      	cmp	r0, r6
    2f60:	41ba      	sbcs	r2, r7
    2f62:	d340      	bcc.n	2fe6 <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    2f64:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    2f68:	1e75      	subs	r5, r6, #1
    2f6a:	f8d4 a020 	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    2f6e:	9201      	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    2f70:	f147 30ff 	adc.w	r0, r7, #4294967295	; 0xffffffff
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    2f74:	f89a 2445 	ldrb.w	r2, [sl, #1093]	; 0x445
    2f78:	3209      	adds	r2, #9
    2f7a:	b2d2      	uxtb	r2, r2
    2f7c:	f1c2 0e20 	rsb	lr, r2, #32
    2f80:	40d5      	lsrs	r5, r2
    2f82:	f1a2 0920 	sub.w	r9, r2, #32
    2f86:	fa00 fb0e 	lsl.w	fp, r0, lr
    2f8a:	fa20 f009 	lsr.w	r0, r0, r9
    2f8e:	ea45 050b 	orr.w	r5, r5, fp
    2f92:	4305      	orrs	r5, r0
  if (isContiguous()) {
    2f94:	9801      	ldr	r0, [sp, #4]
    2f96:	0640      	lsls	r0, r0, #25
    2f98:	d433      	bmi.n	3002 <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    2f9a:	1e48      	subs	r0, r1, #1
    2f9c:	fa20 f202 	lsr.w	r2, r0, r2
    2fa0:	f14c 30ff 	adc.w	r0, ip, #4294967295	; 0xffffffff
  if (nNew < nCur || m_curPosition == 0) {
    2fa4:	ea51 0c0c 	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    2fa8:	fa00 fe0e 	lsl.w	lr, r0, lr
    2fac:	fa20 f009 	lsr.w	r0, r0, r9
    2fb0:	ea42 020e 	orr.w	r2, r2, lr
    2fb4:	ea42 0200 	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    2fb8:	d001      	beq.n	2fbe <ExFatFile::seekSet(unsigned long long)+0x92>
    2fba:	4295      	cmp	r5, r2
    2fbc:	d229      	bcs.n	3012 <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    2fbe:	065b      	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    2fc0:	bf4c      	ite	mi
    2fc2:	f8da 3434 	ldrmi.w	r3, [sl, #1076]	; 0x434
    2fc6:	69e3      	ldrpl	r3, [r4, #28]
    2fc8:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    2fca:	f104 0918 	add.w	r9, r4, #24
    2fce:	e006      	b.n	2fde <ExFatFile::seekSet(unsigned long long)+0xb2>
    2fd0:	69a1      	ldr	r1, [r4, #24]
    2fd2:	3d01      	subs	r5, #1
    2fd4:	6a20      	ldr	r0, [r4, #32]
    2fd6:	f001 fd2d 	bl	4a34 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    2fda:	2800      	cmp	r0, #0
    2fdc:	dd03      	ble.n	2fe6 <ExFatFile::seekSet(unsigned long long)+0xba>
    2fde:	464a      	mov	r2, r9
  while (nNew--) {
    2fe0:	2d00      	cmp	r5, #0
    2fe2:	d1f5      	bne.n	2fd0 <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

 done:
    2fe4:	e007      	b.n	2ff6 <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    2fe6:	2000      	movs	r0, #0
  m_curCluster = tmp;
    2fe8:	f8c4 8018 	str.w	r8, [r4, #24]
}
    2fec:	b003      	add	sp, #12
    2fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    2ff2:	2300      	movs	r3, #0
    2ff4:	6183      	str	r3, [r0, #24]
  return true;
    2ff6:	2001      	movs	r0, #1
  m_curPosition = pos;
    2ff8:	e9c4 6700 	strd	r6, r7, [r4]
}
    2ffc:	b003      	add	sp, #12
    2ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    3002:	69e3      	ldr	r3, [r4, #28]
    3004:	442b      	add	r3, r5
    3006:	61a3      	str	r3, [r4, #24]
    goto done;
    3008:	e7f5      	b.n	2ff6 <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    300a:	2001      	movs	r0, #1
}
    300c:	b003      	add	sp, #12
    300e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    3012:	1aad      	subs	r5, r5, r2
    3014:	e7d9      	b.n	2fca <ExFatFile::seekSet(unsigned long long)+0x9e>
    3016:	bf00      	nop

00003018 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    3018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    301c:	4617      	mov	r7, r2
    301e:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    3022:	b08f      	sub	sp, #60	; 0x3c
    3024:	4605      	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    3026:	2a00      	cmp	r2, #0
    3028:	f040 80d7 	bne.w	31da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
    302c:	468b      	mov	fp, r1
    302e:	f891 1031 	ldrb.w	r1, [r1, #49]	; 0x31
    3032:	f011 0f50 	tst.w	r1, #80	; 0x50
    3036:	f000 80d0 	beq.w	31da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  switch (oflag & O_ACCMODE) {
    303a:	f003 0103 	and.w	r1, r3, #3
    303e:	469a      	mov	sl, r3
    3040:	2903      	cmp	r1, #3
    3042:	f000 80ca 	beq.w	31da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    3046:	3101      	adds	r1, #1
    3048:	f003 0008 	and.w	r0, r3, #8
    304c:	ea41 0300 	orr.w	r3, r1, r0
    3050:	9302      	str	r3, [sp, #8]
  if (fname) {
    3052:	2f00      	cmp	r7, #0
    3054:	f000 80cb 	beq.w	31ee <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d6>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    3058:	6939      	ldr	r1, [r7, #16]
    305a:	f101 080e 	add.w	r8, r1, #14
    305e:	49b6      	ldr	r1, [pc, #728]	; (3338 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x320>)
    3060:	fba1 1808 	umull	r1, r8, r1, r8
  if (pos == m_curPosition) {
    3064:	e9db 1000 	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14)/15;
    3068:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  if (pos == m_curPosition) {
    306c:	4301      	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14)/15;
    306e:	f108 0802 	add.w	r8, r8, #2
    3072:	fa5f f888 	uxtb.w	r8, r8
  if (pos == m_curPosition) {
    3076:	d005      	beq.n	3084 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    3078:	2000      	movs	r0, #0
    307a:	2100      	movs	r1, #0
    m_curCluster = 0;
    307c:	f8cb 2018 	str.w	r2, [fp, #24]
  m_curPosition = pos;
    3080:	e9cb 0100 	strd	r0, r1, [fp]
        inSet = false;
    3084:	2400      	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    3086:	9b02      	ldr	r3, [sp, #8]
        inSet = false;
    3088:	4626      	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    308a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    308e:	9303      	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    3090:	2220      	movs	r2, #32
    3092:	a906      	add	r1, sp, #24
    3094:	4658      	mov	r0, fp
    3096:	f7ff fe63 	bl	2d60 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    309a:	b300      	cbz	r0, 30de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    309c:	2820      	cmp	r0, #32
    309e:	f040 809c 	bne.w	31da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (!(buf[0] & 0x80)) {
    30a2:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    30a6:	f89d 3018 	ldrb.w	r3, [sp, #24]
    30aa:	2a00      	cmp	r2, #0
    30ac:	f2c0 80a2 	blt.w	31f4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
      if (freeCount == 0) {
    30b0:	b934      	cbnz	r4, 30c0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    30b2:	f8db 2000 	ldr.w	r2, [fp]
    30b6:	f1a2 0920 	sub.w	r9, r2, #32
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    30ba:	f8db 2018 	ldr.w	r2, [fp, #24]
    30be:	9201      	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    30c0:	4544      	cmp	r4, r8
    30c2:	d201      	bcs.n	30c8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    30c4:	3401      	adds	r4, #1
    30c6:	b2e4      	uxtb	r4, r4
      if (!buf[0]) {
    30c8:	2b00      	cmp	r3, #0
    30ca:	f000 8113 	beq.w	32f4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    n = dir->read(buf, FS_DIR_SIZE);
    30ce:	2220      	movs	r2, #32
    30d0:	a906      	add	r1, sp, #24
    30d2:	4658      	mov	r0, fp
      inSet = false;
    30d4:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    30d6:	f7ff fe43 	bl	2d60 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    30da:	2800      	cmp	r0, #0
    30dc:	d1de      	bne.n	309c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    30de:	f41a 7f00 	tst.w	sl, #512	; 0x200
    30e2:	d07a      	beq.n	31da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    30e4:	9b02      	ldr	r3, [sp, #8]
    30e6:	079b      	lsls	r3, r3, #30
    30e8:	d577      	bpl.n	31da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    30ea:	2f00      	cmp	r7, #0
    30ec:	d075      	beq.n	31da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  while (freeCount < freeNeed) {
    30ee:	4544      	cmp	r4, r8
    30f0:	d217      	bcs.n	3122 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10a>
    30f2:	f8dd a004 	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    30f6:	2220      	movs	r2, #32
    30f8:	a906      	add	r1, sp, #24
    30fa:	4658      	mov	r0, fp
    30fc:	f7ff fe30 	bl	2d60 <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    3100:	1c63      	adds	r3, r4, #1
    if (n == 0) {
    3102:	2800      	cmp	r0, #0
    3104:	d061      	beq.n	31ca <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    3106:	2820      	cmp	r0, #32
    3108:	d167      	bne.n	31da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (freeCount == 0) {
    310a:	b92c      	cbnz	r4, 3118 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x100>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    310c:	f8db 2000 	ldr.w	r2, [fp]
    3110:	f8db a018 	ldr.w	sl, [fp, #24]
    3114:	f1a2 0920 	sub.w	r9, r2, #32
    freeCount++;
    3118:	b2dc      	uxtb	r4, r3
  while (freeCount < freeNeed) {
    311a:	45a0      	cmp	r8, r4
    311c:	d8eb      	bhi.n	30f6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xde>
    311e:	f8cd a004 	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    3122:	2238      	movs	r2, #56	; 0x38
    3124:	2100      	movs	r1, #0
    3126:	4628      	mov	r0, r5
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    3128:	f89b 4033 	ldrb.w	r4, [fp, #51]	; 0x33
    312c:	f00a feae 	bl	de8c <memset>
  ExFatVolume* volume() const {return m_vol;}
    3130:	f8db 3020 	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    3134:	f3c4 1480 	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    3138:	9a01      	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    313a:	622b      	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE;
    313c:	2308      	movs	r3, #8
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    313e:	2600      	movs	r6, #0
  m_dirPos = freePos;
    3140:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE;
    3144:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    next = begin;
    3148:	683b      	ldr	r3, [r7, #0]
  m_dirPos = freePos;
    314a:	e9c5 2909 	strd	r2, r9, [r5, #36]	; 0x24
    314e:	607b      	str	r3, [r7, #4]
    ls = 0;  // lowSurrogate
    3150:	81be      	strh	r6, [r7, #12]
  for (uint8_t i = 0; i < freeNeed; i++) {
    3152:	f1b8 0f00 	cmp.w	r8, #0
    3156:	d033      	beq.n	31c0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
      m_setCount = freeNeed - 1;
    3158:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
    315c:	46b3      	mov	fp, r6
      if (FsDateTime::callback) {
    315e:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 333c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x324>
      m_setCount = freeNeed - 1;
    3162:	fa5f f989 	uxtb.w	r9, r9
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    3166:	2201      	movs	r2, #1
    3168:	4659      	mov	r1, fp
    316a:	4628      	mov	r0, r5
    316c:	f7ff fd4a 	bl	2c04 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    3170:	4604      	mov	r4, r0
    3172:	b390      	cbz	r0, 31da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    3174:	f990 2000 	ldrsb.w	r2, [r0]
    3178:	2a00      	cmp	r2, #0
    317a:	db2e      	blt.n	31da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    memset(cache, 0 , FS_DIR_SIZE);
    317c:	2220      	movs	r2, #32
    317e:	2100      	movs	r1, #0
    3180:	f00a fe84 	bl	de8c <memset>
    if (i == 0) {
    3184:	2e00      	cmp	r6, #0
    3186:	f000 80bc 	beq.w	3302 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ea>
    } else if (i == 1) {
    318a:	f1bb 0f01 	cmp.w	fp, #1
    318e:	f000 80d7 	beq.w	3340 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x328>
      dirName->type = EXFAT_TYPE_NAME;
    3192:	23c1      	movs	r3, #193	; 0xc1
    3194:	46a3      	mov	fp, r4
    3196:	341e      	adds	r4, #30
    3198:	f804 3c1e 	strb.w	r3, [r4, #-30]
    return !ls && next == end;
    319c:	89bb      	ldrh	r3, [r7, #12]
        uint16_t u = fname->get16();
    319e:	4638      	mov	r0, r7
    31a0:	b91b      	cbnz	r3, 31aa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x192>
    31a2:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
    31a6:	429a      	cmp	r2, r3
    31a8:	d005      	beq.n	31b6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    31aa:	f006 fce3 	bl	9b74 <FsName::get16()>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    31ae:	f82b 0f02 	strh.w	r0, [fp, #2]!
      for (size_t k = 0; k < 15; k++) {
    31b2:	45a3      	cmp	fp, r4
    31b4:	d1f2      	bne.n	319c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x184>
  for (uint8_t i = 0; i < freeNeed; i++) {
    31b6:	3601      	adds	r6, #1
    31b8:	fa5f fb86 	uxtb.w	fp, r6
    31bc:	45d8      	cmp	r8, fp
    31be:	d8d2      	bhi.n	3166 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14e>
  return sync();
    31c0:	4628      	mov	r0, r5
    31c2:	f000 fafb 	bl	37bc <ExFatFile::sync()>
    31c6:	4606      	mov	r6, r0
    31c8:	e00d      	b.n	31e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
      if (!dir->addDirCluster()) {
    31ca:	4658      	mov	r0, fp
      curCluster = dir->m_curCluster;
    31cc:	f8db 6018 	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    31d0:	f000 fb24 	bl	381c <ExFatFile::addDirCluster()>
    31d4:	2800      	cmp	r0, #0
    31d6:	f040 8091 	bne.w	32fc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e4>
  m_attributes = FILE_ATTR_CLOSED;
    31da:	2300      	movs	r3, #0
  return false;
    31dc:	461e      	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    31de:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    31e2:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
}
    31e6:	4630      	mov	r0, r6
    31e8:	b00f      	add	sp, #60	; 0x3c
    31ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    31ee:	f04f 0803 	mov.w	r8, #3
    31f2:	e747      	b.n	3084 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    31f4:	bb56      	cbnz	r6, 324c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x234>
        freeCount = 0;
    31f6:	4544      	cmp	r4, r8
    31f8:	bf38      	it	cc
    31fa:	2400      	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    31fc:	2b85      	cmp	r3, #133	; 0x85
    31fe:	f47f af47 	bne.w	3090 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    3202:	4631      	mov	r1, r6
    3204:	2238      	movs	r2, #56	; 0x38
    3206:	4628      	mov	r0, r5
      inSet = true;
    3208:	2601      	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    320a:	f00a fe3f 	bl	de8c <memset>
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    320e:	f89d 201c 	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    3212:	f89d 3019 	ldrb.w	r3, [sp, #25]
    3216:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    321a:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    321e:	06d2      	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    3220:	bf58      	it	pl
    3222:	f043 0308 	orrpl.w	r3, r3, #8
    3226:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    322a:	f8db 3000 	ldr.w	r3, [fp]
    322e:	f8db 2020 	ldr.w	r2, [fp, #32]
    3232:	3b20      	subs	r3, #32
      m_vol = dir->volume();
    3234:	622a      	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    3236:	f8db 2018 	ldr.w	r2, [fp, #24]
    323a:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    323e:	f89b 3033 	ldrb.w	r3, [fp, #51]	; 0x33
    3242:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    3246:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    324a:	e721      	b.n	3090 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    324c:	2bc0      	cmp	r3, #192	; 0xc0
    324e:	d028      	beq.n	32a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28a>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    3250:	2bc1      	cmp	r3, #193	; 0xc1
    3252:	f47f af3c 	bne.w	30ce <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    3256:	463a      	mov	r2, r7
    3258:	a906      	add	r1, sp, #24
    325a:	4628      	mov	r0, r5
    325c:	f001 f9ee 	bl	463c <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    3260:	b1e8      	cbz	r0, 329e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    3262:	89bb      	ldrh	r3, [r7, #12]
    3264:	b9db      	cbnz	r3, 329e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    3266:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
    326a:	429a      	cmp	r2, r3
    326c:	d117      	bne.n	329e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
  if (oflag & O_EXCL) {
    326e:	f41a 6f00 	tst.w	sl, #2048	; 0x800
    3272:	d1b2      	bne.n	31da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    3274:	f41a 4f88 	tst.w	sl, #17408	; 0x4400
    3278:	d170      	bne.n	335c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
    327a:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    327e:	0798      	lsls	r0, r3, #30
    3280:	d46c      	bmi.n	335c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
  if (oflag & O_TRUNC) {
    3282:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    3286:	d1a8      	bne.n	31da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    3288:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    328c:	d0ab      	beq.n	31e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    328e:	4628      	mov	r0, r5
    3290:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    3294:	f7ff fe4a 	bl	2f2c <ExFatFile::seekSet(unsigned long long)>
    3298:	2800      	cmp	r0, #0
    329a:	d1a4      	bne.n	31e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    329c:	e79d      	b.n	31da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    329e:	4606      	mov	r6, r0
    32a0:	e6f6      	b.n	3090 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    32a2:	9b02      	ldr	r3, [sp, #8]
    32a4:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    32a8:	f89d 3019 	ldrb.w	r3, [sp, #25]
    32ac:	079b      	lsls	r3, r3, #30
    32ae:	d502      	bpl.n	32b6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29e>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    32b0:	9b03      	ldr	r3, [sp, #12]
    32b2:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    32b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    32b8:	61eb      	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    32ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    32be:	e9c5 2304 	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    32c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    32c6:	e9c5 2302 	strd	r2, r3, [r5, #8]
      if (!fname) {
    32ca:	2f00      	cmp	r7, #0
    32cc:	d0cf      	beq.n	326e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
    ls = 0;  // lowSurrogate
    32ce:	f04f 0300 	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    32d2:	693a      	ldr	r2, [r7, #16]
    32d4:	81bb      	strh	r3, [r7, #12]
    next = begin;
    32d6:	683b      	ldr	r3, [r7, #0]
    32d8:	607b      	str	r3, [r7, #4]
    32da:	f89d 301b 	ldrb.w	r3, [sp, #27]
    32de:	429a      	cmp	r2, r3
    32e0:	f47f aef5 	bne.w	30ce <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    32e4:	8abe      	ldrh	r6, [r7, #20]
    32e6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    32ea:	1af6      	subs	r6, r6, r3
    32ec:	fab6 f686 	clz	r6, r6
    32f0:	0976      	lsrs	r6, r6, #5
    32f2:	e6cd      	b.n	3090 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    32f4:	2f00      	cmp	r7, #0
    32f6:	f47f aef2 	bne.w	30de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    32fa:	e76e      	b.n	31da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
      dir->m_curCluster = curCluster;
    32fc:	f8cb 6018 	str.w	r6, [fp, #24]
      continue;
    3300:	e70b      	b.n	311a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      dirFile->type = EXFAT_TYPE_FILE;
    3302:	2385      	movs	r3, #133	; 0x85
    3304:	7023      	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
    3306:	f885 9030 	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    330a:	f884 9001 	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    330e:	f8da 3000 	ldr.w	r3, [sl]
    3312:	2b00      	cmp	r3, #0
    3314:	d046      	beq.n	33a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x38c>
        FsDateTime::callback(&date, &time, &ms10);
    3316:	f10d 0213 	add.w	r2, sp, #19
    331a:	f10d 0116 	add.w	r1, sp, #22
    331e:	a805      	add	r0, sp, #20
    3320:	4798      	blx	r3
    3322:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    3326:	8163      	strh	r3, [r4, #10]
    3328:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    332c:	8123      	strh	r3, [r4, #8]
        dirFile->createTimeMs = ms10;
    332e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    3332:	7523      	strb	r3, [r4, #20]
    3334:	e73f      	b.n	31b6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    3336:	bf00      	nop
    3338:	88888889 	.word	0x88888889
    333c:	200033f8 	.word	0x200033f8
      dirStream->type = EXFAT_TYPE_STREAM;
    3340:	23c0      	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    3342:	f884 b001 	strb.w	fp, [r4, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    3346:	7023      	strb	r3, [r4, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    3348:	9b02      	ldr	r3, [sp, #8]
    334a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    334e:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    3352:	693b      	ldr	r3, [r7, #16]
    3354:	70e3      	strb	r3, [r4, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    3356:	8abb      	ldrh	r3, [r7, #20]
    3358:	80a3      	strh	r3, [r4, #4]
}
    335a:	e72c      	b.n	31b6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    335c:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    3360:	06d9      	lsls	r1, r3, #27
    3362:	f53f af3a 	bmi.w	31da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    3366:	f013 0101 	ands.w	r1, r3, #1
    336a:	f47f af36 	bne.w	31da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (oflag & O_TRUNC) {
    336e:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    3372:	d089      	beq.n	3288 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x270>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    3374:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    3378:	0792      	lsls	r2, r2, #30
    337a:	f57f af2e 	bpl.w	31da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (!isOpen()) {
    337e:	2b00      	cmp	r3, #0
    3380:	f43f af2b 	beq.w	31da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (pos == m_curPosition) {
    3384:	e9d5 3200 	ldrd	r3, r2, [r5]
    3388:	4313      	orrs	r3, r2
    338a:	d004      	beq.n	3396 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
  m_curPosition = pos;
    338c:	2200      	movs	r2, #0
    338e:	2300      	movs	r3, #0
    m_curCluster = 0;
    3390:	61a9      	str	r1, [r5, #24]
  m_curPosition = pos;
    3392:	e9c5 2300 	strd	r2, r3, [r5]
    return seekSet(length) && truncate();
    3396:	4628      	mov	r0, r5
    3398:	f000 fc42 	bl	3c20 <ExFatFile::truncate()>
    339c:	2800      	cmp	r0, #0
    339e:	f43f af1c 	beq.w	31da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    33a2:	e720      	b.n	31e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
  *reinterpret_cast<uint16_t*>(dst) = src;
    33a4:	f645 0321 	movw	r3, #22561	; 0x5821
    33a8:	8163      	strh	r3, [r4, #10]
    33aa:	81e3      	strh	r3, [r4, #14]
    33ac:	8263      	strh	r3, [r4, #18]
       if (FS_DEFAULT_TIME) {
    33ae:	e702      	b.n	31b6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>

000033b0 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    33b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    33b4:	2500      	movs	r5, #0
    33b6:	b097      	sub	sp, #92	; 0x5c
    33b8:	4699      	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    33ba:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    33be:	9201      	str	r2, [sp, #4]
    33c0:	9514      	str	r5, [sp, #80]	; 0x50
class FsName {
    33c2:	f8ad 5014 	strh.w	r5, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    33c6:	2b00      	cmp	r3, #0
    33c8:	d13e      	bne.n	3448 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    33ca:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    33ce:	460f      	mov	r7, r1
    33d0:	f013 0f50 	tst.w	r3, #80	; 0x50
    33d4:	d038      	beq.n	3448 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
  if (isDirSeparator(*path)) {
    33d6:	7813      	ldrb	r3, [r2, #0]
    33d8:	4604      	mov	r4, r0
    33da:	4616      	mov	r6, r2
    33dc:	2b2f      	cmp	r3, #47	; 0x2f
    33de:	d037      	beq.n	3450 <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    33e0:	f04f 0800 	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    33e4:	ab01      	add	r3, sp, #4
    33e6:	aa02      	add	r2, sp, #8
    33e8:	4631      	mov	r1, r6
    33ea:	4620      	mov	r0, r4
    33ec:	f7ff fc6a 	bl	2cc4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    33f0:	b350      	cbz	r0, 3448 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    if (*path == 0) {
    33f2:	9e01      	ldr	r6, [sp, #4]
    33f4:	7833      	ldrb	r3, [r6, #0]
    33f6:	2b00      	cmp	r3, #0
    33f8:	d03e      	beq.n	3478 <ExFatFile::open(ExFatFile*, char const*, int)+0xc8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    33fa:	2300      	movs	r3, #0
    33fc:	aa02      	add	r2, sp, #8
    33fe:	4639      	mov	r1, r7
    3400:	4620      	mov	r0, r4
    3402:	f7ff fe09 	bl	3018 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    3406:	b1f8      	cbz	r0, 3448 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    tmpDir = *this;
    3408:	46a4      	mov	ip, r4
    340a:	ad08      	add	r5, sp, #32
    340c:	f104 0730 	add.w	r7, r4, #48	; 0x30
    3410:	f8dc 0000 	ldr.w	r0, [ip]
    3414:	f10c 0c10 	add.w	ip, ip, #16
    3418:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    341c:	46ae      	mov	lr, r5
    341e:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    3422:	3510      	adds	r5, #16
    3424:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    3428:	45bc      	cmp	ip, r7
    342a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    342e:	d1ef      	bne.n	3410 <ExFatFile::open(ExFatFile*, char const*, int)+0x60>
    3430:	f8dc 0000 	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    3434:	af08      	add	r7, sp, #32
    tmpDir = *this;
    3436:	6028      	str	r0, [r5, #0]
  bool rtn = sync();
    3438:	4620      	mov	r0, r4
    343a:	f000 f9bf 	bl	37bc <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    343e:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    3442:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    3446:	e7cd      	b.n	33e4 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
  return false;
    3448:	2000      	movs	r0, #0
}
    344a:	b017      	add	sp, #92	; 0x5c
    344c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    3450:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    3454:	292f      	cmp	r1, #47	; 0x2f
    3456:	d0fb      	beq.n	3450 <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    3458:	9601      	str	r6, [sp, #4]
    if (*path == 0) {
    345a:	b9b1      	cbnz	r1, 348a <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
  memset(this, 0, sizeof(ExFatFile));
    345c:	2238      	movs	r2, #56	; 0x38
    345e:	4620      	mov	r0, r4
      return openRoot(dirFile->m_vol);
    3460:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    3462:	f00a fd13 	bl	de8c <memset>
  m_flags = FILE_FLAG_READ;
    3466:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    3468:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    346a:	6225      	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    346c:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    346e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    3472:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    3476:	e7e8      	b.n	344a <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
  return openPrivate(dirFile, &fname, oflag);
    3478:	464b      	mov	r3, r9
    347a:	aa02      	add	r2, sp, #8
    347c:	4639      	mov	r1, r7
    347e:	4620      	mov	r0, r4
    3480:	f7ff fdca 	bl	3018 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    3484:	b017      	add	sp, #92	; 0x5c
    3486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    348a:	2238      	movs	r2, #56	; 0x38
    348c:	2100      	movs	r1, #0
    348e:	a808      	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    3490:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    3492:	f00a fcfb 	bl	de8c <memset>
  m_flags = FILE_FLAG_READ;
    3496:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    3498:	af08      	add	r7, sp, #32
  m_vol = vol;
    349a:	9510      	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    349c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    34a0:	2340      	movs	r3, #64	; 0x40
    34a2:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  return true;
    34a6:	e79b      	b.n	33e0 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>

000034a8 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    34a8:	b119      	cbz	r1, 34b2 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    34aa:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    34ae:	f7ff bf7f 	b.w	33b0 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    34b2:	4608      	mov	r0, r1
    34b4:	4770      	bx	lr
    34b6:	bf00      	nop

000034b8 <ExFatFile::openNext(ExFatFile*, int)>:
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    34b8:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    34bc:	b963      	cbnz	r3, 34d8 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    34be:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    34c2:	f013 0f50 	tst.w	r3, #80	; 0x50
    34c6:	d007      	beq.n	34d8 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    34c8:	680b      	ldr	r3, [r1, #0]
    34ca:	f013 0c1f 	ands.w	ip, r3, #31
    34ce:	d103      	bne.n	34d8 <ExFatFile::openNext(ExFatFile*, int)+0x20>
  return openPrivate(dir, nullptr, oflag);
    34d0:	4613      	mov	r3, r2
    34d2:	4662      	mov	r2, ip
    34d4:	f7ff bda0 	b.w	3018 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    34d8:	2000      	movs	r0, #0
    34da:	4770      	bx	lr

000034dc <ExFatFile::addCluster()>:
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    34dc:	6981      	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    34de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34e0:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    34e2:	6a00      	ldr	r0, [r0, #32]
    34e4:	b101      	cbz	r1, 34e8 <ExFatFile::addCluster()+0xc>
    34e6:	3101      	adds	r1, #1
    34e8:	2201      	movs	r2, #1
    34ea:	f001 f969 	bl	47c0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    34ee:	2801      	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    34f0:	4605      	mov	r5, r0
  if (find < 2) {
    34f2:	d932      	bls.n	355a <ExFatFile::addCluster()+0x7e>
  if (!m_vol->bitmapModify(find, 1, 1)) {
    34f4:	2301      	movs	r3, #1
    34f6:	4601      	mov	r1, r0
    34f8:	6a20      	ldr	r0, [r4, #32]
    34fa:	461a      	mov	r2, r3
    34fc:	f001 f9c0 	bl	4880 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    3500:	4606      	mov	r6, r0
    3502:	b350      	cbz	r0, 355a <ExFatFile::addCluster()+0x7e>
  if (m_curCluster == 0) {
    3504:	69a3      	ldr	r3, [r4, #24]
    3506:	b35b      	cbz	r3, 3560 <ExFatFile::addCluster()+0x84>
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    3508:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  if (isContiguous()) {
    350c:	0651      	lsls	r1, r2, #25
    350e:	d512      	bpl.n	3536 <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    3510:	1c59      	adds	r1, r3, #1
    3512:	42a9      	cmp	r1, r5
    3514:	d018      	beq.n	3548 <ExFatFile::addCluster()+0x6c>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    3516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    351a:	69e1      	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    351c:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    3520:	e005      	b.n	352e <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    3522:	6a20      	ldr	r0, [r4, #32]
    3524:	f001 faa8 	bl	4a78 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    3528:	4639      	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    352a:	b1b0      	cbz	r0, 355a <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    352c:	69a3      	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    352e:	1c4f      	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    3530:	4299      	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    3532:	463a      	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    3534:	d3f5      	bcc.n	3522 <ExFatFile::addCluster()+0x46>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    3536:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    353a:	4629      	mov	r1, r5
    353c:	6a20      	ldr	r0, [r4, #32]
    353e:	f001 fa9b 	bl	4a78 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    3542:	b150      	cbz	r0, 355a <ExFatFile::addCluster()+0x7e>
  if (m_curCluster) {
    3544:	69a1      	ldr	r1, [r4, #24]
    3546:	b911      	cbnz	r1, 354e <ExFatFile::addCluster()+0x72>
}
    3548:	4630      	mov	r0, r6
  m_curCluster = find;
    354a:	61a5      	str	r5, [r4, #24]
}
    354c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    354e:	462a      	mov	r2, r5
    3550:	6a20      	ldr	r0, [r4, #32]
    3552:	f001 fa91 	bl	4a78 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    3556:	2800      	cmp	r0, #0
    3558:	d1f6      	bne.n	3548 <ExFatFile::addCluster()+0x6c>
  return false;
    355a:	2600      	movs	r6, #0
}
    355c:	4630      	mov	r0, r6
    355e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    3560:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    3564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3568:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    356c:	e7ec      	b.n	3548 <ExFatFile::addCluster()+0x6c>
    356e:	bf00      	nop

00003570 <ExFatFile::remove()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    3570:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  uint8_t* cache;
  if (!isWritable()) {
    3574:	079a      	lsls	r2, r3, #30
    3576:	d536      	bpl.n	35e6 <ExFatFile::remove()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    3578:	69c1      	ldr	r1, [r0, #28]
bool ExFatFile::remove() {
    357a:	b570      	push	{r4, r5, r6, lr}
    357c:	4605      	mov	r5, r0
  if (m_firstCluster) {
    357e:	b9a1      	cbnz	r1, 35aa <ExFatFile::remove()+0x3a>
bool ExFatFile::remove() {
    3580:	2400      	movs	r4, #0
    3582:	4621      	mov	r1, r4
    3584:	e007      	b.n	3596 <ExFatFile::remove()+0x26>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    3586:	7803      	ldrb	r3, [r0, #0]
    3588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    358c:	7003      	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    358e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    3592:	428b      	cmp	r3, r1
    3594:	d329      	bcc.n	35ea <ExFatFile::remove()+0x7a>
    3596:	3401      	adds	r4, #1
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    3598:	2201      	movs	r2, #1
    359a:	4628      	mov	r0, r5
    359c:	f7ff fb32 	bl	2c04 <ExFatFile::dirCache(unsigned char, unsigned char)>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    35a0:	b2e1      	uxtb	r1, r4
    if (!cache) {
    35a2:	2800      	cmp	r0, #0
    35a4:	d1ef      	bne.n	3586 <ExFatFile::remove()+0x16>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    35a6:	2000      	movs	r0, #0
    35a8:	bd70      	pop	{r4, r5, r6, pc}
    if (isContiguous()) {
    35aa:	065b      	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    35ac:	6a00      	ldr	r0, [r0, #32]
    if (isContiguous()) {
    35ae:	d534      	bpl.n	361a <ExFatFile::remove()+0xaa>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    35b0:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    35b4:	e9d5 2402 	ldrd	r2, r4, [r5, #8]
    35b8:	3309      	adds	r3, #9
    35ba:	3a01      	subs	r2, #1
    35bc:	b2db      	uxtb	r3, r3
    35be:	f144 34ff 	adc.w	r4, r4, #4294967295	; 0xffffffff
    35c2:	f1c3 0c20 	rsb	ip, r3, #32
    35c6:	40da      	lsrs	r2, r3
    35c8:	3b20      	subs	r3, #32
    35ca:	fa04 fc0c 	lsl.w	ip, r4, ip
    35ce:	fa24 f303 	lsr.w	r3, r4, r3
    35d2:	ea42 020c 	orr.w	r2, r2, ip
    35d6:	431a      	orrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    35d8:	2300      	movs	r3, #0
    35da:	3201      	adds	r2, #1
    35dc:	f001 f950 	bl	4880 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    35e0:	2800      	cmp	r0, #0
    35e2:	d1cd      	bne.n	3580 <ExFatFile::remove()+0x10>
    35e4:	e7df      	b.n	35a6 <ExFatFile::remove()+0x36>
}
    35e6:	2000      	movs	r0, #0
    35e8:	4770      	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
    35ea:	2300      	movs	r3, #0
  return m_vol->cacheSync();
    35ec:	6a2c      	ldr	r4, [r5, #32]
  m_attributes = FILE_ATTR_CLOSED;
    35ee:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    35f2:	4620      	mov	r0, r4
  m_flags = 0;
    35f4:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    35f8:	f006 fa52 	bl	9aa0 <FsCache::sync()>
    35fc:	2800      	cmp	r0, #0
    35fe:	d0d2      	beq.n	35a6 <ExFatFile::remove()+0x36>
    3600:	f504 7004 	add.w	r0, r4, #528	; 0x210
    3604:	f006 fa4c 	bl	9aa0 <FsCache::sync()>
    3608:	2800      	cmp	r0, #0
    360a:	d0cc      	beq.n	35a6 <ExFatFile::remove()+0x36>
    360c:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    3610:	6803      	ldr	r3, [r0, #0]
}
    3612:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3616:	6a1b      	ldr	r3, [r3, #32]
    3618:	4718      	bx	r3
      if (!m_vol->freeChain(m_firstCluster)) {
    361a:	f001 fa4d 	bl	4ab8 <ExFatPartition::freeChain(unsigned long)>
    361e:	2800      	cmp	r0, #0
    3620:	d1ae      	bne.n	3580 <ExFatFile::remove()+0x10>
    3622:	e7c0      	b.n	35a6 <ExFatFile::remove()+0x36>

00003624 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    3624:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    3628:	06db      	lsls	r3, r3, #27
    362a:	d401      	bmi.n	3630 <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    362c:	2000      	movs	r0, #0
}
    362e:	4770      	bx	lr
bool ExFatFile::rmdir() {
    3630:	b510      	push	{r4, lr}
    seekSet(0);
    3632:	2200      	movs	r2, #0
    3634:	b088      	sub	sp, #32
    3636:	2300      	movs	r3, #0
    3638:	4604      	mov	r4, r0
    363a:	f7ff fc77 	bl	2f2c <ExFatFile::seekSet(unsigned long long)>
  }
    363e:	e008      	b.n	3652 <ExFatFile::rmdir()+0x2e>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    3640:	2820      	cmp	r0, #32
    3642:	d11b      	bne.n	367c <ExFatFile::rmdir()+0x58>
    3644:	f99d 3000 	ldrsb.w	r3, [sp]
    3648:	f89d 2000 	ldrb.w	r2, [sp]
    364c:	2b00      	cmp	r3, #0
    364e:	db15      	blt.n	367c <ExFatFile::rmdir()+0x58>
    if (dir[0] == 0) {
    3650:	b132      	cbz	r2, 3660 <ExFatFile::rmdir()+0x3c>
    n = read(dir, FS_DIR_SIZE);
    3652:	2220      	movs	r2, #32
    3654:	4669      	mov	r1, sp
    3656:	4620      	mov	r0, r4
    3658:	f7ff fb82 	bl	2d60 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    365c:	2800      	cmp	r0, #0
    365e:	d1ef      	bne.n	3640 <ExFatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
    3660:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_FILE;
    3664:	2208      	movs	r2, #8
  return remove();
    3666:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    3668:	f043 0302 	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    366c:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    3670:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    3674:	f7ff ff7c 	bl	3570 <ExFatFile::remove()>
}
    3678:	b008      	add	sp, #32
    367a:	bd10      	pop	{r4, pc}
  return false;
    367c:	2000      	movs	r0, #0
}
    367e:	b008      	add	sp, #32
    3680:	bd10      	pop	{r4, pc}
    3682:	bf00      	nop

00003684 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    3684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3688:	f04f 0800 	mov.w	r8, #0
    368c:	b082      	sub	sp, #8
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    368e:	4f4a      	ldr	r7, [pc, #296]	; (37b8 <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    3690:	4606      	mov	r6, r0
  uint16_t checksum = 0;
    3692:	4644      	mov	r4, r8
    3694:	4641      	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    3696:	2200      	movs	r2, #0
    3698:	4630      	mov	r0, r6
    369a:	f7ff fab3 	bl	2c04 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    369e:	4605      	mov	r5, r0
    36a0:	b130      	cbz	r0, 36b0 <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    36a2:	7801      	ldrb	r1, [r0, #0]
    36a4:	29c0      	cmp	r1, #192	; 0xc0
    36a6:	d069      	beq.n	377c <ExFatFile::syncDir()+0xf8>
    36a8:	29c1      	cmp	r1, #193	; 0xc1
    36aa:	d02b      	beq.n	3704 <ExFatFile::syncDir()+0x80>
    36ac:	2985      	cmp	r1, #133	; 0x85
    36ae:	d009      	beq.n	36c4 <ExFatFile::syncDir()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    36b0:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    36b4:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    36b6:	f043 0301 	orr.w	r3, r3, #1
    36ba:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
}
    36be:	b002      	add	sp, #8
    36c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    36c4:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    36c8:	f003 0337 	and.w	r3, r3, #55	; 0x37
    36cc:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    36ce:	683b      	ldr	r3, [r7, #0]
    36d0:	b183      	cbz	r3, 36f4 <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    36d2:	f10d 0203 	add.w	r2, sp, #3
    36d6:	f10d 0106 	add.w	r1, sp, #6
    36da:	a801      	add	r0, sp, #4
    36dc:	4798      	blx	r3
          setLe16(df->modifyTime, time);
    36de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    36e2:	81ab      	strh	r3, [r5, #12]
    36e4:	822b      	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    36e6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    36ea:	81eb      	strh	r3, [r5, #14]
    36ec:	826b      	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    36ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
    36f2:	756b      	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    36f4:	6a32      	ldr	r2, [r6, #32]
    m_status |= CACHE_STATUS_DIRTY;
    36f6:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    36fa:	f043 0301 	orr.w	r3, r3, #1
    36fe:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    3702:	7829      	ldrb	r1, [r5, #0]
    3704:	f1a1 0085 	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    3708:	2200      	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    370a:	fab0 f080 	clz	r0, r0
    370e:	0940      	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    3710:	e001      	b.n	3716 <ExFatFile::syncDir()+0x92>
    3712:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    3714:	5ca9      	ldrb	r1, [r5, r2]
    3716:	03e3      	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    3718:	2a01      	cmp	r2, #1
    371a:	f102 0201 	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    371e:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    3722:	fa11 f383 	uxtah	r3, r1, r3
    3726:	b29c      	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    3728:	d101      	bne.n	372e <ExFatFile::syncDir()+0xaa>
    372a:	2800      	cmp	r0, #0
    372c:	d1f1      	bne.n	3712 <ExFatFile::syncDir()+0x8e>
    372e:	2a1f      	cmp	r2, #31
    3730:	d9f0      	bls.n	3714 <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    3732:	f108 0801 	add.w	r8, r8, #1
    3736:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    373a:	fa5f f188 	uxtb.w	r1, r8
    373e:	428b      	cmp	r3, r1
    3740:	d2a9      	bcs.n	3696 <ExFatFile::syncDir()+0x12>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    3742:	2201      	movs	r2, #1
    3744:	f106 0124 	add.w	r1, r6, #36	; 0x24
    3748:	6a30      	ldr	r0, [r6, #32]
    374a:	f001 f915 	bl	4978 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    374e:	2800      	cmp	r0, #0
    3750:	d0ae      	beq.n	36b0 <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    3752:	6a35      	ldr	r5, [r6, #32]
    3754:	8044      	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    3756:	4628      	mov	r0, r5
    3758:	f006 f9a2 	bl	9aa0 <FsCache::sync()>
    375c:	2800      	cmp	r0, #0
    375e:	d0a7      	beq.n	36b0 <ExFatFile::syncDir()+0x2c>
    3760:	f505 7004 	add.w	r0, r5, #528	; 0x210
    3764:	f006 f99c 	bl	9aa0 <FsCache::sync()>
    3768:	2800      	cmp	r0, #0
    376a:	d0a1      	beq.n	36b0 <ExFatFile::syncDir()+0x2c>
    376c:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    3770:	6803      	ldr	r3, [r0, #0]
    3772:	6a1b      	ldr	r3, [r3, #32]
    3774:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    3776:	2800      	cmp	r0, #0
    3778:	d1a1      	bne.n	36be <ExFatFile::syncDir()+0x3a>
    377a:	e799      	b.n	36b0 <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    377c:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    3780:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    3784:	7843      	ldrb	r3, [r0, #1]
    3786:	bf14      	ite	ne
    3788:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    378c:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    3790:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    3792:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    3796:	e9d6 3207 	ldrd	r3, r2, [r6, #28]
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    379a:	e9c5 0102 	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    379e:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    37a2:	616b      	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    37a4:	e9c5 0106 	strd	r0, r1, [r5, #24]
    37a8:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    37ac:	f043 0301 	orr.w	r3, r3, #1
    37b0:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    37b4:	7829      	ldrb	r1, [r5, #0]
  void dataCacheDirty() {m_dataCache.dirty();}
    37b6:	e7a5      	b.n	3704 <ExFatFile::syncDir()+0x80>
    37b8:	200033f8 	.word	0x200033f8

000037bc <ExFatFile::sync()>:
bool ExFatFile::sync() {
    37bc:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    37be:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    37c2:	b343      	cbz	r3, 3816 <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    37c4:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    37c8:	4604      	mov	r4, r0
    37ca:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    37ce:	2a00      	cmp	r2, #0
    37d0:	db0c      	blt.n	37ec <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    37d2:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    37d4:	4628      	mov	r0, r5
    37d6:	f006 f963 	bl	9aa0 <FsCache::sync()>
    37da:	b978      	cbnz	r0, 37fc <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    37dc:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    37e0:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    37e2:	f043 0301 	orr.w	r3, r3, #1
    37e6:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    37ea:	bd38      	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    37ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    37f0:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
    37f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    37f8:	f7ff bf44 	b.w	3684 <ExFatFile::syncDir()>
    37fc:	f505 7004 	add.w	r0, r5, #528	; 0x210
    3800:	f006 f94e 	bl	9aa0 <FsCache::sync()>
    3804:	2800      	cmp	r0, #0
    3806:	d0e9      	beq.n	37dc <ExFatFile::sync()+0x20>
    3808:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    380c:	6803      	ldr	r3, [r0, #0]
    380e:	6a1b      	ldr	r3, [r3, #32]
    3810:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    3812:	2800      	cmp	r0, #0
    3814:	d0e2      	beq.n	37dc <ExFatFile::sync()+0x20>
    return true;
    3816:	2001      	movs	r0, #1
}
    3818:	bd38      	pop	{r3, r4, r5, pc}
    381a:	bf00      	nop

0000381c <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    381c:	b570      	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    381e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    3822:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    3824:	065a      	lsls	r2, r3, #25
    3826:	d44c      	bmi.n	38c2 <ExFatFile::addDirCluster()+0xa6>
    3828:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    382a:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    382c:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    3830:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    3832:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    3836:	d301      	bcc.n	383c <ExFatFile::addDirCluster()+0x20>
}
    3838:	2000      	movs	r0, #0
    383a:	bd70      	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    383c:	4628      	mov	r0, r5
    383e:	f7ff fe4d 	bl	34dc <ExFatFile::addCluster()>
    3842:	2800      	cmp	r0, #0
    3844:	d0f8      	beq.n	3838 <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    3846:	6a28      	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    3848:	2400      	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    384a:	69ae      	ldr	r6, [r5, #24]
    384c:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    3850:	3e02      	subs	r6, #2
    3852:	409e      	lsls	r6, r3
    3854:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    3858:	441e      	add	r6, r3
    return m_dataCache.prepare(sector, option);
    385a:	1931      	adds	r1, r6, r4
    385c:	2205      	movs	r2, #5
    385e:	f500 7004 	add.w	r0, r0, #528	; 0x210
    3862:	3401      	adds	r4, #1
    3864:	f006 f948 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    3868:	f44f 7200 	mov.w	r2, #512	; 0x200
    386c:	2100      	movs	r1, #0
    if (!cache) {
    386e:	2800      	cmp	r0, #0
    3870:	d0e2      	beq.n	3838 <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    3872:	f00a fb0b 	bl	de8c <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    3876:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    3878:	2301      	movs	r3, #1
    387a:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    387e:	4093      	lsls	r3, r2
    3880:	429c      	cmp	r4, r3
    3882:	d3ea      	bcc.n	385a <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    3884:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    3888:	065b      	lsls	r3, r3, #25
    388a:	d415      	bmi.n	38b8 <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    388c:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    3890:	f062 027f 	orn	r2, r2, #127	; 0x7f
    m_dataLength  += m_vol->bytesPerCluster();
    3894:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3898:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    389c:	f8d0 243c 	ldr.w	r2, [r0, #1084]	; 0x43c
    38a0:	189b      	adds	r3, r3, r2
    38a2:	f141 0000 	adc.w	r0, r1, #0
    38a6:	60ab      	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    38a8:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
    m_dataLength  += m_vol->bytesPerCluster();
    38ac:	60e8      	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    38ae:	189b      	adds	r3, r3, r2
    38b0:	f141 0100 	adc.w	r1, r1, #0
    38b4:	e9c5 3104 	strd	r3, r1, [r5, #16]
  return sync();
    38b8:	4628      	mov	r0, r5
}
    38ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    38be:	f7ff bf7d 	b.w	37bc <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    38c2:	6a00      	ldr	r0, [r0, #32]
    38c4:	f001 f9fe 	bl	4cc4 <ExFatPartition::rootLength()>
    38c8:	e7af      	b.n	382a <ExFatFile::addDirCluster()+0xe>
    38ca:	bf00      	nop

000038cc <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    38cc:	b570      	push	{r4, r5, r6, lr}
    38ce:	4604      	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    38d0:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    38d4:	b09c      	sub	sp, #112	; 0x70
  ExFatFile() {}
    38d6:	2300      	movs	r3, #0
  if (!(isFile() || isSubDir())) {
    38d8:	f010 0f18 	tst.w	r0, #24
    38dc:	930c      	str	r3, [sp, #48]	; 0x30
    38de:	931a      	str	r3, [sp, #104]	; 0x68
    38e0:	d003      	beq.n	38ea <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  if (m_vol != dirFile->m_vol) {
    38e2:	6a20      	ldr	r0, [r4, #32]
    38e4:	6a0b      	ldr	r3, [r1, #32]
    38e6:	4298      	cmp	r0, r3
    38e8:	d002      	beq.n	38f0 <ExFatFile::rename(ExFatFile*, char const*)+0x24>
  return false;
    38ea:	2000      	movs	r0, #0
}
    38ec:	b01c      	add	sp, #112	; 0x70
    38ee:	bd70      	pop	{r4, r5, r6, pc}
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    38f0:	f640 2301 	movw	r3, #2561	; 0xa01
    38f4:	4668      	mov	r0, sp
    38f6:	f7ff fd5b 	bl	33b0 <ExFatFile::open(ExFatFile*, char const*, int)>
    38fa:	2800      	cmp	r0, #0
    38fc:	d0f5      	beq.n	38ea <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile = *this;
    38fe:	46a4      	mov	ip, r4
    3900:	f104 0630 	add.w	r6, r4, #48	; 0x30
    3904:	ad0e      	add	r5, sp, #56	; 0x38
    3906:	f8dc 0000 	ldr.w	r0, [ip]
    390a:	f10c 0c10 	add.w	ip, ip, #16
    390e:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    3912:	46ae      	mov	lr, r5
    3914:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    3918:	3510      	adds	r5, #16
    391a:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    391e:	45b4      	cmp	ip, r6
    3920:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3924:	d1ef      	bne.n	3906 <ExFatFile::rename(ExFatFile*, char const*)+0x3a>
    3926:	f8dc 0000 	ldr.w	r0, [ip]
  m_dirPos = file.m_dirPos;
    392a:	aa09      	add	r2, sp, #36	; 0x24
    392c:	f104 0324 	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    3930:	6028      	str	r0, [r5, #0]
  m_setCount = file.m_setCount;
    3932:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
  m_dirPos = file.m_dirPos;
    3936:	ca07      	ldmia	r2, {r0, r1, r2}
    3938:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  m_flags |= FILE_FLAG_DIR_DIRTY;
    393c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    3940:	4620      	mov	r0, r4
  m_setCount = file.m_setCount;
    3942:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    3946:	f063 037f 	orn	r3, r3, #127	; 0x7f
    394a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    394e:	f7ff ff35 	bl	37bc <ExFatFile::sync()>
    3952:	2800      	cmp	r0, #0
    3954:	d0c9      	beq.n	38ea <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile.m_firstCluster = 0;
    3956:	2100      	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    3958:	2202      	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    395a:	2308      	movs	r3, #8
  return oldFile.remove();
    395c:	a80e      	add	r0, sp, #56	; 0x38
  oldFile.m_firstCluster = 0;
    395e:	9115      	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    3960:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    3964:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    3968:	f7ff fe02 	bl	3570 <ExFatFile::remove()>
    396c:	e7be      	b.n	38ec <ExFatFile::rename(ExFatFile*, char const*)+0x20>
    396e:	bf00      	nop

00003970 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    3970:	b538      	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    3972:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    3976:	f013 0f50 	tst.w	r3, #80	; 0x50
    397a:	d102      	bne.n	3982 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    397c:	2500      	movs	r5, #0
}
    397e:	4628      	mov	r0, r5
    3980:	bd38      	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    3982:	f640 2302 	movw	r3, #2562	; 0xa02
    3986:	4604      	mov	r4, r0
    3988:	f7ff fb46 	bl	3018 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    398c:	2800      	cmp	r0, #0
    398e:	d0f5      	beq.n	397c <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR;
    3990:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    3992:	4620      	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    3994:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    3998:	f7ff ff40 	bl	381c <ExFatFile::addDirCluster()>
    399c:	4605      	mov	r5, r0
    399e:	2800      	cmp	r0, #0
    39a0:	d0ec      	beq.n	397c <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    39a2:	69a1      	ldr	r1, [r4, #24]
    seekSet(0);
    39a4:	2200      	movs	r2, #0
    39a6:	2300      	movs	r3, #0
    39a8:	4620      	mov	r0, r4
    39aa:	61e1      	str	r1, [r4, #28]
    39ac:	f7ff fabe 	bl	2f2c <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    39b0:	22c1      	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    39b2:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    39b6:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    39ba:	2b00      	cmp	r3, #0
    39bc:	d0df      	beq.n	397e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    39be:	2341      	movs	r3, #65	; 0x41
    return syncDir();
    39c0:	4620      	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    39c2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    39c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    39ca:	f7ff be5b 	b.w	3684 <ExFatFile::syncDir()>
    39ce:	bf00      	nop

000039d0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    39d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    39d2:	2500      	movs	r5, #0
    39d4:	b097      	sub	sp, #92	; 0x5c
    39d6:	461f      	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    39d8:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    39dc:	9201      	str	r2, [sp, #4]
    39de:	f8ad 5014 	strh.w	r5, [sp, #20]
  ExFatFile() {}
    39e2:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    39e4:	2b00      	cmp	r3, #0
    39e6:	d146      	bne.n	3a76 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    39e8:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    39ec:	460e      	mov	r6, r1
    39ee:	f013 0f50 	tst.w	r3, #80	; 0x50
    39f2:	d040      	beq.n	3a76 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
  if (isDirSeparator(*path)) {
    39f4:	7813      	ldrb	r3, [r2, #0]
    39f6:	4604      	mov	r4, r0
    39f8:	4611      	mov	r1, r2
    39fa:	2b2f      	cmp	r3, #47	; 0x2f
    39fc:	d03e      	beq.n	3a7c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!parsePathName(path, &fname, &path)) {
    39fe:	ab01      	add	r3, sp, #4
    3a00:	aa02      	add	r2, sp, #8
    3a02:	4620      	mov	r0, r4
    3a04:	f7ff f95e 	bl	2cc4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    3a08:	2800      	cmp	r0, #0
    3a0a:	d034      	beq.n	3a76 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!*path) {
    3a0c:	9b01      	ldr	r3, [sp, #4]
    3a0e:	781b      	ldrb	r3, [r3, #0]
    3a10:	2b00      	cmp	r3, #0
    3a12:	d041      	beq.n	3a98 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc8>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    3a14:	2300      	movs	r3, #0
    3a16:	aa02      	add	r2, sp, #8
    3a18:	4631      	mov	r1, r6
    3a1a:	4620      	mov	r0, r4
    3a1c:	f7ff fafc 	bl	3018 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    3a20:	b930      	cbnz	r0, 3a30 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x60>
      if (!pFlag || !mkdir(parent, &fname)) {
    3a22:	b347      	cbz	r7, 3a76 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    3a24:	aa02      	add	r2, sp, #8
    3a26:	4631      	mov	r1, r6
    3a28:	4620      	mov	r0, r4
    3a2a:	f7ff ffa1 	bl	3970 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    3a2e:	b310      	cbz	r0, 3a76 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    tmpDir = *this;
    3a30:	46a4      	mov	ip, r4
    3a32:	ad08      	add	r5, sp, #32
    3a34:	f104 0630 	add.w	r6, r4, #48	; 0x30
    3a38:	f8dc 0000 	ldr.w	r0, [ip]
    3a3c:	f10c 0c10 	add.w	ip, ip, #16
    3a40:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    3a44:	46ae      	mov	lr, r5
    3a46:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    3a4a:	3510      	adds	r5, #16
    3a4c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    3a50:	45b4      	cmp	ip, r6
    3a52:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3a56:	d1ef      	bne.n	3a38 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x68>
    3a58:	f8dc 0000 	ldr.w	r0, [ip]
    parent = &tmpDir;
    3a5c:	ae08      	add	r6, sp, #32
    tmpDir = *this;
    3a5e:	6028      	str	r0, [r5, #0]
    close();
    3a60:	4620      	mov	r0, r4
    3a62:	f7ff f8ed 	bl	2c40 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    3a66:	9901      	ldr	r1, [sp, #4]
    3a68:	ab01      	add	r3, sp, #4
    3a6a:	aa02      	add	r2, sp, #8
    3a6c:	4620      	mov	r0, r4
    3a6e:	f7ff f929 	bl	2cc4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    3a72:	2800      	cmp	r0, #0
    3a74:	d1ca      	bne.n	3a0c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
  return false;
    3a76:	2000      	movs	r0, #0
}
    3a78:	b017      	add	sp, #92	; 0x5c
    3a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      path++;
    3a7c:	3101      	adds	r1, #1
    3a7e:	9101      	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    3a80:	780b      	ldrb	r3, [r1, #0]
    3a82:	2b2f      	cmp	r3, #47	; 0x2f
    3a84:	d0fa      	beq.n	3a7c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!tmpDir.openRoot(parent->m_vol)) {
    3a86:	6a31      	ldr	r1, [r6, #32]
    3a88:	a808      	add	r0, sp, #32
    3a8a:	f7ff f907 	bl	2c9c <ExFatFile::openRoot(ExFatVolume*)>
    3a8e:	2800      	cmp	r0, #0
    3a90:	d0f1      	beq.n	3a76 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!parsePathName(path, &fname, &path)) {
    3a92:	9901      	ldr	r1, [sp, #4]
    parent = &tmpDir;
    3a94:	ae08      	add	r6, sp, #32
    3a96:	e7b2      	b.n	39fe <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2e>
  return mkdir(parent, &fname);
    3a98:	aa02      	add	r2, sp, #8
    3a9a:	4631      	mov	r1, r6
    3a9c:	4620      	mov	r0, r4
    3a9e:	f7ff ff67 	bl	3970 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    3aa2:	b017      	add	sp, #92	; 0x5c
    3aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3aa6:	bf00      	nop

00003aa8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    3aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3aac:	460e      	mov	r6, r1
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    3aae:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    3ab2:	b083      	sub	sp, #12
      || second > 59) {
    3ab4:	0709      	lsls	r1, r1, #28
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    3ab6:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
    3aba:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
    3abe:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    3ac2:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
      || second > 59) {
    3ac6:	f140 8085 	bpl.w	3bd4 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || year > 2107
    3aca:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
    3ace:	b294      	uxth	r4, r2
    3ad0:	2c7f      	cmp	r4, #127	; 0x7f
    3ad2:	d87f      	bhi.n	3bd4 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || month > 12
    3ad4:	1e5a      	subs	r2, r3, #1
    3ad6:	2a0b      	cmp	r2, #11
    3ad8:	d87c      	bhi.n	3bd4 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || day > 31
    3ada:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
    3ade:	2a1e      	cmp	r2, #30
    3ae0:	d878      	bhi.n	3bd4 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || minute > 59
    3ae2:	f1b8 0f3b 	cmp.w	r8, #59	; 0x3b
    3ae6:	bf98      	it	ls
    3ae8:	f1b9 0f17 	cmpls.w	r9, #23
    3aec:	bf8c      	ite	hi
    3aee:	f04f 0a01 	movhi.w	sl, #1
    3af2:	f04f 0a00 	movls.w	sl, #0
    3af6:	2f3b      	cmp	r7, #59	; 0x3b
    3af8:	bf88      	it	hi
    3afa:	f04a 0a01 	orrhi.w	sl, sl, #1
      || second > 59) {
    3afe:	f1ba 0f00 	cmp.w	sl, #0
    3b02:	d167      	bne.n	3bd4 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    3b04:	4605      	mov	r5, r0
    3b06:	9301      	str	r3, [sp, #4]
    3b08:	f7ff fe58 	bl	37bc <ExFatFile::sync()>
    3b0c:	2800      	cmp	r0, #0
    3b0e:	d061      	beq.n	3bd4 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    3b10:	9b01      	ldr	r3, [sp, #4]
    3b12:	4651      	mov	r1, sl
    3b14:	ea4b 1b43 	orr.w	fp, fp, r3, lsl #5
         hour << 11 | minute << 5 | second >> 1;
    3b18:	087b      	lsrs	r3, r7, #1
    goto fail;
  }

  date = FS_DATE(year, month, day);
  time = FS_TIME(hour, minute, second);
  ms10 = second & 1 ? 100 : 0;
    3b1a:	f017 0701 	ands.w	r7, r7, #1
         year << 9 | month << 5 | day;
    3b1e:	ea4b 2444 	orr.w	r4, fp, r4, lsl #9
  uint16_t checksum = 0;
    3b22:	46d3      	mov	fp, sl
         hour << 11 | minute << 5 | second >> 1;
    3b24:	ea43 1848 	orr.w	r8, r3, r8, lsl #5
  ms10 = second & 1 ? 100 : 0;
    3b28:	bf18      	it	ne
    3b2a:	2764      	movne	r7, #100	; 0x64
         year << 9 | month << 5 | day;
    3b2c:	b2a4      	uxth	r4, r4
         hour << 11 | minute << 5 | second >> 1;
    3b2e:	ea48 28c9 	orr.w	r8, r8, r9, lsl #11
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        m_vol->dataCacheDirty();
        if (flags & T_ACCESS) {
    3b32:	f006 0901 	and.w	r9, r6, #1
    3b36:	fa1f f888 	uxth.w	r8, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    3b3a:	2200      	movs	r2, #0
    3b3c:	4628      	mov	r0, r5
    3b3e:	f7ff f861 	bl	2c04 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    3b42:	2800      	cmp	r0, #0
    3b44:	d046      	beq.n	3bd4 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    switch (cache[0]) {
    3b46:	f890 c000 	ldrb.w	ip, [r0]
    3b4a:	f1bc 0f85 	cmp.w	ip, #133	; 0x85
    3b4e:	d045      	beq.n	3bdc <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x134>
    3b50:	f10c 0340 	add.w	r3, ip, #64	; 0x40
    3b54:	b2db      	uxtb	r3, r3
    3b56:	2b01      	cmp	r3, #1
    3b58:	d83c      	bhi.n	3bd4 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
  bool skip = data[0] == EXFAT_TYPE_FILE;
    3b5a:	f1ac 0185 	sub.w	r1, ip, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    3b5e:	2300      	movs	r3, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    3b60:	fab1 f181 	clz	r1, r1
    3b64:	0949      	lsrs	r1, r1, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    3b66:	e002      	b.n	3b6e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc6>
    3b68:	2304      	movs	r3, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    3b6a:	f810 c003 	ldrb.w	ip, [r0, r3]
    3b6e:	ea4f 32cb 	mov.w	r2, fp, lsl #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    3b72:	2b01      	cmp	r3, #1
    3b74:	f103 0301 	add.w	r3, r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    3b78:	ea42 025b 	orr.w	r2, r2, fp, lsr #1
    3b7c:	fa1c f282 	uxtah	r2, ip, r2
    3b80:	fa1f fb82 	uxth.w	fp, r2
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    3b84:	d101      	bne.n	3b8a <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe2>
    3b86:	2900      	cmp	r1, #0
    3b88:	d1ee      	bne.n	3b68 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
    3b8a:	2b1f      	cmp	r3, #31
    3b8c:	d9ed      	bls.n	3b6a <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc2>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    3b8e:	f10a 0a01 	add.w	sl, sl, #1
    3b92:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    3b96:	fa5f f18a 	uxtb.w	r1, sl
    3b9a:	428b      	cmp	r3, r1
    3b9c:	d2cd      	bcs.n	3b3a <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x92>
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    3b9e:	2201      	movs	r2, #1
    3ba0:	f105 0124 	add.w	r1, r5, #36	; 0x24
    3ba4:	6a28      	ldr	r0, [r5, #32]
    3ba6:	f000 fee7 	bl	4978 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    3baa:	b198      	cbz	r0, 3bd4 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    3bac:	6a2c      	ldr	r4, [r5, #32]
  *reinterpret_cast<uint16_t*>(dst) = src;
    3bae:	f8a0 b002 	strh.w	fp, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    3bb2:	4620      	mov	r0, r4
    3bb4:	f005 ff74 	bl	9aa0 <FsCache::sync()>
    3bb8:	b160      	cbz	r0, 3bd4 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    3bba:	f504 7004 	add.w	r0, r4, #528	; 0x210
    3bbe:	f005 ff6f 	bl	9aa0 <FsCache::sync()>
    3bc2:	b138      	cbz	r0, 3bd4 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    3bc4:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
    return m_blockDev->syncDevice();
    3bc8:	6803      	ldr	r3, [r0, #0]
    3bca:	6a1b      	ldr	r3, [r3, #32]
  }
  return true;

 fail:
  return false;
}
    3bcc:	b003      	add	sp, #12
    3bce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3bd2:	4718      	bx	r3
    3bd4:	2000      	movs	r0, #0
    3bd6:	b003      	add	sp, #12
    3bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    3bdc:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
        m_vol->dataCacheDirty();
    3be0:	6a2a      	ldr	r2, [r5, #32]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    3be2:	f003 0337 	and.w	r3, r3, #55	; 0x37
    3be6:	8083      	strh	r3, [r0, #4]
    3be8:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    3bec:	f043 0301 	orr.w	r3, r3, #1
    3bf0:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
        if (flags & T_ACCESS) {
    3bf4:	f1b9 0f00 	cmp.w	r9, #0
    3bf8:	d002      	beq.n	3c00 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x158>
    3bfa:	f8a0 8010 	strh.w	r8, [r0, #16]
    3bfe:	8244      	strh	r4, [r0, #18]
        if (flags & T_CREATE) {
    3c00:	07b2      	lsls	r2, r6, #30
    3c02:	d503      	bpl.n	3c0c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>
          df->createTimeMs = ms10;
    3c04:	7507      	strb	r7, [r0, #20]
    3c06:	f8a0 8008 	strh.w	r8, [r0, #8]
    3c0a:	8144      	strh	r4, [r0, #10]
        if (flags & T_WRITE) {
    3c0c:	0773      	lsls	r3, r6, #29
    3c0e:	d503      	bpl.n	3c18 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x170>
          df->modifyTimeMs = ms10;
    3c10:	7547      	strb	r7, [r0, #21]
    3c12:	f8a0 800c 	strh.w	r8, [r0, #12]
    3c16:	81c4      	strh	r4, [r0, #14]
  bool skip = data[0] == EXFAT_TYPE_FILE;
    3c18:	f890 c000 	ldrb.w	ip, [r0]
}
    3c1c:	e79d      	b.n	3b5a <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb2>
    3c1e:	bf00      	nop

00003c20 <ExFatFile::truncate()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    3c20:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    3c24:	079a      	lsls	r2, r3, #30
    3c26:	d562      	bpl.n	3cee <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    3c28:	b570      	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    3c2a:	69c5      	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    3c2c:	b082      	sub	sp, #8
    3c2e:	4604      	mov	r4, r0
  if (m_firstCluster == 0) {
    3c30:	b3a5      	cbz	r5, 3c9c <ExFatFile::truncate()+0x7c>
      return true;
  }
  if (isContiguous()) {
    3c32:	f013 0640 	ands.w	r6, r3, #64	; 0x40
    3c36:	d034      	beq.n	3ca2 <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    3c38:	6a00      	ldr	r0, [r0, #32]
    3c3a:	68a2      	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    3c3c:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    3c40:	3a01      	subs	r2, #1
    3c42:	68e1      	ldr	r1, [r4, #12]
    3c44:	f10c 0c09 	add.w	ip, ip, #9
    3c48:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    3c4c:	fa5f fc8c 	uxtb.w	ip, ip
    3c50:	f1cc 0e20 	rsb	lr, ip, #32
    3c54:	fa22 f20c 	lsr.w	r2, r2, ip
    3c58:	f1ac 0c20 	sub.w	ip, ip, #32
    3c5c:	fa01 fe0e 	lsl.w	lr, r1, lr
    3c60:	fa21 fc0c 	lsr.w	ip, r1, ip
    if (m_curCluster) {
    3c64:	69a1      	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    3c66:	ea42 020e 	orr.w	r2, r2, lr
    3c6a:	ea42 020c 	orr.w	r2, r2, ip
    3c6e:	3201      	adds	r2, #1
    if (m_curCluster) {
    3c70:	b319      	cbz	r1, 3cba <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    3c72:	3d01      	subs	r5, #1
    3c74:	1a6d      	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    3c76:	3101      	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    3c78:	442a      	add	r2, r5
      toFree = m_curCluster + 1;
    3c7a:	9101      	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    3c7c:	bb72      	cbnz	r2, 3cdc <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    3c7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return sync();
    3c82:	4620      	mov	r0, r4
  m_dataLength = m_curPosition;
    3c84:	ed94 7b00 	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    3c88:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    3c8c:	ed84 7b02 	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    3c90:	ed84 7b04 	vstr	d7, [r4, #16]
  return sync();
    3c94:	f7ff fd92 	bl	37bc <ExFatFile::sync()>

 fail:
  return false;
}
    3c98:	b002      	add	sp, #8
    3c9a:	bd70      	pop	{r4, r5, r6, pc}
      return true;
    3c9c:	2001      	movs	r0, #1
}
    3c9e:	b002      	add	sp, #8
    3ca0:	bd70      	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    3ca2:	6981      	ldr	r1, [r0, #24]
    3ca4:	b961      	cbnz	r1, 3cc0 <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    3ca6:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    3ca8:	61c1      	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    3caa:	4629      	mov	r1, r5
    3cac:	6a20      	ldr	r0, [r4, #32]
    3cae:	f000 ff03 	bl	4ab8 <ExFatPartition::freeChain(unsigned long)>
    3cb2:	b1c8      	cbz	r0, 3ce8 <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    3cb4:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    3cb8:	e7e1      	b.n	3c7e <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    3cba:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    3cbc:	61e1      	str	r1, [r4, #28]
    3cbe:	e7dd      	b.n	3c7c <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    3cc0:	aa01      	add	r2, sp, #4
    3cc2:	6a00      	ldr	r0, [r0, #32]
      toFree = 0;
    3cc4:	9601      	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    3cc6:	f000 feb5 	bl	4a34 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    3cca:	2800      	cmp	r0, #0
    3ccc:	db0c      	blt.n	3ce8 <ExFatFile::truncate()+0xc8>
      if (fg) {
    3cce:	d110      	bne.n	3cf2 <ExFatFile::truncate()+0xd2>
    if (toFree) {
    3cd0:	9d01      	ldr	r5, [sp, #4]
    3cd2:	2d00      	cmp	r5, #0
    3cd4:	d1e9      	bne.n	3caa <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    3cd6:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    3cda:	e7d0      	b.n	3c7e <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    3cdc:	2300      	movs	r3, #0
    3cde:	9901      	ldr	r1, [sp, #4]
    3ce0:	f000 fdce 	bl	4880 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    3ce4:	2800      	cmp	r0, #0
    3ce6:	d1e5      	bne.n	3cb4 <ExFatFile::truncate()+0x94>
  return false;
    3ce8:	2000      	movs	r0, #0
}
    3cea:	b002      	add	sp, #8
    3cec:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    3cee:	2000      	movs	r0, #0
}
    3cf0:	4770      	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    3cf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3cf6:	69a1      	ldr	r1, [r4, #24]
    3cf8:	6a20      	ldr	r0, [r4, #32]
    3cfa:	f000 febd 	bl	4a78 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    3cfe:	2800      	cmp	r0, #0
    3d00:	d1e6      	bne.n	3cd0 <ExFatFile::truncate()+0xb0>
    3d02:	e7f1      	b.n	3ce8 <ExFatFile::truncate()+0xc8>

00003d04 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    3d04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3d08:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    3d0c:	b083      	sub	sp, #12
    3d0e:	4604      	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    3d10:	079d      	lsls	r5, r3, #30
    3d12:	f140 80a1 	bpl.w	3e58 <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    3d16:	4691      	mov	r9, r2
    3d18:	071a      	lsls	r2, r3, #28
    3d1a:	460e      	mov	r6, r1
    3d1c:	f100 8095 	bmi.w	3e4a <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    3d20:	f1b9 0f00 	cmp.w	r9, #0
    3d24:	f000 8128 	beq.w	3f78 <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    3d28:	6823      	ldr	r3, [r4, #0]
    3d2a:	464d      	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    3d2c:	6a20      	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    3d2e:	69a1      	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    3d30:	f8d0 2438 	ldr.w	r2, [r0, #1080]	; 0x438
    3d34:	ea02 0803 	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    3d38:	f3c8 0708 	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    3d3c:	f1b8 0f00 	cmp.w	r8, #0
    3d40:	f040 8094 	bne.w	3e6c <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    3d44:	2900      	cmp	r1, #0
    3d46:	f000 80d4 	beq.w	3ef2 <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    3d4a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    3d4e:	065b      	lsls	r3, r3, #25
    3d50:	f140 80ec 	bpl.w	3f2c <ExFatFile::write(void const*, unsigned int)+0x228>
    3d54:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    3d58:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3d5c:	f10c 0c09 	add.w	ip, ip, #9
    3d60:	3b01      	subs	r3, #1
    3d62:	fa5f fc8c 	uxtb.w	ip, ip
    3d66:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
    3d6a:	f1cc 0e20 	rsb	lr, ip, #32
    3d6e:	fa23 f30c 	lsr.w	r3, r3, ip
    3d72:	f1ac 0c20 	sub.w	ip, ip, #32
    3d76:	fa02 fe0e 	lsl.w	lr, r2, lr
    3d7a:	fa22 fc0c 	lsr.w	ip, r2, ip
    3d7e:	69e2      	ldr	r2, [r4, #28]
    3d80:	ea43 030e 	orr.w	r3, r3, lr
    3d84:	ea43 030c 	orr.w	r3, r3, ip
    3d88:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    3d8a:	4299      	cmp	r1, r3
    3d8c:	f080 80d5 	bcs.w	3f3a <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    3d90:	3101      	adds	r1, #1
    3d92:	61a1      	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    3d94:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    3d98:	3902      	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    3d9a:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    3d9e:	4091      	lsls	r1, r2
    3da0:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    3da2:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    3da6:	f0c0 808a 	bcc.w	3ebe <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    3daa:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    3dae:	f0c0 80a6 	bcc.w	3efe <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    3db2:	2301      	movs	r3, #1
    3db4:	4093      	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    3db6:	0a6a      	lsrs	r2, r5, #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    3db8:	eba3 0308 	sub.w	r3, r3, r8
    3dbc:	4293      	cmp	r3, r2
    3dbe:	bf28      	it	cs
    3dc0:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    3dc2:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
    3dc6:	428a      	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    3dc8:	ea4f 2843 	mov.w	r8, r3, lsl #9
    3dcc:	d309      	bcc.n	3de2 <ExFatFile::write(void const*, unsigned int)+0xde>
    3dce:	185f      	adds	r7, r3, r1
    3dd0:	42ba      	cmp	r2, r7
    3dd2:	d206      	bcs.n	3de2 <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    3dd4:	2200      	movs	r2, #0
    3dd6:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    3dda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3dde:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    3de2:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    3de6:	4632      	mov	r2, r6
    3de8:	6807      	ldr	r7, [r0, #0]
    3dea:	6abf      	ldr	r7, [r7, #40]	; 0x28
    3dec:	47b8      	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    3dee:	b398      	cbz	r0, 3e58 <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    3df0:	4643      	mov	r3, r8
    src += n;
    3df2:	4446      	add	r6, r8
    toWrite -= n;
    3df4:	eba5 0508 	sub.w	r5, r5, r8
    m_curPosition += n;
    3df8:	e9d4 7200 	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    3dfc:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    3e00:	19db      	adds	r3, r3, r7
    3e02:	f142 0200 	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    3e06:	4298      	cmp	r0, r3
    3e08:	4191      	sbcs	r1, r2
    m_curPosition += n;
    3e0a:	e9c4 3200 	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    3e0e:	d207      	bcs.n	3e20 <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    3e10:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    3e14:	f061 017f 	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    3e18:	e9c4 3204 	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    3e1c:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    3e20:	2d00      	cmp	r5, #0
    3e22:	d183      	bne.n	3d2c <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    3e24:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    3e28:	4298      	cmp	r0, r3
    3e2a:	4191      	sbcs	r1, r2
    3e2c:	f0c0 8096 	bcc.w	3f5c <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    3e30:	4b53      	ldr	r3, [pc, #332]	; (3f80 <ExFatFile::write(void const*, unsigned int)+0x27c>)
    3e32:	681b      	ldr	r3, [r3, #0]
    3e34:	2b00      	cmp	r3, #0
    3e36:	f000 809d 	beq.w	3f74 <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3e3a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    3e3e:	4648      	mov	r0, r9
    3e40:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3e44:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    3e48:	e00d      	b.n	3e66 <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    3e4a:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    3e4e:	f7ff f86d 	bl	2f2c <ExFatFile::seekSet(unsigned long long)>
    3e52:	2800      	cmp	r0, #0
    3e54:	f47f af64 	bne.w	3d20 <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    3e58:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    3e5c:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    3e5e:	f043 0301 	orr.w	r3, r3, #1
    3e62:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    3e66:	b003      	add	sp, #12
    3e68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    3e6c:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    3e70:	3902      	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    3e72:	ea4f 2858 	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    3e76:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    3e7a:	4091      	lsls	r1, r2
    3e7c:	4441      	add	r1, r8
    3e7e:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    3e80:	2f00      	cmp	r7, #0
    3e82:	d08e      	beq.n	3da2 <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    3e84:	f5c7 7800 	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    3e88:	2201      	movs	r2, #1
    3e8a:	f500 7004 	add.w	r0, r0, #528	; 0x210
    3e8e:	45a8      	cmp	r8, r5
    3e90:	bf28      	it	cs
    3e92:	46a8      	movcs	r8, r5
    3e94:	f005 fe30 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    3e98:	2800      	cmp	r0, #0
    3e9a:	d0dd      	beq.n	3e58 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    3e9c:	4438      	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    3e9e:	4447      	add	r7, r8
      memcpy(dst, src, n);
    3ea0:	4642      	mov	r2, r8
    3ea2:	4631      	mov	r1, r6
    3ea4:	f007 fc44 	bl	b730 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    3ea8:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    3eac:	6a20      	ldr	r0, [r4, #32]
    3eae:	d19f      	bne.n	3df0 <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() {return m_dataCache.sync();}
    3eb0:	f500 7004 	add.w	r0, r0, #528	; 0x210
    3eb4:	f005 fdf4 	bl	9aa0 <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    3eb8:	2800      	cmp	r0, #0
    3eba:	d199      	bne.n	3df0 <ExFatFile::write(void const*, unsigned int)+0xec>
    3ebc:	e7cc      	b.n	3e58 <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    3ebe:	6862      	ldr	r2, [r4, #4]
    3ec0:	6963      	ldr	r3, [r4, #20]
    3ec2:	9200      	str	r2, [sp, #0]
    3ec4:	9301      	str	r3, [sp, #4]
    3ec6:	6922      	ldr	r2, [r4, #16]
    3ec8:	6823      	ldr	r3, [r4, #0]
    3eca:	4293      	cmp	r3, r2
    3ecc:	e9dd 2300 	ldrd	r2, r3, [sp]
    3ed0:	419a      	sbcs	r2, r3
    3ed2:	d212      	bcs.n	3efa <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    3ed4:	2201      	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    3ed6:	f500 7004 	add.w	r0, r0, #528	; 0x210
    3eda:	f005 fe0d 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    3ede:	2800      	cmp	r0, #0
    3ee0:	d0ba      	beq.n	3e58 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    3ee2:	462a      	mov	r2, r5
    3ee4:	4631      	mov	r1, r6
    3ee6:	4438      	add	r0, r7
    m_curPosition += n;
    3ee8:	46a8      	mov	r8, r5
      memcpy(dst, src, n);
    3eea:	f007 fc21 	bl	b730 <memcpy>
    m_curPosition += n;
    3eee:	462b      	mov	r3, r5
    3ef0:	e77f      	b.n	3df2 <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    3ef2:	69e1      	ldr	r1, [r4, #28]
    3ef4:	b349      	cbz	r1, 3f4a <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    3ef6:	61a1      	str	r1, [r4, #24]
    3ef8:	e74c      	b.n	3d94 <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    3efa:	2205      	movs	r2, #5
    3efc:	e7eb      	b.n	3ed6 <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    3efe:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    3f02:	428b      	cmp	r3, r1
    3f04:	d106      	bne.n	3f14 <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    3f06:	2300      	movs	r3, #0
    3f08:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    3f0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3f10:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    3f14:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    3f18:	4632      	mov	r2, r6
    3f1a:	6803      	ldr	r3, [r0, #0]
    3f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3f1e:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    3f20:	2800      	cmp	r0, #0
    3f22:	d099      	beq.n	3e58 <ExFatFile::write(void const*, unsigned int)+0x154>
    3f24:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    3f28:	4698      	mov	r8, r3
    3f2a:	e762      	b.n	3df2 <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3f2c:	f104 0218 	add.w	r2, r4, #24
    3f30:	f000 fd80 	bl	4a34 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    3f34:	2800      	cmp	r0, #0
    3f36:	db8f      	blt.n	3e58 <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    3f38:	d104      	bne.n	3f44 <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    3f3a:	4620      	mov	r0, r4
    3f3c:	f7ff face 	bl	34dc <ExFatFile::addCluster()>
    3f40:	2800      	cmp	r0, #0
    3f42:	d089      	beq.n	3e58 <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    3f44:	69a1      	ldr	r1, [r4, #24]
    3f46:	6a20      	ldr	r0, [r4, #32]
    3f48:	e724      	b.n	3d94 <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    3f4a:	4620      	mov	r0, r4
    3f4c:	f7ff fac6 	bl	34dc <ExFatFile::addCluster()>
    3f50:	2800      	cmp	r0, #0
    3f52:	d081      	beq.n	3e58 <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    3f54:	69a1      	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    3f56:	6a20      	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    3f58:	61e1      	str	r1, [r4, #28]
    3f5a:	e71b      	b.n	3d94 <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3f5c:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    3f60:	4648      	mov	r0, r9
    m_dataLength = m_curPosition;
    3f62:	e9c4 3202 	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3f66:	f061 037f 	orn	r3, r1, #127	; 0x7f
    3f6a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    3f6e:	b003      	add	sp, #12
    3f70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3f74:	4648      	mov	r0, r9
    3f76:	e776      	b.n	3e66 <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    3f78:	e9d4 3200 	ldrd	r3, r2, [r4]
    3f7c:	e752      	b.n	3e24 <ExFatFile::write(void const*, unsigned int)+0x120>
    3f7e:	bf00      	nop
    3f80:	200033f8 	.word	0x200033f8

00003f84 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    3f84:	b169      	cbz	r1, 3fa2 <Print::write(char const*) [clone .isra.0]+0x1e>
    3f86:	b570      	push	{r4, r5, r6, lr}
    3f88:	4605      	mov	r5, r0
							  return write((const uint8_t *)str, strlen(str)); }
    3f8a:	4608      	mov	r0, r1
    3f8c:	460c      	mov	r4, r1
    3f8e:	f00a fd57 	bl	ea40 <strlen>
    3f92:	682b      	ldr	r3, [r5, #0]
    3f94:	4602      	mov	r2, r0
    3f96:	4621      	mov	r1, r4
    3f98:	4628      	mov	r0, r5
    3f9a:	685b      	ldr	r3, [r3, #4]
    3f9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3fa0:	4718      	bx	r3
    3fa2:	4770      	bx	lr

00003fa4 <ExFatFormatter::syncUpcase()>:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::syncUpcase() {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    3fa4:	6883      	ldr	r3, [r0, #8]
    3fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
  if (!index) {
    3faa:	b183      	cbz	r3, 3fce <ExFatFormatter::syncUpcase()+0x2a>
    return true;
  }
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    m_secBuf[i] = 0;
    3fac:	2100      	movs	r1, #0
bool ExFatFormatter::syncUpcase() {
    3fae:	b410      	push	{r4}
    m_secBuf[i] = 0;
    3fb0:	6902      	ldr	r2, [r0, #16]
    3fb2:	54d1      	strb	r1, [r2, r3]
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    3fb4:	3301      	adds	r3, #1
    3fb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3fba:	d1f9      	bne.n	3fb0 <ExFatFormatter::syncUpcase()+0xc>
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    3fbc:	6801      	ldr	r1, [r0, #0]
    3fbe:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    3fc2:	681c      	ldr	r4, [r3, #0]
    3fc4:	4618      	mov	r0, r3
    3fc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
}
    3fc8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    3fcc:	4718      	bx	r3
}
    3fce:	2001      	movs	r0, #1
    3fd0:	4770      	bx	lr
    3fd2:	bf00      	nop

00003fd4 <ExFatFormatter::writeUpcaseByte(unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    3fd4:	6882      	ldr	r2, [r0, #8]
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    3fd6:	4603      	mov	r3, r0
  m_secBuf[index] = b;
    3fd8:	6900      	ldr	r0, [r0, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    3fda:	f240 1cff 	movw	ip, #511	; 0x1ff
    3fde:	f3c2 0208 	ubfx	r2, r2, #0, #9
  m_secBuf[index] = b;
    3fe2:	5481      	strb	r1, [r0, r2]
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
  m_upcaseSize++;
  if (index == SECTOR_MASK) {
    3fe4:	4562      	cmp	r2, ip
  uint8_t  mustBeZero2[2];
  uint8_t  unicode3[4];
} DirLfn_t;
//=============================================================================
inline uint32_t exFatChecksum(uint32_t sum, uint8_t data) {
  return (sum << 31) + (sum >> 1) + data;
    3fe6:	6858      	ldr	r0, [r3, #4]
    3fe8:	eb01 0170 	add.w	r1, r1, r0, ror #1
  m_upcaseSize++;
    3fec:	6898      	ldr	r0, [r3, #8]
    3fee:	f100 0001 	add.w	r0, r0, #1
    3ff2:	e9c3 1001 	strd	r1, r0, [r3, #4]
  if (index == SECTOR_MASK) {
    3ff6:	d001      	beq.n	3ffc <ExFatFormatter::writeUpcaseByte(unsigned char)+0x28>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
  }
  return true;
}
    3ff8:	2001      	movs	r0, #1
    3ffa:	4770      	bx	lr
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    3ffc:	68d8      	ldr	r0, [r3, #12]
    3ffe:	6819      	ldr	r1, [r3, #0]
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    4000:	b410      	push	{r4}
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    4002:	6804      	ldr	r4, [r0, #0]
    4004:	1c4a      	adds	r2, r1, #1
    4006:	6a64      	ldr	r4, [r4, #36]	; 0x24
    4008:	601a      	str	r2, [r3, #0]
    400a:	691a      	ldr	r2, [r3, #16]
    400c:	4623      	mov	r3, r4
}
    400e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    4012:	4718      	bx	r3

00004014 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    4014:	b538      	push	{r3, r4, r5, lr}
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    4016:	6883      	ldr	r3, [r0, #8]
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    4018:	b2ca      	uxtb	r2, r1
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    401a:	460d      	mov	r5, r1
  m_secBuf[index] = b;
    401c:	6901      	ldr	r1, [r0, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    401e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4022:	f240 1cff 	movw	ip, #511	; 0x1ff
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    4026:	4604      	mov	r4, r0
  m_secBuf[index] = b;
    4028:	54ca      	strb	r2, [r1, r3]
  if (index == SECTOR_MASK) {
    402a:	4563      	cmp	r3, ip
    402c:	6841      	ldr	r1, [r0, #4]
    402e:	eb02 0271 	add.w	r2, r2, r1, ror #1
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
    4032:	6042      	str	r2, [r0, #4]
  m_upcaseSize++;
    4034:	6882      	ldr	r2, [r0, #8]
    4036:	f102 0201 	add.w	r2, r2, #1
    403a:	6082      	str	r2, [r0, #8]
  if (index == SECTOR_MASK) {
    403c:	d005      	beq.n	404a <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x36>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    403e:	0a29      	lsrs	r1, r5, #8
    4040:	4620      	mov	r0, r4
}
    4042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    4046:	f7ff bfc5 	b.w	3fd4 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    404a:	6801      	ldr	r1, [r0, #0]
    404c:	68c0      	ldr	r0, [r0, #12]
    404e:	1c4a      	adds	r2, r1, #1
    4050:	6803      	ldr	r3, [r0, #0]
    4052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4054:	6022      	str	r2, [r4, #0]
    4056:	6922      	ldr	r2, [r4, #16]
    4058:	4798      	blx	r3
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    405a:	2800      	cmp	r0, #0
    405c:	d1ef      	bne.n	403e <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x2a>
}
    405e:	bd38      	pop	{r3, r4, r5, pc}

00004060 <ExFatFormatter::writeUpcase(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    4060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t n;
  uint32_t ns;
  uint32_t ch = 0;
  uint16_t uc;

  m_upcaseSize = 0;
    4062:	2300      	movs	r3, #0
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    4064:	4606      	mov	r6, r0
  m_upcaseChecksum = 0;
  m_upcaseSector = sector;
    4066:	6001      	str	r1, [r0, #0]
  uint32_t ch = 0;
    4068:	461d      	mov	r5, r3
  m_upcaseChecksum = 0;
    406a:	e9c0 3301 	strd	r3, r3, [r0, #4]

  while (ch < 0X10000) {
    uc = toUpcase(ch);
    406e:	b2a8      	uxth	r0, r5
    4070:	f005 fe94 	bl	9d9c <toUpcase(unsigned short)>
    if (uc != ch) {
    4074:	42a8      	cmp	r0, r5
    uc = toUpcase(ch);
    4076:	4604      	mov	r4, r0
    if (uc != ch) {
    4078:	d007      	beq.n	408a <ExFatFormatter::writeUpcase(unsigned long)+0x2a>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    407a:	b2c1      	uxtb	r1, r0
    407c:	4630      	mov	r0, r6
    407e:	f7ff ffa9 	bl	3fd4 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    4082:	2800      	cmp	r0, #0
    4084:	d13b      	bne.n	40fe <ExFatFormatter::writeUpcase(unsigned long)+0x9e>
  }
  return true;

 fail:
  return false;
}
    4086:	2000      	movs	r0, #0
    4088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
    408a:	1c6c      	adds	r4, r5, #1
    408c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    4090:	d104      	bne.n	409c <ExFatFormatter::writeUpcase(unsigned long)+0x3c>
    4092:	e02a      	b.n	40ea <ExFatFormatter::writeUpcase(unsigned long)+0x8a>
    4094:	3401      	adds	r4, #1
    4096:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    409a:	d004      	beq.n	40a6 <ExFatFormatter::writeUpcase(unsigned long)+0x46>
    409c:	b2a0      	uxth	r0, r4
    409e:	f005 fe7d 	bl	9d9c <toUpcase(unsigned short)>
    40a2:	42a0      	cmp	r0, r4
    40a4:	d0f6      	beq.n	4094 <ExFatFormatter::writeUpcase(unsigned long)+0x34>
      ns = n - ch;
    40a6:	1b67      	subs	r7, r4, r5
      if (ns >= MINIMUM_UPCASE_SKIP) {
    40a8:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    40ac:	d31d      	bcc.n	40ea <ExFatFormatter::writeUpcase(unsigned long)+0x8a>
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    40ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
    40b2:	4630      	mov	r0, r6
    40b4:	f7ff ffae 	bl	4014 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    40b8:	2800      	cmp	r0, #0
    40ba:	d0e4      	beq.n	4086 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
    40bc:	b2b9      	uxth	r1, r7
    40be:	4630      	mov	r0, r6
    40c0:	f7ff ffa8 	bl	4014 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    40c4:	2800      	cmp	r0, #0
    40c6:	d0de      	beq.n	4086 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
    40c8:	4625      	mov	r5, r4
  while (ch < 0X10000) {
    40ca:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    40ce:	d1ce      	bne.n	406e <ExFatFormatter::writeUpcase(unsigned long)+0xe>
  if (!syncUpcase()) {
    40d0:	4630      	mov	r0, r6
}
    40d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (!syncUpcase()) {
    40d6:	f7ff bf65 	b.w	3fa4 <ExFatFormatter::syncUpcase()>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    40da:	f3c5 2107 	ubfx	r1, r5, #8, #8
    40de:	4630      	mov	r0, r6
    40e0:	3501      	adds	r5, #1
    40e2:	f7ff ff77 	bl	3fd4 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    40e6:	2800      	cmp	r0, #0
    40e8:	d0cd      	beq.n	4086 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
        while (ch < n) {
    40ea:	42a5      	cmp	r5, r4
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    40ec:	b2e9      	uxtb	r1, r5
    40ee:	4630      	mov	r0, r6
        while (ch < n) {
    40f0:	d2eb      	bcs.n	40ca <ExFatFormatter::writeUpcase(unsigned long)+0x6a>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    40f2:	f7ff ff6f 	bl	3fd4 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    40f6:	2800      	cmp	r0, #0
    40f8:	d1ef      	bne.n	40da <ExFatFormatter::writeUpcase(unsigned long)+0x7a>
}
    40fa:	2000      	movs	r0, #0
    40fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    40fe:	f3c4 2107 	ubfx	r1, r4, #8, #8
    4102:	4630      	mov	r0, r6
    4104:	f7ff ff66 	bl	3fd4 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    4108:	2800      	cmp	r0, #0
    410a:	d0bc      	beq.n	4086 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
      ch++;
    410c:	3501      	adds	r5, #1
    410e:	e7dc      	b.n	40ca <ExFatFormatter::writeUpcase(unsigned long)+0x6a>

00004110 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    4110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4114:	461f      	mov	r7, r3
    4116:	b089      	sub	sp, #36	; 0x24
  sectorCount = dev->sectorCount();
    4118:	680b      	ldr	r3, [r1, #0]
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    411a:	460d      	mov	r5, r1
    411c:	9004      	str	r0, [sp, #16]
    411e:	4614      	mov	r4, r2
  m_dev = dev;
    4120:	60c1      	str	r1, [r0, #12]
  m_secBuf = secBuf;
    4122:	6102      	str	r2, [r0, #16]
  sectorCount = dev->sectorCount();
    4124:	4608      	mov	r0, r1
    4126:	69db      	ldr	r3, [r3, #28]
    4128:	4798      	blx	r3
  if (sectorCount < 0X100000) {
    412a:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
  sectorCount = dev->sectorCount();
    412e:	9000      	str	r0, [sp, #0]
  if (sectorCount < 0X100000) {
    4130:	f0c0 80d8 	bcc.w	42e4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1d4>
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
    4134:	2300      	movs	r3, #0
    4136:	2201      	movs	r2, #1
    4138:	9e00      	ldr	r6, [sp, #0]
    413a:	3301      	adds	r3, #1
    413c:	0052      	lsls	r2, r2, #1
    413e:	b2db      	uxtb	r3, r3
    4140:	d001      	beq.n	4146 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36>
    4142:	4296      	cmp	r6, r2
    4144:	d8f9      	bhi.n	413a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2a>
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    4146:	2b1c      	cmp	r3, #28
    4148:	9600      	str	r6, [sp, #0]
    414a:	f240 80b7 	bls.w	42bc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1ac>
    414e:	f1a3 080b 	sub.w	r8, r3, #11
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    4152:	2201      	movs	r2, #1
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    4154:	fa48 f102 	asr.w	r1, r8, r2
    4158:	f3c8 0847 	ubfx	r8, r8, #1, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    415c:	408a      	lsls	r2, r1
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    415e:	9102      	str	r1, [sp, #8]
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    4160:	9207      	str	r2, [sp, #28]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    4162:	3301      	adds	r3, #1
    4164:	2201      	movs	r2, #1
    4166:	105b      	asrs	r3, r3, #1
    4168:	409a      	lsls	r2, r3
    416a:	9206      	str	r2, [sp, #24]
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    416c:	2204      	movs	r2, #4
    416e:	409a      	lsls	r2, r3
    4170:	9203      	str	r2, [sp, #12]
  partitionOffset = 2*fatLength;
    4172:	2202      	movs	r2, #2
    4174:	fa02 f303 	lsl.w	r3, r2, r3
    4178:	9301      	str	r3, [sp, #4]
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    417a:	9a00      	ldr	r2, [sp, #0]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    417c:	2100      	movs	r1, #0
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    417e:	9b03      	ldr	r3, [sp, #12]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    4180:	4620      	mov	r0, r4
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    4182:	9e02      	ldr	r6, [sp, #8]
  mbr->part->beginCHS[0] = 1;
    4184:	f04f 0a01 	mov.w	sl, #1
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    4188:	1ad3      	subs	r3, r2, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    418a:	f44f 7200 	mov.w	r2, #512	; 0x200
  *reinterpret_cast<uint16_t*>(dst) = src;
    418e:	f64a 2b55 	movw	fp, #43605	; 0xaa55
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    4192:	40f3      	lsrs	r3, r6
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    4194:	fa03 f906 	lsl.w	r9, r3, r6
    4198:	9305      	str	r3, [sp, #20]
    419a:	9e01      	ldr	r6, [sp, #4]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    419c:	f009 fe76 	bl	de8c <memset>
  mbr->part->endCHS[1] = 0XFF;
    41a0:	23ff      	movs	r3, #255	; 0xff
  mbr->part->beginCHS[0] = 1;
    41a2:	f884 a1bf 	strb.w	sl, [r4, #447]	; 0x1bf
  mbr->part->beginCHS[1] = 1;
    41a6:	f884 a1c0 	strb.w	sl, [r4, #448]	; 0x1c0
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    41aa:	44b1      	add	r9, r6
  mbr->part->endCHS[1] = 0XFF;
    41ac:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
  if (!dev->writeSector(0, secBuf)) {
    41b0:	4622      	mov	r2, r4
  mbr->part->endCHS[2] = 0XFF;
    41b2:	f884 31c5 	strb.w	r3, [r4, #453]	; 0x1c5
  mbr->part->type = 7;
    41b6:	2307      	movs	r3, #7
  if (!dev->writeSector(0, secBuf)) {
    41b8:	2100      	movs	r1, #0
    41ba:	4628      	mov	r0, r5
  mbr->part->type = 7;
    41bc:	f884 31c2 	strb.w	r3, [r4, #450]	; 0x1c2
  mbr->part->endCHS[0] = 0XFE;
    41c0:	23fe      	movs	r3, #254	; 0xfe
  *reinterpret_cast<uint32_t*>(dst) = src;
    41c2:	f8c4 61c6 	str.w	r6, [r4, #454]	; 0x1c6
    41c6:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
  if (!dev->writeSector(0, secBuf)) {
    41ca:	682b      	ldr	r3, [r5, #0]
    41cc:	f8c4 91ca 	str.w	r9, [r4, #458]	; 0x1ca
    41d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  *reinterpret_cast<uint16_t*>(dst) = src;
    41d2:	f8a4 b1fe 	strh.w	fp, [r4, #510]	; 0x1fe
    41d6:	4798      	blx	r3
    41d8:	2800      	cmp	r0, #0
    41da:	d063      	beq.n	42a4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    41dc:	f44f 7200 	mov.w	r2, #512	; 0x200
    41e0:	2100      	movs	r1, #0
    41e2:	4620      	mov	r0, r4
    41e4:	f009 fe52 	bl	de8c <memset>
  *reinterpret_cast<uint32_t*>(dst) = src;
    41e8:	9b00      	ldr	r3, [sp, #0]
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
    41ea:	f884 806d 	strb.w	r8, [r4, #109]	; 0x6d
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    41ee:	f04f 0800 	mov.w	r8, #0
    41f2:	6663      	str	r3, [r4, #100]	; 0x64
    pbs->bootCode[i] = 0XF4;
    41f4:	21f4      	movs	r1, #244	; 0xf4
    41f6:	9b05      	ldr	r3, [sp, #20]
    41f8:	f104 0078 	add.w	r0, r4, #120	; 0x78
    41fc:	9a06      	ldr	r2, [sp, #24]
    41fe:	65e3      	str	r3, [r4, #92]	; 0x5c
  pbs->oemName[5] = ' ';
    4200:	2320      	movs	r3, #32
  setLe64(pbs->bpb.partitionOffset, partitionOffset);
    4202:	6426      	str	r6, [r4, #64]	; 0x40
  pbs->oemName[5] = ' ';
    4204:	7223      	strb	r3, [r4, #8]
  pbs->oemName[6] = ' ';
    4206:	7263      	strb	r3, [r4, #9]
  pbs->oemName[7] = ' ';
    4208:	72a3      	strb	r3, [r4, #10]
  pbs->jmpInstruction[0] = 0XEB;
    420a:	23eb      	movs	r3, #235	; 0xeb
    420c:	65a6      	str	r6, [r4, #88]	; 0x58
  uint32_t checksum = 0;
    420e:	4646      	mov	r6, r8
  pbs->jmpInstruction[0] = 0XEB;
    4210:	7023      	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    4212:	2376      	movs	r3, #118	; 0x76
  setLe64(pbs->bpb.volumeLength, volumeLength);
    4214:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
  pbs->jmpInstruction[1] = 0X76;
    4218:	7063      	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    421a:	2390      	movs	r3, #144	; 0x90
  pbs->bpb.numberOfFats = 1;
    421c:	f884 a06e 	strb.w	sl, [r4, #110]	; 0x6e
  pbs->jmpInstruction[2] = 0X90;
    4220:	70a3      	strb	r3, [r4, #2]
  pbs->oemName[0] = 'E';
    4222:	2345      	movs	r3, #69	; 0x45
    4224:	70e3      	strb	r3, [r4, #3]
  pbs->oemName[1] = 'X';
    4226:	2358      	movs	r3, #88	; 0x58
    4228:	7123      	strb	r3, [r4, #4]
  pbs->oemName[2] = 'F';
    422a:	2346      	movs	r3, #70	; 0x46
    422c:	7163      	strb	r3, [r4, #5]
  pbs->oemName[3] = 'A';
    422e:	2341      	movs	r3, #65	; 0x41
    4230:	71a3      	strb	r3, [r4, #6]
  pbs->oemName[4] = 'T';
    4232:	2354      	movs	r3, #84	; 0x54
    4234:	71e3      	strb	r3, [r4, #7]
    4236:	2304      	movs	r3, #4
    4238:	6623      	str	r3, [r4, #96]	; 0x60
  *reinterpret_cast<uint16_t*>(dst) = src;
    423a:	f44f 7380 	mov.w	r3, #256	; 0x100
    423e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
    4242:	2309      	movs	r3, #9
    4244:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  pbs->bpb.driveSelect = 0X80;
    4248:	2380      	movs	r3, #128	; 0x80
  *reinterpret_cast<uint32_t*>(dst) = src;
    424a:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
    424e:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
    pbs->bootCode[i] = 0XF4;
    4252:	f44f 72c3 	mov.w	r2, #390	; 0x186
    4256:	f009 fe19 	bl	de8c <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    425a:	f8a4 b1fe 	strh.w	fp, [r4, #510]	; 0x1fe
    if (i == offsetof(ExFatPbs_t, bpb.volumeFlags[0]) ||
    425e:	f1a8 036a 	sub.w	r3, r8, #106	; 0x6a
    4262:	2b01      	cmp	r3, #1
    4264:	d906      	bls.n	4274 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x164>
    4266:	f1b8 0f70 	cmp.w	r8, #112	; 0x70
    426a:	d003      	beq.n	4274 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x164>
  return (sum << 31) + (sum >> 1) + data;
    426c:	f814 3008 	ldrb.w	r3, [r4, r8]
    4270:	eb03 0676 	add.w	r6, r3, r6, ror #1
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    4274:	f108 0801 	add.w	r8, r8, #1
    4278:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    427c:	d1ef      	bne.n	425e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x14e>
  if (!dev->writeSector(sector, secBuf)  ||
    427e:	682b      	ldr	r3, [r5, #0]
    4280:	4622      	mov	r2, r4
    4282:	f8dd 9004 	ldr.w	r9, [sp, #4]
    4286:	4628      	mov	r0, r5
    4288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    428a:	4649      	mov	r1, r9
    428c:	4798      	blx	r3
    428e:	b148      	cbz	r0, 42a4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    4290:	682b      	ldr	r3, [r5, #0]
    4292:	4649      	mov	r1, r9
    4294:	4622      	mov	r2, r4
    4296:	4628      	mov	r0, r5
    4298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    429a:	310c      	adds	r1, #12
    429c:	f8cd 9004 	str.w	r9, [sp, #4]
    42a0:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    42a2:	bb40      	cbnz	r0, 42f6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1e6>
  writeMsg(pr, "Format failed\r\n");
    42a4:	b12f      	cbz	r7, 42b2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
    42a6:	683b      	ldr	r3, [r7, #0]
    42a8:	220f      	movs	r2, #15
    42aa:	49b8      	ldr	r1, [pc, #736]	; (458c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x47c>)
    42ac:	4638      	mov	r0, r7
    42ae:	685b      	ldr	r3, [r3, #4]
    42b0:	4798      	blx	r3
  return false;
    42b2:	2600      	movs	r6, #0
}
    42b4:	4630      	mov	r0, r6
    42b6:	b009      	add	sp, #36	; 0x24
    42b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    42bc:	2b1a      	cmp	r3, #26
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    42be:	f04f 0808 	mov.w	r8, #8
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    42c2:	f200 81a6 	bhi.w	4612 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x502>
    42c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    42ca:	f8cd 8008 	str.w	r8, [sp, #8]
    42ce:	9301      	str	r3, [sp, #4]
    42d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    42d4:	9303      	str	r3, [sp, #12]
    42d6:	f44f 7380 	mov.w	r3, #256	; 0x100
    42da:	9307      	str	r3, [sp, #28]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    42dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    42e0:	9306      	str	r3, [sp, #24]
    42e2:	e74a      	b.n	417a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
    writeMsg(pr, "Device is too small\r\n");
    42e4:	2f00      	cmp	r7, #0
    42e6:	d0e4      	beq.n	42b2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
    42e8:	683b      	ldr	r3, [r7, #0]
    42ea:	2215      	movs	r2, #21
    42ec:	49a8      	ldr	r1, [pc, #672]	; (4590 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x480>)
    42ee:	4638      	mov	r0, r7
    42f0:	685b      	ldr	r3, [r3, #4]
    42f2:	4798      	blx	r3
  writeMsg(pr, "Format failed\r\n");
    42f4:	e7d7      	b.n	42a6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    42f6:	4642      	mov	r2, r8
    42f8:	2100      	movs	r1, #0
    42fa:	4620      	mov	r0, r4
  sector++;
    42fc:	f109 0a01 	add.w	sl, r9, #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    4300:	f009 fdc4 	bl	de8c <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    4304:	f64a 2355 	movw	r3, #43605	; 0xaa55
    4308:	f109 0209 	add.w	r2, r9, #9
    430c:	f204 19ff 	addw	r9, r4, #511	; 0x1ff
    4310:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
    4314:	2300      	movs	r3, #0
    4316:	4693      	mov	fp, r2
  uint32_t checksum = 0;
    4318:	46a0      	mov	r8, r4
    431a:	e001      	b.n	4320 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x210>
      checksum = exFatChecksum(checksum, secBuf[i]);
    431c:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    4320:	45c1      	cmp	r9, r8
  return (sum << 31) + (sum >> 1) + data;
    4322:	eb03 0676 	add.w	r6, r3, r6, ror #1
    4326:	d1f9      	bne.n	431c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x20c>
    if (!dev->writeSector(sector, secBuf)  ||
    4328:	682b      	ldr	r3, [r5, #0]
    432a:	4622      	mov	r2, r4
    432c:	4651      	mov	r1, sl
    432e:	4628      	mov	r0, r5
    4330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4332:	4798      	blx	r3
    4334:	2800      	cmp	r0, #0
    4336:	d0b5      	beq.n	42a4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    4338:	682b      	ldr	r3, [r5, #0]
    433a:	4622      	mov	r2, r4
    433c:	f10a 010c 	add.w	r1, sl, #12
    4340:	4628      	mov	r0, r5
    4342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4344:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    4346:	2800      	cmp	r0, #0
    4348:	d0ac      	beq.n	42a4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    sector++;
    434a:	f10a 0301 	add.w	r3, sl, #1
  for (int j = 0; j < 8; j++) {
    434e:	459b      	cmp	fp, r3
    4350:	d002      	beq.n	4358 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x248>
      checksum = exFatChecksum(checksum, secBuf[i]);
    4352:	469a      	mov	sl, r3
    4354:	7823      	ldrb	r3, [r4, #0]
    4356:	e7df      	b.n	4318 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x208>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    4358:	f44f 7200 	mov.w	r2, #512	; 0x200
    435c:	2100      	movs	r1, #0
    435e:	4620      	mov	r0, r4
    4360:	469b      	mov	fp, r3
    4362:	f009 fd93 	bl	de8c <memset>
    4366:	2200      	movs	r2, #0
    4368:	f10a 0a03 	add.w	sl, sl, #3
    436c:	4611      	mov	r1, r2
  *reinterpret_cast<uint16_t*>(dst) = src;
    436e:	4623      	mov	r3, r4
    4370:	e001      	b.n	4376 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x266>
      checksum = exFatChecksum(checksum, secBuf[i]);
    4372:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    4376:	4598      	cmp	r8, r3
  return (sum << 31) + (sum >> 1) + data;
    4378:	eb01 0676 	add.w	r6, r1, r6, ror #1
    437c:	d1f9      	bne.n	4372 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x262>
    if (!dev->writeSector(sector, secBuf)  ||
    437e:	682b      	ldr	r3, [r5, #0]
    4380:	4622      	mov	r2, r4
    4382:	4659      	mov	r1, fp
    4384:	4628      	mov	r0, r5
    4386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4388:	4798      	blx	r3
    438a:	2800      	cmp	r0, #0
    438c:	d08a      	beq.n	42a4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    438e:	682b      	ldr	r3, [r5, #0]
    4390:	4622      	mov	r2, r4
    4392:	f10b 010c 	add.w	r1, fp, #12
    4396:	4628      	mov	r0, r5
    4398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    439a:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    439c:	2800      	cmp	r0, #0
    439e:	d081      	beq.n	42a4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    sector++;
    43a0:	f10b 0101 	add.w	r1, fp, #1
  for (int j = 0; j < 2; j++) {
    43a4:	458a      	cmp	sl, r1
    43a6:	d16a      	bne.n	447e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36e>
    43a8:	1f23      	subs	r3, r4, #4
    43aa:	f504 72fe 	add.w	r2, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    43ae:	f843 6f04 	str.w	r6, [r3, #4]!
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    43b2:	429a      	cmp	r2, r3
    43b4:	d1fb      	bne.n	43ae <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x29e>
  if (!dev->writeSector(sector, secBuf)  ||
    43b6:	682b      	ldr	r3, [r5, #0]
    43b8:	4622      	mov	r2, r4
    43ba:	4628      	mov	r0, r5
    43bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    43be:	4798      	blx	r3
    43c0:	2800      	cmp	r0, #0
    43c2:	f43f af6f 	beq.w	42a4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    43c6:	682b      	ldr	r3, [r5, #0]
    43c8:	f10b 010d 	add.w	r1, fp, #13
    43cc:	4622      	mov	r2, r4
    43ce:	4628      	mov	r0, r5
    43d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    43d2:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    43d4:	2800      	cmp	r0, #0
    43d6:	f43f af65 	beq.w	42a4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  writeMsg(pr, "Writing FAT ");
    43da:	b12f      	cbz	r7, 43e8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2d8>
    43dc:	683b      	ldr	r3, [r7, #0]
    43de:	220c      	movs	r2, #12
    43e0:	496c      	ldr	r1, [pc, #432]	; (4594 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x484>)
    43e2:	4638      	mov	r0, r7
    43e4:	685b      	ldr	r3, [r3, #4]
    43e6:	4798      	blx	r3
  sector = partitionOffset + fatOffset;
    43e8:	9a06      	ldr	r2, [sp, #24]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    43ea:	2100      	movs	r1, #0
  sector = partitionOffset + fatOffset;
    43ec:	9b01      	ldr	r3, [sp, #4]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    43ee:	4620      	mov	r0, r4
  for (uint32_t i = 0; i < ns; i++) {
    43f0:	2600      	movs	r6, #0
  sector = partitionOffset + fatOffset;
    43f2:	4413      	add	r3, r2
  memset(secBuf, 0, BYTES_PER_SECTOR);
    43f4:	f44f 7200 	mov.w	r2, #512	; 0x200
  sector = partitionOffset + fatOffset;
    43f8:	4699      	mov	r9, r3
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    43fa:	9b05      	ldr	r3, [sp, #20]
    43fc:	ea4f 0883 	mov.w	r8, r3, lsl #2
  memset(secBuf, 0, BYTES_PER_SECTOR);
    4400:	f009 fd44 	bl	de8c <memset>
  secBuf[0] = 0XF8;
    4404:	4623      	mov	r3, r4
    secBuf[i] = 0XFF;
    4406:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    440a:	f208 2807 	addw	r8, r8, #519	; 0x207
  secBuf[0] = 0XF8;
    440e:	21f8      	movs	r1, #248	; 0xf8
      writeMsg(pr, ".");
    4410:	f1b7 0b00 	subs.w	fp, r7, #0
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    4414:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  secBuf[0] = 0XF8;
    4418:	f803 1b01 	strb.w	r1, [r3], #1
    if (i%(ns/32) == 0) {
    441c:	ea4f 3898 	mov.w	r8, r8, lsr #14
    secBuf[i] = 0XFF;
    4420:	f8c4 2001 	str.w	r2, [r4, #1]
      writeMsg(pr, ".");
    4424:	bf18      	it	ne
    4426:	f04f 0b01 	movne.w	fp, #1
    secBuf[i] = 0XFF;
    442a:	60da      	str	r2, [r3, #12]
    442c:	605a      	str	r2, [r3, #4]
    442e:	609a      	str	r2, [r3, #8]
    4430:	f8c3 200f 	str.w	r2, [r3, #15]
    4434:	e002      	b.n	443c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x32c>
  for (uint32_t i = 0; i < ns; i++) {
    4436:	3601      	adds	r6, #1
    4438:	45b2      	cmp	sl, r6
    443a:	d023      	beq.n	4484 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x374>
    if (i%(ns/32) == 0) {
    443c:	fbb6 f3f8 	udiv	r3, r6, r8
    4440:	fb08 6313 	mls	r3, r8, r3, r6
      writeMsg(pr, ".");
    4444:	b943      	cbnz	r3, 4458 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    4446:	f1bb 0f00 	cmp.w	fp, #0
    444a:	d005      	beq.n	4458 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    444c:	683b      	ldr	r3, [r7, #0]
    444e:	2201      	movs	r2, #1
    4450:	4951      	ldr	r1, [pc, #324]	; (4598 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x488>)
    4452:	4638      	mov	r0, r7
    4454:	685b      	ldr	r3, [r3, #4]
    4456:	4798      	blx	r3
    if (!dev->writeSector(sector + i, secBuf)) {
    4458:	682b      	ldr	r3, [r5, #0]
    445a:	eb09 0106 	add.w	r1, r9, r6
    445e:	4622      	mov	r2, r4
    4460:	4628      	mov	r0, r5
    4462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4464:	4798      	blx	r3
    4466:	2800      	cmp	r0, #0
    4468:	f43f af1c 	beq.w	42a4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    if (i == 0) {
    446c:	2e00      	cmp	r6, #0
    446e:	d1e2      	bne.n	4436 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x326>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    4470:	4631      	mov	r1, r6
    4472:	f44f 7200 	mov.w	r2, #512	; 0x200
    4476:	4620      	mov	r0, r4
    4478:	f009 fd08 	bl	de8c <memset>
    447c:	e7db      	b.n	4436 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x326>
      checksum = exFatChecksum(checksum, secBuf[i]);
    447e:	468b      	mov	fp, r1
    4480:	7821      	ldrb	r1, [r4, #0]
    4482:	e774      	b.n	436e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x25e>
  writeMsg(pr, "\r\n");
    4484:	2f00      	cmp	r7, #0
    4486:	d034      	beq.n	44f2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3e2>
    4488:	683b      	ldr	r3, [r7, #0]
    448a:	2202      	movs	r2, #2
    448c:	4943      	ldr	r1, [pc, #268]	; (459c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x48c>)
    448e:	4638      	mov	r0, r7
    4490:	685b      	ldr	r3, [r3, #4]
    4492:	4798      	blx	r3
  bitmapSize = (clusterCount + 7)/8;
    4494:	9e05      	ldr	r6, [sp, #20]
  if (ns > sectorsPerCluster) {
    4496:	9a07      	ldr	r2, [sp, #28]
  bitmapSize = (clusterCount + 7)/8;
    4498:	3607      	adds	r6, #7
    449a:	08f6      	lsrs	r6, r6, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    449c:	f206 13ff 	addw	r3, r6, #511	; 0x1ff
  if (ns > sectorsPerCluster) {
    44a0:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    44a4:	ea4f 2953 	mov.w	r9, r3, lsr #9
  if (ns > sectorsPerCluster) {
    44a8:	f4ff aefd 	bcc.w	42a6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    44ac:	f44f 7200 	mov.w	r2, #512	; 0x200
    44b0:	2100      	movs	r1, #0
    44b2:	4620      	mov	r0, r4
    44b4:	f009 fcea 	bl	de8c <memset>
  secBuf[0] = 0X7;
    44b8:	2307      	movs	r3, #7
    44ba:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    44bc:	f1b9 0f00 	cmp.w	r9, #0
    44c0:	f000 808a 	beq.w	45d8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c8>
    44c4:	f04f 0800 	mov.w	r8, #0
    44c8:	e008      	b.n	44dc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3cc>
    if (i == 0) {
    44ca:	f1b8 0f00 	cmp.w	r8, #0
    44ce:	d101      	bne.n	44d4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3c4>
      secBuf[0] = 0;
    44d0:	f884 8000 	strb.w	r8, [r4]
  for (uint32_t i = 0; i < ns; i++) {
    44d4:	f108 0801 	add.w	r8, r8, #1
    44d8:	45c1      	cmp	r9, r8
    44da:	d97b      	bls.n	45d4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c4>
    if (!dev->writeSector(sector + i, secBuf)) {
    44dc:	9a03      	ldr	r2, [sp, #12]
    44de:	4628      	mov	r0, r5
    44e0:	682b      	ldr	r3, [r5, #0]
    44e2:	eb02 0108 	add.w	r1, r2, r8
    44e6:	4622      	mov	r2, r4
    44e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    44ea:	4798      	blx	r3
    44ec:	2800      	cmp	r0, #0
    44ee:	d1ec      	bne.n	44ca <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3ba>
    44f0:	e6d8      	b.n	42a4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  bitmapSize = (clusterCount + 7)/8;
    44f2:	9e05      	ldr	r6, [sp, #20]
  if (ns > sectorsPerCluster) {
    44f4:	9a07      	ldr	r2, [sp, #28]
  bitmapSize = (clusterCount + 7)/8;
    44f6:	3607      	adds	r6, #7
    44f8:	08f6      	lsrs	r6, r6, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    44fa:	f206 13ff 	addw	r3, r6, #511	; 0x1ff
  if (ns > sectorsPerCluster) {
    44fe:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    4502:	ea4f 2953 	mov.w	r9, r3, lsr #9
  if (ns > sectorsPerCluster) {
    4506:	f4ff aed4 	bcc.w	42b2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    450a:	f44f 7200 	mov.w	r2, #512	; 0x200
    450e:	4639      	mov	r1, r7
    4510:	4620      	mov	r0, r4
    4512:	f009 fcbb 	bl	de8c <memset>
  secBuf[0] = 0X7;
    4516:	2307      	movs	r3, #7
    4518:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    451a:	f1b9 0f00 	cmp.w	r9, #0
    451e:	d1d1      	bne.n	44c4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b4>
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    4520:	9b03      	ldr	r3, [sp, #12]
    4522:	9a07      	ldr	r2, [sp, #28]
    4524:	9804      	ldr	r0, [sp, #16]
    4526:	1899      	adds	r1, r3, r2
    4528:	f7ff fd9a 	bl	4060 <ExFatFormatter::writeUpcase(unsigned long)>
    452c:	2800      	cmp	r0, #0
    452e:	f43f aec0 	beq.w	42b2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    4532:	9a02      	ldr	r2, [sp, #8]
    4534:	f44f 7300 	mov.w	r3, #512	; 0x200
    4538:	4093      	lsls	r3, r2
    453a:	9a04      	ldr	r2, [sp, #16]
    453c:	6892      	ldr	r2, [r2, #8]
    453e:	429a      	cmp	r2, r3
    4540:	f63f aeb7 	bhi.w	42b2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    4544:	f04f 0802 	mov.w	r8, #2
    4548:	9b02      	ldr	r3, [sp, #8]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    454a:	f44f 7200 	mov.w	r2, #512	; 0x200
    454e:	2100      	movs	r1, #0
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    4550:	fa08 f903 	lsl.w	r9, r8, r3
    4554:	9b03      	ldr	r3, [sp, #12]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    4556:	4620      	mov	r0, r4
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    4558:	4499      	add	r9, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    455a:	f009 fc97 	bl	de8c <memset>
  dbm->type = EXFAT_TYPE_BITMAP;
    455e:	2281      	movs	r2, #129	; 0x81
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    4560:	2303      	movs	r3, #3
  setLe32(dup->checksum, m_upcaseChecksum);
    4562:	9904      	ldr	r1, [sp, #16]
    4564:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
  dbm->type = EXFAT_TYPE_BITMAP;
    4568:	f884 2020 	strb.w	r2, [r4, #32]
  dup->type = EXFAT_TYPE_UPCASE;
    456c:	2282      	movs	r2, #130	; 0x82
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    456e:	7023      	strb	r3, [r4, #0]
  dup->type = EXFAT_TYPE_UPCASE;
    4570:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  setLe64(dbm->size, bitmapSize);
    4574:	e9c4 860d 	strd	r8, r6, [r4, #52]	; 0x34
  setLe32(dup->checksum, m_upcaseChecksum);
    4578:	684a      	ldr	r2, [r1, #4]
  *reinterpret_cast<uint64_t*>(dst) = src;
    457a:	f04f 0801 	mov.w	r8, #1
  *reinterpret_cast<uint32_t*>(dst) = src;
    457e:	6563      	str	r3, [r4, #84]	; 0x54
    4580:	6462      	str	r2, [r4, #68]	; 0x44
  setLe64(dup->size, m_upcaseSize);
    4582:	688b      	ldr	r3, [r1, #8]
    4584:	65a3      	str	r3, [r4, #88]	; 0x58
  setLe64(dbm->size, bitmapSize);
    4586:	2300      	movs	r3, #0
  setLe64(dup->size, m_upcaseSize);
    4588:	65e3      	str	r3, [r4, #92]	; 0x5c
  for (uint32_t i = 0; i < ns; i++) {
    458a:	e00e      	b.n	45aa <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x49a>
    458c:	200006ac 	.word	0x200006ac
    4590:	20000648 	.word	0x20000648
    4594:	20000660 	.word	0x20000660
    4598:	20000670 	.word	0x20000670
    459c:	20000688 	.word	0x20000688
    45a0:	9b07      	ldr	r3, [sp, #28]
    45a2:	4598      	cmp	r8, r3
    45a4:	d23b      	bcs.n	461e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x50e>
    45a6:	f108 0801 	add.w	r8, r8, #1
    if (!dev->writeSector(sector + i, secBuf)) {
    45aa:	682b      	ldr	r3, [r5, #0]
    45ac:	eb09 0108 	add.w	r1, r9, r8
    45b0:	4622      	mov	r2, r4
    45b2:	4628      	mov	r0, r5
    45b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    45b6:	4798      	blx	r3
    45b8:	4606      	mov	r6, r0
    45ba:	2800      	cmp	r0, #0
    45bc:	f43f ae72 	beq.w	42a4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    if (i == 0) {
    45c0:	f1b8 0f01 	cmp.w	r8, #1
    45c4:	d1ec      	bne.n	45a0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x490>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    45c6:	f44f 7200 	mov.w	r2, #512	; 0x200
    45ca:	2100      	movs	r1, #0
    45cc:	4620      	mov	r0, r4
    45ce:	f009 fc5d 	bl	de8c <memset>
  for (uint32_t i = 0; i < ns; i++) {
    45d2:	e7e8      	b.n	45a6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x496>
  writeMsg(pr, "Writing upcase table\r\n");
    45d4:	2f00      	cmp	r7, #0
    45d6:	d0a3      	beq.n	4520 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x410>
    45d8:	683b      	ldr	r3, [r7, #0]
    45da:	2216      	movs	r2, #22
    45dc:	4914      	ldr	r1, [pc, #80]	; (4630 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x520>)
    45de:	4638      	mov	r0, r7
    45e0:	685b      	ldr	r3, [r3, #4]
    45e2:	4798      	blx	r3
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    45e4:	9b03      	ldr	r3, [sp, #12]
    45e6:	9a07      	ldr	r2, [sp, #28]
    45e8:	9804      	ldr	r0, [sp, #16]
    45ea:	1899      	adds	r1, r3, r2
    45ec:	f7ff fd38 	bl	4060 <ExFatFormatter::writeUpcase(unsigned long)>
    45f0:	2800      	cmp	r0, #0
    45f2:	f43f ae58 	beq.w	42a6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    45f6:	9a02      	ldr	r2, [sp, #8]
    45f8:	f44f 7300 	mov.w	r3, #512	; 0x200
    45fc:	4093      	lsls	r3, r2
    45fe:	9a04      	ldr	r2, [sp, #16]
    4600:	6892      	ldr	r2, [r2, #8]
    4602:	429a      	cmp	r2, r3
    4604:	f63f ae4f 	bhi.w	42a6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  writeMsg(pr, "Writing root\r\n");
    4608:	490a      	ldr	r1, [pc, #40]	; (4634 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x524>)
    460a:	4638      	mov	r0, r7
    460c:	f7ff fcba 	bl	3f84 <Print::write(char const*) [clone .isra.0]>
    4610:	e798      	b.n	4544 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x434>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    4612:	f44f 7280 	mov.w	r2, #256	; 0x100
    4616:	f8cd 8008 	str.w	r8, [sp, #8]
    461a:	9207      	str	r2, [sp, #28]
    461c:	e5a1      	b.n	4162 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x52>
  writeMsg(pr, "Format done\r\n");
    461e:	2f00      	cmp	r7, #0
    4620:	f43f ae48 	beq.w	42b4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a4>
    4624:	4904      	ldr	r1, [pc, #16]	; (4638 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x528>)
    4626:	4638      	mov	r0, r7
    4628:	f7ff fcac 	bl	3f84 <Print::write(char const*) [clone .isra.0]>
    462c:	e642      	b.n	42b4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a4>
    462e:	bf00      	nop
    4630:	20000674 	.word	0x20000674
    4634:	2000068c 	.word	0x2000068c
    4638:	2000069c 	.word	0x2000069c

0000463c <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    463c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4640:	460c      	mov	r4, r1
    4642:	4615      	mov	r5, r2
    4644:	f101 081e 	add.w	r8, r1, #30
    return !ls && next == end;
    4648:	89ab      	ldrh	r3, [r5, #12]
    uint16_t u = getLe16(dirName->unicode + 2*i);
    if (fname->atEnd()) {
      return u == 0;
    }
#if USE_UTF8_LONG_NAMES
    uint16_t cp = fname->get16();
    464a:	4628      	mov	r0, r5
  return *reinterpret_cast<const uint16_t*>(src);
    464c:	f834 7f02 	ldrh.w	r7, [r4, #2]!
    4650:	b91b      	cbnz	r3, 465a <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x1e>
    4652:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
    4656:	429a      	cmp	r2, r3
    4658:	d00e      	beq.n	4678 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x3c>
    465a:	f005 fa8b 	bl	9b74 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    465e:	f005 fb9d 	bl	9d9c <toUpcase(unsigned short)>
    4662:	4606      	mov	r6, r0
    4664:	4638      	mov	r0, r7
    4666:	f005 fb99 	bl	9d9c <toUpcase(unsigned short)>
    466a:	4286      	cmp	r6, r0
    466c:	d109      	bne.n	4682 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x46>
  for (uint8_t i = 0; i < 15; i++) {
    466e:	4544      	cmp	r4, r8
    4670:	d1ea      	bne.n	4648 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
    4672:	2001      	movs	r0, #1
}
    4674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return u == 0;
    4678:	fab7 f087 	clz	r0, r7
    467c:	0940      	lsrs	r0, r0, #5
}
    467e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       return false;
    4682:	2000      	movs	r0, #0
}
    4684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004688 <ExFatFile::getName8(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    4688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    468c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName8(char* name, size_t count) {
    4690:	b083      	sub	sp, #12
    4692:	4688      	mov	r8, r1
  if (!isOpen()) {
    4694:	2b00      	cmp	r3, #0
    4696:	d04f      	beq.n	4738 <ExFatFile::getName8(char*, unsigned int)+0xb0>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    4698:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    469c:	4607      	mov	r7, r0
    469e:	2b01      	cmp	r3, #1
    46a0:	d953      	bls.n	474a <ExFatFile::getName8(char*, unsigned int)+0xc2>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    46a2:	3a01      	subs	r2, #1
  char* str = name;
    46a4:	460b      	mov	r3, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    46a6:	f04f 0a02 	mov.w	sl, #2
  uint16_t hs = 0;
    46aa:	2400      	movs	r4, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    46ac:	188e      	adds	r6, r1, r2
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    46ae:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 4750 <ExFatFile::getName8(char*, unsigned int)+0xc8>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    46b2:	2200      	movs	r2, #0
    46b4:	4651      	mov	r1, sl
    46b6:	4638      	mov	r0, r7
    46b8:	9301      	str	r3, [sp, #4]
    46ba:	f7fe faa3 	bl	2c04 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    46be:	2800      	cmp	r0, #0
    46c0:	d03a      	beq.n	4738 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    46c2:	7802      	ldrb	r2, [r0, #0]
    46c4:	2ac1      	cmp	r2, #193	; 0xc1
    46c6:	d137      	bne.n	4738 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    46c8:	4605      	mov	r5, r0
    46ca:	f100 091e 	add.w	r9, r0, #30
    46ce:	9b01      	ldr	r3, [sp, #4]
    46d0:	f835 0f02 	ldrh.w	r0, [r5, #2]!
      if (hs) {
    46d4:	b324      	cbz	r4, 4720 <ExFatFile::getName8(char*, unsigned int)+0x98>
    return 0XDC00 <= c && c <= 0XDFFF;
    46d6:	f500 5210 	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    46da:	b292      	uxth	r2, r2
    46dc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    46e0:	d22a      	bcs.n	4738 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    46e2:	ea0b 2484 	and.w	r4, fp, r4, lsl #10
    46e6:	f3c0 0009 	ubfx	r0, r0, #0, #10
    46ea:	4320      	orrs	r0, r4
    46ec:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    46f0:	4619      	mov	r1, r3
    46f2:	4632      	mov	r2, r6
    46f4:	f005 fab4 	bl	9c60 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    46f8:	4603      	mov	r3, r0
    46fa:	b1e8      	cbz	r0, 4738 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    46fc:	2400      	movs	r4, #0
    for (uint8_t in = 0; in < 15; in++) {
    46fe:	454d      	cmp	r5, r9
    4700:	d1e6      	bne.n	46d0 <ExFatFile::getName8(char*, unsigned int)+0x48>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    4702:	f10a 0a01 	add.w	sl, sl, #1
    4706:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    470a:	fa5f fa8a 	uxtb.w	sl, sl
    470e:	4552      	cmp	r2, sl
    4710:	d2cf      	bcs.n	46b2 <ExFatFile::getName8(char*, unsigned int)+0x2a>
      str = ptr;
    }
  }
 done:
  *str = '\0';
  return str - name;
    4712:	eba3 0008 	sub.w	r0, r3, r8
    4716:	4698      	mov	r8, r3
  *str = '\0';
    4718:	2300      	movs	r3, #0
    471a:	f888 3000 	strb.w	r3, [r8]
  return str - name;
    471e:	e00f      	b.n	4740 <ExFatFile::getName8(char*, unsigned int)+0xb8>
    return 0XD800 <= c && c <= 0XDFFF;
    4720:	f500 5220 	add.w	r2, r0, #10240	; 0x2800
    4724:	b292      	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    4726:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    472a:	d302      	bcc.n	4732 <ExFatFile::getName8(char*, unsigned int)+0xaa>
        if (c == 0) {
    472c:	2800      	cmp	r0, #0
    472e:	d1df      	bne.n	46f0 <ExFatFile::getName8(char*, unsigned int)+0x68>
    4730:	e7ef      	b.n	4712 <ExFatFile::getName8(char*, unsigned int)+0x8a>
      } else if (FsUtf::isHighSurrogate(c)) {
    4732:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    4736:	d306      	bcc.n	4746 <ExFatFile::getName8(char*, unsigned int)+0xbe>

 fail:
  *name = 0;
    4738:	2300      	movs	r3, #0
  return 0;
    473a:	4618      	mov	r0, r3
  *name = 0;
    473c:	f888 3000 	strb.w	r3, [r8]
}
    4740:	b003      	add	sp, #12
    4742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4746:	4604      	mov	r4, r0
    4748:	e7d9      	b.n	46fe <ExFatFile::getName8(char*, unsigned int)+0x76>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    474a:	2000      	movs	r0, #0
    474c:	e7e4      	b.n	4718 <ExFatFile::getName8(char*, unsigned int)+0x90>
    474e:	bf00      	nop
    4750:	000ffc00 	.word	0x000ffc00

00004754 <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    4754:	b570      	push	{r4, r5, r6, lr}
    4756:	460c      	mov	r4, r1
    ls = 0;  // lowSurrogate
    4758:	2300      	movs	r3, #0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    475a:	f64f 75ff 	movw	r5, #65535	; 0xffff
    next = begin;
    475e:	6822      	ldr	r2, [r4, #0]
  while (!fname->atEnd()) {
    4760:	4619      	mov	r1, r3
  uint16_t hash = 0;
    4762:	461e      	mov	r6, r3
    ls = 0;  // lowSurrogate
    4764:	81a3      	strh	r3, [r4, #12]
  fname->nameLength = 0;
    4766:	6123      	str	r3, [r4, #16]
    next = begin;
    4768:	6062      	str	r2, [r4, #4]
  while (!fname->atEnd()) {
    476a:	e017      	b.n	479c <ExFatFile::hashName(ExName_t*)+0x48>
    uint16_t u = fname->get16();
    476c:	f005 fa02 	bl	9b74 <FsName::get16()>
    if (u == 0XFFFF) {
    4770:	42a8      	cmp	r0, r5
    4772:	d022      	beq.n	47ba <ExFatFile::hashName(ExName_t*)+0x66>
  uint16_t c = toUpcase(u);
    4774:	f005 fb12 	bl	9d9c <toUpcase(unsigned short)>
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    4778:	6923      	ldr	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    477a:	03f2      	lsls	r2, r6, #15
    return !ls && next == end;
    477c:	89a1      	ldrh	r1, [r4, #12]
    fname->nameLength++;
    477e:	3301      	adds	r3, #1
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    4780:	ea42 0256 	orr.w	r2, r2, r6, lsr #1
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    4784:	0a06      	lsrs	r6, r0, #8
    fname->nameLength++;
    4786:	6123      	str	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    4788:	fa52 f080 	uxtab	r0, r2, r0
    478c:	b283      	uxth	r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    478e:	f3c0 004e 	ubfx	r0, r0, #1, #15
    4792:	ea40 30c3 	orr.w	r0, r0, r3, lsl #15
    4796:	fa16 f080 	uxtah	r0, r6, r0
    479a:	b286      	uxth	r6, r0
    uint16_t u = fname->get16();
    479c:	4620      	mov	r0, r4
    479e:	2900      	cmp	r1, #0
    47a0:	d1e4      	bne.n	476c <ExFatFile::hashName(ExName_t*)+0x18>
    47a2:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    47a6:	429a      	cmp	r2, r3
    47a8:	d1e0      	bne.n	476c <ExFatFile::hashName(ExName_t*)+0x18>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    47aa:	6920      	ldr	r0, [r4, #16]
  fname->nameHash = hash;
    47ac:	82a6      	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    47ae:	3801      	subs	r0, #1
    47b0:	28fe      	cmp	r0, #254	; 0xfe
    47b2:	bf8c      	ite	hi
    47b4:	2000      	movhi	r0, #0
    47b6:	2001      	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    47b8:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    47ba:	2000      	movs	r0, #0
}
    47bc:	bd70      	pop	{r4, r5, r6, pc}
    47be:	bf00      	nop

000047c0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    47c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    47c4:	4607      	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    47c6:	468a      	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    47c8:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    47ca:	2900      	cmp	r1, #0
    47cc:	d042      	beq.n	4854 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    47ce:	f1a1 0802 	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    47d2:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    47d6:	4543      	cmp	r3, r8
    47d8:	d942      	bls.n	4860 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    47da:	f008 0307 	and.w	r3, r8, #7
    47de:	2501      	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    47e0:	f3c8 0bc8 	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    47e4:	409d      	lsls	r5, r3
    47e6:	b2ed      	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    47e8:	4646      	mov	r6, r8
  uint32_t endAlloc = start;
    47ea:	4644      	mov	r4, r8
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    47ec:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    47f0:	2200      	movs	r2, #0
    47f2:	4638      	mov	r0, r7
    47f4:	eb01 3114 	add.w	r1, r1, r4, lsr #12
    47f8:	f005 f97e 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    47fc:	b1e8      	cbz	r0, 483a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    47fe:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    4802:	4483      	add	fp, r0
    4804:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    4808:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
    480c:	e00a      	b.n	4824 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    480e:	454a      	cmp	r2, r9
    4810:	d02b      	beq.n	486a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4812:	45a0      	cmp	r8, r4
    4814:	d010      	beq.n	4838 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    4816:	f8d7 5430 	ldr.w	r5, [r7, #1072]	; 0x430
    481a:	42a5      	cmp	r5, r4
    481c:	d914      	bls.n	4848 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    481e:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    4822:	d00c      	beq.n	483e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    4824:	3401      	adds	r4, #1
        if (!(mask & cache[i])) {
    4826:	4229      	tst	r1, r5
      for (; mask; mask <<= 1) {
    4828:	ea4f 0345 	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    482c:	eba4 0206 	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    4830:	d0ed      	beq.n	480e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    4832:	45a0      	cmp	r8, r4
        endAlloc++;
    4834:	4626      	mov	r6, r4
        if (endAlloc == start) {
    4836:	d1ee      	bne.n	4816 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    4838:	2001      	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    483a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    483e:	4558      	cmp	r0, fp
      mask = 1;
    4840:	f04f 0501 	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    4844:	d1e0      	bne.n	4808 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    4846:	e001      	b.n	484c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    4848:	2600      	movs	r6, #0
    484a:	4634      	mov	r4, r6
  uint32_t endAlloc = start;
    484c:	2501      	movs	r5, #1
    i = 0;
    484e:	f04f 0b00 	mov.w	fp, #0
    4852:	e7cb      	b.n	47ec <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4854:	f8d0 8420 	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    4858:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    485c:	4543      	cmp	r3, r8
    485e:	d8bc      	bhi.n	47da <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    4860:	f04f 0800 	mov.w	r8, #0
    4864:	2501      	movs	r5, #1
    start = 0;
    4866:	46c3      	mov	fp, r8
    4868:	e7be      	b.n	47e8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    486a:	f1ba 0f00 	cmp.w	sl, #0
    486e:	d104      	bne.n	487a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    4870:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    4874:	bf08      	it	eq
    4876:	f8c7 6420 	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    487a:	1cb0      	adds	r0, r6, #2
}
    487c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004880 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4884:	4680      	mov	r8, r0
  uint32_t sector;
  uint32_t start = cluster - 2;
    4886:	1e88      	subs	r0, r1, #2
                                  uint32_t count, bool value) {
    4888:	4615      	mov	r5, r2
    488a:	461e      	mov	r6, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    488c:	1883      	adds	r3, r0, r2
    488e:	f8d8 2430 	ldr.w	r2, [r8, #1072]	; 0x430
    4892:	4293      	cmp	r3, r2
    4894:	d837      	bhi.n	4906 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    4896:	bbce      	cbnz	r6, 490c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    4898:	f8d8 3420 	ldr.w	r3, [r8, #1056]	; 0x420
    489c:	4283      	cmp	r3, r0
      m_bitmapStart = start;
    489e:	bf88      	it	hi
    48a0:	f8c8 0420 	strhi.w	r0, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    48a4:	f000 0307 	and.w	r3, r0, #7
    48a8:	2401      	movs	r4, #1
  sector = m_clusterHeapStartSector +
    48aa:	f8d8 742c 	ldr.w	r7, [r8, #1068]	; 0x42c
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    48ae:	f3c0 09c8 	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    48b2:	409c      	lsls	r4, r3
  sector = m_clusterHeapStartSector +
    48b4:	eb07 3110 	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    48b8:	b2e4      	uxtb	r4, r4
    48ba:	2201      	movs	r2, #1
    48bc:	4640      	mov	r0, r8
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    48be:	188f      	adds	r7, r1, r2
    48c0:	f005 f91a 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    48c4:	b1f8      	cbz	r0, 4906 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    48c6:	f109 3eff 	add.w	lr, r9, #4294967295	; 0xffffffff
    48ca:	4486      	add	lr, r0
    48cc:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    48d0:	f81e cf01 	ldrb.w	ip, [lr, #1]!
    48d4:	ea1c 0f04 	tst.w	ip, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    48d8:	ea8c 0c04 	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    48dc:	ea4f 0444 	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    48e0:	bf14      	ite	ne
    48e2:	2201      	movne	r2, #1
    48e4:	2200      	moveq	r2, #0
    48e6:	42b2      	cmp	r2, r6
    48e8:	d00d      	beq.n	4906 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    48ea:	3d01      	subs	r5, #1
        cache[i] ^= mask;
    48ec:	f88e c000 	strb.w	ip, [lr]
        if (--count == 0) {
    48f0:	d018      	beq.n	4924 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    48f2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    48f6:	d1ed      	bne.n	48d4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    48f8:	4570      	cmp	r0, lr
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    48fa:	46a1      	mov	r9, r4
    48fc:	f04f 0401 	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    4900:	d1e6      	bne.n	48d0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    4902:	4639      	mov	r1, r7
    4904:	e7d9      	b.n	48ba <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  }

 fail:
  return false;
    4906:	2000      	movs	r0, #0
}
    4908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    490c:	f8d8 1420 	ldr.w	r1, [r8, #1056]	; 0x420
    4910:	428b      	cmp	r3, r1
    4912:	d9c7      	bls.n	48a4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    4914:	4281      	cmp	r1, r0
    4916:	d3c5      	bcc.n	48a4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    4918:	4293      	cmp	r3, r2
    491a:	bf28      	it	cs
    491c:	2300      	movcs	r3, #0
    491e:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
    4922:	e7bf      	b.n	48a4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    4924:	2001      	movs	r0, #1
}
    4926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    492a:	bf00      	nop

0000492c <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    492e:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    4932:	3301      	adds	r3, #1
    4934:	428b      	cmp	r3, r1
    4936:	d201      	bcs.n	493c <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    4938:	2000      	movs	r0, #0
}
    493a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    493c:	4607      	mov	r7, r0
    493e:	460c      	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    4940:	f500 7604 	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    4944:	2500      	movs	r5, #0
    4946:	e005      	b.n	4954 <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    4948:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    494c:	3501      	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    494e:	3301      	adds	r3, #1
    4950:	42a3      	cmp	r3, r4
    4952:	d3f1      	bcc.n	4938 <ExFatPartition::chainSize(unsigned long)+0xc>
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4954:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
    4958:	2200      	movs	r2, #0
    495a:	4630      	mov	r0, r6
    495c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    4960:	f005 f8ca 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    4964:	00a4      	lsls	r4, r4, #2
  if (!cache) {
    4966:	2800      	cmp	r0, #0
    4968:	d0e6      	beq.n	4938 <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    496a:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    496e:	5904      	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    4970:	1c63      	adds	r3, r4, #1
    4972:	d1e9      	bne.n	4948 <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    4974:	1c68      	adds	r0, r5, #1
}
    4976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004978 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    4978:	b538      	push	{r3, r4, r5, lr}
    497a:	460c      	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    497c:	680b      	ldr	r3, [r1, #0]
    497e:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    4982:	f500 7004 	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    4986:	f8d0 1228 	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    498a:	3b02      	subs	r3, #2
    498c:	6865      	ldr	r5, [r4, #4]
    498e:	fa03 f30c 	lsl.w	r3, r3, ip
    4992:	4029      	ands	r1, r5
    4994:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    4998:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    499c:	4419      	add	r1, r3
    499e:	f005 f8ab 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    49a2:	b118      	cbz	r0, 49ac <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    49a4:	6863      	ldr	r3, [r4, #4]
    49a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    49aa:	4418      	add	r0, r3
}
    49ac:	bd38      	pop	{r3, r4, r5, pc}
    49ae:	bf00      	nop

000049b0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    49b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    49b4:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    49b6:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    49ba:	6849      	ldr	r1, [r1, #4]
    49bc:	400b      	ands	r3, r1
  pos->position += offset;
    49be:	4411      	add	r1, r2
    49c0:	6061      	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    49c2:	4413      	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    49c4:	f890 1445 	ldrb.w	r1, [r0, #1093]	; 0x445
    49c8:	f101 0209 	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    49cc:	b2d2      	uxtb	r2, r2
    49ce:	40d3      	lsrs	r3, r2
  while (tmp--) {
    49d0:	b32b      	cbz	r3, 4a1e <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    49d2:	4680      	mov	r8, r0
    49d4:	1e5d      	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    49d6:	f500 7904 	add.w	r9, r0, #528	; 0x210
    49da:	e005      	b.n	49e8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    49dc:	6823      	ldr	r3, [r4, #0]
  while (tmp--) {
    49de:	3d01      	subs	r5, #1
      pos->cluster++;
    49e0:	f103 0301 	add.w	r3, r3, #1
    49e4:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    49e6:	d31a      	bcc.n	4a1e <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    49e8:	7a26      	ldrb	r6, [r4, #8]
    49ea:	2e00      	cmp	r6, #0
    49ec:	d1f6      	bne.n	49dc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    49ee:	f8d8 3430 	ldr.w	r3, [r8, #1072]	; 0x430
    49f2:	4632      	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    49f4:	6827      	ldr	r7, [r4, #0]
    49f6:	4648      	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    49f8:	3301      	adds	r3, #1
    49fa:	429f      	cmp	r7, r3
    49fc:	d812      	bhi.n	4a24 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    49fe:	f8d8 1424 	ldr.w	r1, [r8, #1060]	; 0x424
    4a02:	eb01 11d7 	add.w	r1, r1, r7, lsr #7
    4a06:	f005 f877 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    4a0a:	00bf      	lsls	r7, r7, #2
  if (!cache) {
    4a0c:	b150      	cbz	r0, 4a24 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    4a0e:	f3c7 0708 	ubfx	r7, r7, #0, #9
    4a12:	59c3      	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    4a14:	1c5a      	adds	r2, r3, #1
    4a16:	d009      	beq.n	4a2c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    4a18:	3d01      	subs	r5, #1
    return 0;
  }
  *value = next;
    4a1a:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    4a1c:	d2e4      	bcs.n	49e8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    4a1e:	2001      	movs	r0, #1
}
    4a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    4a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    4a2c:	4630      	mov	r0, r6
}
    4a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4a32:	bf00      	nop

00004a34 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    4a34:	b538      	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    4a36:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    4a3a:	3301      	adds	r3, #1
    4a3c:	428b      	cmp	r3, r1
    4a3e:	d202      	bcs.n	4a46 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    4a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  return 1;
}
    4a44:	bd38      	pop	{r3, r4, r5, pc}
    4a46:	460c      	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4a48:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    4a4c:	4615      	mov	r5, r2
    4a4e:	f500 7004 	add.w	r0, r0, #528	; 0x210
    4a52:	2200      	movs	r2, #0
    4a54:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    4a58:	f005 f84e 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    4a5c:	2800      	cmp	r0, #0
    4a5e:	d0ef      	beq.n	4a40 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    4a60:	00a4      	lsls	r4, r4, #2
    4a62:	f3c4 0408 	ubfx	r4, r4, #0, #9
    4a66:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    4a68:	1c5a      	adds	r2, r3, #1
    4a6a:	d002      	beq.n	4a72 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    4a6c:	2001      	movs	r0, #1
  *value = next;
    4a6e:	602b      	str	r3, [r5, #0]
}
    4a70:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
    4a72:	2000      	movs	r0, #0
}
    4a74:	bd38      	pop	{r3, r4, r5, pc}
    4a76:	bf00      	nop

00004a78 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4a78:	2901      	cmp	r1, #1
    4a7a:	d91b      	bls.n	4ab4 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    4a7c:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4a7e:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    4a82:	460c      	mov	r4, r1
    4a84:	3301      	adds	r3, #1
    4a86:	428b      	cmp	r3, r1
    4a88:	d201      	bcs.n	4a8e <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    4a8a:	2000      	movs	r0, #0
}
    4a8c:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4a8e:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    4a92:	4615      	mov	r5, r2
    4a94:	f500 7004 	add.w	r0, r0, #528	; 0x210
    4a98:	2201      	movs	r2, #1
    4a9a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    4a9e:	f005 f82b 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    4aa2:	4603      	mov	r3, r0
    4aa4:	2800      	cmp	r0, #0
    4aa6:	d0f0      	beq.n	4a8a <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    4aa8:	00a4      	lsls	r4, r4, #2
  return true;
    4aaa:	2001      	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    4aac:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    4ab0:	511d      	str	r5, [r3, r4]
}
    4ab2:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    4ab4:	2000      	movs	r0, #0
}
    4ab6:	4770      	bx	lr

00004ab8 <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    4ab8:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    4abc:	3301      	adds	r3, #1
    4abe:	4299      	cmp	r1, r3
    4ac0:	d901      	bls.n	4ac6 <ExFatPartition::freeChain(unsigned long)+0xe>

  return true;

 fail:
  return false;
}
    4ac2:	2000      	movs	r0, #0
    4ac4:	4770      	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    4ac6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4aca:	4605      	mov	r5, r0
    4acc:	b083      	sub	sp, #12
    4ace:	460c      	mov	r4, r1
    4ad0:	f500 7904 	add.w	r9, r0, #528	; 0x210
    4ad4:	460f      	mov	r7, r1
    4ad6:	f04f 0800 	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4ada:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    4ade:	2200      	movs	r2, #0
    4ae0:	4648      	mov	r0, r9
    4ae2:	ea4f 1bd4 	mov.w	fp, r4, lsr #7
    4ae6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    4aea:	f005 f805 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    4aee:	b190      	cbz	r0, 4b16 <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    4af0:	00a3      	lsls	r3, r4, #2
    4af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    4af6:	58c2      	ldr	r2, [r0, r3]
    4af8:	9301      	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    4afa:	1c53      	adds	r3, r2, #1
    4afc:	bf16      	itet	ne
    4afe:	4616      	movne	r6, r2
    4b00:	f04f 0a00 	moveq.w	sl, #0
    4b04:	f04f 0a01 	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4b08:	2c01      	cmp	r4, #1
    4b0a:	d904      	bls.n	4b16 <ExFatPartition::freeChain(unsigned long)+0x5e>
    4b0c:	f8d5 2430 	ldr.w	r2, [r5, #1072]	; 0x430
    4b10:	3201      	adds	r2, #1
    4b12:	4294      	cmp	r4, r2
    4b14:	d903      	bls.n	4b1e <ExFatPartition::freeChain(unsigned long)+0x66>
}
    4b16:	2000      	movs	r0, #0
    4b18:	b003      	add	sp, #12
    4b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4b1e:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    4b22:	2201      	movs	r2, #1
    4b24:	4648      	mov	r0, r9
    4b26:	4459      	add	r1, fp
    4b28:	f004 ffe6 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    4b2c:	2800      	cmp	r0, #0
    4b2e:	d0f2      	beq.n	4b16 <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    4b30:	9b01      	ldr	r3, [sp, #4]
    4b32:	f840 8003 	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    4b36:	f1ba 0f00 	cmp.w	sl, #0
    4b3a:	d012      	beq.n	4b62 <ExFatPartition::freeChain(unsigned long)+0xaa>
    4b3c:	3401      	adds	r4, #1
    4b3e:	42b4      	cmp	r4, r6
    4b40:	d008      	beq.n	4b54 <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4b42:	2300      	movs	r3, #0
    4b44:	1be2      	subs	r2, r4, r7
    4b46:	4639      	mov	r1, r7
    4b48:	4628      	mov	r0, r5
    4b4a:	f7ff fe99 	bl	4880 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4b4e:	2800      	cmp	r0, #0
    4b50:	d0e1      	beq.n	4b16 <ExFatPartition::freeChain(unsigned long)+0x5e>
    4b52:	4637      	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    4b54:	f8d5 3430 	ldr.w	r3, [r5, #1072]	; 0x430
    4b58:	3301      	adds	r3, #1
    4b5a:	42b3      	cmp	r3, r6
    4b5c:	d3db      	bcc.n	4b16 <ExFatPartition::freeChain(unsigned long)+0x5e>
    4b5e:	4634      	mov	r4, r6
    4b60:	e7bb      	b.n	4ada <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4b62:	1c62      	adds	r2, r4, #1
    4b64:	4653      	mov	r3, sl
    4b66:	4639      	mov	r1, r7
    4b68:	4628      	mov	r0, r5
    4b6a:	1bd2      	subs	r2, r2, r7
}
    4b6c:	b003      	add	sp, #12
    4b6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4b72:	f7ff be85 	b.w	4880 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4b76:	bf00      	nop

00004b78 <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    4b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    4b7c:	2500      	movs	r5, #0
uint32_t ExFatPartition::freeClusterCount() {
    4b7e:	4606      	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    4b80:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
    4b84:	f500 7804 	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    4b88:	462c      	mov	r4, r5
    4b8a:	2200      	movs	r2, #0
    4b8c:	4640      	mov	r0, r8
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    4b8e:	1c4f      	adds	r7, r1, #1
    4b90:	f004 ffb2 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    4b94:	b1a8      	cbz	r0, 4bc2 <ExFatPartition::freeClusterCount()+0x4a>
    4b96:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
    4b9a:	f504 5980 	add.w	r9, r4, #4096	; 0x1000
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    4b9e:	f8d6 0430 	ldr.w	r0, [r6, #1072]	; 0x430
    4ba2:	e005      	b.n	4bb0 <ExFatPartition::freeClusterCount()+0x38>
      } else if (cache[i]) {
    4ba4:	b979      	cbnz	r1, 4bc6 <ExFatPartition::freeClusterCount()+0x4e>
      nc += 8;
    4ba6:	3408      	adds	r4, #8
      if (nc >= m_clusterCount) {
    4ba8:	4284      	cmp	r4, r0
    4baa:	d209      	bcs.n	4bc0 <ExFatPartition::freeClusterCount()+0x48>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    4bac:	454c      	cmp	r4, r9
    4bae:	d016      	beq.n	4bde <ExFatPartition::freeClusterCount()+0x66>
      if (cache[i] == 0XFF) {
    4bb0:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    4bb4:	29ff      	cmp	r1, #255	; 0xff
    4bb6:	d1f5      	bne.n	4ba4 <ExFatPartition::freeClusterCount()+0x2c>
      nc += 8;
    4bb8:	3408      	adds	r4, #8
        usedCount+= 8;
    4bba:	3508      	adds	r5, #8
      if (nc >= m_clusterCount) {
    4bbc:	4284      	cmp	r4, r0
    4bbe:	d3f5      	bcc.n	4bac <ExFatPartition::freeClusterCount()+0x34>
        return m_clusterCount - usedCount;
    4bc0:	1b40      	subs	r0, r0, r5
      }
    }
  }
}
    4bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4bc6:	2208      	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    4bc8:	2301      	movs	r3, #1
          if ((mask & cache[i])) {
    4bca:	4219      	tst	r1, r3
        for (uint8_t mask = 1; mask ; mask <<=1) {
    4bcc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
            usedCount++;
    4bd0:	bf18      	it	ne
    4bd2:	3501      	addne	r5, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    4bd4:	3a01      	subs	r2, #1
    4bd6:	fa5f f38c 	uxtb.w	r3, ip
    4bda:	d1f6      	bne.n	4bca <ExFatPartition::freeClusterCount()+0x52>
    4bdc:	e7e3      	b.n	4ba6 <ExFatPartition::freeClusterCount()+0x2e>
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    4bde:	4639      	mov	r1, r7
    4be0:	e7d3      	b.n	4b8a <ExFatPartition::freeClusterCount()+0x12>
    4be2:	bf00      	nop

00004be4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    4be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    4be6:	2300      	movs	r3, #0
    m_sector = 0XFFFFFFFF;
    4be8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    4bec:	f500 7704 	add.w	r7, r0, #528	; 0x210
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    4bf0:	4615      	mov	r5, r2
  m_blockDev = dev;
    4bf2:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    4bf6:	4604      	mov	r4, r0
    m_blockDev = blockDev;
    4bf8:	6041      	str	r1, [r0, #4]
    4bfa:	461a      	mov	r2, r3
    4bfc:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    4c00:	4619      	mov	r1, r3
  m_fatType = 0;
    4c02:	f880 3444 	strb.w	r3, [r0, #1092]	; 0x444
    m_status = 0;
    4c06:	7003      	strb	r3, [r0, #0]
    m_sector = 0XFFFFFFFF;
    4c08:	60c6      	str	r6, [r0, #12]
    m_status = 0;
    4c0a:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    4c0e:	f8c0 621c 	str.w	r6, [r0, #540]	; 0x21c
    4c12:	4638      	mov	r0, r7
    4c14:	f004 ff70 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    4c18:	2d04      	cmp	r5, #4
    4c1a:	d80d      	bhi.n	4c38 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    4c1c:	4606      	mov	r6, r0
    4c1e:	b158      	cbz	r0, 4c38 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    4c20:	b1bd      	cbz	r5, 4c52 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x6e>
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    4c22:	1e6b      	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    4c24:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    4c28:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
    4c2c:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
    4c30:	d102      	bne.n	4c38 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    4c32:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
    4c36:	b90b      	cbnz	r3, 4c3c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x58>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    4c38:	2000      	movs	r0, #0
}
    4c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return *reinterpret_cast<const uint32_t*>(src);
    4c3c:	eb00 1605 	add.w	r6, r0, r5, lsl #4
    4c40:	4638      	mov	r0, r7
    4c42:	f8d6 51b6 	ldr.w	r5, [r6, #438]	; 0x1b6
    4c46:	4629      	mov	r1, r5
    4c48:	f004 ff56 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    4c4c:	4606      	mov	r6, r0
    4c4e:	2800      	cmp	r0, #0
    4c50:	d0f2      	beq.n	4c38 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    4c52:	2205      	movs	r2, #5
    4c54:	491a      	ldr	r1, [pc, #104]	; (4cc0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    4c56:	1cf0      	adds	r0, r6, #3
    4c58:	f008 fcda 	bl	d610 <strncmp>
    4c5c:	2800      	cmp	r0, #0
    4c5e:	d1eb      	bne.n	4c38 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    4c60:	f896 306c 	ldrb.w	r3, [r6, #108]	; 0x6c
    4c64:	2b09      	cmp	r3, #9
    4c66:	d1e7      	bne.n	4c38 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    4c68:	6d33      	ldr	r3, [r6, #80]	; 0x50
  bitmapFind(0, 1);
    4c6a:	4601      	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    4c6c:	442b      	add	r3, r5
    4c6e:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    4c72:	6d73      	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    4c74:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    4c78:	6db3      	ldr	r3, [r6, #88]	; 0x58
    4c7a:	442b      	add	r3, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4c7c:	2501      	movs	r5, #1
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    4c7e:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    4c82:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    4c84:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    4c88:	6e33      	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    4c8a:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    4c8e:	f896 206d 	ldrb.w	r2, [r6, #109]	; 0x6d
  m_bitmapStart = 0;
    4c92:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    4c96:	4620      	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4c98:	f102 0309 	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    4c9c:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4ca0:	fa05 f303 	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    4ca4:	1e5a      	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4ca6:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    4caa:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    4cae:	462a      	mov	r2, r5
    4cb0:	f7ff fd86 	bl	47c0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    4cb4:	2340      	movs	r3, #64	; 0x40
  return true;
    4cb6:	4628      	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    4cb8:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
}
    4cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4cbe:	bf00      	nop
    4cc0:	200006bc 	.word	0x200006bc

00004cc4 <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    4cc4:	b510      	push	{r4, lr}
    4cc6:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    4cc8:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    4ccc:	f7ff fe2e 	bl	492c <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    4cd0:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    4cd4:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    4cd6:	b2db      	uxtb	r3, r3
}
    4cd8:	4098      	lsls	r0, r3
    4cda:	bd10      	pop	{r4, pc}

00004cdc <FatFile::sync() [clone .part.0]>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    4cdc:	b570      	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    4cde:	f990 3002 	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    4ce2:	b082      	sub	sp, #8
    4ce4:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    4ce6:	2b00      	cmp	r3, #0
    4ce8:	db0d      	blt.n	4d06 <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    4cea:	68a5      	ldr	r5, [r4, #8]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    4cec:	f105 0028 	add.w	r0, r5, #40	; 0x28
    4cf0:	f004 fed6 	bl	9aa0 <FsCache::sync()>
    4cf4:	2800      	cmp	r0, #0
    4cf6:	d13b      	bne.n	4d70 <FatFile::sync() [clone .part.0]+0x94>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    4cf8:	7863      	ldrb	r3, [r4, #1]
  return false;
    4cfa:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    4cfc:	f043 0301 	orr.w	r3, r3, #1
    4d00:	7063      	strb	r3, [r4, #1]
}
    4d02:	b002      	add	sp, #8
    4d04:	bd70      	pop	{r4, r5, r6, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    4d06:	6880      	ldr	r0, [r0, #8]
    4d08:	2201      	movs	r2, #1
    4d0a:	69a1      	ldr	r1, [r4, #24]
    4d0c:	3028      	adds	r0, #40	; 0x28
    4d0e:	f004 fef3 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    4d12:	2800      	cmp	r0, #0
    4d14:	d0f0      	beq.n	4cf8 <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    4d16:	88a5      	ldrh	r5, [r4, #4]
    4d18:	f005 050f 	and.w	r5, r5, #15
    4d1c:	016b      	lsls	r3, r5, #5
    4d1e:	eb00 1545 	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    4d22:	5cc3      	ldrb	r3, [r0, r3]
    4d24:	2be5      	cmp	r3, #229	; 0xe5
    4d26:	d0e7      	beq.n	4cf8 <FatFile::sync() [clone .part.0]+0x1c>
    if (isFile()) {
    4d28:	7823      	ldrb	r3, [r4, #0]
    4d2a:	071b      	lsls	r3, r3, #28
    4d2c:	d501      	bpl.n	4d32 <FatFile::sync() [clone .part.0]+0x56>
      setLe32(dir->fileSize, m_fileSize);
    4d2e:	69e3      	ldr	r3, [r4, #28]
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    4d30:	61eb      	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    4d32:	6a23      	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    4d34:	4915      	ldr	r1, [pc, #84]	; (4d8c <FatFile::sync() [clone .part.0]+0xb0>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    4d36:	0c1a      	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    4d38:	836b      	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    4d3a:	680e      	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    4d3c:	82aa      	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    4d3e:	b166      	cbz	r6, 4d5a <FatFile::sync() [clone .part.0]+0x7e>
      FsDateTime::callback(&date, &time, &ms10);
    4d40:	f10d 0203 	add.w	r2, sp, #3
    4d44:	f10d 0106 	add.w	r1, sp, #6
    4d48:	a801      	add	r0, sp, #4
    4d4a:	47b0      	blx	r6
      setLe16(dir->modifyDate, date);
    4d4c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    4d50:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    4d54:	832b      	strh	r3, [r5, #24]
    4d56:	826b      	strh	r3, [r5, #18]
    4d58:	82ea      	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4d5a:	78a3      	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    4d5c:	68a5      	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    4d62:	f105 0028 	add.w	r0, r5, #40	; 0x28
    4d66:	70a3      	strb	r3, [r4, #2]
    4d68:	f004 fe9a 	bl	9aa0 <FsCache::sync()>
    4d6c:	2800      	cmp	r0, #0
    4d6e:	d0c3      	beq.n	4cf8 <FatFile::sync() [clone .part.0]+0x1c>
    4d70:	f505 700e 	add.w	r0, r5, #568	; 0x238
    4d74:	f004 fe94 	bl	9aa0 <FsCache::sync()>
    4d78:	2800      	cmp	r0, #0
    4d7a:	d0bd      	beq.n	4cf8 <FatFile::sync() [clone .part.0]+0x1c>
    4d7c:	6828      	ldr	r0, [r5, #0]
    return m_blockDev->syncDevice();
    4d7e:	6803      	ldr	r3, [r0, #0]
    4d80:	6a1b      	ldr	r3, [r3, #32]
    4d82:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    4d84:	2800      	cmp	r0, #0
    4d86:	d0b7      	beq.n	4cf8 <FatFile::sync() [clone .part.0]+0x1c>
    4d88:	e7bb      	b.n	4d02 <FatFile::sync() [clone .part.0]+0x26>
    4d8a:	bf00      	nop
    4d8c:	200033f8 	.word	0x200033f8

00004d90 <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    4d90:	4602      	mov	r2, r0
bool FatFile::addCluster() {
    4d92:	b538      	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    4d94:	f852 5f10 	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    4d98:	4604      	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    4d9a:	6880      	ldr	r0, [r0, #8]
    4d9c:	4629      	mov	r1, r5
    4d9e:	f002 f921 	bl	6fe4 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    4da2:	b150      	cbz	r0, 4dba <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    4da4:	b155      	cbz	r5, 4dbc <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    4da6:	6923      	ldr	r3, [r4, #16]
    4da8:	3501      	adds	r5, #1
    4daa:	42ab      	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    4dac:	78a3      	ldrb	r3, [r4, #2]
    4dae:	bf18      	it	ne
    4db0:	f003 03bf 	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4db4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4db8:	70a3      	strb	r3, [r4, #2]
}
    4dba:	bd38      	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4dbc:	78a3      	ldrb	r3, [r4, #2]
    4dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4dc2:	e7f7      	b.n	4db4 <FatFile::addCluster()+0x24>

00004dc4 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    4dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    4dc6:	7804      	ldrb	r4, [r0, #0]
    4dc8:	f014 0420 	ands.w	r4, r4, #32
    4dcc:	d104      	bne.n	4dd8 <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL*4095) {
    4dce:	4b1a      	ldr	r3, [pc, #104]	; (4e38 <FatFile::addDirCluster()+0x74>)
    4dd0:	4605      	mov	r5, r0
    4dd2:	6942      	ldr	r2, [r0, #20]
    4dd4:	429a      	cmp	r2, r3
    4dd6:	d302      	bcc.n	4dde <FatFile::addDirCluster()+0x1a>
  return false;
    4dd8:	2700      	movs	r7, #0
}
    4dda:	4638      	mov	r0, r7
    4ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    4dde:	f7ff ffd7 	bl	4d90 <FatFile::addCluster()>
    4de2:	4607      	mov	r7, r0
    4de4:	2800      	cmp	r0, #0
    4de6:	d0f7      	beq.n	4dd8 <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    4de8:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    4dea:	692e      	ldr	r6, [r5, #16]
    4dec:	7982      	ldrb	r2, [r0, #6]
    4dee:	3e02      	subs	r6, #2
    4df0:	6941      	ldr	r1, [r0, #20]
    4df2:	4096      	lsls	r6, r2
    4df4:	440e      	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    4df6:	7901      	ldrb	r1, [r0, #4]
    4df8:	b1a9      	cbz	r1, 4e26 <FatFile::addDirCluster()+0x62>
    4dfa:	4621      	mov	r1, r4
    4dfc:	e006      	b.n	4e0c <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    4dfe:	f009 f845 	bl	de8c <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    4e02:	68a8      	ldr	r0, [r5, #8]
    4e04:	b2e1      	uxtb	r1, r4
    4e06:	7902      	ldrb	r2, [r0, #4]
    4e08:	428a      	cmp	r2, r1
    4e0a:	d90b      	bls.n	4e24 <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    4e0c:	4431      	add	r1, r6
    4e0e:	2205      	movs	r2, #5
    4e10:	3028      	adds	r0, #40	; 0x28
    4e12:	3401      	adds	r4, #1
    4e14:	f004 fe70 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    4e18:	f44f 7200 	mov.w	r2, #512	; 0x200
    4e1c:	2100      	movs	r1, #0
    if (!pc) {
    4e1e:	2800      	cmp	r0, #0
    4e20:	d1ed      	bne.n	4dfe <FatFile::addDirCluster()+0x3a>
    4e22:	e7d9      	b.n	4dd8 <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    4e24:	7982      	ldrb	r2, [r0, #6]
    4e26:	f44f 7300 	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    4e2a:	6969      	ldr	r1, [r5, #20]
}
    4e2c:	4638      	mov	r0, r7
    4e2e:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    4e30:	fa11 f383 	uxtah	r3, r1, r3
    4e34:	616b      	str	r3, [r5, #20]
}
    4e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e38:	001ffe00 	.word	0x001ffe00

00004e3c <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    4e3c:	b510      	push	{r4, lr}
    4e3e:	4604      	mov	r4, r0
    return m_cache.prepare(sector, options);
    4e40:	6880      	ldr	r0, [r0, #8]
    4e42:	460a      	mov	r2, r1
    4e44:	3028      	adds	r0, #40	; 0x28
    4e46:	69a1      	ldr	r1, [r4, #24]
    4e48:	f004 fe56 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    4e4c:	b120      	cbz	r0, 4e58 <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    4e4e:	88a3      	ldrh	r3, [r4, #4]
    4e50:	f003 030f 	and.w	r3, r3, #15
    4e54:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
    4e58:	bd10      	pop	{r4, pc}
    4e5a:	bf00      	nop

00004e5c <FatFile::close()>:
bool FatFile::close() {
    4e5c:	b510      	push	{r4, lr}
  if (!isOpen()) {
    4e5e:	7803      	ldrb	r3, [r0, #0]
bool FatFile::close() {
    4e60:	4604      	mov	r4, r0
  if (!isOpen()) {
    4e62:	b12b      	cbz	r3, 4e70 <FatFile::close()+0x14>
    4e64:	f7ff ff3a 	bl	4cdc <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    4e68:	2300      	movs	r3, #0
    4e6a:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    4e6c:	70a3      	strb	r3, [r4, #2]
}
    4e6e:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    4e70:	2300      	movs	r3, #0
    return true;
    4e72:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    4e74:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    4e76:	70a3      	strb	r3, [r4, #2]
}
    4e78:	bd10      	pop	{r4, pc}
    4e7a:	bf00      	nop

00004e7c <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    4e7c:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    4e7e:	7803      	ldrb	r3, [r0, #0]
bool FatFile::dirEntry(DirFat_t* dst) {
    4e80:	4605      	mov	r5, r0
    4e82:	460c      	mov	r4, r1
  if (!isOpen()) {
    4e84:	b113      	cbz	r3, 4e8c <FatFile::dirEntry(DirFat_t*)+0x10>
    4e86:	f7ff ff29 	bl	4cdc <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    4e8a:	b1f0      	cbz	r0, 4eca <FatFile::dirEntry(DirFat_t*)+0x4e>
    4e8c:	68a8      	ldr	r0, [r5, #8]
    4e8e:	2200      	movs	r2, #0
    4e90:	69a9      	ldr	r1, [r5, #24]
    4e92:	3028      	adds	r0, #40	; 0x28
    4e94:	f004 fe30 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    4e98:	b1b8      	cbz	r0, 4eca <FatFile::dirEntry(DirFat_t*)+0x4e>
  return dir + (m_dirIndex & 0XF);
    4e9a:	88aa      	ldrh	r2, [r5, #4]
    4e9c:	f002 020f 	and.w	r2, r2, #15
    4ea0:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    4ea4:	0152      	lsls	r2, r2, #5
  memcpy(dst, dir, sizeof(DirFat_t));
    4ea6:	685d      	ldr	r5, [r3, #4]
    4ea8:	5880      	ldr	r0, [r0, r2]
    4eaa:	6899      	ldr	r1, [r3, #8]
    4eac:	68da      	ldr	r2, [r3, #12]
    4eae:	6020      	str	r0, [r4, #0]
    4eb0:	6065      	str	r5, [r4, #4]
    4eb2:	60a1      	str	r1, [r4, #8]
    4eb4:	60e2      	str	r2, [r4, #12]
    4eb6:	6918      	ldr	r0, [r3, #16]
    4eb8:	695d      	ldr	r5, [r3, #20]
    4eba:	6999      	ldr	r1, [r3, #24]
    4ebc:	69da      	ldr	r2, [r3, #28]
    4ebe:	6120      	str	r0, [r4, #16]
  return true;
    4ec0:	2001      	movs	r0, #1
  memcpy(dst, dir, sizeof(DirFat_t));
    4ec2:	6165      	str	r5, [r4, #20]
    4ec4:	61a1      	str	r1, [r4, #24]
    4ec6:	61e2      	str	r2, [r4, #28]
}
    4ec8:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    4eca:	2000      	movs	r0, #0
}
    4ecc:	bd38      	pop	{r3, r4, r5, pc}
    4ece:	bf00      	nop

00004ed0 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    4ed0:	b530      	push	{r4, r5, lr}
    4ed2:	b089      	sub	sp, #36	; 0x24
    4ed4:	460d      	mov	r5, r1
    4ed6:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    4ed8:	4669      	mov	r1, sp
    4eda:	f7ff ffcf 	bl	4e7c <FatFile::dirEntry(DirFat_t*)>
    4ede:	b128      	cbz	r0, 4eec <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    4ee0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  *ptime = getLe16(dir.createTime);
    4ee4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  *pdate = getLe16(dir.createDate);
    4ee8:	802a      	strh	r2, [r5, #0]
  *ptime = getLe16(dir.createTime);
    4eea:	8023      	strh	r3, [r4, #0]
}
    4eec:	b009      	add	sp, #36	; 0x24
    4eee:	bd30      	pop	{r4, r5, pc}

00004ef0 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    4ef0:	b530      	push	{r4, r5, lr}
    4ef2:	b089      	sub	sp, #36	; 0x24
    4ef4:	460d      	mov	r5, r1
    4ef6:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    4ef8:	4669      	mov	r1, sp
    4efa:	f7ff ffbf 	bl	4e7c <FatFile::dirEntry(DirFat_t*)>
    4efe:	b128      	cbz	r0, 4f0c <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    4f00:	f8bd 2018 	ldrh.w	r2, [sp, #24]
  *ptime = getLe16(dir.modifyTime);
    4f04:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  *pdate = getLe16(dir.modifyDate);
    4f08:	802a      	strh	r2, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    4f0a:	8023      	strh	r3, [r4, #0]
}
    4f0c:	b009      	add	sp, #36	; 0x24
    4f0e:	bd30      	pop	{r4, r5, pc}

00004f10 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    4f10:	780b      	ldrb	r3, [r1, #0]
    4f12:	f013 0f70 	tst.w	r3, #112	; 0x70
    4f16:	d101      	bne.n	4f1c <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    4f18:	2000      	movs	r0, #0
    4f1a:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    4f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    4f1e:	f640 2302 	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    4f22:	b089      	sub	sp, #36	; 0x24
    4f24:	460d      	mov	r5, r1
    4f26:	4604      	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    4f28:	f001 f8f0 	bl	610c <FatFile::open(FatFile*, FatLfn_t*, int)>
    4f2c:	b138      	cbz	r0, 4f3e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    4f2e:	2201      	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    4f30:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    4f32:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    4f34:	70a2      	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    4f36:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    4f38:	f7ff ff44 	bl	4dc4 <FatFile::addDirCluster()>
    4f3c:	b910      	cbnz	r0, 4f44 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    4f3e:	2000      	movs	r0, #0
    4f40:	b009      	add	sp, #36	; 0x24
    4f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    4f44:	6922      	ldr	r2, [r4, #16]
  if (!isOpen()) {
    4f46:	7823      	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    4f48:	6222      	str	r2, [r4, #32]
  if (!isOpen()) {
    4f4a:	b16b      	cbz	r3, 4f68 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    4f4c:	6963      	ldr	r3, [r4, #20]
    4f4e:	b133      	cbz	r3, 4f5e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    4f50:	78a3      	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    4f52:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    4f54:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    4f58:	e9c4 2204 	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    4f5c:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    4f5e:	4620      	mov	r0, r4
    4f60:	f7ff febc 	bl	4cdc <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    4f64:	2800      	cmp	r0, #0
    4f66:	d0ea      	beq.n	4f3e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    4f68:	68a0      	ldr	r0, [r4, #8]
    4f6a:	2201      	movs	r2, #1
    4f6c:	69a1      	ldr	r1, [r4, #24]
    4f6e:	3028      	adds	r0, #40	; 0x28
    4f70:	f004 fdc2 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    4f74:	2800      	cmp	r0, #0
    4f76:	d0e2      	beq.n	4f3e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    4f78:	f8b4 c004 	ldrh.w	ip, [r4, #4]
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    4f7c:	2210      	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    4f7e:	f00c 0c0f 	and.w	ip, ip, #15
    4f82:	ea4f 134c 	mov.w	r3, ip, lsl #5
    4f86:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    4f8a:	f88c 200b 	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    4f8e:	58c0      	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    4f90:	68a7      	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    4f92:	6a23      	ldr	r3, [r4, #32]
    4f94:	f897 e006 	ldrb.w	lr, [r7, #6]
    4f98:	1e9e      	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    4f9a:	f8dc 1004 	ldr.w	r1, [ip, #4]
    4f9e:	f8dc 2008 	ldr.w	r2, [ip, #8]
    4fa2:	f8dc 300c 	ldr.w	r3, [ip, #12]
    4fa6:	fa06 f60e 	lsl.w	r6, r6, lr
    4faa:	46ee      	mov	lr, sp
    4fac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    4fb0:	f8dc 0010 	ldr.w	r0, [ip, #16]
    4fb4:	f8dc 1014 	ldr.w	r1, [ip, #20]
    4fb8:	f8dc 2018 	ldr.w	r2, [ip, #24]
    4fbc:	f8dc 301c 	ldr.w	r3, [ip, #28]
    4fc0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    4fc4:	697b      	ldr	r3, [r7, #20]
    4fc6:	f107 0028 	add.w	r0, r7, #40	; 0x28
    4fca:	2201      	movs	r2, #1
    4fcc:	18f1      	adds	r1, r6, r3
    dot.name[i] = ' ';
    4fce:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
    4fd2:	f8cd 3001 	str.w	r3, [sp, #1]
    4fd6:	f8cd 3005 	str.w	r3, [sp, #5]
    4fda:	f8ad 3009 	strh.w	r3, [sp, #9]
    4fde:	f004 fd8b 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    4fe2:	4684      	mov	ip, r0
    4fe4:	2800      	cmp	r0, #0
    4fe6:	d0aa      	beq.n	4f3e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    4fe8:	272e      	movs	r7, #46	; 0x2e
    4fea:	46ee      	mov	lr, sp
    4fec:	f88d 7000 	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    4ff0:	4676      	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    4ff2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    4ff6:	f8cc 0000 	str.w	r0, [ip]
    4ffa:	f8cc 1004 	str.w	r1, [ip, #4]
    4ffe:	f8cc 2008 	str.w	r2, [ip, #8]
    5002:	f8cc 300c 	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    5006:	f88d 7001 	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    500a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    500e:	f8cc 0010 	str.w	r0, [ip, #16]
    5012:	f8cc 1014 	str.w	r1, [ip, #20]
    5016:	f8cc 2018 	str.w	r2, [ip, #24]
    501a:	f8cc 301c 	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    501e:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    5020:	0c1a      	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    5022:	f8ad 301a 	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    5026:	f8ad 2014 	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    502a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    502c:	f8cc 0020 	str.w	r0, [ip, #32]
    5030:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    5034:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    5038:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    503c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    503e:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    5042:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    5046:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    504a:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    504e:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5050:	f104 0028 	add.w	r0, r4, #40	; 0x28
    5054:	f004 fd24 	bl	9aa0 <FsCache::sync()>
    5058:	2800      	cmp	r0, #0
    505a:	f43f af70 	beq.w	4f3e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    505e:	f504 700e 	add.w	r0, r4, #568	; 0x238
    5062:	f004 fd1d 	bl	9aa0 <FsCache::sync()>
    5066:	2800      	cmp	r0, #0
    5068:	f43f af69 	beq.w	4f3e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    506c:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    506e:	6803      	ldr	r3, [r0, #0]
    5070:	6a1b      	ldr	r3, [r3, #32]
}
    5072:	b009      	add	sp, #36	; 0x24
    5074:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5078:	4718      	bx	r3
    507a:	bf00      	nop

0000507c <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    507c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 */
/**
 * \class FsName
 * \brief Handle UTF-8 file names.
 */
class FsName {
    5080:	2600      	movs	r6, #0
    5082:	b094      	sub	sp, #80	; 0x50
    5084:	4698      	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    5086:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    5088:	9201      	str	r2, [sp, #4]
    508a:	f8ad 6014 	strh.w	r6, [sp, #20]
    508e:	960b      	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    5090:	2b00      	cmp	r3, #0
    5092:	d141      	bne.n	5118 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    5094:	780b      	ldrb	r3, [r1, #0]
    5096:	460d      	mov	r5, r1
    5098:	f013 0f70 	tst.w	r3, #112	; 0x70
    509c:	d03c      	beq.n	5118 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
  if (isDirSeparator(*path)) {
    509e:	7813      	ldrb	r3, [r2, #0]
    50a0:	4604      	mov	r4, r0
    50a2:	4616      	mov	r6, r2
    50a4:	2b2f      	cmp	r3, #47	; 0x2f
    50a6:	d03b      	beq.n	5120 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!open(parent, &fname, O_RDONLY)) {
    50a8:	2700      	movs	r7, #0
    50aa:	e028      	b.n	50fe <FatFile::mkdir(FatFile*, char const*, bool)+0x82>
    if (!*path) {
    50ac:	9e01      	ldr	r6, [sp, #4]
    50ae:	7836      	ldrb	r6, [r6, #0]
    50b0:	2e00      	cmp	r6, #0
    50b2:	d050      	beq.n	5156 <FatFile::mkdir(FatFile*, char const*, bool)+0xda>
    if (!open(parent, &fname, O_RDONLY)) {
    50b4:	f001 f82a 	bl	610c <FatFile::open(FatFile*, FatLfn_t*, int)>
    50b8:	4603      	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    50ba:	aa02      	add	r2, sp, #8
    50bc:	4629      	mov	r1, r5
    50be:	4620      	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    50c0:	b92b      	cbnz	r3, 50ce <FatFile::mkdir(FatFile*, char const*, bool)+0x52>
      if (!pFlag || !mkdir(parent, &fname)) {
    50c2:	f1b8 0f00 	cmp.w	r8, #0
    50c6:	d027      	beq.n	5118 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    50c8:	f7ff ff22 	bl	4f10 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    50cc:	b320      	cbz	r0, 5118 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    50ce:	46a6      	mov	lr, r4
    50d0:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    50d4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    50d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    50dc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    50e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    50e4:	f8de 5000 	ldr.w	r5, [lr]
    50e8:	4620      	mov	r0, r4
  if (!isOpen()) {
    50ea:	7823      	ldrb	r3, [r4, #0]
    tmpDir = *this;
    50ec:	f8cc 5000 	str.w	r5, [ip]
  if (!isOpen()) {
    50f0:	b10b      	cbz	r3, 50f6 <FatFile::mkdir(FatFile*, char const*, bool)+0x7a>
    50f2:	f7ff fdf3 	bl	4cdc <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    50f6:	9e01      	ldr	r6, [sp, #4]
    parent = &tmpDir;
    50f8:	ad0b      	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    50fa:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    50fc:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    50fe:	4631      	mov	r1, r6
    5100:	ab01      	add	r3, sp, #4
    5102:	aa02      	add	r2, sp, #8
    5104:	4620      	mov	r0, r4
    5106:	f001 f94d 	bl	63a4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    510a:	4606      	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    510c:	aa02      	add	r2, sp, #8
    510e:	4629      	mov	r1, r5
    5110:	2300      	movs	r3, #0
    5112:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    5114:	2e00      	cmp	r6, #0
    5116:	d1c9      	bne.n	50ac <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
  switch (vol->fatType()) {
    5118:	2000      	movs	r0, #0
}
    511a:	b014      	add	sp, #80	; 0x50
    511c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    5120:	3601      	adds	r6, #1
    5122:	9601      	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    5124:	7833      	ldrb	r3, [r6, #0]
    5126:	2b2f      	cmp	r3, #47	; 0x2f
    5128:	d0fa      	beq.n	5120 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!tmpDir.openRoot(parent->m_vol)) {
    512a:	68ad      	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    512c:	2224      	movs	r2, #36	; 0x24
    512e:	2100      	movs	r1, #0
    5130:	a80b      	add	r0, sp, #44	; 0x2c
    5132:	f008 feab 	bl	de8c <memset>
  m_vol = vol;
    5136:	950d      	str	r5, [sp, #52]	; 0x34
    return m_fatType;
    5138:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    513a:	2b10      	cmp	r3, #16
    513c:	d003      	beq.n	5146 <FatFile::mkdir(FatFile*, char const*, bool)+0xca>
    513e:	2b20      	cmp	r3, #32
    5140:	d00f      	beq.n	5162 <FatFile::mkdir(FatFile*, char const*, bool)+0xe6>
    5142:	2b0c      	cmp	r3, #12
    5144:	d1e8      	bne.n	5118 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    5146:	2320      	movs	r3, #32
    m_attributes = FILE_ATTR_ROOT_FIXED;
    5148:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    514c:	2301      	movs	r3, #1
    parent = &tmpDir;
    514e:	ad0b      	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    5150:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    5154:	e7a8      	b.n	50a8 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  return mkdir(parent, &fname);
    5156:	aa02      	add	r2, sp, #8
    5158:	f7ff feda 	bl	4f10 <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    515c:	b014      	add	sp, #80	; 0x50
    515e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    5162:	2340      	movs	r3, #64	; 0x40
    5164:	e7f0      	b.n	5148 <FatFile::mkdir(FatFile*, char const*, bool)+0xcc>
    5166:	bf00      	nop

00005168 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    516c:	2500      	movs	r5, #0
    516e:	b094      	sub	sp, #80	; 0x50
    5170:	4698      	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    5172:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5174:	9201      	str	r2, [sp, #4]
    5176:	9502      	str	r5, [sp, #8]
    5178:	f8ad 5038 	strh.w	r5, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    517c:	2b00      	cmp	r3, #0
    517e:	d137      	bne.n	51f0 <FatFile::open(FatFile*, char const*, int)+0x88>
    5180:	780b      	ldrb	r3, [r1, #0]
    5182:	460e      	mov	r6, r1
    5184:	f013 0f70 	tst.w	r3, #112	; 0x70
    5188:	d032      	beq.n	51f0 <FatFile::open(FatFile*, char const*, int)+0x88>
  if (isDirSeparator(*path)) {
    518a:	7813      	ldrb	r3, [r2, #0]
    518c:	4604      	mov	r4, r0
    518e:	4615      	mov	r5, r2
    5190:	2b2f      	cmp	r3, #47	; 0x2f
    5192:	d031      	beq.n	51f8 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    5194:	2700      	movs	r7, #0
    5196:	e01e      	b.n	51d6 <FatFile::open(FatFile*, char const*, int)+0x6e>
    if (*path == 0) {
    5198:	9d01      	ldr	r5, [sp, #4]
    519a:	782d      	ldrb	r5, [r5, #0]
    519c:	2d00      	cmp	r5, #0
    519e:	d040      	beq.n	5222 <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    51a0:	f000 ffb4 	bl	610c <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    51a4:	46a6      	mov	lr, r4
    51a6:	f10d 0c08 	add.w	ip, sp, #8
    if (!open(dirFile, &fname, O_RDONLY)) {
    51aa:	b308      	cbz	r0, 51f0 <FatFile::open(FatFile*, char const*, int)+0x88>
    dirFile = &tmpDir;
    51ac:	4666      	mov	r6, ip
  if (!isOpen()) {
    51ae:	7825      	ldrb	r5, [r4, #0]
    tmpDir = *this;
    51b0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    51b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    51b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    51bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    51c0:	f8de 3000 	ldr.w	r3, [lr]
    51c4:	4620      	mov	r0, r4
    51c6:	f8cc 3000 	str.w	r3, [ip]
  if (!isOpen()) {
    51ca:	b10d      	cbz	r5, 51d0 <FatFile::open(FatFile*, char const*, int)+0x68>
    51cc:	f7ff fd86 	bl	4cdc <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    51d0:	9d01      	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    51d2:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    51d4:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    51d6:	4629      	mov	r1, r5
    51d8:	ab01      	add	r3, sp, #4
    51da:	aa0b      	add	r2, sp, #44	; 0x2c
    51dc:	4620      	mov	r0, r4
    51de:	f001 f8e1 	bl	63a4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    51e2:	4605      	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    51e4:	aa0b      	add	r2, sp, #44	; 0x2c
    51e6:	4631      	mov	r1, r6
    51e8:	2300      	movs	r3, #0
    51ea:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    51ec:	2d00      	cmp	r5, #0
    51ee:	d1d3      	bne.n	5198 <FatFile::open(FatFile*, char const*, int)+0x30>
  return false;
    51f0:	2000      	movs	r0, #0
}
    51f2:	b014      	add	sp, #80	; 0x50
    51f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    51f8:	3501      	adds	r5, #1
    51fa:	9501      	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    51fc:	7829      	ldrb	r1, [r5, #0]
    51fe:	292f      	cmp	r1, #47	; 0x2f
    5200:	d0fa      	beq.n	51f8 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (*path == 0) {
    5202:	b9a9      	cbnz	r1, 5230 <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    5204:	68b5      	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    5206:	2224      	movs	r2, #36	; 0x24
    5208:	4620      	mov	r0, r4
    520a:	f008 fe3f 	bl	de8c <memset>
  m_vol = vol;
    520e:	60a5      	str	r5, [r4, #8]
    5210:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    5212:	2b10      	cmp	r3, #16
    5214:	d003      	beq.n	521e <FatFile::open(FatFile*, char const*, int)+0xb6>
    5216:	2b20      	cmp	r3, #32
    5218:	d022      	beq.n	5260 <FatFile::open(FatFile*, char const*, int)+0xf8>
    521a:	2b0c      	cmp	r3, #12
    521c:	d1e8      	bne.n	51f0 <FatFile::open(FatFile*, char const*, int)+0x88>
    521e:	2220      	movs	r2, #32
    5220:	e01f      	b.n	5262 <FatFile::open(FatFile*, char const*, int)+0xfa>
  return open(dirFile, &fname, oflag);
    5222:	4643      	mov	r3, r8
    5224:	aa0b      	add	r2, sp, #44	; 0x2c
    5226:	f000 ff71 	bl	610c <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    522a:	b014      	add	sp, #80	; 0x50
    522c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    5230:	68b6      	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    5232:	2224      	movs	r2, #36	; 0x24
    5234:	2100      	movs	r1, #0
    5236:	a802      	add	r0, sp, #8
    5238:	f008 fe28 	bl	de8c <memset>
  m_vol = vol;
    523c:	9604      	str	r6, [sp, #16]
    523e:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    5240:	2b10      	cmp	r3, #16
    5242:	d003      	beq.n	524c <FatFile::open(FatFile*, char const*, int)+0xe4>
    5244:	2b20      	cmp	r3, #32
    5246:	d003      	beq.n	5250 <FatFile::open(FatFile*, char const*, int)+0xe8>
    5248:	2b0c      	cmp	r3, #12
    524a:	d1d1      	bne.n	51f0 <FatFile::open(FatFile*, char const*, int)+0x88>
    524c:	2320      	movs	r3, #32
    524e:	e000      	b.n	5252 <FatFile::open(FatFile*, char const*, int)+0xea>
    5250:	2340      	movs	r3, #64	; 0x40
    m_attributes = FILE_ATTR_ROOT_FIXED;
    5252:	f88d 3008 	strb.w	r3, [sp, #8]
  m_flags = FILE_FLAG_READ;
    5256:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    5258:	ae02      	add	r6, sp, #8
  m_flags = FILE_FLAG_READ;
    525a:	f88d 300a 	strb.w	r3, [sp, #10]
  return true;
    525e:	e799      	b.n	5194 <FatFile::open(FatFile*, char const*, int)+0x2c>
  switch (vol->fatType()) {
    5260:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    5262:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    5264:	7022      	strb	r2, [r4, #0]
  return true;
    5266:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    5268:	70a3      	strb	r3, [r4, #2]
  return true;
    526a:	e7c2      	b.n	51f2 <FatFile::open(FatFile*, char const*, int)+0x8a>

0000526c <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    526c:	b119      	cbz	r1, 5276 <FatFile::open(FatVolume*, char const*, int)+0xa>
    526e:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    5272:	f7ff bf79 	b.w	5168 <FatFile::open(FatFile*, char const*, int)>
}
    5276:	4608      	mov	r0, r1
    5278:	4770      	bx	lr
    527a:	bf00      	nop

0000527c <FatFile::openCluster(FatFile*)>:
  if (file->m_dirCluster == 0) {
    527c:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    527e:	b570      	push	{r4, r5, r6, lr}
    5280:	460d      	mov	r5, r1
    5282:	4604      	mov	r4, r0
  if (file->m_dirCluster == 0) {
    5284:	b993      	cbnz	r3, 52ac <FatFile::openCluster(FatFile*)+0x30>
  if (isOpen()) {
    5286:	7806      	ldrb	r6, [r0, #0]
    5288:	b10e      	cbz	r6, 528e <FatFile::openCluster(FatFile*)+0x12>
  return false;
    528a:	4618      	mov	r0, r3
}
    528c:	bd70      	pop	{r4, r5, r6, pc}
    return openRoot(file->m_vol);
    528e:	688d      	ldr	r5, [r1, #8]
  memset(this, 0, sizeof(FatFile));
    5290:	2224      	movs	r2, #36	; 0x24
    5292:	4631      	mov	r1, r6
    5294:	f008 fdfa 	bl	de8c <memset>
  m_vol = vol;
    5298:	60a5      	str	r5, [r4, #8]
    529a:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    529c:	2b10      	cmp	r3, #16
    529e:	d018      	beq.n	52d2 <FatFile::openCluster(FatFile*)+0x56>
    52a0:	2b20      	cmp	r3, #32
    52a2:	d010      	beq.n	52c6 <FatFile::openCluster(FatFile*)+0x4a>
    52a4:	2b0c      	cmp	r3, #12
    52a6:	d014      	beq.n	52d2 <FatFile::openCluster(FatFile*)+0x56>
    52a8:	4630      	mov	r0, r6
}
    52aa:	bd70      	pop	{r4, r5, r6, pc}
  memset(this, 0, sizeof(FatFile));
    52ac:	2224      	movs	r2, #36	; 0x24
    52ae:	2100      	movs	r1, #0
    52b0:	f008 fdec 	bl	de8c <memset>
  m_flags = FILE_FLAG_READ;
    52b4:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    52b6:	2310      	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    52b8:	70a0      	strb	r0, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    52ba:	7023      	strb	r3, [r4, #0]
  m_firstCluster = file->m_dirCluster;
    52bc:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
  m_vol = file->m_vol;
    52c0:	60a2      	str	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    52c2:	6223      	str	r3, [r4, #32]
}
    52c4:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    52c6:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    52c8:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    52ca:	7022      	strb	r2, [r4, #0]
  return true;
    52cc:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    52ce:	70a3      	strb	r3, [r4, #2]
}
    52d0:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    52d2:	2220      	movs	r2, #32
    52d4:	e7f8      	b.n	52c8 <FatFile::openCluster(FatFile*)+0x4c>
    52d6:	bf00      	nop

000052d8 <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    52d8:	b570      	push	{r4, r5, r6, lr}
  if (isOpen()) {
    52da:	7805      	ldrb	r5, [r0, #0]
    52dc:	b10d      	cbz	r5, 52e2 <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    52de:	2000      	movs	r0, #0
}
    52e0:	bd70      	pop	{r4, r5, r6, pc}
    52e2:	460e      	mov	r6, r1
    52e4:	4604      	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    52e6:	2224      	movs	r2, #36	; 0x24
    52e8:	4629      	mov	r1, r5
    52ea:	f008 fdcf 	bl	de8c <memset>
  m_vol = vol;
    52ee:	60a6      	str	r6, [r4, #8]
    52f0:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    52f2:	2b10      	cmp	r3, #16
    52f4:	d00b      	beq.n	530e <FatFile::openRoot(FatVolume*)+0x36>
    52f6:	2b20      	cmp	r3, #32
    52f8:	d003      	beq.n	5302 <FatFile::openRoot(FatVolume*)+0x2a>
    52fa:	2b0c      	cmp	r3, #12
    52fc:	d007      	beq.n	530e <FatFile::openRoot(FatVolume*)+0x36>
    52fe:	4628      	mov	r0, r5
}
    5300:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    5302:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    5304:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    5306:	7022      	strb	r2, [r4, #0]
  return true;
    5308:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    530a:	70a3      	strb	r3, [r4, #2]
}
    530c:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    530e:	2220      	movs	r2, #32
    5310:	e7f8      	b.n	5304 <FatFile::openRoot(FatVolume*)+0x2c>
    5312:	bf00      	nop

00005314 <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    5314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5318:	ed2d 8b02 	vpush	{d8}
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    531c:	7883      	ldrb	r3, [r0, #2]
    531e:	b083      	sub	sp, #12
    5320:	4605      	mov	r5, r0
  if (!isReadable()) {
    5322:	07df      	lsls	r7, r3, #31
    5324:	f140 808c 	bpl.w	5440 <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    5328:	4688      	mov	r8, r1
    532a:	7801      	ldrb	r1, [r0, #0]
    532c:	4692      	mov	sl, r2
  if (isFile()) {
    532e:	070e      	lsls	r6, r1, #28
    5330:	f100 8091 	bmi.w	5456 <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    5334:	068c      	lsls	r4, r1, #26
    5336:	d508      	bpl.n	534a <FatFile::read(void*, unsigned int)+0x36>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    5338:	6883      	ldr	r3, [r0, #8]
    533a:	895a      	ldrh	r2, [r3, #10]
    533c:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    533e:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    5342:	b29b      	uxth	r3, r3
    5344:	459a      	cmp	sl, r3
    5346:	bf28      	it	cs
    5348:	469a      	movcs	sl, r3
  while (toRead) {
    534a:	f1ba 0f00 	cmp.w	sl, #0
    534e:	f000 80af 	beq.w	54b0 <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    5352:	696a      	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5354:	f105 0310 	add.w	r3, r5, #16
    if (isRootFixed()) {
    5358:	0688      	lsls	r0, r1, #26
    uint32_t tmp32 = m_fileSize - m_curPosition;
    535a:	4656      	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    535c:	f04f 0900 	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5360:	ee08 3a10 	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5364:	68af      	ldr	r7, [r5, #8]
    5366:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    536a:	d53d      	bpl.n	53e8 <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart()
    536c:	6a39      	ldr	r1, [r7, #32]
    536e:	eb01 2152 	add.w	r1, r1, r2, lsr #9
        || sector == m_vol->cacheSectorNumber()) {
    5372:	f1bb 0f00 	cmp.w	fp, #0
    5376:	d151      	bne.n	541c <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    5378:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    537c:	d34e      	bcc.n	541c <FatFile::read(void*, unsigned int)+0x108>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    537e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    5380:	4291      	cmp	r1, r2
    5382:	d04b      	beq.n	541c <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    5384:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    5388:	f0c0 8082 	bcc.w	5490 <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    538c:	7828      	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    538e:	0a73      	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    5390:	0680      	lsls	r0, r0, #26
    5392:	d405      	bmi.n	53a0 <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    5394:	7938      	ldrb	r0, [r7, #4]
    5396:	eba0 0009 	sub.w	r0, r0, r9
    539a:	4283      	cmp	r3, r0
    539c:	bf28      	it	cs
    539e:	4603      	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    53a0:	4291      	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    53a2:	ea4f 2443 	mov.w	r4, r3, lsl #9
    53a6:	d80c      	bhi.n	53c2 <FatFile::read(void*, unsigned int)+0xae>
    53a8:	18c8      	adds	r0, r1, r3
    53aa:	4282      	cmp	r2, r0
    53ac:	d209      	bcs.n	53c2 <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    53ae:	f107 0028 	add.w	r0, r7, #40	; 0x28
    53b2:	e9cd 1300 	strd	r1, r3, [sp]
    53b6:	f004 fb73 	bl	9aa0 <FsCache::sync()>
    53ba:	e9dd 1300 	ldrd	r1, r3, [sp]
    53be:	2800      	cmp	r0, #0
    53c0:	d03e      	beq.n	5440 <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    53c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    53c4:	6802      	ldr	r2, [r0, #0]
    53c6:	6957      	ldr	r7, [r2, #20]
    53c8:	4642      	mov	r2, r8
    53ca:	47b8      	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    53cc:	2800      	cmp	r0, #0
    53ce:	d037      	beq.n	5440 <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    53d0:	696a      	ldr	r2, [r5, #20]
  while (toRead) {
    53d2:	1b36      	subs	r6, r6, r4
    dst += n;
    53d4:	44a0      	add	r8, r4
    m_curPosition += n;
    53d6:	4422      	add	r2, r4
    53d8:	616a      	str	r2, [r5, #20]
  while (toRead) {
    53da:	d069      	beq.n	54b0 <FatFile::read(void*, unsigned int)+0x19c>
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    53dc:	7829      	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    53de:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    53e2:	68af      	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    53e4:	0688      	lsls	r0, r1, #26
    53e6:	d4c1      	bmi.n	536c <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    53e8:	f897 9005 	ldrb.w	r9, [r7, #5]
    53ec:	ea09 2952 	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    53f0:	f1bb 0f00 	cmp.w	fp, #0
    53f4:	d136      	bne.n	5464 <FatFile::read(void*, unsigned int)+0x150>
    53f6:	f1b9 0f00 	cmp.w	r9, #0
    53fa:	d133      	bne.n	5464 <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    53fc:	2a00      	cmp	r2, #0
    53fe:	d133      	bne.n	5468 <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    5400:	064a      	lsls	r2, r1, #25
    return m_rootDirStart;
    5402:	bf4c      	ite	mi
    5404:	6a3a      	ldrmi	r2, [r7, #32]
    5406:	6a2a      	ldrpl	r2, [r5, #32]
          m_curCluster++;
    5408:	612a      	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    540a:	3a02      	subs	r2, #2
    540c:	79b8      	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    540e:	6979      	ldr	r1, [r7, #20]
    5410:	4082      	lsls	r2, r0
    5412:	4449      	add	r1, r9
    5414:	4411      	add	r1, r2
        || sector == m_vol->cacheSectorNumber()) {
    5416:	f1bb 0f00 	cmp.w	fp, #0
    541a:	d0ad      	beq.n	5378 <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    541c:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    5420:	2200      	movs	r2, #0
    5422:	f107 0028 	add.w	r0, r7, #40	; 0x28
    5426:	42b4      	cmp	r4, r6
    5428:	bf28      	it	cs
    542a:	4634      	movcs	r4, r6
    542c:	f004 fb64 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    5430:	b130      	cbz	r0, 5440 <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    5432:	eb00 010b 	add.w	r1, r0, fp
    5436:	4622      	mov	r2, r4
    5438:	4640      	mov	r0, r8
    543a:	f006 f979 	bl	b730 <memcpy>
    543e:	e7c7      	b.n	53d0 <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    5440:	786b      	ldrb	r3, [r5, #1]
  return -1;
    5442:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  m_error |= READ_ERROR;
    5446:	f043 0302 	orr.w	r3, r3, #2
    544a:	706b      	strb	r3, [r5, #1]
}
    544c:	b003      	add	sp, #12
    544e:	ecbd 8b02 	vpop	{d8}
    5452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    5456:	69c3      	ldr	r3, [r0, #28]
    5458:	6942      	ldr	r2, [r0, #20]
    545a:	1a9b      	subs	r3, r3, r2
    545c:	459a      	cmp	sl, r3
    545e:	bf28      	it	cs
    5460:	469a      	movcs	sl, r3
    5462:	e772      	b.n	534a <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    5464:	692a      	ldr	r2, [r5, #16]
    5466:	e7d0      	b.n	540a <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    5468:	070b      	lsls	r3, r1, #28
    546a:	d505      	bpl.n	5478 <FatFile::read(void*, unsigned int)+0x164>
    546c:	78aa      	ldrb	r2, [r5, #2]
    546e:	0654      	lsls	r4, r2, #25
    5470:	d502      	bpl.n	5478 <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    5472:	692a      	ldr	r2, [r5, #16]
    5474:	3201      	adds	r2, #1
    5476:	e7c7      	b.n	5408 <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5478:	ee18 2a10 	vmov	r2, s16
    547c:	4638      	mov	r0, r7
    547e:	6929      	ldr	r1, [r5, #16]
    5480:	f001 fdfe 	bl	7080 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    5484:	2800      	cmp	r0, #0
    5486:	dbdb      	blt.n	5440 <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    5488:	d00c      	beq.n	54a4 <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    548a:	68af      	ldr	r7, [r5, #8]
    548c:	692a      	ldr	r2, [r5, #16]
    548e:	e7bc      	b.n	540a <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    5490:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    5492:	4642      	mov	r2, r8
    5494:	6803      	ldr	r3, [r0, #0]
    5496:	691b      	ldr	r3, [r3, #16]
    5498:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    549a:	2800      	cmp	r0, #0
    549c:	d0d0      	beq.n	5440 <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    549e:	f44f 7400 	mov.w	r4, #512	; 0x200
    54a2:	e795      	b.n	53d0 <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    54a4:	782b      	ldrb	r3, [r5, #0]
    54a6:	f013 0f70 	tst.w	r3, #112	; 0x70
    54aa:	d0c9      	beq.n	5440 <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    54ac:	ebaa 0a06 	sub.w	sl, sl, r6
    54b0:	4650      	mov	r0, sl
}
    54b2:	b003      	add	sp, #12
    54b4:	ecbd 8b02 	vpop	{d8}
    54b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000054bc <FatFile::peek()>:
int FatFile::peek() {
    54bc:	b570      	push	{r4, r5, r6, lr}
    54be:	b082      	sub	sp, #8
    return read(&b, 1) == 1 ? b : -1;
    54c0:	2201      	movs	r2, #1
    54c2:	4604      	mov	r4, r0
    54c4:	f10d 0107 	add.w	r1, sp, #7
  uint32_t curCluster = m_curCluster;
    54c8:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
    54cc:	f7ff ff22 	bl	5314 <FatFile::read(void*, unsigned int)>
    54d0:	2801      	cmp	r0, #1
    54d2:	bf0c      	ite	eq
    54d4:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    54d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curCluster = curCluster;
    54dc:	e9c4 5604 	strd	r5, r6, [r4, #16]
}
    54e0:	b002      	add	sp, #8
    54e2:	bd70      	pop	{r4, r5, r6, pc}

000054e4 <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    54e4:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    54e6:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    54ea:	b530      	push	{r4, r5, lr}
    54ec:	4604      	mov	r4, r0
    54ee:	b083      	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    54f0:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    54f4:	d009      	beq.n	550a <FatFile::readDirCache(bool)+0x26>
    54f6:	2901      	cmp	r1, #1
    54f8:	d107      	bne.n	550a <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    54fa:	3320      	adds	r3, #32
    54fc:	6143      	str	r3, [r0, #20]
    return m_buffer;
    54fe:	68a0      	ldr	r0, [r4, #8]
    5500:	3038      	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    5502:	eb00 1045 	add.w	r0, r0, r5, lsl #5
}
    5506:	b003      	add	sp, #12
    5508:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    550a:	2201      	movs	r2, #1
    550c:	f10d 0107 	add.w	r1, sp, #7
    5510:	4620      	mov	r0, r4
    5512:	f7ff feff 	bl	5314 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    5516:	b240      	sxtb	r0, r0
    5518:	2801      	cmp	r0, #1
    551a:	d103      	bne.n	5524 <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    551c:	6963      	ldr	r3, [r4, #20]
    551e:	331f      	adds	r3, #31
    5520:	6163      	str	r3, [r4, #20]
    5522:	e7ec      	b.n	54fe <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    5524:	2000      	movs	r0, #0
    5526:	e7ee      	b.n	5506 <FatFile::readDirCache(bool)+0x22>

00005528 <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    5528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!(isFile() || isSubDir())) {
    552c:	7803      	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    552e:	b09a      	sub	sp, #104	; 0x68
  FatFile() {}
    5530:	2600      	movs	r6, #0
  if (!(isFile() || isSubDir())) {
    5532:	f013 0f18 	tst.w	r3, #24
    5536:	9608      	str	r6, [sp, #32]
    5538:	9611      	str	r6, [sp, #68]	; 0x44
    553a:	d006      	beq.n	554a <FatFile::rename(FatFile*, char const*)+0x22>
    553c:	4617      	mov	r7, r2
  if (m_vol != dirFile->m_vol) {
    553e:	6883      	ldr	r3, [r0, #8]
    5540:	688a      	ldr	r2, [r1, #8]
    5542:	4604      	mov	r4, r0
    5544:	460d      	mov	r5, r1
    5546:	429a      	cmp	r2, r3
    5548:	d003      	beq.n	5552 <FatFile::rename(FatFile*, char const*)+0x2a>
  return false;
    554a:	2000      	movs	r0, #0
}
    554c:	b01a      	add	sp, #104	; 0x68
    554e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5552:	f7ff fbc3 	bl	4cdc <FatFile::sync() [clone .part.0]>
  oldFile = *this;
    5556:	46a6      	mov	lr, r4
    5558:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
    555c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    5560:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    5564:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    5568:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    556c:	f8de 3000 	ldr.w	r3, [lr]
    5570:	4632      	mov	r2, r6
    5572:	69a1      	ldr	r1, [r4, #24]
    5574:	f8cc 3000 	str.w	r3, [ip]
    5578:	68a3      	ldr	r3, [r4, #8]
    557a:	f103 0028 	add.w	r0, r3, #40	; 0x28
    557e:	f004 fabb 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5582:	2800      	cmp	r0, #0
    5584:	d0e1      	beq.n	554a <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    5586:	88a2      	ldrh	r2, [r4, #4]
  memcpy(&entry, dir, sizeof(entry));
    5588:	46ec      	mov	ip, sp
  if (isFile()) {
    558a:	f894 8000 	ldrb.w	r8, [r4]
  return dir + (m_dirIndex & 0XF);
    558e:	f002 020f 	and.w	r2, r2, #15
  memcpy(&entry, dir, sizeof(entry));
    5592:	eb00 1e42 	add.w	lr, r0, r2, lsl #5
    5596:	0152      	lsls	r2, r2, #5
    5598:	f8de 1004 	ldr.w	r1, [lr, #4]
    559c:	5880      	ldr	r0, [r0, r2]
    559e:	f8de 300c 	ldr.w	r3, [lr, #12]
    55a2:	f8de 2008 	ldr.w	r2, [lr, #8]
    55a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    55aa:	f8de 1014 	ldr.w	r1, [lr, #20]
    55ae:	f8de 2018 	ldr.w	r2, [lr, #24]
    55b2:	f8de 301c 	ldr.w	r3, [lr, #28]
    55b6:	f8de 0010 	ldr.w	r0, [lr, #16]
    55ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  if (isFile()) {
    55be:	f018 0308 	ands.w	r3, r8, #8
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    55c2:	463a      	mov	r2, r7
    55c4:	4629      	mov	r1, r5
  if (isFile()) {
    55c6:	f040 809b 	bne.w	5700 <FatFile::rename(FatFile*, char const*)+0x1d8>
    if (!file.mkdir(dirFile, newPath, false)) {
    55ca:	a808      	add	r0, sp, #32
    55cc:	f7ff fd56 	bl	507c <FatFile::mkdir(FatFile*, char const*, bool)>
    55d0:	2800      	cmp	r0, #0
    55d2:	d0ba      	beq.n	554a <FatFile::rename(FatFile*, char const*)+0x22>
    dirCluster = file.m_firstCluster;
    55d4:	9e10      	ldr	r6, [sp, #64]	; 0x40
  m_dirIndex = file.m_dirIndex;
    55d6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  file.m_attributes = FILE_ATTR_CLOSED;
    55da:	2500      	movs	r5, #0
  m_dirSector = file.m_dirSector;
    55dc:	990e      	ldr	r1, [sp, #56]	; 0x38
    55de:	2201      	movs	r2, #1
  m_dirIndex = file.m_dirIndex;
    55e0:	80a3      	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    55e2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    55e6:	68a0      	ldr	r0, [r4, #8]
    55e8:	70e3      	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    55ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    55ec:	3028      	adds	r0, #40	; 0x28
  m_dirSector = file.m_dirSector;
    55ee:	61a1      	str	r1, [r4, #24]
  m_dirCluster = file.m_dirCluster;
    55f0:	60e3      	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    55f2:	f88d 5020 	strb.w	r5, [sp, #32]
  file.m_flags = 0;
    55f6:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    55fa:	f004 fa7d 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    55fe:	2800      	cmp	r0, #0
    5600:	d0a3      	beq.n	554a <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    5602:	88a3      	ldrh	r3, [r4, #4]
    5604:	f003 030f 	and.w	r3, r3, #15
    5608:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    560c:	f8dd 300d 	ldr.w	r3, [sp, #13]
    5610:	f8c0 300d 	str.w	r3, [r0, #13]
    5614:	f8dd 3011 	ldr.w	r3, [sp, #17]
    5618:	f8c0 3011 	str.w	r3, [r0, #17]
    561c:	f8dd 3015 	ldr.w	r3, [sp, #21]
    5620:	f8c0 3015 	str.w	r3, [r0, #21]
    5624:	f8dd 3019 	ldr.w	r3, [sp, #25]
    5628:	f8c0 3019 	str.w	r3, [r0, #25]
    562c:	f8bd 301d 	ldrh.w	r3, [sp, #29]
    5630:	f8a0 301d 	strh.w	r3, [r0, #29]
    5634:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5638:	77c3      	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    563a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    563e:	72c3      	strb	r3, [r0, #11]
  if (dirCluster) {
    5640:	2e00      	cmp	r6, #0
    5642:	d03b      	beq.n	56bc <FatFile::rename(FatFile*, char const*)+0x194>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    5644:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5646:	1eb3      	subs	r3, r6, #2
    return m_cache.prepare(sector, options);
    5648:	462a      	mov	r2, r5
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    564a:	7981      	ldrb	r1, [r0, #6]
    return m_cache.prepare(sector, options);
    564c:	3028      	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    564e:	408b      	lsls	r3, r1
    5650:	f850 1c14 	ldr.w	r1, [r0, #-20]
    return m_cache.prepare(sector, options);
    5654:	4419      	add	r1, r3
    5656:	f004 fa4f 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    565a:	4605      	mov	r5, r0
    565c:	2800      	cmp	r0, #0
    565e:	f43f af74 	beq.w	554a <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&entry, &dir[1], sizeof(entry));
    5662:	6a00      	ldr	r0, [r0, #32]
    5664:	466f      	mov	r7, sp
    5666:	6a69      	ldr	r1, [r5, #36]	; 0x24
    5668:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    566a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    566c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    566e:	6b28      	ldr	r0, [r5, #48]	; 0x30
    5670:	6b69      	ldr	r1, [r5, #52]	; 0x34
    5672:	6baa      	ldr	r2, [r5, #56]	; 0x38
    5674:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    5676:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    if (!m_vol->freeChain(dirCluster)) {
    5678:	4631      	mov	r1, r6
    567a:	68a0      	ldr	r0, [r4, #8]
    567c:	f001 fd22 	bl	70c4 <FatPartition::freeChain(unsigned long)>
    5680:	2800      	cmp	r0, #0
    5682:	f43f af62 	beq.w	554a <FatFile::rename(FatFile*, char const*)+0x22>
    sector = m_vol->clusterStartSector(m_firstCluster);
    5686:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5688:	6a23      	ldr	r3, [r4, #32]
    568a:	7982      	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    568c:	3028      	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    568e:	3b02      	subs	r3, #2
    5690:	f850 1c14 	ldr.w	r1, [r0, #-20]
    5694:	4093      	lsls	r3, r2
    return m_cache.prepare(sector, options);
    5696:	2201      	movs	r2, #1
    5698:	4419      	add	r1, r3
    569a:	f004 fa2d 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    569e:	4606      	mov	r6, r0
    56a0:	2800      	cmp	r0, #0
    56a2:	f43f af52 	beq.w	554a <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&dir[1], &entry, sizeof(entry));
    56a6:	466d      	mov	r5, sp
    56a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    56aa:	6230      	str	r0, [r6, #32]
    56ac:	6271      	str	r1, [r6, #36]	; 0x24
    56ae:	62b2      	str	r2, [r6, #40]	; 0x28
    56b0:	62f3      	str	r3, [r6, #44]	; 0x2c
    56b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    56b4:	6330      	str	r0, [r6, #48]	; 0x30
    56b6:	6371      	str	r1, [r6, #52]	; 0x34
    56b8:	63b2      	str	r2, [r6, #56]	; 0x38
    56ba:	63f3      	str	r3, [r6, #60]	; 0x3c
  oldFile.m_firstCluster = 0;
    56bc:	2100      	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    56be:	2202      	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    56c0:	2308      	movs	r3, #8
  if (!oldFile.remove()) {
    56c2:	a811      	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    56c4:	9119      	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    56c6:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    56ca:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    56ce:	f000 fed3 	bl	6478 <FatFile::remove()>
    56d2:	2800      	cmp	r0, #0
    56d4:	f43f af39 	beq.w	554a <FatFile::rename(FatFile*, char const*)+0x22>
  return m_vol->cacheSync();
    56d8:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    56da:	f104 0028 	add.w	r0, r4, #40	; 0x28
    56de:	f004 f9df 	bl	9aa0 <FsCache::sync()>
    56e2:	2800      	cmp	r0, #0
    56e4:	f43f af31 	beq.w	554a <FatFile::rename(FatFile*, char const*)+0x22>
    56e8:	f504 700e 	add.w	r0, r4, #568	; 0x238
    56ec:	f004 f9d8 	bl	9aa0 <FsCache::sync()>
    56f0:	2800      	cmp	r0, #0
    56f2:	f43f af2a 	beq.w	554a <FatFile::rename(FatFile*, char const*)+0x22>
    56f6:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    56f8:	6803      	ldr	r3, [r0, #0]
    56fa:	6a1b      	ldr	r3, [r3, #32]
    56fc:	4798      	blx	r3
    56fe:	e725      	b.n	554c <FatFile::rename(FatFile*, char const*)+0x24>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    5700:	f640 2301 	movw	r3, #2561	; 0xa01
    5704:	4660      	mov	r0, ip
    5706:	f7ff fd2f 	bl	5168 <FatFile::open(FatFile*, char const*, int)>
    570a:	2800      	cmp	r0, #0
    570c:	f47f af63 	bne.w	55d6 <FatFile::rename(FatFile*, char const*)+0xae>
    5710:	e71b      	b.n	554a <FatFile::rename(FatFile*, char const*)+0x22>
    5712:	bf00      	nop

00005714 <FatFile::rmdir()>:
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    5714:	7803      	ldrb	r3, [r0, #0]
    5716:	06da      	lsls	r2, r3, #27
    5718:	d401      	bmi.n	571e <FatFile::rmdir()+0xa>
}
    571a:	2000      	movs	r0, #0
    571c:	4770      	bx	lr
  if (pos == m_curPosition) {
    571e:	6943      	ldr	r3, [r0, #20]
bool FatFile::rmdir() {
    5720:	b530      	push	{r4, r5, lr}
    5722:	4604      	mov	r4, r0
    5724:	b083      	sub	sp, #12
  if (pos == m_curPosition) {
    5726:	b133      	cbz	r3, 5736 <FatFile::rmdir()+0x22>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5728:	7883      	ldrb	r3, [r0, #2]
    m_curCluster = 0;
    572a:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    572c:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    5730:	e9c0 2204 	strd	r2, r2, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5734:	7083      	strb	r3, [r0, #2]
bool FatFile::rmdir() {
    5736:	2300      	movs	r3, #0
    5738:	e00f      	b.n	575a <FatFile::rmdir()+0x46>
    m_curPosition += FS_DIR_SIZE;
    573a:	6163      	str	r3, [r4, #20]
    573c:	68a3      	ldr	r3, [r4, #8]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    573e:	016a      	lsls	r2, r5, #5
    5740:	3338      	adds	r3, #56	; 0x38
    if (dir->name[0] == FAT_NAME_FREE) {
    5742:	5c9a      	ldrb	r2, [r3, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    5744:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    5748:	b1ea      	cbz	r2, 5786 <FatFile::rmdir()+0x72>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    574a:	2ae5      	cmp	r2, #229	; 0xe5
    574c:	d004      	beq.n	5758 <FatFile::rmdir()+0x44>
    574e:	2a2e      	cmp	r2, #46	; 0x2e
    5750:	d002      	beq.n	5758 <FatFile::rmdir()+0x44>
    if (isFileOrSubdir(dir)) {
    5752:	7adb      	ldrb	r3, [r3, #11]
    5754:	071b      	lsls	r3, r3, #28
    5756:	d522      	bpl.n	579e <FatFile::rmdir()+0x8a>
  uint8_t i = (m_curPosition >> 5) & 0XF;
    5758:	6963      	ldr	r3, [r4, #20]
  if (i == 0 || !skipReadOk) {
    575a:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    575e:	f3c3 1543 	ubfx	r5, r3, #5, #4
    m_curPosition += FS_DIR_SIZE;
    5762:	f103 0320 	add.w	r3, r3, #32
  if (i == 0 || !skipReadOk) {
    5766:	d1e8      	bne.n	573a <FatFile::rmdir()+0x26>
    int8_t n = read(&n, 1);
    5768:	2201      	movs	r2, #1
    576a:	f10d 0107 	add.w	r1, sp, #7
    576e:	4620      	mov	r0, r4
    5770:	f7ff fdd0 	bl	5314 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    5774:	b240      	sxtb	r0, r0
    5776:	2801      	cmp	r0, #1
    5778:	d103      	bne.n	5782 <FatFile::rmdir()+0x6e>
    m_curPosition += FS_DIR_SIZE - 1;
    577a:	6963      	ldr	r3, [r4, #20]
    577c:	331f      	adds	r3, #31
    577e:	6163      	str	r3, [r4, #20]
    5780:	e7dc      	b.n	573c <FatFile::rmdir()+0x28>
      if (!getError()) {
    5782:	7863      	ldrb	r3, [r4, #1]
    5784:	b95b      	cbnz	r3, 579e <FatFile::rmdir()+0x8a>
  m_flags |= FILE_FLAG_WRITE;
    5786:	78a3      	ldrb	r3, [r4, #2]
  m_attributes = FILE_ATTR_FILE;
    5788:	2208      	movs	r2, #8
  return remove();
    578a:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    578c:	f043 0302 	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    5790:	7022      	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    5792:	70a3      	strb	r3, [r4, #2]
}
    5794:	b003      	add	sp, #12
    5796:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return remove();
    579a:	f000 be6d 	b.w	6478 <FatFile::remove()>
}
    579e:	2000      	movs	r0, #0
    57a0:	b003      	add	sp, #12
    57a2:	bd30      	pop	{r4, r5, pc}

000057a4 <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    57a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const {return m_attributes;}
    57a8:	7803      	ldrb	r3, [r0, #0]
    57aa:	4604      	mov	r4, r0
  uint32_t tmp = m_curCluster;
    57ac:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
    57ae:	2b00      	cmp	r3, #0
    57b0:	d039      	beq.n	5826 <FatFile::seekSet(unsigned long)+0x82>
    57b2:	460d      	mov	r5, r1
  if (pos == m_curPosition) {
    57b4:	6941      	ldr	r1, [r0, #20]
    57b6:	42a9      	cmp	r1, r5
    57b8:	d042      	beq.n	5840 <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    57ba:	2d00      	cmp	r5, #0
    57bc:	d037      	beq.n	582e <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    57be:	0718      	lsls	r0, r3, #28
    57c0:	d52a      	bpl.n	5818 <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    57c2:	69e2      	ldr	r2, [r4, #28]
    57c4:	42aa      	cmp	r2, r5
    57c6:	d32e      	bcc.n	5826 <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    57c8:	f8d4 c008 	ldr.w	ip, [r4, #8]
    57cc:	1e6e      	subs	r6, r5, #1
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    57ce:	78a2      	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    57d0:	f89c 0006 	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    57d4:	f012 0f40 	tst.w	r2, #64	; 0x40
    57d8:	f100 0009 	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    57dc:	b2c0      	uxtb	r0, r0
    57de:	fa26 f600 	lsr.w	r6, r6, r0
  if (isContiguous()) {
    57e2:	d130      	bne.n	5846 <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    57e4:	1e4a      	subs	r2, r1, #1
    57e6:	40c2      	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    57e8:	b109      	cbz	r1, 57ee <FatFile::seekSet(unsigned long)+0x4a>
    57ea:	4296      	cmp	r6, r2
    57ec:	d22f      	bcs.n	584e <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    57ee:	065b      	lsls	r3, r3, #25
    return m_rootDirStart;
    57f0:	bf4c      	ite	mi
    57f2:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
    57f6:	6a23      	ldrpl	r3, [r4, #32]
    57f8:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    57fa:	f104 0810 	add.w	r8, r4, #16
    57fe:	e006      	b.n	580e <FatFile::seekSet(unsigned long)+0x6a>
    5800:	6921      	ldr	r1, [r4, #16]
    5802:	3e01      	subs	r6, #1
    5804:	68a0      	ldr	r0, [r4, #8]
    5806:	f001 fc3b 	bl	7080 <FatPartition::fatGet(unsigned long, unsigned long*)>
    580a:	2800      	cmp	r0, #0
    580c:	dd0b      	ble.n	5826 <FatFile::seekSet(unsigned long)+0x82>
    580e:	4642      	mov	r2, r8
  while (nNew--) {
    5810:	2e00      	cmp	r6, #0
    5812:	d1f5      	bne.n	5800 <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5814:	78a2      	ldrb	r2, [r4, #2]
    5816:	e00c      	b.n	5832 <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    5818:	069a      	lsls	r2, r3, #26
    581a:	d5d5      	bpl.n	57c8 <FatFile::seekSet(unsigned long)+0x24>
    return m_rootDirEntryCount;
    581c:	68a3      	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    581e:	895b      	ldrh	r3, [r3, #10]
    5820:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
    5824:	d9f6      	bls.n	5814 <FatFile::seekSet(unsigned long)+0x70>
  return false;
    5826:	2000      	movs	r0, #0
  m_curCluster = tmp;
    5828:	6127      	str	r7, [r4, #16]
}
    582a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    582e:	7882      	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    5830:	6105      	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5832:	f022 0220 	bic.w	r2, r2, #32
  return true;
    5836:	2001      	movs	r0, #1
  m_curPosition = pos;
    5838:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    583a:	70a2      	strb	r2, [r4, #2]
}
    583c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    5840:	2001      	movs	r0, #1
}
    5842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    5846:	6a23      	ldr	r3, [r4, #32]
    5848:	4433      	add	r3, r6
    584a:	6123      	str	r3, [r4, #16]
    goto done;
    584c:	e7f1      	b.n	5832 <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    584e:	1ab6      	subs	r6, r6, r2
    5850:	e7d3      	b.n	57fa <FatFile::seekSet(unsigned long)+0x56>
    5852:	bf00      	nop

00005854 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    5854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5858:	460e      	mov	r6, r1
    585a:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    585c:	2100      	movs	r1, #0
    585e:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    5860:	4604      	mov	r4, r0
    5862:	4698      	mov	r8, r3
    5864:	f89d 7018 	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    5868:	f008 fb10 	bl	de8c <memset>
  m_vol = dirFile->m_vol;
    586c:	68b0      	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
    586e:	6a33      	ldr	r3, [r6, #32]
    5870:	f100 0238 	add.w	r2, r0, #56	; 0x38
  m_dirIndex = dirIndex;
    5874:	80a5      	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    5876:	f005 050f 	and.w	r5, r5, #15
    587a:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
    587e:	e9c4 0302 	strd	r0, r3, [r4, #8]

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    5882:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFileOrSubdir(dir)) {
    5884:	070b      	lsls	r3, r1, #28
    5886:	d411      	bmi.n	58ac <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    5888:	f001 0117 	and.w	r1, r1, #23
    588c:	7021      	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    588e:	7ad3      	ldrb	r3, [r2, #11]
    5890:	f013 0f18 	tst.w	r3, #24
    5894:	d102      	bne.n	589c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
    5896:	f041 0108 	orr.w	r1, r1, #8
    589a:	7021      	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
    589c:	f008 0303 	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
    58a0:	70e7      	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    58a2:	2b01      	cmp	r3, #1
    58a4:	d038      	beq.n	5918 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc4>
    58a6:	2b02      	cmp	r3, #2
    58a8:	d006      	beq.n	58b8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    58aa:	b1f3      	cbz	r3, 58ea <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
  m_attributes = FILE_ATTR_CLOSED;
    58ac:	2300      	movs	r3, #0
  return false;
    58ae:	4618      	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    58b0:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    58b2:	70a3      	strb	r3, [r4, #2]
}
    58b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    58b8:	2303      	movs	r3, #3
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    58ba:	7821      	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    58bc:	06cd      	lsls	r5, r1, #27
    58be:	d4f5      	bmi.n	58ac <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    58c0:	07ce      	lsls	r6, r1, #31
    58c2:	d4f3      	bmi.n	58ac <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    58c4:	f008 0108 	and.w	r1, r8, #8
  if (oflag & O_TRUNC) {
    58c8:	f418 6f80 	tst.w	r8, #1024	; 0x400
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    58cc:	ea43 0301 	orr.w	r3, r3, r1
    58d0:	70a3      	strb	r3, [r4, #2]
    return m_sector;
    58d2:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    58d4:	8a95      	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    58d6:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    58d8:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    58da:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
    58de:	d012      	beq.n	5906 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb2>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    58e0:	bb19      	cbnz	r1, 592a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    58e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    58e6:	70a3      	strb	r3, [r4, #2]
    58e8:	e010      	b.n	590c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb8>
      if (oflag & O_TRUNC) {
    58ea:	f418 6f80 	tst.w	r8, #1024	; 0x400
    58ee:	d1dd      	bne.n	58ac <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    58f0:	f008 0308 	and.w	r3, r8, #8
    58f4:	f043 0301 	orr.w	r3, r3, #1
    58f8:	70a3      	strb	r3, [r4, #2]
    58fa:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    58fc:	8a93      	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    58fe:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    5900:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    5902:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    5906:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    5908:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    590a:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    590c:	f418 4f80 	tst.w	r8, #16384	; 0x4000
    5910:	d104      	bne.n	591c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc8>
  return true;
    5912:	2001      	movs	r0, #1
}
    5914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    5918:	2302      	movs	r3, #2
    591a:	e7ce      	b.n	58ba <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    591c:	69e1      	ldr	r1, [r4, #28]
    591e:	4620      	mov	r0, r4
    5920:	f7ff ff40 	bl	57a4 <FatFile::seekSet(unsigned long)>
    5924:	2800      	cmp	r0, #0
    5926:	d1f4      	bne.n	5912 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbe>
    5928:	e7c0      	b.n	58ac <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    592a:	f001 fbcb 	bl	70c4 <FatPartition::freeChain(unsigned long)>
    592e:	2800      	cmp	r0, #0
    5930:	d0bc      	beq.n	58ac <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5932:	78a3      	ldrb	r3, [r4, #2]
    5934:	e7d5      	b.n	58e2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8e>
    5936:	bf00      	nop

00005938 <FatFile::openNext(FatFile*, int)>:
  bool isOpen() const {return m_attributes;}
    5938:	7803      	ldrb	r3, [r0, #0]
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    593a:	2b00      	cmp	r3, #0
    593c:	d145      	bne.n	59ca <FatFile::openNext(FatFile*, int)+0x92>
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    593e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    5942:	780b      	ldrb	r3, [r1, #0]
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    5944:	b084      	sub	sp, #16
    5946:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    5948:	f013 0f70 	tst.w	r3, #112	; 0x70
    594c:	d030      	beq.n	59b0 <FatFile::openNext(FatFile*, int)+0x78>
  uint32_t curPosition() const {return m_curPosition;}
    594e:	694b      	ldr	r3, [r1, #20]
    5950:	f013 051f 	ands.w	r5, r3, #31
    5954:	d12c      	bne.n	59b0 <FatFile::openNext(FatFile*, int)+0x78>
    5956:	4606      	mov	r6, r0
    5958:	4690      	mov	r8, r2
    595a:	46a9      	mov	r9, r5
    int8_t n = read(&n, 1);
    595c:	2201      	movs	r2, #1
    595e:	f10d 010f 	add.w	r1, sp, #15
    5962:	4620      	mov	r0, r4
  uint8_t i = (m_curPosition >> 5) & 0XF;
    5964:	f3c3 1a43 	ubfx	sl, r3, #5, #4
    index = dirFile->curPosition()/FS_DIR_SIZE;
    5968:	095f      	lsrs	r7, r3, #5
    int8_t n = read(&n, 1);
    596a:	f7ff fcd3 	bl	5314 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    596e:	b240      	sxtb	r0, r0
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    5970:	ea4f 124a 	mov.w	r2, sl, lsl #5
    if  (n != 1) {
    5974:	2801      	cmp	r0, #1
    5976:	d11b      	bne.n	59b0 <FatFile::openNext(FatFile*, int)+0x78>
    m_curPosition += FS_DIR_SIZE - 1;
    5978:	6963      	ldr	r3, [r4, #20]
    return m_buffer;
    597a:	68a1      	ldr	r1, [r4, #8]
    597c:	331f      	adds	r3, #31
    597e:	f101 0c38 	add.w	ip, r1, #56	; 0x38
    5982:	6163      	str	r3, [r4, #20]
    if (dir->name[0] == FAT_NAME_FREE) {
    5984:	f81c 2002 	ldrb.w	r2, [ip, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    5988:	eb0c 1c4a 	add.w	ip, ip, sl, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    598c:	b182      	cbz	r2, 59b0 <FatFile::openNext(FatFile*, int)+0x78>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    598e:	2a2e      	cmp	r2, #46	; 0x2e
    5990:	d012      	beq.n	59b8 <FatFile::openNext(FatFile*, int)+0x80>
    5992:	f1a2 00e5 	sub.w	r0, r2, #229	; 0xe5
    5996:	fab0 f080 	clz	r0, r0
    599a:	0940      	lsrs	r0, r0, #5
    599c:	b960      	cbnz	r0, 59b8 <FatFile::openNext(FatFile*, int)+0x80>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    599e:	f89c 100b 	ldrb.w	r1, [ip, #11]
    } else if (isFileOrSubdir(dir)) {
    59a2:	f011 0e08 	ands.w	lr, r1, #8
    59a6:	d012      	beq.n	59ce <FatFile::openNext(FatFile*, int)+0x96>
    } else if (isLongName(dir)) {
    59a8:	290f      	cmp	r1, #15
    59aa:	d007      	beq.n	59bc <FatFile::openNext(FatFile*, int)+0x84>
      lfnOrd = 0;
    59ac:	4605      	mov	r5, r0
    59ae:	e7d5      	b.n	595c <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    59b0:	2000      	movs	r0, #0
}
    59b2:	b004      	add	sp, #16
    59b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
    59b8:	2500      	movs	r5, #0
    59ba:	e7cf      	b.n	595c <FatFile::openNext(FatFile*, int)+0x24>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    59bc:	0651      	lsls	r1, r2, #25
    59be:	d5cd      	bpl.n	595c <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    59c0:	f002 051f 	and.w	r5, r2, #31
        checksum = ldir->checksum;
    59c4:	f89c 900d 	ldrb.w	r9, [ip, #13]
    59c8:	e7c8      	b.n	595c <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    59ca:	2000      	movs	r0, #0
}
    59cc:	4770      	bx	lr
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    59ce:	b185      	cbz	r5, 59f2 <FatFile::openNext(FatFile*, int)+0xba>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    59d0:	f10c 010a 	add.w	r1, ip, #10
    59d4:	e001      	b.n	59da <FatFile::openNext(FatFile*, int)+0xa2>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    59d6:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
    59da:	ea4f 13ce 	mov.w	r3, lr, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    59de:	4561      	cmp	r1, ip
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    59e0:	ea43 035e 	orr.w	r3, r3, lr, lsr #1
    59e4:	fa52 f383 	uxtab	r3, r2, r3
    59e8:	fa5f fe83 	uxtb.w	lr, r3
    for (uint8_t i = 0; i < 11; i++) {
    59ec:	d1f3      	bne.n	59d6 <FatFile::openNext(FatFile*, int)+0x9e>
    59ee:	45ce      	cmp	lr, r9
    59f0:	d1de      	bne.n	59b0 <FatFile::openNext(FatFile*, int)+0x78>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    59f2:	4643      	mov	r3, r8
    59f4:	b2ba      	uxth	r2, r7
    59f6:	4621      	mov	r1, r4
    59f8:	4630      	mov	r0, r6
    59fa:	9500      	str	r5, [sp, #0]
    59fc:	f7ff ff2a 	bl	5854 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    5a00:	e7d7      	b.n	59b2 <FatFile::openNext(FatFile*, int)+0x7a>
    5a02:	bf00      	nop

00005a04 <FatFile::sync()>:
  if (!isOpen()) {
    5a04:	7803      	ldrb	r3, [r0, #0]
    5a06:	b10b      	cbz	r3, 5a0c <FatFile::sync()+0x8>
    5a08:	f7ff b968 	b.w	4cdc <FatFile::sync() [clone .part.0]>
}
    5a0c:	2001      	movs	r0, #1
    5a0e:	4770      	bx	lr

00005a10 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    5a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a14:	460e      	mov	r6, r1
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    5a16:	7801      	ldrb	r1, [r0, #0]
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    5a18:	b082      	sub	sp, #8
      || second > 59) {
    5a1a:	0709      	lsls	r1, r1, #28
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    5a1c:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
    5a20:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
    5a24:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
    5a28:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
      || second > 59) {
    5a2c:	d518      	bpl.n	5a60 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || year > 2107
    5a2e:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
    5a32:	b294      	uxth	r4, r2
    5a34:	2c7f      	cmp	r4, #127	; 0x7f
    5a36:	d813      	bhi.n	5a60 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || month > 12
    5a38:	1e5a      	subs	r2, r3, #1
    5a3a:	9301      	str	r3, [sp, #4]
    5a3c:	2a0b      	cmp	r2, #11
    5a3e:	d80f      	bhi.n	5a60 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || day > 31
    5a40:	1e7a      	subs	r2, r7, #1
    5a42:	2a1e      	cmp	r2, #30
    5a44:	d80c      	bhi.n	5a60 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || second > 59) {
    5a46:	f1ba 0f3b 	cmp.w	sl, #59	; 0x3b
    5a4a:	bf98      	it	ls
    5a4c:	f1b9 0f17 	cmpls.w	r9, #23
    5a50:	d806      	bhi.n	5a60 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    5a52:	f1b8 0f3b 	cmp.w	r8, #59	; 0x3b
    5a56:	d803      	bhi.n	5a60 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    5a58:	4605      	mov	r5, r0
  if (!isOpen()) {
    5a5a:	f7ff f93f 	bl	4cdc <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    5a5e:	b918      	cbnz	r0, 5a68 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x58>
  }
  return m_vol->cacheSync();

 fail:
  return false;
}
    5a60:	2000      	movs	r0, #0
    5a62:	b002      	add	sp, #8
    5a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return m_cache.prepare(sector, options);
    5a68:	68a8      	ldr	r0, [r5, #8]
    5a6a:	2201      	movs	r2, #1
    5a6c:	69a9      	ldr	r1, [r5, #24]
    5a6e:	3028      	adds	r0, #40	; 0x28
    5a70:	f004 f842 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5a74:	2800      	cmp	r0, #0
    5a76:	d0f3      	beq.n	5a60 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    5a78:	9b01      	ldr	r3, [sp, #4]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    5a7a:	ea4f 0258 	mov.w	r2, r8, lsr #1
  return dir + (m_dirIndex & 0XF);
    5a7e:	88a9      	ldrh	r1, [r5, #4]
         year << 9 | month << 5 | day;
    5a80:	ea47 1343 	orr.w	r3, r7, r3, lsl #5
  if (flags & T_ACCESS) {
    5a84:	07f7      	lsls	r7, r6, #31
  return dir + (m_dirIndex & 0XF);
    5a86:	f001 010f 	and.w	r1, r1, #15
         hour << 11 | minute << 5 | second >> 1;
    5a8a:	ea42 124a 	orr.w	r2, r2, sl, lsl #5
         year << 9 | month << 5 | day;
    5a8e:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
    5a92:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    5a96:	b29b      	uxth	r3, r3
         hour << 11 | minute << 5 | second >> 1;
    5a98:	ea42 22c9 	orr.w	r2, r2, r9, lsl #11
  *reinterpret_cast<uint16_t*>(dst) = src;
    5a9c:	bf48      	it	mi
    5a9e:	8243      	strhmi	r3, [r0, #18]
  if (flags & T_CREATE) {
    5aa0:	07b4      	lsls	r4, r6, #30
    5aa2:	b292      	uxth	r2, r2
    5aa4:	d508      	bpl.n	5ab8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xa8>
    dir->createTimeMs = second & 1 ? 100 : 0;
    5aa6:	f018 0801 	ands.w	r8, r8, #1
    5aaa:	8203      	strh	r3, [r0, #16]
    5aac:	81c2      	strh	r2, [r0, #14]
    5aae:	bf18      	it	ne
    5ab0:	f04f 0864 	movne.w	r8, #100	; 0x64
    5ab4:	f880 800d 	strb.w	r8, [r0, #13]
  if (flags & T_WRITE) {
    5ab8:	0771      	lsls	r1, r6, #29
    5aba:	d501      	bpl.n	5ac0 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb0>
    5abc:	8303      	strh	r3, [r0, #24]
    5abe:	82c2      	strh	r2, [r0, #22]
  return m_vol->cacheSync();
    5ac0:	68ac      	ldr	r4, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5ac2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    5ac6:	f003 ffeb 	bl	9aa0 <FsCache::sync()>
    5aca:	2800      	cmp	r0, #0
    5acc:	d0c8      	beq.n	5a60 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    5ace:	f504 700e 	add.w	r0, r4, #568	; 0x238
    5ad2:	f003 ffe5 	bl	9aa0 <FsCache::sync()>
    5ad6:	2800      	cmp	r0, #0
    5ad8:	d0c2      	beq.n	5a60 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    5ada:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    5adc:	6803      	ldr	r3, [r0, #0]
    5ade:	6a1b      	ldr	r3, [r3, #32]
}
    5ae0:	b002      	add	sp, #8
    5ae2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5ae6:	4718      	bx	r3

00005ae8 <FatFile::truncate()>:
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    5ae8:	7883      	ldrb	r3, [r0, #2]
    5aea:	079b      	lsls	r3, r3, #30
    5aec:	d527      	bpl.n	5b3e <FatFile::truncate()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    5aee:	6a03      	ldr	r3, [r0, #32]
bool FatFile::truncate() {
    5af0:	b510      	push	{r4, lr}
    5af2:	4604      	mov	r4, r0
    5af4:	b082      	sub	sp, #8
  if (m_firstCluster == 0) {
    5af6:	b1ab      	cbz	r3, 5b24 <FatFile::truncate()+0x3c>
      return true;
  }
  if (m_curCluster) {
    5af8:	6901      	ldr	r1, [r0, #16]
    5afa:	bb11      	cbnz	r1, 5b42 <FatFile::truncate()+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    5afc:	9301      	str	r3, [sp, #4]
    m_firstCluster = 0;
    5afe:	6201      	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    5b00:	4619      	mov	r1, r3
    5b02:	68a0      	ldr	r0, [r4, #8]
    5b04:	f001 fade 	bl	70c4 <FatPartition::freeChain(unsigned long)>
    5b08:	b1b0      	cbz	r0, 5b38 <FatFile::truncate()+0x50>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5b0a:	78a3      	ldrb	r3, [r4, #2]
  m_fileSize = m_curPosition;
    5b0c:	6961      	ldr	r1, [r4, #20]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5b0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  if (!isOpen()) {
    5b12:	7822      	ldrb	r2, [r4, #0]
  m_fileSize = m_curPosition;
    5b14:	61e1      	str	r1, [r4, #28]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5b16:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    5b18:	b122      	cbz	r2, 5b24 <FatFile::truncate()+0x3c>
    5b1a:	4620      	mov	r0, r4
    5b1c:	f7ff f8de 	bl	4cdc <FatFile::sync() [clone .part.0]>
  return sync();

 fail:
  return false;
}
    5b20:	b002      	add	sp, #8
    5b22:	bd10      	pop	{r4, pc}
      return true;
    5b24:	2001      	movs	r0, #1
}
    5b26:	b002      	add	sp, #8
    5b28:	bd10      	pop	{r4, pc}
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    5b2a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    5b2e:	6921      	ldr	r1, [r4, #16]
    5b30:	68a0      	ldr	r0, [r4, #8]
    5b32:	f001 fab7 	bl	70a4 <FatPartition::fatPut(unsigned long, unsigned long)>
      if (!m_vol->fatPutEOC(m_curCluster)) {
    5b36:	b968      	cbnz	r0, 5b54 <FatFile::truncate()+0x6c>
  return false;
    5b38:	2000      	movs	r0, #0
}
    5b3a:	b002      	add	sp, #8
    5b3c:	bd10      	pop	{r4, pc}
  return false;
    5b3e:	2000      	movs	r0, #0
}
    5b40:	4770      	bx	lr
    toFree = 0;
    5b42:	2300      	movs	r3, #0
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    5b44:	aa01      	add	r2, sp, #4
    5b46:	6880      	ldr	r0, [r0, #8]
    toFree = 0;
    5b48:	9301      	str	r3, [sp, #4]
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    5b4a:	f001 fa99 	bl	7080 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    5b4e:	2800      	cmp	r0, #0
    5b50:	dbf2      	blt.n	5b38 <FatFile::truncate()+0x50>
    if (fg) {
    5b52:	d1ea      	bne.n	5b2a <FatFile::truncate()+0x42>
  if (toFree) {
    5b54:	9b01      	ldr	r3, [sp, #4]
    5b56:	2b00      	cmp	r3, #0
    5b58:	d0d7      	beq.n	5b0a <FatFile::truncate()+0x22>
    5b5a:	e7d1      	b.n	5b00 <FatFile::truncate()+0x18>

00005b5c <FatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    5b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    5b60:	7883      	ldrb	r3, [r0, #2]
    5b62:	4605      	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    5b64:	079c      	lsls	r4, r3, #30
    5b66:	d577      	bpl.n	5c58 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    5b68:	4688      	mov	r8, r1
    5b6a:	0719      	lsls	r1, r3, #28
    5b6c:	4691      	mov	r9, r2
    5b6e:	f100 80b5 	bmi.w	5cdc <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    5b72:	696b      	ldr	r3, [r5, #20]
    5b74:	eb13 0209 	adds.w	r2, r3, r9
    5b78:	d26e      	bcs.n	5c58 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    5b7a:	f1b9 0f00 	cmp.w	r9, #0
    5b7e:	d040      	beq.n	5c02 <FatFile::write(void const*, unsigned int)+0xa6>
    5b80:	464f      	mov	r7, r9
    m_status = 0;
    5b82:	f04f 0a00 	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    5b86:	68a8      	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    5b88:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    5b8c:	6929      	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
    5b8e:	7944      	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    5b90:	ea14 2453 	ands.w	r4, r4, r3, lsr #9
    5b94:	d13f      	bne.n	5c16 <FatFile::write(void const*, unsigned int)+0xba>
    5b96:	2e00      	cmp	r6, #0
    5b98:	d13d      	bne.n	5c16 <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
    5b9a:	2900      	cmp	r1, #0
    5b9c:	d06e      	beq.n	5c7c <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    5b9e:	78aa      	ldrb	r2, [r5, #2]
    5ba0:	0652      	lsls	r2, r2, #25
    5ba2:	d576      	bpl.n	5c92 <FatFile::write(void const*, unsigned int)+0x136>
    5ba4:	69ea      	ldr	r2, [r5, #28]
    5ba6:	429a      	cmp	r2, r3
    5ba8:	d973      	bls.n	5c92 <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
    5baa:	3101      	adds	r1, #1
    5bac:	6129      	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5bae:	3902      	subs	r1, #2
    5bb0:	7982      	ldrb	r2, [r0, #6]
    5bb2:	6943      	ldr	r3, [r0, #20]
    5bb4:	4091      	lsls	r1, r2
    5bb6:	4419      	add	r1, r3
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    5bb8:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    5bbc:	d353      	bcc.n	5c66 <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    5bbe:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    5bc2:	d370      	bcc.n	5ca6 <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    5bc4:	7903      	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    5bc6:	0a7a      	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    5bc8:	1b1b      	subs	r3, r3, r4
    5bca:	4293      	cmp	r3, r2
    5bcc:	bf28      	it	cs
    5bce:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    5bd0:	6b42      	ldr	r2, [r0, #52]	; 0x34
    5bd2:	428a      	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    5bd4:	ea4f 2443 	mov.w	r4, r3, lsl #9
    5bd8:	d307      	bcc.n	5bea <FatFile::write(void const*, unsigned int)+0x8e>
    5bda:	185e      	adds	r6, r3, r1
    5bdc:	42b2      	cmp	r2, r6
    5bde:	d204      	bcs.n	5bea <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
    5be0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
    5be4:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    5be8:	6342      	str	r2, [r0, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    5bea:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    5bec:	4642      	mov	r2, r8
    5bee:	6806      	ldr	r6, [r0, #0]
    5bf0:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    5bf2:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    5bf4:	b380      	cbz	r0, 5c58 <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5bf6:	696b      	ldr	r3, [r5, #20]
  while (nToWrite) {
    5bf8:	1b3f      	subs	r7, r7, r4
    src += n;
    5bfa:	44a0      	add	r8, r4
    m_curPosition += n;
    5bfc:	4423      	add	r3, r4
    5bfe:	616b      	str	r3, [r5, #20]
  while (nToWrite) {
    5c00:	d1c1      	bne.n	5b86 <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    5c02:	69ea      	ldr	r2, [r5, #28]
    5c04:	429a      	cmp	r2, r3
    5c06:	d276      	bcs.n	5cf6 <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5c08:	78aa      	ldrb	r2, [r5, #2]
    5c0a:	4648      	mov	r0, r9
    m_fileSize = m_curPosition;
    5c0c:	61eb      	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5c0e:	f062 037f 	orn	r3, r2, #127	; 0x7f
    5c12:	70ab      	strb	r3, [r5, #2]
    5c14:	e025      	b.n	5c62 <FatFile::write(void const*, unsigned int)+0x106>
    5c16:	7982      	ldrb	r2, [r0, #6]
    5c18:	3902      	subs	r1, #2
    5c1a:	6943      	ldr	r3, [r0, #20]
    5c1c:	4091      	lsls	r1, r2
    5c1e:	4419      	add	r1, r3
                      + sectorOfCluster;
    5c20:	4421      	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    5c22:	2e00      	cmp	r6, #0
    5c24:	d0c8      	beq.n	5bb8 <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
    5c26:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
    5c2a:	2201      	movs	r2, #1
    5c2c:	42bc      	cmp	r4, r7
    5c2e:	bf28      	it	cs
    5c30:	463c      	movcs	r4, r7
    return m_cache.prepare(sector, options);
    5c32:	3028      	adds	r0, #40	; 0x28
    5c34:	f003 ff60 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    5c38:	b170      	cbz	r0, 5c58 <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
    5c3a:	4430      	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5c3c:	4426      	add	r6, r4
      memcpy(dst, src, n);
    5c3e:	4622      	mov	r2, r4
    5c40:	4641      	mov	r1, r8
    5c42:	f005 fd75 	bl	b730 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5c46:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    5c4a:	68a8      	ldr	r0, [r5, #8]
    5c4c:	d1d3      	bne.n	5bf6 <FatFile::write(void const*, unsigned int)+0x9a>
    return m_cache.sync();
    5c4e:	3028      	adds	r0, #40	; 0x28
    5c50:	f003 ff26 	bl	9aa0 <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    5c54:	2800      	cmp	r0, #0
    5c56:	d1ce      	bne.n	5bf6 <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    5c58:	786b      	ldrb	r3, [r5, #1]
  return 0;
    5c5a:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    5c5c:	f043 0301 	orr.w	r3, r3, #1
    5c60:	706b      	strb	r3, [r5, #1]
}
    5c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    5c66:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
    5c6a:	696a      	ldr	r2, [r5, #20]
    5c6c:	69eb      	ldr	r3, [r5, #28]
    5c6e:	42bc      	cmp	r4, r7
    5c70:	bf28      	it	cs
    5c72:	463c      	movcs	r4, r7
    5c74:	429a      	cmp	r2, r3
    5c76:	d305      	bcc.n	5c84 <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    5c78:	2205      	movs	r2, #5
    5c7a:	e7da      	b.n	5c32 <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
    5c7c:	6a29      	ldr	r1, [r5, #32]
    5c7e:	b321      	cbz	r1, 5cca <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
    5c80:	6129      	str	r1, [r5, #16]
    5c82:	e794      	b.n	5bae <FatFile::write(void const*, unsigned int)+0x52>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    5c84:	78ab      	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    5c86:	f013 0f20 	tst.w	r3, #32
    5c8a:	bf14      	ite	ne
    5c8c:	2205      	movne	r2, #5
    5c8e:	2201      	moveq	r2, #1
    5c90:	e7cf      	b.n	5c32 <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5c92:	f105 0210 	add.w	r2, r5, #16
    5c96:	f001 f9f3 	bl	7080 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    5c9a:	2800      	cmp	r0, #0
    5c9c:	dbdc      	blt.n	5c58 <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
    5c9e:	d024      	beq.n	5cea <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5ca0:	68a8      	ldr	r0, [r5, #8]
    5ca2:	6929      	ldr	r1, [r5, #16]
    5ca4:	e783      	b.n	5bae <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
    5ca6:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5ca8:	428b      	cmp	r3, r1
    5caa:	d104      	bne.n	5cb6 <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
    5cac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
    5cb0:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    5cb4:	6343      	str	r3, [r0, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
    5cb6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    5cb8:	4642      	mov	r2, r8
    5cba:	6803      	ldr	r3, [r0, #0]
    5cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5cbe:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    5cc0:	2800      	cmp	r0, #0
    5cc2:	d0c9      	beq.n	5c58 <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
    5cc4:	f44f 7400 	mov.w	r4, #512	; 0x200
    5cc8:	e795      	b.n	5bf6 <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
    5cca:	4628      	mov	r0, r5
    5ccc:	f7ff f860 	bl	4d90 <FatFile::addCluster()>
    5cd0:	2800      	cmp	r0, #0
    5cd2:	d0c1      	beq.n	5c58 <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
    5cd4:	6929      	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5cd6:	68a8      	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
    5cd8:	6229      	str	r1, [r5, #32]
    5cda:	e768      	b.n	5bae <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
    5cdc:	69c1      	ldr	r1, [r0, #28]
    5cde:	f7ff fd61 	bl	57a4 <FatFile::seekSet(unsigned long)>
    5ce2:	2800      	cmp	r0, #0
    5ce4:	f47f af45 	bne.w	5b72 <FatFile::write(void const*, unsigned int)+0x16>
    5ce8:	e7b6      	b.n	5c58 <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
    5cea:	4628      	mov	r0, r5
    5cec:	f7ff f850 	bl	4d90 <FatFile::addCluster()>
    5cf0:	2800      	cmp	r0, #0
    5cf2:	d1d5      	bne.n	5ca0 <FatFile::write(void const*, unsigned int)+0x144>
    5cf4:	e7b0      	b.n	5c58 <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
    5cf6:	4b05      	ldr	r3, [pc, #20]	; (5d0c <FatFile::write(void const*, unsigned int)+0x1b0>)
    5cf8:	681b      	ldr	r3, [r3, #0]
    5cfa:	b12b      	cbz	r3, 5d08 <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5cfc:	78ab      	ldrb	r3, [r5, #2]
    5cfe:	4648      	mov	r0, r9
    5d00:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5d04:	70ab      	strb	r3, [r5, #2]
    5d06:	e7ac      	b.n	5c62 <FatFile::write(void const*, unsigned int)+0x106>
    5d08:	4648      	mov	r0, r9
    5d0a:	e7aa      	b.n	5c62 <FatFile::write(void const*, unsigned int)+0x106>
    5d0c:	200033f8 	.word	0x200033f8

00005d10 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    5d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    5d14:	4684      	mov	ip, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    5d16:	b08d      	sub	sp, #52	; 0x34
    5d18:	4614      	mov	r4, r2
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    5d1a:	6815      	ldr	r5, [r2, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    5d1c:	4698      	mov	r8, r3
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    5d1e:	4606      	mov	r6, r0
    5d20:	4689      	mov	r9, r1
  FatFile dir = *this;
    5d22:	af03      	add	r7, sp, #12
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    5d24:	9301      	str	r3, [sp, #4]
    ls = 0;  // lowSurrogate
    5d26:	f04f 0e00 	mov.w	lr, #0
  FatFile dir = *this;
    5d2a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    5d2e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    5d30:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    5d34:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    5d36:	f8dc 3000 	ldr.w	r3, [ip]
    next = begin;
    5d3a:	6065      	str	r5, [r4, #4]
    5d3c:	603b      	str	r3, [r7, #0]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    5d3e:	4643      	mov	r3, r8
    ls = 0;  // lowSurrogate
    5d40:	f8a4 e00c 	strh.w	lr, [r4, #12]
    5d44:	2b00      	cmp	r3, #0
    5d46:	d03f      	beq.n	5dc8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
    5d48:	f04f 0a01 	mov.w	sl, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    5d4c:	eba9 010a 	sub.w	r1, r9, sl
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    5d50:	a803      	add	r0, sp, #12
    5d52:	b289      	uxth	r1, r1
    5d54:	0149      	lsls	r1, r1, #5
    5d56:	f7ff fd25 	bl	57a4 <FatFile::seekSet(unsigned long)>
    5d5a:	b350      	cbz	r0, 5db2 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    5d5c:	2100      	movs	r1, #0
    5d5e:	a803      	add	r0, sp, #12
    5d60:	f7ff fbc0 	bl	54e4 <FatFile::readDirCache(bool)>
    if (!ldir) {
    5d64:	4607      	mov	r7, r0
    5d66:	b320      	cbz	r0, 5db2 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    5d68:	2500      	movs	r5, #0
    5d6a:	e00d      	b.n	5d88 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x78>
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
    5d6c:	f003 ff02 	bl	9b74 <FsName::get16()>
    5d70:	4680      	mov	r8, r0
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
    5d72:	4658      	mov	r0, fp
    5d74:	f004 f812 	bl	9d9c <toUpcase(unsigned short)>
    5d78:	4683      	mov	fp, r0
    5d7a:	4640      	mov	r0, r8
    5d7c:	f004 f80e 	bl	9d9c <toUpcase(unsigned short)>
    5d80:	4583      	cmp	fp, r0
    5d82:	d116      	bne.n	5db2 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    for (uint8_t i = 0; i < 13; i++) {
    5d84:	2d0d      	cmp	r5, #13
    5d86:	d018      	beq.n	5dba <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xaa>
      uint16_t u = getLfnChar(ldir, i);
    5d88:	b2ea      	uxtb	r2, r5
    5d8a:	4639      	mov	r1, r7
    5d8c:	4630      	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
    5d8e:	3501      	adds	r5, #1
      uint16_t u = getLfnChar(ldir, i);
    5d90:	f000 fee4 	bl	6b5c <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    5d94:	89a3      	ldrh	r3, [r4, #12]
    5d96:	4683      	mov	fp, r0
      uint16_t cp = fname->get16();
    5d98:	4620      	mov	r0, r4
    5d9a:	2b00      	cmp	r3, #0
    5d9c:	d1e6      	bne.n	5d6c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
    5d9e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    5da2:	4293      	cmp	r3, r2
    5da4:	d1e2      	bne.n	5d6c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        return u == 0;
    5da6:	fabb f08b 	clz	r0, fp
    5daa:	0940      	lsrs	r0, r0, #5
  }
  return true;

 fail:
  return false;
}
    5dac:	b00d      	add	sp, #52	; 0x34
    5dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    5db2:	2000      	movs	r0, #0
}
    5db4:	b00d      	add	sp, #52	; 0x34
    5db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    5dba:	f10a 0a01 	add.w	sl, sl, #1
    5dbe:	9b01      	ldr	r3, [sp, #4]
    5dc0:	fa5f fa8a 	uxtb.w	sl, sl
    5dc4:	4553      	cmp	r3, sl
    5dc6:	d2c1      	bcs.n	5d4c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x3c>
  return true;
    5dc8:	2001      	movs	r0, #1
    5dca:	e7ef      	b.n	5dac <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x9c>

00005dcc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    5dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    5dd0:	4607      	mov	r7, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    5dd2:	b08d      	sub	sp, #52	; 0x34
    5dd4:	4616      	mov	r6, r2
    5dd6:	469a      	mov	sl, r3
  FatFile dir = *this;
    5dd8:	f10d 0c0c 	add.w	ip, sp, #12
    5ddc:	f102 0415 	add.w	r4, r2, #21
    5de0:	f102 0520 	add.w	r5, r2, #32
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    5de4:	9101      	str	r1, [sp, #4]
    uint8_t sum = 0;
    5de6:	f04f 0900 	mov.w	r9, #0
  FatFile dir = *this;
    5dea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    5dec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    5df0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    5df2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    5df6:	683b      	ldr	r3, [r7, #0]
    5df8:	f8cc 3000 	str.w	r3, [ip]
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    5dfc:	ea4f 13c9 	mov.w	r3, r9, lsl #7
    5e00:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    5e04:	ea43 0359 	orr.w	r3, r3, r9, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    5e08:	42a5      	cmp	r5, r4
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    5e0a:	fa52 f383 	uxtab	r3, r2, r3
    5e0e:	fa5f f983 	uxtb.w	r9, r3
    for (uint8_t i = 0; i < 11; i++) {
    5e12:	d1f3      	bne.n	5dfc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x30>
    next = begin;
    5e14:	6833      	ldr	r3, [r6, #0]
    ls = 0;  // lowSurrogate
    5e16:	f04f 0800 	mov.w	r8, #0
    next = begin;
    5e1a:	6073      	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    5e1c:	f8a6 800c 	strh.w	r8, [r6, #12]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    5e20:	f1ba 0f00 	cmp.w	sl, #0
    5e24:	d04e      	beq.n	5ec4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xf8>
    5e26:	2701      	movs	r7, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    5e28:	9b01      	ldr	r3, [sp, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    5e2a:	a803      	add	r0, sp, #12
    5e2c:	1bd9      	subs	r1, r3, r7
    5e2e:	b289      	uxth	r1, r1
    5e30:	0149      	lsls	r1, r1, #5
    5e32:	f7ff fcb7 	bl	57a4 <FatFile::seekSet(unsigned long)>
    5e36:	2800      	cmp	r0, #0
    5e38:	d055      	beq.n	5ee6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    5e3a:	2100      	movs	r1, #0
    5e3c:	a803      	add	r0, sp, #12
    5e3e:	f7ff fb51 	bl	54e4 <FatFile::readDirCache(bool)>
    if (!ldir) {
    5e42:	2800      	cmp	r0, #0
    5e44:	d04f      	beq.n	5ee6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    5e46:	9a05      	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    5e48:	4557      	cmp	r7, sl
    5e4a:	f100 0b01 	add.w	fp, r0, #1
    5e4e:	f04f 0401 	mov.w	r4, #1
    m_status |= CACHE_STATUS_DIRTY;
    5e52:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    5e56:	f04f 0500 	mov.w	r5, #0
    5e5a:	f043 0301 	orr.w	r3, r3, #1
    5e5e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    5e62:	f04f 030f 	mov.w	r3, #15
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    5e66:	bf0c      	ite	eq
    5e68:	f047 0240 	orreq.w	r2, r7, #64	; 0x40
    5e6c:	463a      	movne	r2, r7
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    5e6e:	72c3      	strb	r3, [r0, #11]
    ldir->mustBeZero1 = 0;
    5e70:	f04f 0300 	mov.w	r3, #0
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    5e74:	7002      	strb	r2, [r0, #0]
    ldir->mustBeZero1 = 0;
    5e76:	7303      	strb	r3, [r0, #12]
    5e78:	f04f 0300 	mov.w	r3, #0
    ldir->checksum = checksum;
    5e7c:	f880 900d 	strb.w	r9, [r0, #13]
    5e80:	8343      	strh	r3, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    5e82:	e006      	b.n	5e92 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
    5e84:	f8ab 0000 	strh.w	r0, [fp]
    5e88:	3401      	adds	r4, #1
    5e8a:	3501      	adds	r5, #1
    5e8c:	f10b 0b02 	add.w	fp, fp, #2
    5e90:	b2e4      	uxtb	r4, r4
    return !ls && next == end;
    5e92:	89b0      	ldrh	r0, [r6, #12]
    5e94:	b918      	cbnz	r0, 5e9e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd2>
    5e96:	e9d6 2301 	ldrd	r2, r3, [r6, #4]
    5e9a:	429a      	cmp	r2, r3
    5e9c:	d016      	beq.n	5ecc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x100>
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
    5e9e:	4630      	mov	r0, r6
    5ea0:	f003 fe68 	bl	9b74 <FsName::get16()>
  if (i < 5) {
    5ea4:	2d04      	cmp	r5, #4
    5ea6:	b2eb      	uxtb	r3, r5
    5ea8:	d9ec      	bls.n	5e84 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb8>
  } else if (i < 11) {
    5eaa:	2b0a      	cmp	r3, #10
    5eac:	d802      	bhi.n	5eb4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xe8>
    5eae:	f8ab 0003 	strh.w	r0, [fp, #3]
}
    5eb2:	e7e9      	b.n	5e88 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
    for (uint8_t i = 0; i < 13; i++) {
    5eb4:	2c0d      	cmp	r4, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
    5eb6:	f8ab 0005 	strh.w	r0, [fp, #5]
    5eba:	d1e5      	bne.n	5e88 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    5ebc:	3701      	adds	r7, #1
    5ebe:	b2ff      	uxtb	r7, r7
    5ec0:	45ba      	cmp	sl, r7
    5ec2:	d2b1      	bcs.n	5e28 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    5ec4:	2001      	movs	r0, #1

 fail:
  return false;
}
    5ec6:	b00d      	add	sp, #52	; 0x34
    5ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cp = fc++ ? 0XFFFF : 0;
    5ecc:	f1b8 0f00 	cmp.w	r8, #0
    5ed0:	d006      	beq.n	5ee0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    5ed2:	f108 0801 	add.w	r8, r8, #1
    5ed6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5eda:	fa5f f888 	uxtb.w	r8, r8
    5ede:	e7e1      	b.n	5ea4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
    5ee0:	f04f 0801 	mov.w	r8, #1
    5ee4:	e7de      	b.n	5ea4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
  return false;
    5ee6:	2000      	movs	r0, #0
}
    5ee8:	b00d      	add	sp, #52	; 0x34
    5eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5eee:	bf00      	nop

00005ef0 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    5ef0:	4602      	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    5ef2:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    5ef6:	f852 3b16 	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    5efa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    5efe:	f8c0 1016 	str.w	r1, [r0, #22]
bool FatFile::makeSFN(FatLfn_t* fname) {
    5f02:	4686      	mov	lr, r0
  const char* end = fname->end;
    5f04:	6884      	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
    5f06:	6051      	str	r1, [r2, #4]
    5f08:	f8c2 1007 	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    5f0c:	781a      	ldrb	r2, [r3, #0]
    5f0e:	2a2e      	cmp	r2, #46	; 0x2e
    5f10:	bf14      	ite	ne
    5f12:	2001      	movne	r0, #1
    5f14:	2000      	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    5f16:	d103      	bne.n	5f20 <FatFile::makeSFN(FatLfn_t*)+0x30>
    5f18:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    5f1c:	2a2e      	cmp	r2, #46	; 0x2e
    5f1e:	d0fb      	beq.n	5f18 <FatFile::makeSFN(FatLfn_t*)+0x28>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    5f20:	1e61      	subs	r1, r4, #1
    5f22:	4299      	cmp	r1, r3
    5f24:	d90b      	bls.n	5f3e <FatFile::makeSFN(FatLfn_t*)+0x4e>
    5f26:	460a      	mov	r2, r1
    5f28:	e002      	b.n	5f30 <FatFile::makeSFN(FatLfn_t*)+0x40>
    5f2a:	4293      	cmp	r3, r2
    5f2c:	4611      	mov	r1, r2
    5f2e:	d006      	beq.n	5f3e <FatFile::makeSFN(FatLfn_t*)+0x4e>
    5f30:	4611      	mov	r1, r2
    5f32:	3a01      	subs	r2, #1
    5f34:	f891 c000 	ldrb.w	ip, [r1]
    5f38:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    5f3c:	d1f5      	bne.n	5f2a <FatFile::makeSFN(FatLfn_t*)+0x3a>

  for (; ptr < end; ptr++) {
    5f3e:	429c      	cmp	r4, r3
    5f40:	f04f 0500 	mov.w	r5, #0
    5f44:	f240 8086 	bls.w	6054 <FatFile::makeSFN(FatLfn_t*)+0x164>
    5f48:	2607      	movs	r6, #7
    5f4a:	2708      	movs	r7, #8
    5f4c:	46a9      	mov	r9, r5
    5f4e:	46a8      	mov	r8, r5
    5f50:	e006      	b.n	5f60 <FatFile::makeSFN(FatLfn_t*)+0x70>
    5f52:	3301      	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
    5f54:	260a      	movs	r6, #10
      i = 8;    // Place for extension.
    5f56:	f04f 0908 	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    5f5a:	2710      	movs	r7, #16
  for (; ptr < end; ptr++) {
    5f5c:	429c      	cmp	r4, r3
    5f5e:	d95b      	bls.n	6018 <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
    5f60:	781a      	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    5f62:	2a2e      	cmp	r2, #46	; 0x2e
    5f64:	bf08      	it	eq
    5f66:	4299      	cmpeq	r1, r3
    5f68:	d0f3      	beq.n	5f52 <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    5f6a:	2a22      	cmp	r2, #34	; 0x22
    5f6c:	d00d      	beq.n	5f8a <FatFile::makeSFN(FatLfn_t*)+0x9a>
    5f6e:	2a7c      	cmp	r2, #124	; 0x7c
    5f70:	d00b      	beq.n	5f8a <FatFile::makeSFN(FatLfn_t*)+0x9a>
    5f72:	f1a2 0c5b 	sub.w	ip, r2, #91	; 0x5b
    5f76:	f1bc 0f02 	cmp.w	ip, #2
    5f7a:	d906      	bls.n	5f8a <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    5f7c:	f1a2 0c2a 	sub.w	ip, r2, #42	; 0x2a
    5f80:	f1bc 0f05 	cmp.w	ip, #5
    5f84:	d821      	bhi.n	5fca <FatFile::makeSFN(FatLfn_t*)+0xda>
    5f86:	2a2d      	cmp	r2, #45	; 0x2d
    5f88:	d01f      	beq.n	5fca <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    5f8a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    5f8e:	2a80      	cmp	r2, #128	; 0x80
    5f90:	d05d      	beq.n	604e <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    5f92:	454e      	cmp	r6, r9
    5f94:	d22f      	bcs.n	5ff6 <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
    5f96:	4299      	cmp	r1, r3
    5f98:	bf2c      	ite	cs
    5f9a:	2000      	movcs	r0, #0
    5f9c:	2001      	movcc	r0, #1
    5f9e:	2e0a      	cmp	r6, #10
    5fa0:	bf08      	it	eq
    5fa2:	f040 0001 	orreq.w	r0, r0, #1
    5fa6:	2800      	cmp	r0, #0
    5fa8:	d047      	beq.n	603a <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    5faa:	f89e 3016 	ldrb.w	r3, [lr, #22]
    5fae:	2b20      	cmp	r3, #32
    5fb0:	d040      	beq.n	6034 <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    5fb2:	f89e 3014 	ldrb.w	r3, [lr, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    5fb6:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    5fb8:	217e      	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    5fba:	2231      	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
    5fbc:	4473      	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
    5fbe:	f88e 0015 	strb.w	r0, [lr, #21]
    fname->sfn[fname->seqPos] = '~';
    5fc2:	7599      	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    5fc4:	75da      	strb	r2, [r3, #23]
  }
  return true;

 fail:
  return false;
}
    5fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5fca:	f1a2 0c3a 	sub.w	ip, r2, #58	; 0x3a
    5fce:	f1bc 0f05 	cmp.w	ip, #5
    5fd2:	d9da      	bls.n	5f8a <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
    5fd4:	f1a2 0c21 	sub.w	ip, r2, #33	; 0x21
    5fd8:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
    5fdc:	d8d5      	bhi.n	5f8a <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
    5fde:	454e      	cmp	r6, r9
    5fe0:	d3d9      	bcc.n	5f96 <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
    5fe2:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
    5fe6:	f1bc 0f19 	cmp.w	ip, #25
    5fea:	d828      	bhi.n	603e <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
    5fec:	3a20      	subs	r2, #32
        lc |= bit;
    5fee:	433d      	orrs	r5, r7
        c += 'A' - 'a';
    5ff0:	b2d2      	uxtb	r2, r2
        lc |= bit;
    5ff2:	b2ed      	uxtb	r5, r5
    5ff4:	e001      	b.n	5ffa <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
    5ff6:	2000      	movs	r0, #0
        c = '_';
    5ff8:	225f      	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
    5ffa:	f109 0c01 	add.w	ip, r9, #1
    5ffe:	44f1      	add	r9, lr
  for (; ptr < end; ptr++) {
    6000:	3301      	adds	r3, #1
      fname->sfn[i++] = c;
    6002:	f889 2016 	strb.w	r2, [r9, #22]
    6006:	fa5f f28c 	uxtb.w	r2, ip
      if (i < 7) {
    600a:	2a06      	cmp	r2, #6
        fname->seqPos = i;
    600c:	4691      	mov	r9, r2
    600e:	bf98      	it	ls
    6010:	f88e 2014 	strbls.w	r2, [lr, #20]
  for (; ptr < end; ptr++) {
    6014:	429c      	cmp	r4, r3
    6016:	d8a3      	bhi.n	5f60 <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
    6018:	f89e 3016 	ldrb.w	r3, [lr, #22]
    601c:	2b20      	cmp	r3, #32
    601e:	d009      	beq.n	6034 <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
    6020:	2800      	cmp	r0, #0
    6022:	d0c6      	beq.n	5fb2 <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    6024:	ea18 0f05 	tst.w	r8, r5
    6028:	bf18      	it	ne
    602a:	2502      	movne	r5, #2
    602c:	f88e 5015 	strb.w	r5, [lr, #21]
}
    6030:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
    6034:	2000      	movs	r0, #0
}
    6036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    603a:	460b      	mov	r3, r1
    603c:	e78e      	b.n	5f5c <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
    603e:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
    6042:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
    6046:	bf98      	it	ls
    6048:	ea47 0808 	orrls.w	r8, r7, r8
    604c:	e7d5      	b.n	5ffa <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
    604e:	3301      	adds	r3, #1
        is83 = false;
    6050:	2000      	movs	r0, #0
    6052:	e783      	b.n	5f5c <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
    6054:	46a8      	mov	r8, r5
    6056:	e7df      	b.n	6018 <FatFile::makeSFN(FatLfn_t*)+0x128>

00006058 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    6058:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    605c:	f04f 0962 	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    6060:	2500      	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    6062:	460f      	mov	r7, r1
    6064:	4604      	mov	r4, r0
    6066:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 6108 <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4 ; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    606a:	f04f 0a7e 	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
    606e:	f891 8014 	ldrb.w	r8, [r1, #20]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6072:	f101 0616 	add.w	r6, r1, #22
	return systick_millis_count;
    6076:	f1b8 0f03 	cmp.w	r8, #3
    607a:	f8db 3000 	ldr.w	r3, [fp]
    607e:	bf28      	it	cs
    6080:	f04f 0803 	movcs.w	r8, #3
    hex += millis();
    6084:	442b      	add	r3, r5
    6086:	b29d      	uxth	r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    6088:	f108 0304 	add.w	r3, r8, #4
    608c:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    608e:	f005 020f 	and.w	r2, r5, #15
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    6092:	1e58      	subs	r0, r3, #1
      hex >>= 4;
    6094:	092d      	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6096:	2a09      	cmp	r2, #9
    6098:	f102 0137 	add.w	r1, r2, #55	; 0x37
    609c:	bf98      	it	ls
    609e:	f102 0130 	addls.w	r1, r2, #48	; 0x30
    60a2:	18fa      	adds	r2, r7, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    60a4:	b2c3      	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    60a6:	7591      	strb	r1, [r2, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    60a8:	4598      	cmp	r8, r3
    60aa:	d1f0      	bne.n	608e <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
    60ac:	eb07 0308 	add.w	r3, r7, r8
    seekSet(0);
    60b0:	2100      	movs	r1, #0
    60b2:	4620      	mov	r0, r4
    60b4:	f883 a016 	strb.w	sl, [r3, #22]
    60b8:	f7ff fb74 	bl	57a4 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    60bc:	2101      	movs	r1, #1
    60be:	4620      	mov	r0, r4
    60c0:	f7ff fa10 	bl	54e4 <FatFile::readDirCache(bool)>
    60c4:	4603      	mov	r3, r0
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    60c6:	220b      	movs	r2, #11
    60c8:	4630      	mov	r0, r6
      if (!dir) {
    60ca:	b19b      	cbz	r3, 60f4 <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
    60cc:	f893 c000 	ldrb.w	ip, [r3]
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    60d0:	4619      	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
    60d2:	f1bc 0f00 	cmp.w	ip, #0
    60d6:	d013      	beq.n	6100 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    60d8:	7adb      	ldrb	r3, [r3, #11]
    60da:	071b      	lsls	r3, r3, #28
    60dc:	d4ee      	bmi.n	60bc <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    60de:	f007 fe09 	bl	dcf4 <memcmp>
    60e2:	2800      	cmp	r0, #0
    60e4:	d1ea      	bne.n	60bc <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    60e6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    60ea:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    60ee:	d1c2      	bne.n	6076 <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

 fail:
  return false;
    60f0:	4648      	mov	r0, r9
 fail:
    60f2:	e003      	b.n	60fc <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
    60f4:	7860      	ldrb	r0, [r4, #1]
    60f6:	fab0 f080 	clz	r0, r0
    60fa:	0940      	lsrs	r0, r0, #5

 done:
  return true;
}
    60fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    6100:	2001      	movs	r0, #1
}
    6102:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6106:	bf00      	nop
    6108:	200038d8 	.word	0x200038d8

0000610c <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    610c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6110:	ed2d 8b02 	vpush	{d8}
    6114:	b08b      	sub	sp, #44	; 0x2c
    6116:	e9cd 0302 	strd	r0, r3, [sp, #8]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    611a:	688b      	ldr	r3, [r1, #8]
    611c:	9307      	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
    611e:	780b      	ldrb	r3, [r1, #0]
    6120:	f013 0f70 	tst.w	r3, #112	; 0x70
    6124:	d053      	beq.n	61ce <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  bool isOpen() const {return m_attributes;}
    6126:	9b02      	ldr	r3, [sp, #8]
    6128:	781b      	ldrb	r3, [r3, #0]
    612a:	2b00      	cmp	r3, #0
    612c:	d14f      	bne.n	61ce <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
    612e:	6913      	ldr	r3, [r2, #16]
    6130:	4690      	mov	r8, r2
    6132:	4a9a      	ldr	r2, [pc, #616]	; (639c <FatFile::open(FatFile*, FatLfn_t*, int)+0x290>)
    6134:	460e      	mov	r6, r1
    6136:	330c      	adds	r3, #12
    6138:	fba2 2303 	umull	r2, r3, r2, r3
    613c:	f3c3 0287 	ubfx	r2, r3, #2, #8
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    6140:	f898 3015 	ldrb.w	r3, [r8, #21]
    6144:	0798      	lsls	r0, r3, #30
  nameOrd = (fname->len + 12)/13;
    6146:	9204      	str	r2, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    6148:	f000 80a7 	beq.w	629a <FatFile::open(FatFile*, FatLfn_t*, int)+0x18e>
    614c:	1c57      	adds	r7, r2, #1
    614e:	b2ff      	uxtb	r7, r7
  uint8_t checksum = 0;
    6150:	2300      	movs	r3, #0
    seekSet(0);
    6152:	4630      	mov	r0, r6
    6154:	4619      	mov	r1, r3
    6156:	461c      	mov	r4, r3
    6158:	9306      	str	r3, [sp, #24]
    615a:	f7ff fb23 	bl	57a4 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    615e:	f108 0316 	add.w	r3, r8, #22
  uint8_t order = 0;
    6162:	46a3      	mov	fp, r4
  uint8_t lfnOrd = 0;
    6164:	46a1      	mov	r9, r4
  uint16_t freeIndex = 0;
    6166:	46a2      	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6168:	ee08 3a10 	vmov	s16, r3
  bool fnameFound = false;
    616c:	9405      	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    616e:	6975      	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    6170:	2100      	movs	r1, #0
    6172:	4630      	mov	r0, r6
    6174:	f7ff f9b6 	bl	54e4 <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    6178:	f3c5 154f 	ubfx	r5, r5, #5, #16
    if (!dir) {
    617c:	4603      	mov	r3, r0
    617e:	b320      	cbz	r0, 61ca <FatFile::open(FatFile*, FatLfn_t*, int)+0xbe>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    6180:	7802      	ldrb	r2, [r0, #0]
    6182:	2ae5      	cmp	r2, #229	; 0xe5
    6184:	d029      	beq.n	61da <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
    6186:	b342      	cbz	r2, 61da <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
        freeFound = 0;
    6188:	42bc      	cmp	r4, r7
    618a:	bf38      	it	cc
    618c:	2400      	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    618e:	2a2e      	cmp	r2, #46	; 0x2e
    6190:	d02b      	beq.n	61ea <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    6192:	f890 c00b 	ldrb.w	ip, [r0, #11]
    } else if (isLongName(dir)) {
    6196:	f1bc 0f0f 	cmp.w	ip, #15
    619a:	d054      	beq.n	6246 <FatFile::open(FatFile*, FatLfn_t*, int)+0x13a>
    } else if (isFileOrSubdir(dir)) {
    619c:	f01c 0c08 	ands.w	ip, ip, #8
    61a0:	d123      	bne.n	61ea <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
      if (lfnOrd) {
    61a2:	f1b9 0f00 	cmp.w	r9, #0
    61a6:	f040 80d5 	bne.w	6354 <FatFile::open(FatFile*, FatLfn_t*, int)+0x248>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    61aa:	220b      	movs	r2, #11
    61ac:	ee18 1a10 	vmov	r1, s16
    61b0:	f007 fda0 	bl	dcf4 <memcmp>
    61b4:	2800      	cmp	r0, #0
    61b6:	d1da      	bne.n	616e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    61b8:	f898 3015 	ldrb.w	r3, [r8, #21]
    61bc:	f013 0301 	ands.w	r3, r3, #1
    61c0:	f000 80e4 	beq.w	638c <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>
          goto found;
        }
        fnameFound = true;
    61c4:	2301      	movs	r3, #1
    61c6:	9305      	str	r3, [sp, #20]
    61c8:	e7d1      	b.n	616e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
    61ca:	7873      	ldrb	r3, [r6, #1]
    61cc:	b183      	cbz	r3, 61f0 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
    goto fail;
  }
  return true;

 fail:
  return false;
    61ce:	2000      	movs	r0, #0
}
    61d0:	b00b      	add	sp, #44	; 0x2c
    61d2:	ecbd 8b02 	vpop	{d8}
    61d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    61da:	2c00      	cmp	r4, #0
    61dc:	bf08      	it	eq
    61de:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
    61e0:	42bc      	cmp	r4, r7
    61e2:	d201      	bcs.n	61e8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
        freeFound++;
    61e4:	3401      	adds	r4, #1
    61e6:	b2e4      	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    61e8:	b112      	cbz	r2, 61f0 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
      lfnOrd = 0;
    61ea:	f04f 0900 	mov.w	r9, #0
    61ee:	e7be      	b.n	616e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    61f0:	9b03      	ldr	r3, [sp, #12]
    61f2:	059a      	lsls	r2, r3, #22
    61f4:	d5eb      	bpl.n	61ce <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    61f6:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    61fa:	3b01      	subs	r3, #1
    61fc:	2b01      	cmp	r3, #1
    61fe:	d8e6      	bhi.n	61ce <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (freeFound == 0) {
    6200:	2c00      	cmp	r4, #0
    6202:	bf08      	it	eq
    6204:	46aa      	moveq	sl, r5
  while (freeFound < freeNeed) {
    6206:	42bc      	cmp	r4, r7
    6208:	d303      	bcc.n	6212 <FatFile::open(FatFile*, FatLfn_t*, int)+0x106>
    620a:	e048      	b.n	629e <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    freeFound++;
    620c:	b2dc      	uxtb	r4, r3
  while (freeFound < freeNeed) {
    620e:	42a7      	cmp	r7, r4
    6210:	d045      	beq.n	629e <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    dir = dirFile->readDirCache();
    6212:	2100      	movs	r1, #0
    6214:	4630      	mov	r0, r6
    6216:	f7ff f965 	bl	54e4 <FatFile::readDirCache(bool)>
    freeFound++;
    621a:	1c63      	adds	r3, r4, #1
    if (!dir) {
    621c:	2800      	cmp	r0, #0
    621e:	d1f5      	bne.n	620c <FatFile::open(FatFile*, FatLfn_t*, int)+0x100>
      if (dirFile->getError()) {
    6220:	7873      	ldrb	r3, [r6, #1]
    6222:	2b00      	cmp	r3, #0
    6224:	d1d3      	bne.n	61ce <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  while (freeFound < freeNeed) {
    6226:	42a7      	cmp	r7, r4
    6228:	d939      	bls.n	629e <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    622a:	9d07      	ldr	r5, [sp, #28]
    622c:	e005      	b.n	623a <FatFile::open(FatFile*, FatLfn_t*, int)+0x12e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    622e:	792b      	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    6230:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    6234:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    6236:	42a7      	cmp	r7, r4
    6238:	d931      	bls.n	629e <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    if (!dirFile->addDirCluster()) {
    623a:	4630      	mov	r0, r6
    623c:	f7fe fdc2 	bl	4dc4 <FatFile::addDirCluster()>
    6240:	2800      	cmp	r0, #0
    6242:	d1f4      	bne.n	622e <FatFile::open(FatFile*, FatLfn_t*, int)+0x122>
    6244:	e7c3      	b.n	61ce <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
      if (!lfnOrd) {
    6246:	f1b9 0f00 	cmp.w	r9, #0
    624a:	d119      	bne.n	6280 <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
        order = ldir->order & 0X1F;
    624c:	f002 0b1f 	and.w	fp, r2, #31
        if (order != nameOrd ||
    6250:	9904      	ldr	r1, [sp, #16]
    6252:	4559      	cmp	r1, fp
    6254:	d18b      	bne.n	616e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
    6256:	f012 0940 	ands.w	r9, r2, #64	; 0x40
    625a:	d088      	beq.n	616e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
    625c:	7b43      	ldrb	r3, [r0, #13]
    625e:	4689      	mov	r9, r1
    6260:	9306      	str	r3, [sp, #24]
      if (order == 1) {
    6262:	f1bb 0f01 	cmp.w	fp, #1
    6266:	d182      	bne.n	616e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    6268:	1c69      	adds	r1, r5, #1
    626a:	464b      	mov	r3, r9
    626c:	4642      	mov	r2, r8
    626e:	4630      	mov	r0, r6
    6270:	b289      	uxth	r1, r1
    6272:	f7ff fd4d 	bl	5d10 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    6276:	2800      	cmp	r0, #0
    6278:	bf08      	it	eq
    627a:	f04f 0900 	moveq.w	r9, #0
    627e:	e776      	b.n	616e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    6280:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    6284:	fa5f fb8b 	uxtb.w	fp, fp
    6288:	455a      	cmp	r2, fp
    628a:	d1ae      	bne.n	61ea <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
    628c:	7b43      	ldrb	r3, [r0, #13]
    628e:	9a06      	ldr	r2, [sp, #24]
    6290:	4293      	cmp	r3, r2
    6292:	d0e6      	beq.n	6262 <FatFile::open(FatFile*, FatLfn_t*, int)+0x156>
      lfnOrd = 0;
    6294:	f04f 0900 	mov.w	r9, #0
    6298:	e769      	b.n	616e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    629a:	2701      	movs	r7, #1
    629c:	e758      	b.n	6150 <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
  if (fnameFound) {
    629e:	9b05      	ldr	r3, [sp, #20]
    62a0:	b12b      	cbz	r3, 62ae <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a2>
    if (!dirFile->makeUniqueSfn(fname)) {
    62a2:	4641      	mov	r1, r8
    62a4:	4630      	mov	r0, r6
    62a6:	f7ff fed7 	bl	6058 <FatFile::makeUniqueSfn(FatLfn_t*)>
    62aa:	2800      	cmp	r0, #0
    62ac:	d08f      	beq.n	61ce <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  lfnOrd = freeNeed - 1;
    62ae:	3f01      	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    62b0:	4642      	mov	r2, r8
    62b2:	4630      	mov	r0, r6
  lfnOrd = freeNeed - 1;
    62b4:	b2fb      	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
    62b6:	eb0a 0503 	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
    62ba:	461f      	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
    62bc:	b2ad      	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    62be:	4629      	mov	r1, r5
    62c0:	f7ff fd84 	bl	5dcc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    62c4:	2800      	cmp	r0, #0
    62c6:	d082      	beq.n	61ce <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    62c8:	0169      	lsls	r1, r5, #5
    62ca:	4630      	mov	r0, r6
    62cc:	f7ff fa6a 	bl	57a4 <FatFile::seekSet(unsigned long)>
    62d0:	2800      	cmp	r0, #0
    62d2:	f43f af7c 	beq.w	61ce <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    62d6:	2100      	movs	r1, #0
    62d8:	4630      	mov	r0, r6
    62da:	f7ff f903 	bl	54e4 <FatFile::readDirCache(bool)>
  if (!dir) {
    62de:	4604      	mov	r4, r0
    62e0:	2800      	cmp	r0, #0
    62e2:	f43f af74 	beq.w	61ce <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  memset(dir, 0, sizeof(DirFat_t));
    62e6:	2220      	movs	r2, #32
    62e8:	2100      	movs	r1, #0
    62ea:	f007 fdcf 	bl	de8c <memset>
  memcpy(dir->name, fname->sfn, 11);
    62ee:	f8d8 2016 	ldr.w	r2, [r8, #22]
    62f2:	f8d8 301a 	ldr.w	r3, [r8, #26]
    62f6:	6022      	str	r2, [r4, #0]
    62f8:	6063      	str	r3, [r4, #4]
    62fa:	f898 3020 	ldrb.w	r3, [r8, #32]
    62fe:	f8b8 201e 	ldrh.w	r2, [r8, #30]
    6302:	72a3      	strb	r3, [r4, #10]
    6304:	8122      	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    6306:	f898 3015 	ldrb.w	r3, [r8, #21]
    630a:	f003 0318 	and.w	r3, r3, #24
    630e:	7323      	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    6310:	4b23      	ldr	r3, [pc, #140]	; (63a0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x294>)
    6312:	681b      	ldr	r3, [r3, #0]
    6314:	2b00      	cmp	r3, #0
    6316:	d03b      	beq.n	6390 <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
    FsDateTime::callback(&date, &time, &ms10);
    6318:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    631c:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    6320:	a809      	add	r0, sp, #36	; 0x24
    6322:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    6324:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    6328:	8223      	strh	r3, [r4, #16]
    632a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    632e:	81e3      	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    6330:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    6334:	7363      	strb	r3, [r4, #13]
    6336:	9a07      	ldr	r2, [sp, #28]
    6338:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    633c:	f043 0301 	orr.w	r3, r3, #1
    6340:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    6344:	9b03      	ldr	r3, [sp, #12]
    6346:	462a      	mov	r2, r5
    6348:	4631      	mov	r1, r6
    634a:	9802      	ldr	r0, [sp, #8]
    634c:	9700      	str	r7, [sp, #0]
    634e:	f7ff fa81 	bl	5854 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    6352:	e73d      	b.n	61d0 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    6354:	f1bb 0f01 	cmp.w	fp, #1
    6358:	f47f af39 	bne.w	61ce <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    for (uint8_t i = 0; i < 11; i++) {
    635c:	300a      	adds	r0, #10
    635e:	e001      	b.n	6364 <FatFile::open(FatFile*, FatLfn_t*, int)+0x258>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    6360:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6364:	ea4f 11cc 	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    6368:	4298      	cmp	r0, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    636a:	ea41 015c 	orr.w	r1, r1, ip, lsr #1
    636e:	fa52 f281 	uxtab	r2, r2, r1
    6372:	fa5f fc82 	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    6376:	d1f3      	bne.n	6360 <FatFile::open(FatFile*, FatLfn_t*, int)+0x254>
    6378:	9b06      	ldr	r3, [sp, #24]
    637a:	4563      	cmp	r3, ip
    637c:	f47f af27 	bne.w	61ce <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    6380:	464f      	mov	r7, r9
  if (oflag & O_EXCL) {
    6382:	9b03      	ldr	r3, [sp, #12]
    6384:	0519      	lsls	r1, r3, #20
    6386:	f53f af22 	bmi.w	61ce <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    638a:	e7db      	b.n	6344 <FatFile::open(FatFile*, FatLfn_t*, int)+0x238>
    638c:	461f      	mov	r7, r3
    638e:	e7f8      	b.n	6382 <FatFile::open(FatFile*, FatLfn_t*, int)+0x276>
    6390:	f645 0321 	movw	r3, #22561	; 0x5821
    6394:	8223      	strh	r3, [r4, #16]
    6396:	8323      	strh	r3, [r4, #24]
    6398:	8263      	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    639a:	e7cc      	b.n	6336 <FatFile::open(FatFile*, FatLfn_t*, int)+0x22a>
    639c:	4ec4ec4f 	.word	0x4ec4ec4f
    63a0:	200033f8 	.word	0x200033f8

000063a4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    63a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    63a8:	461f      	mov	r7, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    63aa:	780b      	ldrb	r3, [r1, #0]
                            FatLfn_t* fname, const char** ptr) {
    63ac:	b082      	sub	sp, #8
    63ae:	460c      	mov	r4, r1
  while (*path == ' ') {
    63b0:	2b20      	cmp	r3, #32
                            FatLfn_t* fname, const char** ptr) {
    63b2:	4615      	mov	r5, r2
  while (*path == ' ') {
    63b4:	d103      	bne.n	63be <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    63b6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    63ba:	2b20      	cmp	r3, #32
    63bc:	d0fb      	beq.n	63b6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x12>
    path++;
  }
  fname->begin = path;
    63be:	602c      	str	r4, [r5, #0]
  while (*path && !isDirSeparator(*path)) {
    63c0:	7823      	ldrb	r3, [r4, #0]
    63c2:	b363      	cbz	r3, 641e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    63c4:	2b2f      	cmp	r3, #47	; 0x2f
    63c6:	d02a      	beq.n	641e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
  size_t len = 0;
    63c8:	f04f 0800 	mov.w	r8, #0
    63cc:	4e29      	ldr	r6, [pc, #164]	; (6474 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xd0>)
#if USE_UTF8_LONG_NAMES
    uint32_t cp;
    // Allow end = path + 4 since path is zero terminated.
    path = FsUtf::mbToCp(path, path + 4, &cp);
    63ce:	1d21      	adds	r1, r4, #4
    63d0:	4620      	mov	r0, r4
    63d2:	aa01      	add	r2, sp, #4
    63d4:	f003 fc96 	bl	9d04 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    63d8:	4604      	mov	r4, r0
    63da:	b170      	cbz	r0, 63fa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len += cp <= 0XFFFF ? 1 : 2;
    63dc:	9b01      	ldr	r3, [sp, #4]
    63de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    63e2:	d240      	bcs.n	6466 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xc2>
    if (cp < 0X80 && lfnReservedChar(cp)) {
    63e4:	2b7f      	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    63e6:	f108 0801 	add.w	r8, r8, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
    63ea:	d831      	bhi.n	6450 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
    63ec:	2b3c      	cmp	r3, #60	; 0x3c
    63ee:	b2d9      	uxtb	r1, r3
    63f0:	d829      	bhi.n	6446 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
    63f2:	2921      	cmp	r1, #33	; 0x21
    63f4:	d805      	bhi.n	6402 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5e>
    63f6:	291f      	cmp	r1, #31
    63f8:	d809      	bhi.n	640e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6a>
  *ptr = path;
  return makeSFN(fname);

 fail:
  return false;
}
    63fa:	2000      	movs	r0, #0
    63fc:	b002      	add	sp, #8
    63fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6402:	3922      	subs	r1, #34	; 0x22
    6404:	b2c9      	uxtb	r1, r1
    6406:	fa26 f101 	lsr.w	r1, r6, r1
    640a:	07ca      	lsls	r2, r1, #31
    640c:	d4f5      	bmi.n	63fa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    if (cp != '.' && cp != ' ') {
    640e:	2b2e      	cmp	r3, #46	; 0x2e
    6410:	d001      	beq.n	6416 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    6412:	2b20      	cmp	r3, #32
    6414:	d11c      	bne.n	6450 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
  while (*path && !isDirSeparator(*path)) {
    6416:	7823      	ldrb	r3, [r4, #0]
    6418:	b10b      	cbz	r3, 641e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    641a:	2b2f      	cmp	r3, #47	; 0x2f
    641c:	d1d7      	bne.n	63ce <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x2a>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    641e:	692b      	ldr	r3, [r5, #16]
    6420:	3b01      	subs	r3, #1
    6422:	2bfe      	cmp	r3, #254	; 0xfe
    6424:	d8e9      	bhi.n	63fa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    6426:	7823      	ldrb	r3, [r4, #0]
    6428:	2b20      	cmp	r3, #32
    642a:	d103      	bne.n	6434 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x90>
    642c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    6430:	2b20      	cmp	r3, #32
    6432:	d0fb      	beq.n	642c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
    6434:	2b2f      	cmp	r3, #47	; 0x2f
    6436:	d0f9      	beq.n	642c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
  return makeSFN(fname);
    6438:	4628      	mov	r0, r5
  *ptr = path;
    643a:	603c      	str	r4, [r7, #0]
}
    643c:	b002      	add	sp, #8
    643e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return makeSFN(fname);
    6442:	f7ff bd55 	b.w	5ef0 <FatFile::makeSFN(FatLfn_t*)>
    6446:	295c      	cmp	r1, #92	; 0x5c
    6448:	d0d7      	beq.n	63fa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    644a:	d905      	bls.n	6458 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xb4>
    644c:	297c      	cmp	r1, #124	; 0x7c
    644e:	d0d4      	beq.n	63fa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      fname->len = len;
    6450:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    6454:	60ac      	str	r4, [r5, #8]
    6456:	e7de      	b.n	6416 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    6458:	393e      	subs	r1, #62	; 0x3e
    645a:	2901      	cmp	r1, #1
    645c:	d8f8      	bhi.n	6450 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
}
    645e:	2000      	movs	r0, #0
    6460:	b002      	add	sp, #8
    6462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    len += cp <= 0XFFFF ? 1 : 2;
    6466:	f108 0802 	add.w	r8, r8, #2
      fname->end = path;
    646a:	60ac      	str	r4, [r5, #8]
      fname->len = len;
    646c:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    6470:	e7d1      	b.n	6416 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    6472:	bf00      	nop
    6474:	05002101 	.word	0x05002101

00006478 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    6478:	b5f0      	push	{r4, r5, r6, r7, lr}
  FatFile() {}
    647a:	2300      	movs	r3, #0
    647c:	b08b      	sub	sp, #44	; 0x2c
    647e:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    6480:	7883      	ldrb	r3, [r0, #2]
    6482:	079a      	lsls	r2, r3, #30
    6484:	d524      	bpl.n	64d0 <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    6486:	6a01      	ldr	r1, [r0, #32]
    6488:	4605      	mov	r5, r0
    648a:	b119      	cbz	r1, 6494 <FatFile::remove()+0x1c>
    648c:	6880      	ldr	r0, [r0, #8]
    648e:	f000 fe19 	bl	70c4 <FatPartition::freeChain(unsigned long)>
    6492:	b1e8      	cbz	r0, 64d0 <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    6494:	2101      	movs	r1, #1
    6496:	4628      	mov	r0, r5
    6498:	f7fe fcd0 	bl	4e3c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    649c:	b1c0      	cbz	r0, 64d0 <FatFile::remove()+0x58>
    for (uint8_t i = 0; i < 11; i++) {
    649e:	1e42      	subs	r2, r0, #1
    64a0:	f100 0c0a 	add.w	ip, r0, #10
    uint8_t sum = 0;
    64a4:	2400      	movs	r4, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    64a6:	01e3      	lsls	r3, r4, #7
    64a8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    64ac:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    64b0:	4594      	cmp	ip, r2
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    64b2:	fa51 f383 	uxtab	r3, r1, r3
    64b6:	b2dc      	uxtb	r4, r3
    for (uint8_t i = 0; i < 11; i++) {
    64b8:	d1f5      	bne.n	64a6 <FatFile::remove()+0x2e>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    64ba:	26e5      	movs	r6, #229	; 0xe5

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    64bc:	2300      	movs	r3, #0
  dir->name[0] = FAT_NAME_DELETED;
    64be:	7006      	strb	r6, [r0, #0]
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    64c0:	68af      	ldr	r7, [r5, #8]
  m_attributes = FILE_ATTR_CLOSED;
    64c2:	702b      	strb	r3, [r5, #0]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    64c4:	f107 0028 	add.w	r0, r7, #40	; 0x28
  m_flags = 0;
    64c8:	70ab      	strb	r3, [r5, #2]
    64ca:	f003 fae9 	bl	9aa0 <FsCache::sync()>
    64ce:	b910      	cbnz	r0, 64d6 <FatFile::remove()+0x5e>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    64d0:	2000      	movs	r0, #0
}
    64d2:	b00b      	add	sp, #44	; 0x2c
    64d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    64d6:	f507 700e 	add.w	r0, r7, #568	; 0x238
    64da:	f003 fae1 	bl	9aa0 <FsCache::sync()>
    64de:	2800      	cmp	r0, #0
    64e0:	d0f6      	beq.n	64d0 <FatFile::remove()+0x58>
    64e2:	6838      	ldr	r0, [r7, #0]
    return m_blockDev->syncDevice();
    64e4:	6803      	ldr	r3, [r0, #0]
    64e6:	6a1b      	ldr	r3, [r3, #32]
    64e8:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    64ea:	2800      	cmp	r0, #0
    64ec:	d0f0      	beq.n	64d0 <FatFile::remove()+0x58>
  if (!isLFN()) {
    64ee:	78eb      	ldrb	r3, [r5, #3]
    64f0:	2b00      	cmp	r3, #0
    64f2:	d0ee      	beq.n	64d2 <FatFile::remove()+0x5a>
  if (!dirFile.openCluster(this)) {
    64f4:	4629      	mov	r1, r5
    64f6:	a801      	add	r0, sp, #4
    64f8:	f7fe fec0 	bl	527c <FatFile::openCluster(FatFile*)>
    64fc:	2800      	cmp	r0, #0
    64fe:	d0e7      	beq.n	64d0 <FatFile::remove()+0x58>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6500:	78eb      	ldrb	r3, [r5, #3]
    6502:	2b00      	cmp	r3, #0
    6504:	d0e4      	beq.n	64d0 <FatFile::remove()+0x58>
    6506:	2701      	movs	r7, #1
    6508:	e021      	b.n	654e <FatFile::remove()+0xd6>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    650a:	a801      	add	r0, sp, #4
    650c:	f7fe ffea 	bl	54e4 <FatFile::readDirCache(bool)>
    6510:	1c7b      	adds	r3, r7, #1
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    6512:	b2f9      	uxtb	r1, r7
    if (!ldir) {
    6514:	2800      	cmp	r0, #0
    6516:	d0db      	beq.n	64d0 <FatFile::remove()+0x58>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    6518:	7ac2      	ldrb	r2, [r0, #11]
    651a:	2a0f      	cmp	r2, #15
    651c:	d1d8      	bne.n	64d0 <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) ||
    651e:	7802      	ldrb	r2, [r0, #0]
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6520:	fa5f fc83 	uxtb.w	ip, r3
    6524:	b29f      	uxth	r7, r3
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    6526:	f002 031f 	and.w	r3, r2, #31
    652a:	428b      	cmp	r3, r1
    652c:	d1d0      	bne.n	64d0 <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) ||
    652e:	7b43      	ldrb	r3, [r0, #13]
    6530:	42a3      	cmp	r3, r4
    6532:	d1cd      	bne.n	64d0 <FatFile::remove()+0x58>
    ldir->order = FAT_NAME_DELETED;
    6534:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
    6536:	68a9      	ldr	r1, [r5, #8]
    6538:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    653c:	f043 0301 	orr.w	r3, r3, #1
    6540:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    6544:	0653      	lsls	r3, r2, #25
    6546:	d40d      	bmi.n	6564 <FatFile::remove()+0xec>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6548:	78eb      	ldrb	r3, [r5, #3]
    654a:	4563      	cmp	r3, ip
    654c:	d3c0      	bcc.n	64d0 <FatFile::remove()+0x58>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    654e:	88a9      	ldrh	r1, [r5, #4]
    6550:	a801      	add	r0, sp, #4
    6552:	1bc9      	subs	r1, r1, r7
    6554:	b289      	uxth	r1, r1
    6556:	0149      	lsls	r1, r1, #5
    6558:	f7ff f924 	bl	57a4 <FatFile::seekSet(unsigned long)>
    655c:	2100      	movs	r1, #0
    655e:	2800      	cmp	r0, #0
    6560:	d1d3      	bne.n	650a <FatFile::remove()+0x92>
    6562:	e7b5      	b.n	64d0 <FatFile::remove()+0x58>
      if (!m_vol->cacheSync()) {
    6564:	68ac      	ldr	r4, [r5, #8]
    6566:	f104 0028 	add.w	r0, r4, #40	; 0x28
    656a:	f003 fa99 	bl	9aa0 <FsCache::sync()>
    656e:	2800      	cmp	r0, #0
    6570:	d0ae      	beq.n	64d0 <FatFile::remove()+0x58>
    6572:	f504 700e 	add.w	r0, r4, #568	; 0x238
    6576:	f003 fa93 	bl	9aa0 <FsCache::sync()>
    657a:	2800      	cmp	r0, #0
    657c:	d0a8      	beq.n	64d0 <FatFile::remove()+0x58>
    657e:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    6580:	6803      	ldr	r3, [r0, #0]
    6582:	6a1b      	ldr	r3, [r3, #32]
    6584:	4798      	blx	r3
    6586:	e7a4      	b.n	64d2 <FatFile::remove()+0x5a>

00006588 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    6588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    658c:	f8dd 9020 	ldr.w	r9, [sp, #32]
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    6590:	b1a2      	cbz	r2, 65bc <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    6592:	4605      	mov	r5, r0
    6594:	460c      	mov	r4, r1
    6596:	4698      	mov	r8, r3
    6598:	1857      	adds	r7, r2, r1
    659a:	e001      	b.n	65a0 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x18>
    659c:	42bc      	cmp	r4, r7
    659e:	d00d      	beq.n	65bc <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    65a0:	682b      	ldr	r3, [r5, #0]
    65a2:	4620      	mov	r0, r4
    65a4:	4649      	mov	r1, r9
    65a6:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    65a8:	47c0      	blx	r8
    65aa:	4621      	mov	r1, r4
    65ac:	4602      	mov	r2, r0
    65ae:	4628      	mov	r0, r5
     for (size_t i = 0; i < ns; i++) {
    65b0:	3401      	adds	r4, #1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    65b2:	47b0      	blx	r6
    65b4:	2800      	cmp	r0, #0
    65b6:	d1f1      	bne.n	659c <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
     }
    return true;
  }
    65b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
    65bc:	2001      	movs	r0, #1
  }
    65be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    65c2:	bf00      	nop

000065c4 <initFatDirCallback(unsigned long, void*)>:
  uint16_t count;
  uint16_t dotcount;
};
static const uint8_t * initFatDirCallback(uint32_t sector, void *context) {
  struct initFatDirState * state = (struct initFatDirState *)context;
  if (state->pr && ++state->count >= state->dotcount) {
    65c4:	6848      	ldr	r0, [r1, #4]
static const uint8_t * initFatDirCallback(uint32_t sector, void *context) {
    65c6:	b510      	push	{r4, lr}
    65c8:	460c      	mov	r4, r1
  if (state->pr && ++state->count >= state->dotcount) {
    65ca:	b130      	cbz	r0, 65da <initFatDirCallback(unsigned long, void*)+0x16>
    65cc:	890b      	ldrh	r3, [r1, #8]
    65ce:	894a      	ldrh	r2, [r1, #10]
    65d0:	3301      	adds	r3, #1
    65d2:	b29b      	uxth	r3, r3
    65d4:	429a      	cmp	r2, r3
    65d6:	810b      	strh	r3, [r1, #8]
    65d8:	d901      	bls.n	65de <initFatDirCallback(unsigned long, void*)+0x1a>
    state->pr->write(".");
    state->count = 0;
  }
  return state->buffer;
}
    65da:	6820      	ldr	r0, [r4, #0]
    65dc:	bd10      	pop	{r4, pc}
    65de:	6803      	ldr	r3, [r0, #0]
    65e0:	2201      	movs	r2, #1
    65e2:	4903      	ldr	r1, [pc, #12]	; (65f0 <initFatDirCallback(unsigned long, void*)+0x2c>)
    65e4:	685b      	ldr	r3, [r3, #4]
    65e6:	4798      	blx	r3
    state->count = 0;
    65e8:	2300      	movs	r3, #0
}
    65ea:	6820      	ldr	r0, [r4, #0]
    state->count = 0;
    65ec:	8123      	strh	r3, [r4, #8]
}
    65ee:	bd10      	pop	{r4, pc}
    65f0:	20000670 	.word	0x20000670

000065f4 <FatFormatter::initFatDir(unsigned char, unsigned long)>:
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
    65f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    65f8:	4605      	mov	r5, r0
    65fa:	b087      	sub	sp, #28
    65fc:	4688      	mov	r8, r1
    65fe:	4692      	mov	sl, r2
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    6600:	2100      	movs	r1, #0
    6602:	f44f 7200 	mov.w	r2, #512	; 0x200
    6606:	6a40      	ldr	r0, [r0, #36]	; 0x24
    6608:	f007 fc40 	bl	de8c <memset>
  writeMsg("Writing FAT ");
    660c:	6a28      	ldr	r0, [r5, #32]
    660e:	b128      	cbz	r0, 661c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x28>
    6610:	6803      	ldr	r3, [r0, #0]
    6612:	220c      	movs	r2, #12
    6614:	493a      	ldr	r1, [pc, #232]	; (6700 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x10c>)
    6616:	685b      	ldr	r3, [r3, #4]
    6618:	4798      	blx	r3
  struct initFatDirState state;
  state.buffer = m_secBuf;
  state.pr = m_pr;
    661a:	6a28      	ldr	r0, [r5, #32]
  state.buffer = m_secBuf;
    661c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  state.count = 0;
    661e:	f04f 0900 	mov.w	r9, #0
  state.dotcount = sectorCount/32;
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    6622:	69ee      	ldr	r6, [r5, #28]
    6624:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
    6628:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 670c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x118>
    662c:	68e9      	ldr	r1, [r5, #12]
  state.count = 0;
    662e:	f8ad 9014 	strh.w	r9, [sp, #20]
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    6632:	1c4c      	adds	r4, r1, #1
  state.buffer = m_secBuf;
    6634:	e9cd 3003 	strd	r3, r0, [sp, #12]
  state.dotcount = sectorCount/32;
    6638:	ea4f 135a 	mov.w	r3, sl, lsr #5
    663c:	f8ad 3016 	strh.w	r3, [sp, #22]
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    6640:	6833      	ldr	r3, [r6, #0]
    6642:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    6644:	4567      	cmp	r7, ip
    6646:	d126      	bne.n	6696 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa2>
     for (size_t i = 0; i < ns; i++) {
    6648:	b36a      	cbz	r2, 66a6 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xb2>
    664a:	eb01 070a 	add.w	r7, r1, sl
    664e:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 6710 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x11c>
    6652:	e00a      	b.n	666a <FatFormatter::initFatDir(unsigned char, unsigned long)+0x76>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    6654:	4621      	mov	r1, r4
    6656:	9a03      	ldr	r2, [sp, #12]
    6658:	4630      	mov	r0, r6
     for (size_t i = 0; i < ns; i++) {
    665a:	3401      	adds	r4, #1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    665c:	47d8      	blx	fp
    665e:	2800      	cmp	r0, #0
    6660:	d03f      	beq.n	66e2 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xee>
     for (size_t i = 0; i < ns; i++) {
    6662:	42a7      	cmp	r7, r4
    6664:	d01e      	beq.n	66a4 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xb0>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    6666:	6833      	ldr	r3, [r6, #0]
  if (state->pr && ++state->count >= state->dotcount) {
    6668:	9804      	ldr	r0, [sp, #16]
    666a:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
    666e:	2800      	cmp	r0, #0
    6670:	d0f0      	beq.n	6654 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x60>
    6672:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6676:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    667a:	3301      	adds	r3, #1
    667c:	b29b      	uxth	r3, r3
    667e:	429a      	cmp	r2, r3
    6680:	f8ad 3014 	strh.w	r3, [sp, #20]
    6684:	d8e6      	bhi.n	6654 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x60>
    6686:	6803      	ldr	r3, [r0, #0]
    6688:	4651      	mov	r1, sl
    668a:	2201      	movs	r2, #1
    668c:	685b      	ldr	r3, [r3, #4]
    668e:	4798      	blx	r3
    state->count = 0;
    6690:	f8ad 9014 	strh.w	r9, [sp, #20]
    6694:	e7de      	b.n	6654 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x60>
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    6696:	ab03      	add	r3, sp, #12
    6698:	4621      	mov	r1, r4
    669a:	4630      	mov	r0, r6
    669c:	9300      	str	r3, [sp, #0]
    669e:	4b19      	ldr	r3, [pc, #100]	; (6704 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x110>)
    66a0:	47b8      	blx	r7
    66a2:	b1f0      	cbz	r0, 66e2 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xee>
     return false;
  }
  writeMsg("\r\n");
    66a4:	6a28      	ldr	r0, [r5, #32]
    66a6:	b120      	cbz	r0, 66b2 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xbe>
    66a8:	6803      	ldr	r3, [r0, #0]
    66aa:	2202      	movs	r2, #2
    66ac:	4916      	ldr	r1, [pc, #88]	; (6708 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x114>)
    66ae:	685b      	ldr	r3, [r3, #4]
    66b0:	4798      	blx	r3
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
  n = fatType == 16 ? 4 : 12;
    66b2:	f1b8 0f10 	cmp.w	r8, #16
  m_secBuf[0] = 0XF8;
    66b6:	f04f 01f8 	mov.w	r1, #248	; 0xf8
    66ba:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  for (size_t i = 1; i < n; i++) {
    66bc:	f04f 0301 	mov.w	r3, #1
  n = fatType == 16 ? 4 : 12;
    66c0:	bf0c      	ite	eq
    66c2:	2004      	moveq	r0, #4
    66c4:	200c      	movne	r0, #12
  m_secBuf[0] = 0XF8;
    66c6:	7011      	strb	r1, [r2, #0]
    m_secBuf[i] = 0XFF;
    66c8:	21ff      	movs	r1, #255	; 0xff
    66ca:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    66cc:	54d1      	strb	r1, [r2, r3]
  for (size_t i = 1; i < n; i++) {
    66ce:	3301      	adds	r3, #1
    66d0:	4298      	cmp	r0, r3
    66d2:	d1fa      	bne.n	66ca <FatFormatter::initFatDir(unsigned char, unsigned long)+0xd6>
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
    66d4:	69e8      	ldr	r0, [r5, #28]
    66d6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    66d8:	6803      	ldr	r3, [r0, #0]
    66da:	68e9      	ldr	r1, [r5, #12]
    66dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    66de:	4798      	blx	r3
    66e0:	b918      	cbnz	r0, 66ea <FatFormatter::initFatDir(unsigned char, unsigned long)+0xf6>
     return false;
    66e2:	2000      	movs	r0, #0
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
}
    66e4:	b007      	add	sp, #28
    66e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    66ea:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    66ee:	69e8      	ldr	r0, [r5, #28]
    66f0:	4419      	add	r1, r3
    66f2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    66f4:	6803      	ldr	r3, [r0, #0]
    66f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    66f8:	4798      	blx	r3
}
    66fa:	b007      	add	sp, #28
    66fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6700:	20000660 	.word	0x20000660
    6704:	000065c5 	.word	0x000065c5
    6708:	20000688 	.word	0x20000688
    670c:	00006589 	.word	0x00006589
    6710:	20000670 	.word	0x20000670

00006714 <FatFormatter::initPbs()>:
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
    6714:	b538      	push	{r3, r4, r5, lr}
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    6716:	6a43      	ldr	r3, [r0, #36]	; 0x24
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    6718:	f44f 7500 	mov.w	r5, #512	; 0x200
void FatFormatter::initPbs() {
    671c:	4604      	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    671e:	2100      	movs	r1, #0
    6720:	462a      	mov	r2, r5
    6722:	4618      	mov	r0, r3
    6724:	f007 fbb2 	bl	de8c <memset>
  pbs->jmpInstruction[0] = 0XEB;
  pbs->jmpInstruction[1] = 0X76;
  pbs->jmpInstruction[2] = 0X90;
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    pbs->oemName[i] = ' ';
    6728:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  pbs->jmpInstruction[0] = 0XEB;
    672c:	22eb      	movs	r2, #235	; 0xeb
    672e:	f8a0 500b 	strh.w	r5, [r0, #11]
    pbs->oemName[i] = ' ';
    6732:	f8c0 1003 	str.w	r1, [r0, #3]
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    6736:	4603      	mov	r3, r0
    pbs->oemName[i] = ' ';
    6738:	f8c0 1007 	str.w	r1, [r0, #7]
  pbs->jmpInstruction[2] = 0X90;
    673c:	2190      	movs	r1, #144	; 0x90
  pbs->jmpInstruction[0] = 0XEB;
    673e:	7002      	strb	r2, [r0, #0]
  pbs->jmpInstruction[1] = 0X76;
    6740:	2076      	movs	r0, #118	; 0x76
  pbs->jmpInstruction[2] = 0X90;
    6742:	7099      	strb	r1, [r3, #2]
  }
  setLe16(pbs->bpb.bpb16.bytesPerSector, BYTES_PER_SECTOR);
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
  pbs->bpb.bpb16.fatCount = 2;
    6744:	2202      	movs	r2, #2
  pbs->jmpInstruction[1] = 0X76;
    6746:	7058      	strb	r0, [r3, #1]
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
    6748:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
    674c:	7359      	strb	r1, [r3, #13]
    674e:	f64a 2155 	movw	r1, #43605	; 0xaa55
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
    6752:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  pbs->bpb.bpb16.fatCount = 2;
    6754:	741a      	strb	r2, [r3, #16]
  // skip rootDirEntryCount
  // skip totalSectors16
  pbs->bpb.bpb16.mediaType = 0XF8;
    6756:	22f8      	movs	r2, #248	; 0xf8
    6758:	81d8      	strh	r0, [r3, #14]
    675a:	755a      	strb	r2, [r3, #21]
  // skip sectorsPerFat16
  // skip sectorsPerTrack
  // skip headCount
  setLe32(pbs->bpb.bpb16.hidddenSectors, m_relativeSectors);
    675c:	6922      	ldr	r2, [r4, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
    675e:	61da      	str	r2, [r3, #28]
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
    6760:	69a2      	ldr	r2, [r4, #24]
  *reinterpret_cast<uint16_t*>(dst) = src;
    6762:	f8a3 11fe 	strh.w	r1, [r3, #510]	; 0x1fe
  *reinterpret_cast<uint32_t*>(dst) = src;
    6766:	621a      	str	r2, [r3, #32]
  // skip rest of bpb
  setLe16(pbs->signature, PBR_SIGNATURE);
}
    6768:	bd38      	pop	{r3, r4, r5, pc}
    676a:	bf00      	nop

0000676c <FatFormatter::writeMbr()>:
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
}
//------------------------------------------------------------------------------
bool FatFormatter::writeMbr() {
    676c:	b570      	push	{r4, r5, r6, lr}
    676e:	4604      	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    6770:	f44f 7200 	mov.w	r2, #512	; 0x200
    6774:	2100      	movs	r1, #0
    6776:	6a40      	ldr	r0, [r0, #36]	; 0x24
    6778:	f007 fb88 	bl	de8c <memset>
  MbrSector_t* mbr = reinterpret_cast<MbrSector_t*>(m_secBuf);
    677c:	6a65      	ldr	r5, [r4, #36]	; 0x24

#if USE_LBA_TO_CHS
  lbaToMbrChs(mbr->part->beginCHS, m_capacityMB, m_relativeSectors);
    677e:	6922      	ldr	r2, [r4, #16]
    6780:	6821      	ldr	r1, [r4, #0]
    6782:	f205 10bf 	addw	r0, r5, #447	; 0x1bf
    6786:	f003 fa1b 	bl	9bc0 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
              m_relativeSectors + m_totalSectors -1);
    678a:	69a3      	ldr	r3, [r4, #24]
    678c:	6922      	ldr	r2, [r4, #16]
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    678e:	f205 10c3 	addw	r0, r5, #451	; 0x1c3
    6792:	6821      	ldr	r1, [r4, #0]
              m_relativeSectors + m_totalSectors -1);
    6794:	441a      	add	r2, r3
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    6796:	3a01      	subs	r2, #1
    6798:	f003 fa12 	bl	9bc0 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
    679c:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
  *reinterpret_cast<uint16_t*>(dst) = src;
    67a0:	f64a 2355 	movw	r3, #43605	; 0xaa55
    67a4:	f885 21c2 	strb.w	r2, [r5, #450]	; 0x1c2
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
    67a8:	6922      	ldr	r2, [r4, #16]
  setLe32(mbr->part->totalSectors, m_totalSectors);
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    67aa:	69e0      	ldr	r0, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    67ac:	f8c5 21c6 	str.w	r2, [r5, #454]	; 0x1c6
    67b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  setLe32(mbr->part->totalSectors, m_totalSectors);
    67b2:	69a1      	ldr	r1, [r4, #24]
  *reinterpret_cast<uint16_t*>(dst) = src;
    67b4:	f8a5 31fe 	strh.w	r3, [r5, #510]	; 0x1fe
  return m_dev->writeSector(0, m_secBuf);
    67b8:	6803      	ldr	r3, [r0, #0]
  *reinterpret_cast<uint32_t*>(dst) = src;
    67ba:	f8c5 11ca 	str.w	r1, [r5, #458]	; 0x1ca
    67be:	2100      	movs	r1, #0
    67c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    67c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return m_dev->writeSector(0, m_secBuf);
    67c6:	4718      	bx	r3

000067c8 <FatFormatter::makeFat16()>:
bool FatFormatter::makeFat16() {
    67c8:	b570      	push	{r4, r5, r6, lr}
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    67ca:	6946      	ldr	r6, [r0, #20]
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    67cc:	f44f 7380 	mov.w	r3, #256	; 0x100
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    67d0:	f890 e02b 	ldrb.w	lr, [r0, #43]	; 0x2b
bool FatFormatter::makeFat16() {
    67d4:	4604      	mov	r4, r0
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    67d6:	f5a6 7280 	sub.w	r2, r6, #256	; 0x100
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    67da:	6a45      	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    67dc:	6043      	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    67de:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    67e2:	f202 1c01 	addw	ip, r2, #257	; 0x101
    67e6:	ea4f 211c 	mov.w	r1, ip, lsr #8
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    67ea:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    67ee:	6081      	str	r1, [r0, #8]
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    67f0:	f10c 00a1 	add.w	r0, ip, #161	; 0xa1
    if (m_dataStart >= r) {
    67f4:	4298      	cmp	r0, r3
    67f6:	d90e      	bls.n	6816 <FatFormatter::makeFat16()+0x4e>
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    67f8:	3380      	adds	r3, #128	; 0x80
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    67fa:	1af2      	subs	r2, r6, r3
    67fc:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    6800:	f202 1101 	addw	r1, r2, #257	; 0x101
    6804:	0a09      	lsrs	r1, r1, #8
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    6806:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    680a:	f10c 00a1 	add.w	r0, ip, #161	; 0xa1
    if (m_dataStart >= r) {
    680e:	4283      	cmp	r3, r0
    6810:	d3f2      	bcc.n	67f8 <FatFormatter::makeFat16()+0x30>
    6812:	e9c4 3101 	strd	r3, r1, [r4, #4]
      m_relativeSectors = m_dataStart - r + BU16;
    6816:	1a1b      	subs	r3, r3, r0
  if (nc < 4085 || nc >= 65525) {
    6818:	f6a2 71f5 	subw	r1, r2, #4085	; 0xff5
      m_relativeSectors = m_dataStart - r + BU16;
    681c:	f103 0080 	add.w	r0, r3, #128	; 0x80
  if (nc < 4085 || nc >= 65525) {
    6820:	f5b1 4f70 	cmp.w	r1, #61440	; 0xf000
      m_relativeSectors = m_dataStart - r + BU16;
    6824:	6120      	str	r0, [r4, #16]
  if (nc < 4085 || nc >= 65525) {
    6826:	d24f      	bcs.n	68c8 <FatFormatter::makeFat16()+0x100>
                   + 2*m_fatSize + m_reservedSectorCount + 32;
    6828:	f10c 0c21 	add.w	ip, ip, #33	; 0x21
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    682c:	3381      	adds	r3, #129	; 0x81
  if (!writeMbr()) {
    682e:	4620      	mov	r0, r4
                   + 2*m_fatSize + m_reservedSectorCount + 32;
    6830:	fb02 c20e 	mla	r2, r2, lr, ip
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    6834:	60e3      	str	r3, [r4, #12]
    m_partType = 0X06;
    6836:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  m_totalSectors = nc*m_sectorsPerCluster
    683a:	61a2      	str	r2, [r4, #24]
    m_partType = 0X06;
    683c:	bf34      	ite	cc
    683e:	2304      	movcc	r3, #4
    6840:	2306      	movcs	r3, #6
    6842:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  m_reservedSectorCount = 1;
    6846:	2301      	movs	r3, #1
    6848:	8523      	strh	r3, [r4, #40]	; 0x28
  if (!writeMbr()) {
    684a:	f7ff ff8f 	bl	676c <FatFormatter::writeMbr()>
    684e:	b908      	cbnz	r0, 6854 <FatFormatter::makeFat16()+0x8c>
}
    6850:	2000      	movs	r0, #0
    6852:	bd70      	pop	{r4, r5, r6, pc}
  initPbs();
    6854:	4620      	mov	r0, r4
    6856:	f7ff ff5d 	bl	6714 <FatFormatter::initPbs()>
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    685a:	2229      	movs	r2, #41	; 0x29
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    685c:	68a1      	ldr	r1, [r4, #8]
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    685e:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    6862:	f885 2026 	strb.w	r2, [r5, #38]	; 0x26
  pbs->bpb.bpb16.volumeType[0] = 'F';
    6866:	2246      	movs	r2, #70	; 0x46
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    6868:	f8c5 302f 	str.w	r3, [r5, #47]	; 0x2f
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    686c:	2080      	movs	r0, #128	; 0x80
  pbs->bpb.bpb16.volumeType[0] = 'F';
    686e:	f885 2036 	strb.w	r2, [r5, #54]	; 0x36
  pbs->bpb.bpb16.volumeType[2] = 'T';
    6872:	2254      	movs	r2, #84	; 0x54
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    6874:	f8c5 302b 	str.w	r3, [r5, #43]	; 0x2b
    6878:	f8c5 3032 	str.w	r3, [r5, #50]	; 0x32
  pbs->bpb.bpb16.volumeType[3] = '1';
    687c:	2331      	movs	r3, #49	; 0x31
  pbs->bpb.bpb16.volumeType[2] = 'T';
    687e:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
  pbs->bpb.bpb16.volumeType[4] = '6';
    6882:	2236      	movs	r2, #54	; 0x36
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    6884:	82e9      	strh	r1, [r5, #22]
  pbs->bpb.bpb16.volumeType[1] = 'A';
    6886:	2141      	movs	r1, #65	; 0x41
  pbs->bpb.bpb16.volumeType[3] = '1';
    6888:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  pbs->bpb.bpb16.volumeType[1] = 'A';
    688c:	f885 1037 	strb.w	r1, [r5, #55]	; 0x37
  *reinterpret_cast<uint16_t*>(dst) = src;
    6890:	f44f 7100 	mov.w	r1, #512	; 0x200
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    6894:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
  pbs->bpb.bpb16.volumeType[4] = '6';
    6898:	f885 203a 	strb.w	r2, [r5, #58]	; 0x3a
  *reinterpret_cast<uint32_t*>(dst) = src;
    689c:	4b0f      	ldr	r3, [pc, #60]	; (68dc <FatFormatter::makeFat16()+0x114>)
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
    689e:	69e0      	ldr	r0, [r4, #28]
    68a0:	f8c5 3027 	str.w	r3, [r5, #39]	; 0x27
    68a4:	6803      	ldr	r3, [r0, #0]
  *reinterpret_cast<uint16_t*>(dst) = src;
    68a6:	f8a5 1011 	strh.w	r1, [r5, #17]
    68aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
    68ac:	6921      	ldr	r1, [r4, #16]
    68ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    68b0:	4798      	blx	r3
    68b2:	2800      	cmp	r0, #0
    68b4:	d0cc      	beq.n	6850 <FatFormatter::makeFat16()+0x88>
  return initFatDir(16, m_dataStart - m_fatStart);
    68b6:	6862      	ldr	r2, [r4, #4]
    68b8:	4620      	mov	r0, r4
    68ba:	68e3      	ldr	r3, [r4, #12]
    68bc:	2110      	movs	r1, #16
    68be:	1ad2      	subs	r2, r2, r3
}
    68c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return initFatDir(16, m_dataStart - m_fatStart);
    68c4:	f7ff be96 	b.w	65f4 <FatFormatter::initFatDir(unsigned char, unsigned long)>
    writeMsg("Bad cluster count\r\n");
    68c8:	6a20      	ldr	r0, [r4, #32]
    68ca:	2800      	cmp	r0, #0
    68cc:	d0c0      	beq.n	6850 <FatFormatter::makeFat16()+0x88>
    68ce:	6803      	ldr	r3, [r0, #0]
    68d0:	2213      	movs	r2, #19
    68d2:	4903      	ldr	r1, [pc, #12]	; (68e0 <FatFormatter::makeFat16()+0x118>)
    68d4:	685b      	ldr	r3, [r3, #4]
    68d6:	4798      	blx	r3
}
    68d8:	2000      	movs	r0, #0
    68da:	bd70      	pop	{r4, r5, r6, pc}
    68dc:	0012d687 	.word	0x0012d687
    68e0:	20000634 	.word	0x20000634

000068e4 <FatFormatter::makeFat32()>:
bool FatFormatter::makeFat32() {
    68e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    68e6:	6946      	ldr	r6, [r0, #20]
  m_relativeSectors = BU32;
    68e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    68ec:	f890 c02b 	ldrb.w	ip, [r0, #43]	; 0x2b
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    68f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    68f4:	f5a6 4180 	sub.w	r1, r6, #16384	; 0x4000
  m_relativeSectors = BU32;
    68f8:	6103      	str	r3, [r0, #16]
    r = m_relativeSectors + 9 + 2*m_fatSize;
    68fa:	f242 0e09 	movw	lr, #8201	; 0x2009
bool FatFormatter::makeFat32() {
    68fe:	4604      	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    6900:	6a45      	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    6902:	6042      	str	r2, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    6904:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    6908:	f101 0381 	add.w	r3, r1, #129	; 0x81
    690c:	09db      	lsrs	r3, r3, #7
    690e:	6083      	str	r3, [r0, #8]
    r = m_relativeSectors + 9 + 2*m_fatSize;
    6910:	eb0e 0043 	add.w	r0, lr, r3, lsl #1
    if (m_dataStart >= r) {
    6914:	4290      	cmp	r0, r2
    6916:	f240 80b6 	bls.w	6a86 <FatFormatter::makeFat32()+0x1a2>
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    691a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    691e:	1ab1      	subs	r1, r6, r2
    6920:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    6924:	f101 0381 	add.w	r3, r1, #129	; 0x81
    6928:	09db      	lsrs	r3, r3, #7
    r = m_relativeSectors + 9 + 2*m_fatSize;
    692a:	eb0e 0043 	add.w	r0, lr, r3, lsl #1
    692e:	005f      	lsls	r7, r3, #1
    if (m_dataStart >= r) {
    6930:	4282      	cmp	r2, r0
    6932:	d3f2      	bcc.n	691a <FatFormatter::makeFat32()+0x36>
    6934:	e9c4 2301 	strd	r2, r3, [r4, #4]
  if (nc < 65525) {
    6938:	f64f 73f4 	movw	r3, #65524	; 0xfff4
    693c:	4299      	cmp	r1, r3
    693e:	f240 8097 	bls.w	6a70 <FatFormatter::makeFat32()+0x18c>
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    6942:	fb01 2c0c 	mla	ip, r1, ip, r2
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    6946:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  if (!writeMbr()) {
    694a:	4620      	mov	r0, r4
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    694c:	1bd2      	subs	r2, r2, r7
    694e:	b292      	uxth	r2, r2
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    6950:	f502 5300 	add.w	r3, r2, #8192	; 0x2000
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    6954:	8522      	strh	r2, [r4, #40]	; 0x28
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    6956:	4a4d      	ldr	r2, [pc, #308]	; (6a8c <FatFormatter::makeFat32()+0x1a8>)
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    6958:	60e3      	str	r3, [r4, #12]
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    695a:	f5ac 5300 	sub.w	r3, ip, #8192	; 0x2000
    m_partType = 0X0C;
    695e:	4594      	cmp	ip, r2
    6960:	bf94      	ite	ls
    6962:	f04f 0c0b 	movls.w	ip, #11
    6966:	f04f 0c0c 	movhi.w	ip, #12
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    696a:	61a3      	str	r3, [r4, #24]
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    696c:	f884 c02a 	strb.w	ip, [r4, #42]	; 0x2a
  if (!writeMbr()) {
    6970:	f7ff fefc 	bl	676c <FatFormatter::writeMbr()>
    6974:	b908      	cbnz	r0, 697a <FatFormatter::makeFat32()+0x96>
}
    6976:	2000      	movs	r0, #0
    6978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  initPbs();
    697a:	4620      	mov	r0, r4
    697c:	f7ff feca 	bl	6714 <FatFormatter::initPbs()>
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
    6980:	68a1      	ldr	r1, [r4, #8]
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    6982:	2229      	movs	r2, #41	; 0x29
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    6984:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    6988:	2080      	movs	r0, #128	; 0x80
  *reinterpret_cast<uint32_t*>(dst) = src;
    698a:	6269      	str	r1, [r5, #36]	; 0x24
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    698c:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
  pbs->bpb.bpb32.volumeType[2] = 'T';
    6990:	2154      	movs	r1, #84	; 0x54
  pbs->bpb.bpb32.volumeType[0] = 'F';
    6992:	2246      	movs	r2, #70	; 0x46
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    6994:	f8c5 304b 	str.w	r3, [r5, #75]	; 0x4b
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    6998:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  pbs->bpb.bpb32.volumeType[1] = 'A';
    699c:	2041      	movs	r0, #65	; 0x41
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    699e:	f8c5 3047 	str.w	r3, [r5, #71]	; 0x47
    69a2:	f8c5 304e 	str.w	r3, [r5, #78]	; 0x4e
    69a6:	2302      	movs	r3, #2
  pbs->bpb.bpb32.volumeType[0] = 'F';
    69a8:	f885 2052 	strb.w	r2, [r5, #82]	; 0x52
  pbs->bpb.bpb32.volumeType[3] = '3';
    69ac:	2233      	movs	r2, #51	; 0x33
  pbs->bpb.bpb32.volumeType[2] = 'T';
    69ae:	f885 1054 	strb.w	r1, [r5, #84]	; 0x54
  pbs->bpb.bpb32.volumeType[4] = '2';
    69b2:	2132      	movs	r1, #50	; 0x32
  pbs->bpb.bpb32.volumeType[3] = '3';
    69b4:	f885 2055 	strb.w	r2, [r5, #85]	; 0x55
  pbs->bpb.bpb32.volumeType[1] = 'A';
    69b8:	f885 0053 	strb.w	r0, [r5, #83]	; 0x53
  pbs->bpb.bpb32.volumeType[4] = '2';
    69bc:	f885 1056 	strb.w	r1, [r5, #86]	; 0x56
    69c0:	62eb      	str	r3, [r5, #44]	; 0x2c
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    69c2:	69e0      	ldr	r0, [r4, #28]
  *reinterpret_cast<uint16_t*>(dst) = src;
    69c4:	4b32      	ldr	r3, [pc, #200]	; (6a90 <FatFormatter::makeFat32()+0x1ac>)
  *reinterpret_cast<uint32_t*>(dst) = src;
    69c6:	4a33      	ldr	r2, [pc, #204]	; (6a94 <FatFormatter::makeFat32()+0x1b0>)
  *reinterpret_cast<uint16_t*>(dst) = src;
    69c8:	632b      	str	r3, [r5, #48]	; 0x30
    69ca:	6803      	ldr	r3, [r0, #0]
  *reinterpret_cast<uint32_t*>(dst) = src;
    69cc:	f8c5 2043 	str.w	r2, [r5, #67]	; 0x43
    69d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    69d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    69d4:	6921      	ldr	r1, [r4, #16]
    69d6:	4798      	blx	r3
    69d8:	2800      	cmp	r0, #0
    69da:	d0cc      	beq.n	6976 <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 6, m_secBuf)) {
    69dc:	69e0      	ldr	r0, [r4, #28]
    69de:	6921      	ldr	r1, [r4, #16]
    69e0:	6803      	ldr	r3, [r0, #0]
    69e2:	3106      	adds	r1, #6
    69e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    69e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    69e8:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    69ea:	2800      	cmp	r0, #0
    69ec:	d0c3      	beq.n	6976 <FatFormatter::makeFat32()+0x92>
  memset(m_secBuf, 0 , BYTES_PER_SECTOR);
    69ee:	f44f 7200 	mov.w	r2, #512	; 0x200
    69f2:	2100      	movs	r1, #0
    69f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    69f6:	f007 fa49 	bl	de8c <memset>
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    69fa:	69e0      	ldr	r0, [r4, #28]
    69fc:	4a26      	ldr	r2, [pc, #152]	; (6a98 <FatFormatter::makeFat32()+0x1b4>)
    69fe:	6803      	ldr	r3, [r0, #0]
    6a00:	f8c5 21fc 	str.w	r2, [r5, #508]	; 0x1fc
    6a04:	6921      	ldr	r1, [r4, #16]
    6a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a08:	3102      	adds	r1, #2
    6a0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    6a0c:	4798      	blx	r3
    6a0e:	2800      	cmp	r0, #0
    6a10:	d0b1      	beq.n	6976 <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 8, m_secBuf)) {
    6a12:	69e0      	ldr	r0, [r4, #28]
    6a14:	6921      	ldr	r1, [r4, #16]
    6a16:	6803      	ldr	r3, [r0, #0]
    6a18:	3108      	adds	r1, #8
    6a1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    6a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a1e:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    6a20:	2800      	cmp	r0, #0
    6a22:	d0a8      	beq.n	6976 <FatFormatter::makeFat32()+0x92>
    6a24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    6a28:	69e0      	ldr	r0, [r4, #28]
    6a2a:	4a1c      	ldr	r2, [pc, #112]	; (6a9c <FatFormatter::makeFat32()+0x1b8>)
    6a2c:	e9c5 337a 	strd	r3, r3, [r5, #488]	; 0x1e8
    6a30:	4b1b      	ldr	r3, [pc, #108]	; (6aa0 <FatFormatter::makeFat32()+0x1bc>)
    6a32:	602a      	str	r2, [r5, #0]
    6a34:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
    6a38:	6803      	ldr	r3, [r0, #0]
    6a3a:	6921      	ldr	r1, [r4, #16]
    6a3c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    6a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a40:	3101      	adds	r1, #1
    6a42:	4798      	blx	r3
    6a44:	2800      	cmp	r0, #0
    6a46:	d096      	beq.n	6976 <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    6a48:	69e0      	ldr	r0, [r4, #28]
    6a4a:	6921      	ldr	r1, [r4, #16]
    6a4c:	6803      	ldr	r3, [r0, #0]
    6a4e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    6a50:	3107      	adds	r1, #7
    6a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a54:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    6a56:	2800      	cmp	r0, #0
    6a58:	d08d      	beq.n	6976 <FatFormatter::makeFat32()+0x92>
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
    6a5a:	68a2      	ldr	r2, [r4, #8]
    6a5c:	4620      	mov	r0, r4
    6a5e:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    6a62:	2120      	movs	r1, #32
    6a64:	eb03 0242 	add.w	r2, r3, r2, lsl #1
}
    6a68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
    6a6c:	f7ff bdc2 	b.w	65f4 <FatFormatter::initFatDir(unsigned char, unsigned long)>
    writeMsg("Bad cluster count\r\n");
    6a70:	6a20      	ldr	r0, [r4, #32]
    6a72:	2800      	cmp	r0, #0
    6a74:	f43f af7f 	beq.w	6976 <FatFormatter::makeFat32()+0x92>
    6a78:	6803      	ldr	r3, [r0, #0]
    6a7a:	2213      	movs	r2, #19
    6a7c:	4909      	ldr	r1, [pc, #36]	; (6aa4 <FatFormatter::makeFat32()+0x1c0>)
    6a7e:	685b      	ldr	r3, [r3, #4]
    6a80:	4798      	blx	r3
}
    6a82:	2000      	movs	r0, #0
    6a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a86:	005f      	lsls	r7, r3, #1
    6a88:	e756      	b.n	6938 <FatFormatter::makeFat32()+0x54>
    6a8a:	bf00      	nop
    6a8c:	00fb0400 	.word	0x00fb0400
    6a90:	00060001 	.word	0x00060001
    6a94:	0012d687 	.word	0x0012d687
    6a98:	aa550000 	.word	0xaa550000
    6a9c:	41615252 	.word	0x41615252
    6aa0:	61417272 	.word	0x61417272
    6aa4:	20000634 	.word	0x20000634

00006aa8 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool FatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    6aa8:	b538      	push	{r3, r4, r5, lr}
    6aaa:	4604      	mov	r4, r0
  m_sectorCount = m_dev->sectorCount();
    6aac:	680d      	ldr	r5, [r1, #0]
  m_dev = dev;
    6aae:	61c1      	str	r1, [r0, #28]
  m_sectorCount = m_dev->sectorCount();
    6ab0:	4608      	mov	r0, r1
  m_secBuf = secBuf;
    6ab2:	6262      	str	r2, [r4, #36]	; 0x24
  m_sectorCount = m_dev->sectorCount();
    6ab4:	69ea      	ldr	r2, [r5, #28]
  m_pr = pr;
    6ab6:	6223      	str	r3, [r4, #32]
  m_sectorCount = m_dev->sectorCount();
    6ab8:	4790      	blx	r2
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    6aba:	f200 73ff 	addw	r3, r0, #2047	; 0x7ff
  m_sectorCount = m_dev->sectorCount();
    6abe:	6160      	str	r0, [r4, #20]
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    6ac0:	0adb      	lsrs	r3, r3, #11
  if (m_capacityMB <= 6) {
    6ac2:	2b06      	cmp	r3, #6
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    6ac4:	6023      	str	r3, [r4, #0]
  if (m_capacityMB <= 6) {
    6ac6:	d924      	bls.n	6b12 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
  } else if (m_capacityMB <= 16) {
    6ac8:	2b10      	cmp	r3, #16
    6aca:	d813      	bhi.n	6af4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c>
    6acc:	2302      	movs	r3, #2
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    6ace:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    m_sectorsPerCluster = 2;
    6ad2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    6ad6:	4620      	mov	r0, r4
    6ad8:	d22e      	bcs.n	6b38 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x90>
    6ada:	f7ff fe75 	bl	67c8 <FatFormatter::makeFat16()>
    6ade:	4605      	mov	r5, r0
    writeMsg("Format Done\r\n");
    6ae0:	6a20      	ldr	r0, [r4, #32]
  if (rtn) {
    6ae2:	b305      	cbz	r5, 6b26 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x7e>
    writeMsg("Format Done\r\n");
    6ae4:	b120      	cbz	r0, 6af0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x48>
    6ae6:	6803      	ldr	r3, [r0, #0]
    6ae8:	220d      	movs	r2, #13
    6aea:	4919      	ldr	r1, [pc, #100]	; (6b50 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa8>)
    6aec:	685b      	ldr	r3, [r3, #4]
    6aee:	4798      	blx	r3
}
    6af0:	4628      	mov	r0, r5
    6af2:	bd38      	pop	{r3, r4, r5, pc}
  } else if (m_capacityMB <= 32) {
    6af4:	2b20      	cmp	r3, #32
    6af6:	d923      	bls.n	6b40 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x98>
  } else if (m_capacityMB <= 64) {
    6af8:	2b40      	cmp	r3, #64	; 0x40
    6afa:	d923      	bls.n	6b44 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x9c>
  } else if (m_capacityMB <= 128) {
    6afc:	2b80      	cmp	r3, #128	; 0x80
    6afe:	d923      	bls.n	6b48 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa0>
  } else if (m_capacityMB <= 1024) {
    6b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    6b04:	d922      	bls.n	6b4c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa4>
  } else if (m_capacityMB <= 32768) {
    6b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    6b0a:	bf8c      	ite	hi
    6b0c:	2380      	movhi	r3, #128	; 0x80
    6b0e:	2340      	movls	r3, #64	; 0x40
    6b10:	e7dd      	b.n	6ace <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    writeMsg("Card is too small.\r\n");
    6b12:	6a20      	ldr	r0, [r4, #32]
    6b14:	b120      	cbz	r0, 6b20 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
    6b16:	6803      	ldr	r3, [r0, #0]
    6b18:	2214      	movs	r2, #20
    6b1a:	490e      	ldr	r1, [pc, #56]	; (6b54 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xac>)
    6b1c:	685b      	ldr	r3, [r3, #4]
    6b1e:	4798      	blx	r3
    return false;
    6b20:	2500      	movs	r5, #0
}
    6b22:	4628      	mov	r0, r5
    6b24:	bd38      	pop	{r3, r4, r5, pc}
    writeMsg("Format Failed\r\n");
    6b26:	2800      	cmp	r0, #0
    6b28:	d0fa      	beq.n	6b20 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
    6b2a:	6803      	ldr	r3, [r0, #0]
    6b2c:	220f      	movs	r2, #15
    6b2e:	490a      	ldr	r1, [pc, #40]	; (6b58 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb0>)
    6b30:	685b      	ldr	r3, [r3, #4]
    6b32:	4798      	blx	r3
}
    6b34:	4628      	mov	r0, r5
    6b36:	bd38      	pop	{r3, r4, r5, pc}
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    6b38:	f7ff fed4 	bl	68e4 <FatFormatter::makeFat32()>
    6b3c:	4605      	mov	r5, r0
    6b3e:	e7cf      	b.n	6ae0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x38>
    6b40:	2304      	movs	r3, #4
    6b42:	e7c4      	b.n	6ace <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    6b44:	2308      	movs	r3, #8
    6b46:	e7c2      	b.n	6ace <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    6b48:	2310      	movs	r3, #16
    6b4a:	e7c0      	b.n	6ace <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    6b4c:	2320      	movs	r3, #32
    6b4e:	e7be      	b.n	6ace <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    6b50:	20000614 	.word	0x20000614
    6b54:	200005fc 	.word	0x200005fc
    6b58:	20000624 	.word	0x20000624

00006b5c <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    6b5c:	2a04      	cmp	r2, #4
    6b5e:	d804      	bhi.n	6b6a <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    6b60:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    6b64:	f8b2 0001 	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
    6b68:	4770      	bx	lr
  } else if (i < 11) {
    6b6a:	2a0a      	cmp	r2, #10
    6b6c:	d803      	bhi.n	6b76 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    6b6e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    6b72:	8890      	ldrh	r0, [r2, #4]
    6b74:	4770      	bx	lr
  } else if (i < 13) {
    6b76:	2a0c      	cmp	r2, #12
    6b78:	d803      	bhi.n	6b82 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    return getLe16(ldir->unicode3 + 2*i - 22);
    6b7a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    6b7e:	88c8      	ldrh	r0, [r1, #6]
    6b80:	4770      	bx	lr
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    6b82:	2000      	movs	r0, #0
}
    6b84:	4770      	bx	lr
    6b86:	bf00      	nop

00006b88 <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    6b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const {return m_attributes;}
    6b8a:	7804      	ldrb	r4, [r0, #0]
    6b8c:	460e      	mov	r6, r1
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    6b8e:	b17c      	cbz	r4, 6bb0 <FatFile::getSFN(char*, unsigned int)+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    6b90:	f014 0460 	ands.w	r4, r4, #96	; 0x60
    6b94:	4617      	mov	r7, r2
    6b96:	d007      	beq.n	6ba8 <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    6b98:	2a01      	cmp	r2, #1
    6b9a:	d909      	bls.n	6bb0 <FatFile::getSFN(char*, unsigned int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    6b9c:	222f      	movs	r2, #47	; 0x2f
    name[1] = '\0';
    6b9e:	2300      	movs	r3, #0
    return 1;
    6ba0:	2001      	movs	r0, #1
    name[0] = '/';
    6ba2:	700a      	strb	r2, [r1, #0]
    name[1] = '\0';
    6ba4:	704b      	strb	r3, [r1, #1]
  return j;

 fail:
  name[0] = '\0';
  return 0;
}
    6ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    6ba8:	4621      	mov	r1, r4
    6baa:	f7fe f947 	bl	4e3c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6bae:	b918      	cbnz	r0, 6bb8 <FatFile::getSFN(char*, unsigned int)+0x30>
  name[0] = '\0';
    6bb0:	2300      	movs	r3, #0
  return 0;
    6bb2:	4618      	mov	r0, r3
  name[0] = '\0';
    6bb4:	7033      	strb	r3, [r6, #0]
}
    6bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ptr = dir->name;
    6bb8:	4603      	mov	r3, r0
    6bba:	46a4      	mov	ip, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    6bbc:	2108      	movs	r1, #8
    6bbe:	e011      	b.n	6be4 <FatFile::getSFN(char*, unsigned int)+0x5c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    6bc0:	7b02      	ldrb	r2, [r0, #12]
    6bc2:	4211      	tst	r1, r2
    6bc4:	d003      	beq.n	6bce <FatFile::getSFN(char*, unsigned int)+0x46>
        c += 'a' - 'A';
    6bc6:	f10e 0e20 	add.w	lr, lr, #32
    6bca:	fa5f fe8e 	uxtb.w	lr, lr
    if ((j + 1u) >= size) {
    6bce:	1c65      	adds	r5, r4, #1
    6bd0:	42bd      	cmp	r5, r7
    6bd2:	d2ed      	bcs.n	6bb0 <FatFile::getSFN(char*, unsigned int)+0x28>
  for (uint8_t i = 0; i < 12; i++) {
    6bd4:	f10c 0c01 	add.w	ip, ip, #1
    name[j++] = c;
    6bd8:	f806 e004 	strb.w	lr, [r6, r4]
    6bdc:	b2ec      	uxtb	r4, r5
  for (uint8_t i = 0; i < 12; i++) {
    6bde:	f1bc 0f0c 	cmp.w	ip, #12
    6be2:	d010      	beq.n	6c06 <FatFile::getSFN(char*, unsigned int)+0x7e>
    if (i == 8) {
    6be4:	f1bc 0f08 	cmp.w	ip, #8
    6be8:	d011      	beq.n	6c0e <FatFile::getSFN(char*, unsigned int)+0x86>
      c = *ptr++;
    6bea:	f813 eb01 	ldrb.w	lr, [r3], #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    6bee:	f1ae 0241 	sub.w	r2, lr, #65	; 0x41
    6bf2:	2a19      	cmp	r2, #25
    6bf4:	d9e4      	bls.n	6bc0 <FatFile::getSFN(char*, unsigned int)+0x38>
      if (c == ' ') {
    6bf6:	f1be 0f20 	cmp.w	lr, #32
    6bfa:	d1e8      	bne.n	6bce <FatFile::getSFN(char*, unsigned int)+0x46>
  for (uint8_t i = 0; i < 12; i++) {
    6bfc:	f10c 0c01 	add.w	ip, ip, #1
    6c00:	f1bc 0f0c 	cmp.w	ip, #12
    6c04:	d1ee      	bne.n	6be4 <FatFile::getSFN(char*, unsigned int)+0x5c>
  name[j] = '\0';
    6c06:	2300      	movs	r3, #0
    6c08:	4620      	mov	r0, r4
    6c0a:	5533      	strb	r3, [r6, r4]
}
    6c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (*ptr == ' ') {
    6c0e:	781a      	ldrb	r2, [r3, #0]
    6c10:	2a20      	cmp	r2, #32
    6c12:	d0f8      	beq.n	6c06 <FatFile::getSFN(char*, unsigned int)+0x7e>
      lcBit = FAT_CASE_LC_EXT;
    6c14:	2110      	movs	r1, #16
      c = '.';
    6c16:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
    6c1a:	e7d8      	b.n	6bce <FatFile::getSFN(char*, unsigned int)+0x46>

00006c1c <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    6c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile() {}
    6c20:	2400      	movs	r4, #0
    6c22:	b08b      	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    6c24:	7803      	ldrb	r3, [r0, #0]
size_t FatFile::getName8(char* name, size_t size) {
    6c26:	4689      	mov	r9, r1
    6c28:	9401      	str	r4, [sp, #4]
  if (!isOpen()) {
    6c2a:	2b00      	cmp	r3, #0
    6c2c:	d055      	beq.n	6cda <FatFile::getName8(char*, unsigned int)+0xbe>
  if (!isLFN()) {
    6c2e:	78c3      	ldrb	r3, [r0, #3]
    6c30:	4606      	mov	r6, r0
    6c32:	2b00      	cmp	r3, #0
    6c34:	d058      	beq.n	6ce8 <FatFile::getName8(char*, unsigned int)+0xcc>
  if (!dir.openCluster(this)) {
    6c36:	4601      	mov	r1, r0
    6c38:	a801      	add	r0, sp, #4
    6c3a:	4690      	mov	r8, r2
    6c3c:	f7fe fb1e 	bl	527c <FatFile::openCluster(FatFile*)>
    6c40:	2800      	cmp	r0, #0
    6c42:	d04a      	beq.n	6cda <FatFile::getName8(char*, unsigned int)+0xbe>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6c44:	78f0      	ldrb	r0, [r6, #3]
    6c46:	2800      	cmp	r0, #0
    6c48:	d043      	beq.n	6cd2 <FatFile::getName8(char*, unsigned int)+0xb6>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6c4a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
  char* str = name;
    6c4e:	46cb      	mov	fp, r9
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6c50:	f04f 0a01 	mov.w	sl, #1
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6c54:	44c8      	add	r8, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    6c56:	88b1      	ldrh	r1, [r6, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    6c58:	a801      	add	r0, sp, #4
    6c5a:	eba1 010a 	sub.w	r1, r1, sl
    6c5e:	b289      	uxth	r1, r1
    6c60:	0149      	lsls	r1, r1, #5
    6c62:	f7fe fd9f 	bl	57a4 <FatFile::seekSet(unsigned long)>
    6c66:	b3c0      	cbz	r0, 6cda <FatFile::getName8(char*, unsigned int)+0xbe>
    6c68:	2100      	movs	r1, #0
    6c6a:	a801      	add	r0, sp, #4
    6c6c:	f7fe fc3a 	bl	54e4 <FatFile::readDirCache(bool)>
    if (!ldir) {
    6c70:	b398      	cbz	r0, 6cda <FatFile::getName8(char*, unsigned int)+0xbe>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    6c72:	7ac3      	ldrb	r3, [r0, #11]
    6c74:	2b0f      	cmp	r3, #15
    6c76:	d130      	bne.n	6cda <FatFile::getName8(char*, unsigned int)+0xbe>
    6c78:	7803      	ldrb	r3, [r0, #0]
    6c7a:	fa5f f18a 	uxtb.w	r1, sl
    6c7e:	f003 031f 	and.w	r3, r3, #31
    6c82:	428b      	cmp	r3, r1
    6c84:	d129      	bne.n	6cda <FatFile::getName8(char*, unsigned int)+0xbe>
    6c86:	1c47      	adds	r7, r0, #1
    6c88:	2500      	movs	r5, #0
  if (i < 5) {
    6c8a:	2d04      	cmp	r5, #4
    6c8c:	b2eb      	uxtb	r3, r5
    6c8e:	d83f      	bhi.n	6d10 <FatFile::getName8(char*, unsigned int)+0xf4>
    6c90:	883b      	ldrh	r3, [r7, #0]
      if (hs) {
    6c92:	bb74      	cbnz	r4, 6cf2 <FatFile::getName8(char*, unsigned int)+0xd6>
  /** Check for UTF-16 surrogate.
   * \param[in] c UTF-16 unit.
   * \return true if c is a surrogate else false.
   */
  inline bool isSurrogate(uint16_t c) {
    return 0XD800 <= c && c <= 0XDFFF;
    6c94:	f503 5120 	add.w	r1, r3, #10240	; 0x2800
    6c98:	b289      	uxth	r1, r1
      } else if (!FsUtf::isSurrogate(c)) {
    6c9a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    6c9e:	d33e      	bcc.n	6d1e <FatFile::getName8(char*, unsigned int)+0x102>
        if (c == 0) {
    6ca0:	b1a3      	cbz	r3, 6ccc <FatFile::getName8(char*, unsigned int)+0xb0>
        cp = c;
    6ca2:	4618      	mov	r0, r3
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6ca4:	4659      	mov	r1, fp
    6ca6:	4642      	mov	r2, r8
    6ca8:	f002 ffda 	bl	9c60 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    6cac:	4683      	mov	fp, r0
    6cae:	b1a0      	cbz	r0, 6cda <FatFile::getName8(char*, unsigned int)+0xbe>
    6cb0:	2400      	movs	r4, #0
    for (uint8_t i = 0; i < 13; i++) {
    6cb2:	3501      	adds	r5, #1
    6cb4:	3702      	adds	r7, #2
    6cb6:	2d0d      	cmp	r5, #13
    6cb8:	d1e7      	bne.n	6c8a <FatFile::getName8(char*, unsigned int)+0x6e>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6cba:	f10a 0a01 	add.w	sl, sl, #1
    6cbe:	78f1      	ldrb	r1, [r6, #3]
    6cc0:	fa5f f38a 	uxtb.w	r3, sl
    6cc4:	fa1f fa8a 	uxth.w	sl, sl
    6cc8:	4299      	cmp	r1, r3
    6cca:	d2c4      	bcs.n	6c56 <FatFile::getName8(char*, unsigned int)+0x3a>
  return str - name;
    6ccc:	ebab 0009 	sub.w	r0, fp, r9
    6cd0:	46d9      	mov	r9, fp
  *str = '\0';
    6cd2:	2300      	movs	r3, #0
    6cd4:	f889 3000 	strb.w	r3, [r9]
  return str - name;
    6cd8:	e003      	b.n	6ce2 <FatFile::getName8(char*, unsigned int)+0xc6>
  *name = 0;
    6cda:	2300      	movs	r3, #0
  return 0;
    6cdc:	4618      	mov	r0, r3
  *name = 0;
    6cde:	f889 3000 	strb.w	r3, [r9]
}
    6ce2:	b00b      	add	sp, #44	; 0x2c
    6ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return getSFN(name, size);
    6ce8:	f7ff ff4e 	bl	6b88 <FatFile::getSFN(char*, unsigned int)>
}
    6cec:	b00b      	add	sp, #44	; 0x2c
    6cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   /** Check for UTF-16 low surrogate.
   * \param[in] c UTF-16 unit..
   * \return true if c is a low surrogate else false.
   */
  inline bool isLowSurrogate(uint16_t c) {
    return 0XDC00 <= c && c <= 0XDFFF;
    6cf2:	f503 5110 	add.w	r1, r3, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    6cf6:	b289      	uxth	r1, r1
    6cf8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    6cfc:	d2ed      	bcs.n	6cda <FatFile::getName8(char*, unsigned int)+0xbe>
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    6cfe:	4a0a      	ldr	r2, [pc, #40]	; (6d28 <FatFile::getName8(char*, unsigned int)+0x10c>)
    6d00:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6d04:	ea02 2084 	and.w	r0, r2, r4, lsl #10
    6d08:	4318      	orrs	r0, r3
    6d0a:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
        hs = 0;
    6d0e:	e7c9      	b.n	6ca4 <FatFile::getName8(char*, unsigned int)+0x88>
  } else if (i < 11) {
    6d10:	2b0a      	cmp	r3, #10
    6d12:	bf94      	ite	ls
    6d14:	f8b7 3003 	ldrhls.w	r3, [r7, #3]
    6d18:	f8b7 3005 	ldrhhi.w	r3, [r7, #5]
    return getLe16(ldir->unicode3 + 2*i - 22);
    6d1c:	e7b9      	b.n	6c92 <FatFile::getName8(char*, unsigned int)+0x76>
      } else if (FsUtf::isHighSurrogate(c)) {
    6d1e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    6d22:	d2da      	bcs.n	6cda <FatFile::getName8(char*, unsigned int)+0xbe>
    6d24:	461c      	mov	r4, r3
    6d26:	e7c4      	b.n	6cb2 <FatFile::getName8(char*, unsigned int)+0x96>
    6d28:	000ffc00 	.word	0x000ffc00

00006d2c <FatFile::getName(char*, unsigned int)>:
  return getName8(name, size);
    6d2c:	f7ff bf76 	b.w	6c1c <FatFile::getName8(char*, unsigned int)>

00006d30 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    6d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6d34:	e9dd 8708 	ldrd	r8, r7, [sp, #32]
     for (size_t i = 0; i < ns; i++) {
    6d38:	b1c3      	cbz	r3, 6d6c <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
    6d3a:	4681      	mov	r9, r0
    6d3c:	460c      	mov	r4, r1
    6d3e:	4615      	mov	r5, r2
    6d40:	185e      	adds	r6, r3, r1
    6d42:	e002      	b.n	6d4a <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       callback(sector + i, dst, context);
    6d44:	47c0      	blx	r8
     for (size_t i = 0; i < ns; i++) {
    6d46:	42b4      	cmp	r4, r6
    6d48:	d010      	beq.n	6d6c <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
       if (!readSector(sector + i, dst)) return false;
    6d4a:	f8d9 3000 	ldr.w	r3, [r9]
    6d4e:	4621      	mov	r1, r4
    6d50:	462a      	mov	r2, r5
    6d52:	4648      	mov	r0, r9
    6d54:	691b      	ldr	r3, [r3, #16]
    6d56:	4798      	blx	r3
    6d58:	4603      	mov	r3, r0
       callback(sector + i, dst, context);
    6d5a:	463a      	mov	r2, r7
    6d5c:	4620      	mov	r0, r4
    6d5e:	4629      	mov	r1, r5
     for (size_t i = 0; i < ns; i++) {
    6d60:	3401      	adds	r4, #1
       if (!readSector(sector + i, dst)) return false;
    6d62:	2b00      	cmp	r3, #0
    6d64:	d1ee      	bne.n	6d44 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x14>
  }
    6d66:	4618      	mov	r0, r3
    6d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     return true;
    6d6c:	2301      	movs	r3, #1
  }
    6d6e:	4618      	mov	r0, r3
    6d70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00006d74 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:
  uint32_t clusters_to_do;
  uint32_t free_count;
};

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    6d74:	b410      	push	{r4}
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    6d76:	6814      	ldr	r4, [r2, #0]
  if (n > 256) n = 256;
    6d78:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    6d7c:	46a4      	mov	ip, r4
    6d7e:	bf28      	it	cs
    6d80:	f44f 7c80 	movcs.w	ip, #256	; 0x100
  uint16_t *e = p + n;
    6d84:	eb01 004c 	add.w	r0, r1, ip, lsl #1
  while (p < e) {
    6d88:	4281      	cmp	r1, r0
    6d8a:	d207      	bcs.n	6d9c <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x28>
    if (*p++ == 0) state->free_count++;
    6d8c:	f831 3b02 	ldrh.w	r3, [r1], #2
    6d90:	b913      	cbnz	r3, 6d98 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>
    6d92:	6853      	ldr	r3, [r2, #4]
    6d94:	3301      	adds	r3, #1
    6d96:	6053      	str	r3, [r2, #4]
  while (p < e) {
    6d98:	4288      	cmp	r0, r1
    6d9a:	d8f7      	bhi.n	6d8c <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x18>
  }
  state->clusters_to_do -= n;
    6d9c:	eba4 040c 	sub.w	r4, r4, ip
    6da0:	6014      	str	r4, [r2, #0]
}
    6da2:	f85d 4b04 	ldr.w	r4, [sp], #4
    6da6:	4770      	bx	lr

00006da8 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    6da8:	b410      	push	{r4}
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    6daa:	6814      	ldr	r4, [r2, #0]
  if (n > 128) n = 128;
    6dac:	2c80      	cmp	r4, #128	; 0x80
    6dae:	46a4      	mov	ip, r4
    6db0:	bf28      	it	cs
    6db2:	f04f 0c80 	movcs.w	ip, #128	; 0x80
  uint32_t *e = p + n;
    6db6:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  while (p < e) {
    6dba:	4281      	cmp	r1, r0
    6dbc:	d207      	bcs.n	6dce <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x26>
    if (*p++ == 0) state->free_count++;
    6dbe:	f851 3b04 	ldr.w	r3, [r1], #4
    6dc2:	b913      	cbnz	r3, 6dca <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x22>
    6dc4:	6853      	ldr	r3, [r2, #4]
    6dc6:	3301      	adds	r3, #1
    6dc8:	6053      	str	r3, [r2, #4]
  while (p < e) {
    6dca:	4288      	cmp	r0, r1
    6dcc:	d8f7      	bhi.n	6dbe <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x16>
  }
  state->clusters_to_do -= n;
    6dce:	eba4 040c 	sub.w	r4, r4, ip
    6dd2:	6014      	str	r4, [r2, #0]
}
    6dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
    6dd8:	4770      	bx	lr
    6dda:	bf00      	nop

00006ddc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    6de0:	79c3      	ldrb	r3, [r0, #7]
    6de2:	4604      	mov	r4, r0
    6de4:	460d      	mov	r5, r1
    6de6:	4617      	mov	r7, r2
  if (fatType() == 32) {
    6de8:	2b20      	cmp	r3, #32
    6dea:	d059      	beq.n	6ea0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xc4>
  } else if (fatType() == 16) {
    6dec:	2b10      	cmp	r3, #16
    6dee:	d030      	beq.n	6e52 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x76>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    6df0:	2b0c      	cmp	r3, #12
    6df2:	d151      	bne.n	6e98 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6df4:	7a02      	ldrb	r2, [r0, #8]
    index += index >> 1;
    6df6:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    6dfa:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    6dfc:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    6e00:	fa11 f185 	uxtah	r1, r1, r5
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6e04:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    6e08:	4648      	mov	r0, r9
    6e0a:	b28e      	uxth	r6, r1
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6e0c:	fab2 f282 	clz	r2, r2
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    6e10:	f3c1 2146 	ubfx	r1, r1, #9, #7
    6e14:	0952      	lsrs	r2, r2, #5
    6e16:	eb01 0803 	add.w	r8, r1, r3
    return m_fatCache.prepare(sector, options);
    6e1a:	0052      	lsls	r2, r2, #1
    6e1c:	4641      	mov	r1, r8
    6e1e:	f002 fe6b 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6e22:	2800      	cmp	r0, #0
    6e24:	d038      	beq.n	6e98 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    index &= m_sectorMask;
    6e26:	f3c6 0608 	ubfx	r6, r6, #0, #9
    index++;
    6e2a:	1c73      	adds	r3, r6, #1
    uint16_t tmp = pc[index];
    6e2c:	5d86      	ldrb	r6, [r0, r6]
    if (index == m_bytesPerSector) {
    6e2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6e32:	d023      	beq.n	6e7c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xa0>
    tmp |= pc[index] << 8;
    6e34:	4418      	add	r0, r3
    6e36:	7803      	ldrb	r3, [r0, #0]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    6e38:	07ea      	lsls	r2, r5, #31
  if (isEOC(next)) {
    6e3a:	69e2      	ldr	r2, [r4, #28]
    tmp |= pc[index] << 8;
    6e3c:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    6e40:	bf4c      	ite	mi
    6e42:	091b      	lsrmi	r3, r3, #4
    6e44:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
  if (isEOC(next)) {
    6e48:	429a      	cmp	r2, r3
    6e4a:	d240      	bcs.n	6ece <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xf2>
    return 0;
    6e4c:	2000      	movs	r0, #0
}
    6e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6e52:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    6e54:	f3c1 2107 	ubfx	r1, r1, #8, #8
    6e58:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    6e5a:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6e5e:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    6e62:	4419      	add	r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6e64:	fab2 f282 	clz	r2, r2
    6e68:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    6e6a:	0052      	lsls	r2, r2, #1
    6e6c:	f002 fe44 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6e70:	b190      	cbz	r0, 6e98 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    6e72:	006d      	lsls	r5, r5, #1
    next = getLe16(pc + offset);
    6e74:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
    6e78:	5b43      	ldrh	r3, [r0, r5]
    6e7a:	e025      	b.n	6ec8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xec>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6e7c:	7a22      	ldrb	r2, [r4, #8]
    return m_fatCache.prepare(sector, options);
    6e7e:	f108 0101 	add.w	r1, r8, #1
    6e82:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6e84:	f1a2 0202 	sub.w	r2, r2, #2
    6e88:	fab2 f282 	clz	r2, r2
    6e8c:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    6e8e:	0052      	lsls	r2, r2, #1
    6e90:	f002 fe32 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    6e94:	2800      	cmp	r0, #0
    6e96:	d1ce      	bne.n	6e36 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x5a>
  return -1;
    6e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    6e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6ea0:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6ea2:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    6ea4:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6ea8:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    6eac:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6eb0:	fab2 f282 	clz	r2, r2
    6eb4:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    6eb6:	0052      	lsls	r2, r2, #1
    6eb8:	f002 fe1e 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6ebc:	2800      	cmp	r0, #0
    6ebe:	d0eb      	beq.n	6e98 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    6ec0:	00ad      	lsls	r5, r5, #2
    next = getLe32(pc + offset);
    6ec2:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    6ec6:	5943      	ldr	r3, [r0, r5]
  if (isEOC(next)) {
    6ec8:	69e2      	ldr	r2, [r4, #28]
    6eca:	429a      	cmp	r2, r3
    6ecc:	d3be      	bcc.n	6e4c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x70>
  return 1;
    6ece:	2001      	movs	r0, #1
  *value = next;
    6ed0:	603b      	str	r3, [r7, #0]
}
    6ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6ed6:	bf00      	nop

00006ed8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    6edc:	79c3      	ldrb	r3, [r0, #7]
    6ede:	4605      	mov	r5, r0
    6ee0:	460c      	mov	r4, r1
    6ee2:	4616      	mov	r6, r2
  if (fatType() == 32) {
    6ee4:	2b20      	cmp	r3, #32
    6ee6:	d048      	beq.n	6f7a <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xa2>
  if (fatType() == 16) {
    6ee8:	2b10      	cmp	r3, #16
    6eea:	d02d      	beq.n	6f48 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x70>
  if (FAT12_SUPPORT && fatType() == 12) {
    6eec:	2b0c      	cmp	r3, #12
    6eee:	d141      	bne.n	6f74 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    index += index >> 1;
    6ef0:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    6ef4:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    6ef6:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    6efa:	fa11 f184 	uxtah	r1, r1, r4
    6efe:	fa1f f881 	uxth.w	r8, r1
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    6f02:	f3c1 2146 	ubfx	r1, r1, #9, #7
    6f06:	18cf      	adds	r7, r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6f08:	7a03      	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    6f0a:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6f0c:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    6f0e:	4639      	mov	r1, r7
    6f10:	bf14      	ite	ne
    6f12:	2201      	movne	r2, #1
    6f14:	2203      	moveq	r2, #3
    6f16:	f002 fdef 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6f1a:	b358      	cbz	r0, 6f74 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    if (cluster & 1) {
    6f1c:	f014 0401 	ands.w	r4, r4, #1
    index &= m_sectorMask;
    6f20:	f3c8 0308 	ubfx	r3, r8, #0, #9
    if (cluster & 1) {
    6f24:	d03f      	beq.n	6fa6 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xce>
      tmp = (pc[index] & 0XF) | tmp << 4;
    6f26:	5cc2      	ldrb	r2, [r0, r3]
    6f28:	f002 020f 	and.w	r2, r2, #15
    6f2c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    pc[index] = tmp;
    6f30:	54c2      	strb	r2, [r0, r3]
    index++;
    6f32:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    6f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6f38:	d03a      	beq.n	6fb0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xd8>
    tmp = value >> 4;
    6f3a:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    6f3e:	4403      	add	r3, r0
    return true;
    6f40:	2001      	movs	r0, #1
    pc[index] = tmp;
    6f42:	701a      	strb	r2, [r3, #0]
}
    6f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6f48:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    6f4a:	f3c1 2107 	ubfx	r1, r1, #8, #8
    6f4e:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    6f50:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6f54:	2a02      	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
    6f56:	4419      	add	r1, r3
    6f58:	bf14      	ite	ne
    6f5a:	2201      	movne	r2, #1
    6f5c:	2203      	moveq	r2, #3
    6f5e:	f002 fdcb 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6f62:	4603      	mov	r3, r0
    6f64:	b130      	cbz	r0, 6f74 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    6f66:	0064      	lsls	r4, r4, #1
    return true;
    6f68:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
    6f6a:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    6f6e:	531e      	strh	r6, [r3, r4]
}
    6f70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
    6f74:	2000      	movs	r0, #0
}
    6f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6f7a:	7a03      	ldrb	r3, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6f7c:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    6f7e:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6f82:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    6f84:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    6f88:	bf14      	ite	ne
    6f8a:	2201      	movne	r2, #1
    6f8c:	2203      	moveq	r2, #3
    6f8e:	f002 fdb3 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6f92:	4603      	mov	r3, r0
    6f94:	2800      	cmp	r0, #0
    6f96:	d0ed      	beq.n	6f74 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    6f98:	00a4      	lsls	r4, r4, #2
    return true;
    6f9a:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
    6f9c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    6fa0:	511e      	str	r6, [r3, r4]
}
    6fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint8_t tmp = value;
    6fa6:	54c6      	strb	r6, [r0, r3]
    index++;
    6fa8:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    6faa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6fae:	d115      	bne.n	6fdc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x104>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6fb0:	7a2b      	ldrb	r3, [r5, #8]
    return m_fatCache.prepare(sector, options);
    6fb2:	1c79      	adds	r1, r7, #1
    6fb4:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6fb6:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    6fb8:	bf14      	ite	ne
    6fba:	2201      	movne	r2, #1
    6fbc:	2203      	moveq	r2, #3
    6fbe:	f002 fd9b 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    6fc2:	4603      	mov	r3, r0
    6fc4:	2800      	cmp	r0, #0
    6fc6:	d0d5      	beq.n	6f74 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    tmp = value >> 4;
    6fc8:	f3c6 1207 	ubfx	r2, r6, #4, #8
    if (!(cluster & 1)) {
    6fcc:	2c00      	cmp	r4, #0
    6fce:	d1b7      	bne.n	6f40 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    6fd0:	7819      	ldrb	r1, [r3, #0]
    6fd2:	f021 010f 	bic.w	r1, r1, #15
    6fd6:	ea41 1212 	orr.w	r2, r1, r2, lsr #4
    6fda:	e7b1      	b.n	6f40 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
    tmp = value >> 4;
    6fdc:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    6fe0:	4403      	add	r3, r0
    6fe2:	e7f5      	b.n	6fd0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xf8>

00006fe4 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    6fe8:	68c4      	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6fea:	b082      	sub	sp, #8
    6fec:	4605      	mov	r5, r0
    6fee:	460e      	mov	r6, r1
  if (m_allocSearchStart < current) {
    6ff0:	428c      	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6ff2:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
    6ff4:	d340      	bcc.n	7078 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x94>
    setStart = true;
    6ff6:	2701      	movs	r7, #1
    find++;
    6ff8:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    6ffa:	69eb      	ldr	r3, [r5, #28]
    6ffc:	aa01      	add	r2, sp, #4
    6ffe:	4628      	mov	r0, r5
    7000:	42a3      	cmp	r3, r4
    7002:	d205      	bcs.n	7010 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
    7004:	bb9f      	cbnz	r7, 706e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
      find = m_allocSearchStart;
    7006:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    7008:	2701      	movs	r7, #1
    find++;
    700a:	443c      	add	r4, r7
    if (find > m_lastCluster) {
    700c:	42a3      	cmp	r3, r4
    700e:	d32e      	bcc.n	706e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (cluster < 2 || cluster > m_lastCluster) {
    7010:	42a6      	cmp	r6, r4
    7012:	bf18      	it	ne
    7014:	2c01      	cmpne	r4, #1
    7016:	4621      	mov	r1, r4
    7018:	d929      	bls.n	706e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    701a:	f7ff fedf 	bl	6ddc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
    701e:	2800      	cmp	r0, #0
    7020:	db25      	blt.n	706e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    if (fg && f == 0) {
    7022:	d0e9      	beq.n	6ff8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    7024:	9b01      	ldr	r3, [sp, #4]
    7026:	2b00      	cmp	r3, #0
    7028:	d1e6      	bne.n	6ff8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
    702a:	b107      	cbz	r7, 702e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
    702c:	60ec      	str	r4, [r5, #12]
  if (cluster < 2 || cluster > m_lastCluster) {
    702e:	69eb      	ldr	r3, [r5, #28]
    7030:	42a3      	cmp	r3, r4
    7032:	d31c      	bcc.n	706e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    7034:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    7038:	4621      	mov	r1, r4
    703a:	4628      	mov	r0, r5
    703c:	f7ff ff4c 	bl	6ed8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
  if (!fatPutEOC(find)) {
    7040:	4607      	mov	r7, r0
    7042:	b1a0      	cbz	r0, 706e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (current) {
    7044:	b93e      	cbnz	r6, 7056 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (m_freeClusterCount >= 0) {
    7046:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7048:	2b00      	cmp	r3, #0
    704a:	db01      	blt.n	7050 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
      m_freeClusterCount += change;
    704c:	3b01      	subs	r3, #1
    704e:	626b      	str	r3, [r5, #36]	; 0x24
  *next = find;
    7050:	f8c8 4000 	str.w	r4, [r8]
  return true;
    7054:	e00c      	b.n	7070 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8c>
  if (cluster < 2 || cluster > m_lastCluster) {
    7056:	2e01      	cmp	r6, #1
    7058:	d009      	beq.n	706e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    705a:	69eb      	ldr	r3, [r5, #28]
    705c:	429e      	cmp	r6, r3
    705e:	d806      	bhi.n	706e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    7060:	4631      	mov	r1, r6
    7062:	4622      	mov	r2, r4
    7064:	4628      	mov	r0, r5
    7066:	f7ff ff37 	bl	6ed8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
    if (!fatPut(current, find)) {
    706a:	2800      	cmp	r0, #0
    706c:	d1eb      	bne.n	7046 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  return false;
    706e:	2700      	movs	r7, #0
}
    7070:	4638      	mov	r0, r7
    7072:	b002      	add	sp, #8
    7074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7078:	460c      	mov	r4, r1
    setStart = false;
    707a:	2700      	movs	r7, #0
    707c:	e7bc      	b.n	6ff8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    707e:	bf00      	nop

00007080 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    7080:	2901      	cmp	r1, #1
    7082:	d90c      	bls.n	709e <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    7084:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    7086:	69c4      	ldr	r4, [r0, #28]
    7088:	428c      	cmp	r4, r1
    708a:	d303      	bcc.n	7094 <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
    708c:	f85d 4b04 	ldr.w	r4, [sp], #4
    7090:	f7ff bea4 	b.w	6ddc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    7094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7098:	f85d 4b04 	ldr.w	r4, [sp], #4
    709c:	4770      	bx	lr
    709e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    70a2:	4770      	bx	lr

000070a4 <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    70a4:	2901      	cmp	r1, #1
    70a6:	d90b      	bls.n	70c0 <FatPartition::fatPut(unsigned long, unsigned long)+0x1c>
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    70a8:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    70aa:	69c4      	ldr	r4, [r0, #28]
    70ac:	428c      	cmp	r4, r1
    70ae:	d303      	bcc.n	70b8 <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
}
    70b0:	f85d 4b04 	ldr.w	r4, [sp], #4
    70b4:	f7ff bf10 	b.w	6ed8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
    70b8:	2000      	movs	r0, #0
    70ba:	f85d 4b04 	ldr.w	r4, [sp], #4
    70be:	4770      	bx	lr
    70c0:	2000      	movs	r0, #0
    70c2:	4770      	bx	lr

000070c4 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    70c4:	b570      	push	{r4, r5, r6, lr}
    70c6:	4605      	mov	r5, r0
    70c8:	b082      	sub	sp, #8
    70ca:	460c      	mov	r4, r1
    70cc:	e01d      	b.n	710a <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
    70ce:	69eb      	ldr	r3, [r5, #28]
    70d0:	429c      	cmp	r4, r3
    70d2:	d81f      	bhi.n	7114 <FatPartition::freeChain(unsigned long)+0x50>
    70d4:	f7ff fe82 	bl	6ddc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
    70d8:	4606      	mov	r6, r0
    if (fg < 0) {
    70da:	4621      	mov	r1, r4
    70dc:	2200      	movs	r2, #0
    70de:	2e00      	cmp	r6, #0
    70e0:	4628      	mov	r0, r5
    70e2:	db17      	blt.n	7114 <FatPartition::freeChain(unsigned long)+0x50>
  if (cluster < 2 || cluster > m_lastCluster) {
    70e4:	69eb      	ldr	r3, [r5, #28]
    70e6:	429c      	cmp	r4, r3
    70e8:	d814      	bhi.n	7114 <FatPartition::freeChain(unsigned long)+0x50>
    70ea:	f7ff fef5 	bl	6ed8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      m_allocSearchStart = cluster - 1;
    70ee:	1e62      	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
    70f0:	b180      	cbz	r0, 7114 <FatPartition::freeChain(unsigned long)+0x50>
    if (m_freeClusterCount >= 0) {
    70f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    70f4:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
    70f6:	f103 0301 	add.w	r3, r3, #1
    70fa:	bfa8      	it	ge
    70fc:	626b      	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    70fe:	68eb      	ldr	r3, [r5, #12]
    7100:	42a3      	cmp	r3, r4
    cluster = next;
    7102:	9c01      	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
    7104:	bf88      	it	hi
    7106:	60ea      	strhi	r2, [r5, #12]
  } while (fg);
    7108:	b12e      	cbz	r6, 7116 <FatPartition::freeChain(unsigned long)+0x52>
  if (cluster < 2 || cluster > m_lastCluster) {
    710a:	2c01      	cmp	r4, #1
    710c:	4621      	mov	r1, r4
    710e:	aa01      	add	r2, sp, #4
    7110:	4628      	mov	r0, r5
    7112:	d8dc      	bhi.n	70ce <FatPartition::freeChain(unsigned long)+0xa>
  return false;
    7114:	2000      	movs	r0, #0
}
    7116:	b002      	add	sp, #8
    7118:	bd70      	pop	{r4, r5, r6, pc}
    711a:	bf00      	nop

0000711c <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    711c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7120:	4606      	mov	r6, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    7122:	6a40      	ldr	r0, [r0, #36]	; 0x24
int32_t FatPartition::freeClusterCount() {
    7124:	b084      	sub	sp, #16
  if (m_freeClusterCount >= 0) {
    7126:	2800      	cmp	r0, #0
    7128:	da1b      	bge.n	7162 <FatPartition::freeClusterCount()+0x46>
    return m_fatType;
    712a:	79f2      	ldrb	r2, [r6, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    712c:	2a0c      	cmp	r2, #12
    712e:	d11b      	bne.n	7168 <FatPartition::freeClusterCount()+0x4c>
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    7130:	69f7      	ldr	r7, [r6, #28]
    7132:	1c7b      	adds	r3, r7, #1
    for (unsigned i = 2; i < todo; i++) {
    7134:	2b02      	cmp	r3, #2
    7136:	f240 80cd 	bls.w	72d4 <FatPartition::freeClusterCount()+0x1b8>
    713a:	2402      	movs	r4, #2
    uint32_t free = 0;
    713c:	2500      	movs	r5, #0
    713e:	4621      	mov	r1, r4
    7140:	aa02      	add	r2, sp, #8
    7142:	4630      	mov	r0, r6
    7144:	f7ff fe4a 	bl	6ddc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
      uint32_t c;
      int8_t fg = fatGet(i, &c);
      if (fg < 0) {
    7148:	2800      	cmp	r0, #0
    for (unsigned i = 2; i < todo; i++) {
    714a:	f104 0301 	add.w	r3, r4, #1
      if (fg < 0) {
    714e:	db06      	blt.n	715e <FatPartition::freeClusterCount()+0x42>
        DBG_FAIL_MACRO;
        return -1;
      }
      if (fg && c == 0) {
    7150:	d157      	bne.n	7202 <FatPartition::freeClusterCount()+0xe6>
    for (unsigned i = 2; i < todo; i++) {
    7152:	42a7      	cmp	r7, r4
    7154:	461c      	mov	r4, r3
    7156:	d05c      	beq.n	7212 <FatPartition::freeClusterCount()+0xf6>
  if (cluster < 2 || cluster > m_lastCluster) {
    7158:	69f2      	ldr	r2, [r6, #28]
    715a:	4293      	cmp	r3, r2
    715c:	d9ef      	bls.n	713e <FatPartition::freeClusterCount()+0x22>
#if USE_SEPARATE_FAT_CACHE
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
    715e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
  }

  setFreeClusterCount(state.free_count);
  return state.free_count;
}
    7162:	b004      	add	sp, #16
    7164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  state.clusters_to_do = m_lastCluster + 1;
    7168:	69f1      	ldr	r1, [r6, #28]
  state.free_count = 0;
    716a:	2000      	movs	r0, #0
    return m_status & CACHE_STATUS_DIRTY;
    716c:	f896 3238 	ldrb.w	r3, [r6, #568]	; 0x238
  state.clusters_to_do = m_lastCluster + 1;
    7170:	3101      	adds	r1, #1
  num_sectors = m_sectorsPerFat;
    7172:	6934      	ldr	r4, [r6, #16]
    if (isDirty() && !sync()) {
    7174:	07db      	lsls	r3, r3, #31
  state.clusters_to_do = m_lastCluster + 1;
    7176:	e9cd 1002 	strd	r1, r0, [sp, #8]
    717a:	f100 8085 	bmi.w	7288 <FatPartition::freeClusterCount()+0x16c>
    m_status = 0;
    717e:	2100      	movs	r1, #0
    m_sector = 0XFFFFFFFF;
    7180:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  if (fatType() == FAT_TYPE_FAT32) {
    7184:	2a20      	cmp	r2, #32
    return m_buffer;
    7186:	f506 7712 	add.w	r7, r6, #584	; 0x248
    m_status = 0;
    718a:	f886 1238 	strb.w	r1, [r6, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    718e:	f8c6 3244 	str.w	r3, [r6, #580]	; 0x244
    7192:	d042      	beq.n	721a <FatPartition::freeClusterCount()+0xfe>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    7194:	f8d6 8000 	ldr.w	r8, [r6]
    7198:	4b4f      	ldr	r3, [pc, #316]	; (72d8 <FatPartition::freeClusterCount()+0x1bc>)
    719a:	f8d8 2000 	ldr.w	r2, [r8]
    719e:	f8d6 a018 	ldr.w	sl, [r6, #24]
    71a2:	6995      	ldr	r5, [r2, #24]
    71a4:	429d      	cmp	r5, r3
    71a6:	d178      	bne.n	729a <FatPartition::freeClusterCount()+0x17e>
     for (size_t i = 0; i < ns; i++) {
    71a8:	2c00      	cmp	r4, #0
    71aa:	f000 8082 	beq.w	72b2 <FatPartition::freeClusterCount()+0x196>
    71ae:	eb0a 0904 	add.w	r9, sl, r4
       if (!readSector(sector + i, dst)) return false;
    71b2:	6913      	ldr	r3, [r2, #16]
    71b4:	4651      	mov	r1, sl
    71b6:	463a      	mov	r2, r7
    71b8:	4640      	mov	r0, r8
    71ba:	4798      	blx	r3
    71bc:	2800      	cmp	r0, #0
    71be:	d0ce      	beq.n	715e <FatPartition::freeClusterCount()+0x42>
  unsigned int n = state->clusters_to_do;
    71c0:	9902      	ldr	r1, [sp, #8]
  if (n > 256) n = 256;
    71c2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    71c6:	468e      	mov	lr, r1
    71c8:	bf28      	it	cs
    71ca:	f44f 7e80 	movcs.w	lr, #256	; 0x100
  uint16_t *e = p + n;
    71ce:	eb07 0c4e 	add.w	ip, r7, lr, lsl #1
  while (p < e) {
    71d2:	45bc      	cmp	ip, r7
    71d4:	d90b      	bls.n	71ee <FatPartition::freeClusterCount()+0xd2>
    71d6:	9d03      	ldr	r5, [sp, #12]
    71d8:	463b      	mov	r3, r7
    71da:	2200      	movs	r2, #0
    if (*p++ == 0) state->free_count++;
    71dc:	f833 4b02 	ldrh.w	r4, [r3], #2
    71e0:	b90c      	cbnz	r4, 71e6 <FatPartition::freeClusterCount()+0xca>
    71e2:	3501      	adds	r5, #1
    71e4:	4602      	mov	r2, r0
  while (p < e) {
    71e6:	459c      	cmp	ip, r3
    71e8:	d8f8      	bhi.n	71dc <FatPartition::freeClusterCount()+0xc0>
    71ea:	b102      	cbz	r2, 71ee <FatPartition::freeClusterCount()+0xd2>
    71ec:	9503      	str	r5, [sp, #12]
     for (size_t i = 0; i < ns; i++) {
    71ee:	f10a 0a01 	add.w	sl, sl, #1
  state->clusters_to_do -= n;
    71f2:	eba1 010e 	sub.w	r1, r1, lr
    71f6:	45d1      	cmp	r9, sl
    71f8:	9102      	str	r1, [sp, #8]
    71fa:	d05a      	beq.n	72b2 <FatPartition::freeClusterCount()+0x196>
       if (!readSector(sector + i, dst)) return false;
    71fc:	f8d8 2000 	ldr.w	r2, [r8]
    7200:	e7d7      	b.n	71b2 <FatPartition::freeClusterCount()+0x96>
      if (fg && c == 0) {
    7202:	9a02      	ldr	r2, [sp, #8]
    7204:	2a00      	cmp	r2, #0
    7206:	d1a4      	bne.n	7152 <FatPartition::freeClusterCount()+0x36>
    for (unsigned i = 2; i < todo; i++) {
    7208:	42a7      	cmp	r7, r4
        free++;
    720a:	f105 0501 	add.w	r5, r5, #1
    for (unsigned i = 2; i < todo; i++) {
    720e:	461c      	mov	r4, r3
    7210:	d1a2      	bne.n	7158 <FatPartition::freeClusterCount()+0x3c>
    return free;
    7212:	4628      	mov	r0, r5
}
    7214:	b004      	add	sp, #16
    7216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    721a:	f8d6 a000 	ldr.w	sl, [r6]
    721e:	4b2e      	ldr	r3, [pc, #184]	; (72d8 <FatPartition::freeClusterCount()+0x1bc>)
    7220:	f8da 2000 	ldr.w	r2, [sl]
    7224:	f8d6 9018 	ldr.w	r9, [r6, #24]
    7228:	6995      	ldr	r5, [r2, #24]
    722a:	429d      	cmp	r5, r3
    722c:	d146      	bne.n	72bc <FatPartition::freeClusterCount()+0x1a0>
     for (size_t i = 0; i < ns; i++) {
    722e:	2c00      	cmp	r4, #0
    7230:	d03f      	beq.n	72b2 <FatPartition::freeClusterCount()+0x196>
    7232:	eb09 0804 	add.w	r8, r9, r4
       if (!readSector(sector + i, dst)) return false;
    7236:	6913      	ldr	r3, [r2, #16]
    7238:	4649      	mov	r1, r9
    723a:	463a      	mov	r2, r7
    723c:	4650      	mov	r0, sl
    723e:	4798      	blx	r3
    7240:	2800      	cmp	r0, #0
    7242:	d08c      	beq.n	715e <FatPartition::freeClusterCount()+0x42>
  unsigned int n = state->clusters_to_do;
    7244:	f8dd c008 	ldr.w	ip, [sp, #8]
  if (n > 128) n = 128;
    7248:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
    724c:	46e6      	mov	lr, ip
    724e:	bf28      	it	cs
    7250:	f04f 0e80 	movcs.w	lr, #128	; 0x80
  uint32_t *e = p + n;
    7254:	eb07 028e 	add.w	r2, r7, lr, lsl #2
  while (p < e) {
    7258:	42ba      	cmp	r2, r7
    725a:	d90b      	bls.n	7274 <FatPartition::freeClusterCount()+0x158>
    725c:	9d03      	ldr	r5, [sp, #12]
    725e:	463b      	mov	r3, r7
    7260:	2100      	movs	r1, #0
    if (*p++ == 0) state->free_count++;
    7262:	f853 4b04 	ldr.w	r4, [r3], #4
    7266:	b90c      	cbnz	r4, 726c <FatPartition::freeClusterCount()+0x150>
    7268:	3501      	adds	r5, #1
    726a:	4601      	mov	r1, r0
  while (p < e) {
    726c:	429a      	cmp	r2, r3
    726e:	d8f8      	bhi.n	7262 <FatPartition::freeClusterCount()+0x146>
    7270:	b101      	cbz	r1, 7274 <FatPartition::freeClusterCount()+0x158>
    7272:	9503      	str	r5, [sp, #12]
     for (size_t i = 0; i < ns; i++) {
    7274:	f109 0901 	add.w	r9, r9, #1
  state->clusters_to_do -= n;
    7278:	ebac 030e 	sub.w	r3, ip, lr
    727c:	45c8      	cmp	r8, r9
    727e:	9302      	str	r3, [sp, #8]
    7280:	d017      	beq.n	72b2 <FatPartition::freeClusterCount()+0x196>
       if (!readSector(sector + i, dst)) return false;
    7282:	f8da 2000 	ldr.w	r2, [sl]
    7286:	e7d6      	b.n	7236 <FatPartition::freeClusterCount()+0x11a>
    if (isDirty() && !sync()) {
    7288:	f506 700e 	add.w	r0, r6, #568	; 0x238
    728c:	f002 fc08 	bl	9aa0 <FsCache::sync()>
    7290:	2800      	cmp	r0, #0
    7292:	f43f af64 	beq.w	715e <FatPartition::freeClusterCount()+0x42>
    7296:	79f2      	ldrb	r2, [r6, #7]
    7298:	e771      	b.n	717e <FatPartition::freeClusterCount()+0x62>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    729a:	4623      	mov	r3, r4
    729c:	ac02      	add	r4, sp, #8
    729e:	463a      	mov	r2, r7
    72a0:	4651      	mov	r1, sl
    72a2:	9401      	str	r4, [sp, #4]
    72a4:	4640      	mov	r0, r8
    72a6:	4c0d      	ldr	r4, [pc, #52]	; (72dc <FatPartition::freeClusterCount()+0x1c0>)
    72a8:	9400      	str	r4, [sp, #0]
    72aa:	47a8      	blx	r5
    72ac:	2800      	cmp	r0, #0
    72ae:	f43f af56 	beq.w	715e <FatPartition::freeClusterCount()+0x42>
  setFreeClusterCount(state.free_count);
    72b2:	9803      	ldr	r0, [sp, #12]
    m_freeClusterCount = value;
    72b4:	6270      	str	r0, [r6, #36]	; 0x24
}
    72b6:	b004      	add	sp, #16
    72b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    72bc:	4623      	mov	r3, r4
    72be:	ac02      	add	r4, sp, #8
    72c0:	463a      	mov	r2, r7
    72c2:	4649      	mov	r1, r9
    72c4:	9401      	str	r4, [sp, #4]
    72c6:	4650      	mov	r0, sl
    72c8:	4c05      	ldr	r4, [pc, #20]	; (72e0 <FatPartition::freeClusterCount()+0x1c4>)
    72ca:	9400      	str	r4, [sp, #0]
    72cc:	47a8      	blx	r5
    72ce:	2800      	cmp	r0, #0
    72d0:	d1ef      	bne.n	72b2 <FatPartition::freeClusterCount()+0x196>
    72d2:	e744      	b.n	715e <FatPartition::freeClusterCount()+0x42>
    for (unsigned i = 2; i < todo; i++) {
    72d4:	2000      	movs	r0, #0
    72d6:	e744      	b.n	7162 <FatPartition::freeClusterCount()+0x46>
    72d8:	00006d31 	.word	0x00006d31
    72dc:	00006d75 	.word	0x00006d75
    72e0:	00006da9 	.word	0x00006da9

000072e4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    72e4:	b570      	push	{r4, r5, r6, lr}
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    72e6:	2300      	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    72e8:	4604      	mov	r4, r0
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    72ea:	4615      	mov	r5, r2
  m_allocSearchStart = 1;
    72ec:	2001      	movs	r0, #1
    m_sector = 0XFFFFFFFF;
    72ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  m_cache.init(dev);
    72f2:	f104 0628 	add.w	r6, r4, #40	; 0x28
  m_blockDev = dev;
    72f6:	6021      	str	r1, [r4, #0]
  m_fatType = 0;
    72f8:	71e3      	strb	r3, [r4, #7]
  m_allocSearchStart = 1;
    72fa:	60e0      	str	r0, [r4, #12]
    m_blockDev = blockDev;
    72fc:	62e1      	str	r1, [r4, #44]	; 0x2c
    72fe:	f8c4 123c 	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    7302:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    7306:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    730a:	6362      	str	r2, [r4, #52]	; 0x34
    730c:	f8c4 2244 	str.w	r2, [r4, #580]	; 0x244
  if (part) {
    7310:	b1cd      	cbz	r5, 7346 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    7312:	2d04      	cmp	r5, #4
    7314:	d901      	bls.n	731a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    7316:	2000      	movs	r0, #0
}
    7318:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.prepare(sector, options);
    731a:	461a      	mov	r2, r3
    731c:	4619      	mov	r1, r3
    731e:	4630      	mov	r0, r6
    7320:	f002 fbea 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
    MbrPart_t* mp = mbr->part + part - 1;
    7324:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    7328:	f500 72df 	add.w	r2, r0, #446	; 0x1be
    732c:	442b      	add	r3, r5
    732e:	011d      	lsls	r5, r3, #4
    7330:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    7334:	2800      	cmp	r0, #0
    7336:	d0ee      	beq.n	7316 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    7338:	7919      	ldrb	r1, [r3, #4]
    733a:	2900      	cmp	r1, #0
    733c:	d0eb      	beq.n	7316 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    733e:	5d52      	ldrb	r2, [r2, r5]
    7340:	0652      	lsls	r2, r2, #25
    7342:	d1e8      	bne.n	7316 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
    7344:	689d      	ldr	r5, [r3, #8]
    7346:	2200      	movs	r2, #0
    7348:	4629      	mov	r1, r5
    734a:	4630      	mov	r0, r6
    734c:	f002 fbd4 	bl	9af8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    7350:	2800      	cmp	r0, #0
    7352:	d0e0      	beq.n	7316 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    7354:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    7358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    735c:	d1db      	bne.n	7316 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
    735e:	7c03      	ldrb	r3, [r0, #16]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    7360:	1e5a      	subs	r2, r3, #1
  m_fatCount = bpb->fatCount;
    7362:	7223      	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    7364:	2a01      	cmp	r2, #1
    7366:	d8d6      	bhi.n	7316 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    7368:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    736a:	1e4b      	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    736c:	2901      	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    736e:	7121      	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    7370:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    7372:	f04f 0300 	mov.w	r3, #0
    7376:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7378:	d044      	beq.n	7404 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x120>
    737a:	2201      	movs	r2, #1
    737c:	0052      	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
    737e:	3301      	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7380:	b2d2      	uxtb	r2, r2
    m_sectorsPerClusterShift++;
    7382:	b2db      	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7384:	4291      	cmp	r1, r2
    7386:	d004      	beq.n	7392 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xae>
    if (tmp == 0) {
    7388:	2b08      	cmp	r3, #8
    738a:	d1f7      	bne.n	737c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x98>
  return false;
    738c:	2000      	movs	r0, #0
    738e:	71a3      	strb	r3, [r4, #6]
}
    7390:	bd70      	pop	{r4, r5, r6, pc}
  clusterCount >>= m_sectorsPerClusterShift;
    7392:	461e      	mov	r6, r3
    7394:	71a3      	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    7396:	8ac1      	ldrh	r1, [r0, #22]
    7398:	6121      	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    739a:	b909      	cbnz	r1, 73a0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xbc>
    739c:	6a41      	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    739e:	6121      	str	r1, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    73a0:	89c2      	ldrh	r2, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    73a2:	f8b0 3011 	ldrh.w	r3, [r0, #17]
    73a6:	442a      	add	r2, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    73a8:	8163      	strh	r3, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    73aa:	015b      	lsls	r3, r3, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    73ac:	61a2      	str	r2, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    73ae:	f890 c010 	ldrb.w	ip, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    73b2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    73b6:	fb01 220c 	mla	r2, r1, ip, r2
  m_dataStartSector = m_rootDirStart +
    73ba:	eb02 2353 	add.w	r3, r2, r3, lsr #9
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    73be:	6222      	str	r2, [r4, #32]
  totalSectors = getLe16(bpb->totalSectors16);
    73c0:	f8b0 2013 	ldrh.w	r2, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    73c4:	6163      	str	r3, [r4, #20]
  if (totalSectors == 0) {
    73c6:	b902      	cbnz	r2, 73ca <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xe6>
  return *reinterpret_cast<const uint32_t*>(src);
    73c8:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    73ca:	1aed      	subs	r5, r5, r3
    73cc:	18ab      	adds	r3, r5, r2
  clusterCount >>= m_sectorsPerClusterShift;
    73ce:	40f3      	lsrs	r3, r6
  m_lastCluster = clusterCount + 1;
    73d0:	1c5a      	adds	r2, r3, #1
    73d2:	61e2      	str	r2, [r4, #28]
    m_freeClusterCount = value;
    73d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    73d8:	6262      	str	r2, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    73da:	f640 72f4 	movw	r2, #4084	; 0xff4
    73de:	4293      	cmp	r3, r2
    73e0:	d90c      	bls.n	73fc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x118>
  } else if (clusterCount < 65525) {
    73e2:	f64f 72f4 	movw	r2, #65524	; 0xfff4
    73e6:	4293      	cmp	r3, r2
    73e8:	d90a      	bls.n	7400 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11c>
    73ea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    73ec:	2320      	movs	r3, #32
    73ee:	6222      	str	r2, [r4, #32]
  return true;
    73f0:	2001      	movs	r0, #1
    m_fatType = 12;
    73f2:	71e3      	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    73f4:	6321      	str	r1, [r4, #48]	; 0x30
    73f6:	f8c4 1240 	str.w	r1, [r4, #576]	; 0x240
}
    73fa:	bd70      	pop	{r4, r5, r6, pc}
    73fc:	230c      	movs	r3, #12
    73fe:	e7f7      	b.n	73f0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
    7400:	2310      	movs	r3, #16
    7402:	e7f5      	b.n	73f0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7404:	461e      	mov	r6, r3
    7406:	e7c6      	b.n	7396 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xb2>

00007408 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    7408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    740a:	2600      	movs	r6, #0
  if (from.m_fFile) {
    740c:	6b8f      	ldr	r7, [r1, #56]	; 0x38
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    740e:	460d      	mov	r5, r1
    7410:	4604      	mov	r4, r0
    7412:	e9c0 660e 	strd	r6, r6, [r0, #56]	; 0x38
  if (from.m_fFile) {
    7416:	b19f      	cbz	r7, 7440 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x38>
    m_fFile = new (m_fileMem) FatFile;
    7418:	4601      	mov	r1, r0
    741a:	2024      	movs	r0, #36	; 0x24
    741c:	f000 f8dc 	bl	75d8 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    7420:	8006      	strh	r6, [r0, #0]
    7422:	7086      	strb	r6, [r0, #2]
    *m_fFile = *from.m_fFile;
    7424:	4684      	mov	ip, r0
    7426:	6bad      	ldr	r5, [r5, #56]	; 0x38
    m_fFile = new (m_fileMem) FatFile;
    7428:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    742a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    742c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7432:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7436:	682b      	ldr	r3, [r5, #0]
    7438:	f8cc 3000 	str.w	r3, [ip]
}
    743c:	4620      	mov	r0, r4
    743e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (from.m_xFile) {
    7440:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    7442:	2b00      	cmp	r3, #0
    7444:	d0fa      	beq.n	743c <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_xFile = new (m_fileMem) ExFatFile;
    7446:	4601      	mov	r1, r0
    7448:	2038      	movs	r0, #56	; 0x38
    744a:	f000 f8c5 	bl	75d8 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    744e:	f880 7031 	strb.w	r7, [r0, #49]	; 0x31
    7452:	8647      	strh	r7, [r0, #50]	; 0x32
    *m_xFile = *from.m_xFile;
    7454:	4602      	mov	r2, r0
    7456:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    m_xFile = new (m_fileMem) ExFatFile;
    7458:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    745a:	f103 0730 	add.w	r7, r3, #48	; 0x30
    745e:	681e      	ldr	r6, [r3, #0]
    7460:	3310      	adds	r3, #16
    7462:	f853 5c0c 	ldr.w	r5, [r3, #-12]
    7466:	3210      	adds	r2, #16
    7468:	f853 0c08 	ldr.w	r0, [r3, #-8]
    746c:	f853 1c04 	ldr.w	r1, [r3, #-4]
    7470:	42bb      	cmp	r3, r7
    7472:	f842 6c10 	str.w	r6, [r2, #-16]
    7476:	f842 5c0c 	str.w	r5, [r2, #-12]
    747a:	f842 0c08 	str.w	r0, [r2, #-8]
    747e:	f842 1c04 	str.w	r1, [r2, #-4]
    7482:	d1ec      	bne.n	745e <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x56>
    7484:	681b      	ldr	r3, [r3, #0]
}
    7486:	4620      	mov	r0, r4
    *m_xFile = *from.m_xFile;
    7488:	6013      	str	r3, [r2, #0]
}
    748a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000748c <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    748c:	b510      	push	{r4, lr}
    748e:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    7490:	6b80      	ldr	r0, [r0, #56]	; 0x38
    7492:	b110      	cbz	r0, 749a <FsBaseFile::close()+0xe>
    7494:	f7fd fce2 	bl	4e5c <FatFile::close()>
    7498:	b930      	cbnz	r0, 74a8 <FsBaseFile::close()+0x1c>
    m_fFile = nullptr;
    return true;
  }
  if (m_xFile && m_xFile->close()) {
    749a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    749c:	b110      	cbz	r0, 74a4 <FsBaseFile::close()+0x18>
    749e:	f7fb fbcf 	bl	2c40 <ExFatFile::close()>
    74a2:	b920      	cbnz	r0, 74ae <FsBaseFile::close()+0x22>
    m_xFile = nullptr;
    return true;
  }
  return false;
    74a4:	2000      	movs	r0, #0
}
    74a6:	bd10      	pop	{r4, pc}
    m_fFile = nullptr;
    74a8:	2300      	movs	r3, #0
    74aa:	63a3      	str	r3, [r4, #56]	; 0x38
}
    74ac:	bd10      	pop	{r4, pc}
    m_xFile = nullptr;
    74ae:	2300      	movs	r3, #0
    74b0:	63e3      	str	r3, [r4, #60]	; 0x3c
}
    74b2:	bd10      	pop	{r4, pc}

000074b4 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    74b4:	2900      	cmp	r1, #0
    74b6:	d052      	beq.n	755e <FsBaseFile::open(FsVolume*, char const*, int)+0xaa>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    74b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    74bc:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    74be:	6b80      	ldr	r0, [r0, #56]	; 0x38
    74c0:	460d      	mov	r5, r1
    74c2:	4617      	mov	r7, r2
    74c4:	461e      	mov	r6, r3
    74c6:	b110      	cbz	r0, 74ce <FsBaseFile::open(FsVolume*, char const*, int)+0x1a>
    74c8:	f7fd fcc8 	bl	4e5c <FatFile::close()>
    74cc:	bba0      	cbnz	r0, 7538 <FsBaseFile::open(FsVolume*, char const*, int)+0x84>
  if (m_xFile && m_xFile->close()) {
    74ce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    74d0:	b110      	cbz	r0, 74d8 <FsBaseFile::open(FsVolume*, char const*, int)+0x24>
    74d2:	f7fb fbb5 	bl	2c40 <ExFatFile::close()>
    74d6:	bbb8      	cbnz	r0, 7548 <FsBaseFile::open(FsVolume*, char const*, int)+0x94>
    return false;
  }
  close();
  if (vol->m_fVol) {
    74d8:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    74dc:	f1b8 0f00 	cmp.w	r8, #0
    74e0:	d011      	beq.n	7506 <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_fFile = new (m_fileMem) FatFile;
    74e2:	4621      	mov	r1, r4
    74e4:	2024      	movs	r0, #36	; 0x24
    74e6:	f000 f877 	bl	75d8 <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    74ea:	4633      	mov	r3, r6
    74ec:	2600      	movs	r6, #0
    74ee:	463a      	mov	r2, r7
    74f0:	8006      	strh	r6, [r0, #0]
    74f2:	7086      	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    74f4:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    74f6:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
    74fa:	f7fd feb7 	bl	526c <FatFile::open(FatVolume*, char const*, int)>
    74fe:	bb58      	cbnz	r0, 7558 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
      return true;
    }
    m_fFile = nullptr;
    7500:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    7502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    7506:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    750a:	b193      	cbz	r3, 7532 <FsBaseFile::open(FsVolume*, char const*, int)+0x7e>
    m_xFile = new (m_fileMem) ExFatFile;
    750c:	4621      	mov	r1, r4
    750e:	2038      	movs	r0, #56	; 0x38
    7510:	f000 f862 	bl	75d8 <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    7514:	4633      	mov	r3, r6
    7516:	f880 8031 	strb.w	r8, [r0, #49]	; 0x31
    751a:	463a      	mov	r2, r7
    751c:	f8a0 8032 	strh.w	r8, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    7520:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    7522:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    7526:	f7fb ffbf 	bl	34a8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    752a:	b9a8      	cbnz	r0, 7558 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
    m_xFile = nullptr;
    752c:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    752e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    7532:	2000      	movs	r0, #0
}
    7534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_fFile = nullptr;
    7538:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    753a:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_fFile = nullptr;
    753e:	63a3      	str	r3, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    7540:	f1b8 0f00 	cmp.w	r8, #0
    7544:	d1cd      	bne.n	74e2 <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    7546:	e7de      	b.n	7506 <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_xFile = nullptr;
    7548:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    754a:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_xFile = nullptr;
    754e:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (vol->m_fVol) {
    7550:	f1b8 0f00 	cmp.w	r8, #0
    7554:	d1c5      	bne.n	74e2 <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    7556:	e7d6      	b.n	7506 <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
      return true;
    7558:	2001      	movs	r0, #1
}
    755a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    755e:	2000      	movs	r0, #0
}
    7560:	4770      	bx	lr
    7562:	bf00      	nop

00007564 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    7564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7566:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    7568:	6b80      	ldr	r0, [r0, #56]	; 0x38
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    756a:	460d      	mov	r5, r1
    756c:	4617      	mov	r7, r2
  if (m_fFile && m_fFile->close()) {
    756e:	b110      	cbz	r0, 7576 <FsBaseFile::openNext(FsBaseFile*, int)+0x12>
    7570:	f7fd fc74 	bl	4e5c <FatFile::close()>
    7574:	bb38      	cbnz	r0, 75c6 <FsBaseFile::openNext(FsBaseFile*, int)+0x62>
  if (m_xFile && m_xFile->close()) {
    7576:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    7578:	b110      	cbz	r0, 7580 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    757a:	f7fb fb61 	bl	2c40 <ExFatFile::close()>
    757e:	bb38      	cbnz	r0, 75d0 <FsBaseFile::openNext(FsBaseFile*, int)+0x6c>
  close();
  if (dir->m_fFile) {
    7580:	6bae      	ldr	r6, [r5, #56]	; 0x38
    7582:	b176      	cbz	r6, 75a2 <FsBaseFile::openNext(FsBaseFile*, int)+0x3e>
    m_fFile = new (m_fileMem) FatFile;
    7584:	4621      	mov	r1, r4
    7586:	2024      	movs	r0, #36	; 0x24
    7588:	f000 f826 	bl	75d8 <operator new(unsigned int, unsigned long*)>
    758c:	2100      	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    758e:	463a      	mov	r2, r7
    7590:	8001      	strh	r1, [r0, #0]
    7592:	7081      	strb	r1, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    7594:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    7596:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    7598:	f7fe f9ce 	bl	5938 <FatFile::openNext(FatFile*, int)>
    759c:	b988      	cbnz	r0, 75c2 <FsBaseFile::openNext(FsBaseFile*, int)+0x5e>
      return true;
    }
    m_fFile = nullptr;
    759e:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    75a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    75a2:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    75a4:	2800      	cmp	r0, #0
    75a6:	d0fb      	beq.n	75a0 <FsBaseFile::openNext(FsBaseFile*, int)+0x3c>
    m_xFile = new (m_fileMem) ExFatFile;
    75a8:	4621      	mov	r1, r4
    75aa:	2038      	movs	r0, #56	; 0x38
    75ac:	f000 f814 	bl	75d8 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    75b0:	463a      	mov	r2, r7
    75b2:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
    75b6:	8646      	strh	r6, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    75b8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    75ba:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    75bc:	f7fb ff7c 	bl	34b8 <ExFatFile::openNext(ExFatFile*, int)>
    75c0:	b120      	cbz	r0, 75cc <FsBaseFile::openNext(FsBaseFile*, int)+0x68>
      return true;
    75c2:	2001      	movs	r0, #1
}
    75c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_fFile = nullptr;
    75c6:	2300      	movs	r3, #0
    75c8:	63a3      	str	r3, [r4, #56]	; 0x38
    return true;
    75ca:	e7d9      	b.n	7580 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    m_xFile = nullptr;
    75cc:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    75ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_xFile = nullptr;
    75d0:	2300      	movs	r3, #0
    75d2:	63e3      	str	r3, [r4, #60]	; 0x3c
    return true;
    75d4:	e7d4      	b.n	7580 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    75d6:	bf00      	nop

000075d8 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    75d8:	4608      	mov	r0, r1
    75da:	4770      	bx	lr

000075dc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    75dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_fVol = nullptr;
    75e0:	2600      	movs	r6, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    75e2:	4604      	mov	r4, r0
    75e4:	4698      	mov	r8, r3
  m_blockDev = blockDev;
    75e6:	f8c0 1488 	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    75ea:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    75ee:	4601      	mov	r1, r0
    75f0:	f44f 6090 	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    75f4:	4617      	mov	r7, r2
  m_xVol = new (m_volMem) ExFatVolume;
    75f6:	f7ff ffef 	bl	75d8 <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    75fa:	4642      	mov	r2, r8
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    75fc:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
    7600:	4605      	mov	r5, r0
    7602:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
    7606:	f8a0 647a 	strh.w	r6, [r0, #1146]	; 0x47a
    760a:	f8c4 0484 	str.w	r0, [r4, #1156]	; 0x484
    760e:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    7612:	f7fd fae7 	bl	4be4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    7616:	bba0      	cbnz	r0, 7682 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xa6>
  m_xVol = nullptr;
    7618:	2600      	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    761a:	4621      	mov	r1, r4
    761c:	f240 406c 	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
    7620:	f8c4 6484 	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    7624:	f7ff ffd8 	bl	75d8 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    7628:	2302      	movs	r3, #2
    762a:	71c6      	strb	r6, [r0, #7]
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    762c:	4642      	mov	r2, r8
    762e:	f8a0 6448 	strh.w	r6, [r0, #1096]	; 0x448
    7632:	4605      	mov	r5, r0
    7634:	f880 644a 	strb.w	r6, [r0, #1098]	; 0x44a
    7638:	7203      	strb	r3, [r0, #8]
    763a:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
    763e:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    7642:	f7ff fe4f 	bl	72e4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    7646:	b938      	cbnz	r0, 7658 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7c>
  m_cwv = nullptr;
    7648:	2300      	movs	r3, #0
    764a:	4a1a      	ldr	r2, [pc, #104]	; (76b4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
  return false;
    764c:	4618      	mov	r0, r3
  m_cwv = nullptr;
    764e:	6013      	str	r3, [r2, #0]
  m_fVol = nullptr;
    7650:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
}
    7654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    7658:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    765c:	4630      	mov	r0, r6
    765e:	f7fd fbfd 	bl	4e5c <FatFile::close()>
    return m_vwd.openRoot(this);
    7662:	4629      	mov	r1, r5
    7664:	4630      	mov	r0, r6
    7666:	f7fd fe37 	bl	52d8 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    766a:	2800      	cmp	r0, #0
    766c:	d0ec      	beq.n	7648 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    if (setCwv || !m_cwv) {
    766e:	4b12      	ldr	r3, [pc, #72]	; (76b8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xdc>)
    7670:	681a      	ldr	r2, [r3, #0]
    7672:	b9aa      	cbnz	r2, 76a0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc4>
      m_cwv = this;
    7674:	601d      	str	r5, [r3, #0]
  if (setCwv || !m_cwv) {
    7676:	4b0f      	ldr	r3, [pc, #60]	; (76b4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    7678:	b1af      	cbz	r7, 76a6 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xca>
  return true;
    767a:	2001      	movs	r0, #1
    m_cwv = this;
    767c:	601c      	str	r4, [r3, #0]
}
    767e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    7682:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    7686:	4630      	mov	r0, r6
    7688:	f7fb fada 	bl	2c40 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    768c:	4629      	mov	r1, r5
    768e:	4630      	mov	r0, r6
    7690:	f7fb fb04 	bl	2c9c <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    7694:	2800      	cmp	r0, #0
    7696:	d0bf      	beq.n	7618 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x3c>
    if (setCwv || !m_cwv) {
    7698:	4b08      	ldr	r3, [pc, #32]	; (76bc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    769a:	681a      	ldr	r2, [r3, #0]
    769c:	2a00      	cmp	r2, #0
    769e:	d0e9      	beq.n	7674 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x98>
  if (setCwv || !m_cwv) {
    76a0:	4b04      	ldr	r3, [pc, #16]	; (76b4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    76a2:	2f00      	cmp	r7, #0
    76a4:	d1e9      	bne.n	767a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
    76a6:	681a      	ldr	r2, [r3, #0]
    76a8:	2a00      	cmp	r2, #0
    76aa:	d0e6      	beq.n	767a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
  return true;
    76ac:	2001      	movs	r0, #1
}
    76ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    76b2:	bf00      	nop
    76b4:	200034ec 	.word	0x200034ec
    76b8:	200034f0 	.word	0x200034f0
    76bc:	20003400 	.word	0x20003400

000076c0 <FsVolume::open(char const*, int)>:
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    76c0:	b570      	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
    76c2:	2500      	movs	r5, #0
    76c4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    76c8:	4604      	mov	r4, r0
    76ca:	6045      	str	r5, [r0, #4]
    76cc:	7305      	strb	r5, [r0, #12]
    76ce:	6086      	str	r6, [r0, #8]
  FsBaseFile() {}
    76d0:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    76d4:	4d03      	ldr	r5, [pc, #12]	; (76e4 <FsVolume::open(char const*, int)+0x24>)
    76d6:	f840 5b10 	str.w	r5, [r0], #16
  tmpFile.open(this, path, oflag);
    76da:	f7ff feeb 	bl	74b4 <FsBaseFile::open(FsVolume*, char const*, int)>
}
    76de:	4620      	mov	r0, r4
    76e0:	bd70      	pop	{r4, r5, r6, pc}
    76e2:	bf00      	nop
    76e4:	20000fb4 	.word	0x20000fb4

000076e8 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    76e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    76ec:	4770      	bx	lr
    76ee:	bf00      	nop

000076f0 <SharedSpiCard::errorCode() const>:
  }
    76f0:	7c40      	ldrb	r0, [r0, #17]
    76f2:	4770      	bx	lr

000076f4 <SharedSpiCard::errorData() const>:
  }
    76f4:	7d00      	ldrb	r0, [r0, #20]
    76f6:	4770      	bx	lr

000076f8 <SharedSpiCard::type() const>:
  }
    76f8:	7d40      	ldrb	r0, [r0, #21]
    76fa:	4770      	bx	lr

000076fc <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    76fc:	2001      	movs	r0, #1
    76fe:	4770      	bx	lr

00007700 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    7700:	7f00      	ldrb	r0, [r0, #28]
    7702:	4770      	bx	lr

00007704 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    7704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7708:	461e      	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    770a:	7cc3      	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    770c:	4605      	mov	r5, r0
    770e:	460c      	mov	r4, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    7710:	2b02      	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    7712:	4691      	mov	r9, r2
    7714:	9f08      	ldr	r7, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    7716:	d028      	beq.n	776a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x66>
    if (!writeStart(sector)) {
    7718:	682b      	ldr	r3, [r5, #0]
    771a:	4621      	mov	r1, r4
    771c:	4628      	mov	r0, r5
    771e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    7720:	4798      	blx	r3
    7722:	b198      	cbz	r0, 774c <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x48>
      goto fail;
    }
    m_curSector = sector;
    7724:	61ac      	str	r4, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++) {
    7726:	f1b9 0f00 	cmp.w	r9, #0
    772a:	d012      	beq.n	7752 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    772c:	eb04 0809 	add.w	r8, r4, r9
    7730:	e001      	b.n	7736 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x32>
    7732:	45a0      	cmp	r8, r4
    7734:	d00d      	beq.n	7752 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    const uint8_t *src = callback(sector + i, context);
    7736:	4639      	mov	r1, r7
    7738:	4620      	mov	r0, r4
    773a:	47b0      	blx	r6
    if (!writeData(src)) {
    773c:	682b      	ldr	r3, [r5, #0]
    const uint8_t *src = callback(sector + i, context);
    773e:	4601      	mov	r1, r0
    if (!writeData(src)) {
    7740:	4628      	mov	r0, r5
    7742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++) {
    7744:	3401      	adds	r4, #1
    if (!writeData(src)) {
    7746:	4798      	blx	r3
    7748:	2800      	cmp	r0, #0
    774a:	d1f2      	bne.n	7732 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    774c:	2000      	movs	r0, #0
}
    774e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_curSector += ns;
    7752:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    7754:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    7756:	444b      	add	r3, r9
    7758:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    775a:	2800      	cmp	r0, #0
    775c:	d1f7      	bne.n	774e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4a>
    775e:	682b      	ldr	r3, [r5, #0]
    7760:	4628      	mov	r0, r5
    7762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    7764:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    7768:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    776a:	6983      	ldr	r3, [r0, #24]
    776c:	428b      	cmp	r3, r1
    776e:	d1d3      	bne.n	7718 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
    7770:	e7d9      	b.n	7726 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x22>
    7772:	bf00      	nop

00007774 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    7774:	4770      	bx	lr
    7776:	bf00      	nop

00007778 <SharedSpiCard::end()>:
    m_spiDriver.end();
    7778:	3004      	adds	r0, #4
    777a:	f002 b93d 	b.w	99f8 <SdSpiArduinoDriver::end()>
    777e:	bf00      	nop

00007780 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    7780:	b510      	push	{r4, lr}
    7782:	4604      	mov	r4, r0
    7784:	2120      	movs	r1, #32
    7786:	f004 f86f 	bl	b868 <operator delete(void*, unsigned int)>
    778a:	4620      	mov	r0, r4
    778c:	bd10      	pop	{r4, pc}
    778e:	bf00      	nop

00007790 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
    7790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7794:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    7796:	7cc3      	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    7798:	4605      	mov	r5, r0
    779a:	460e      	mov	r6, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    779c:	2b02      	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    779e:	4614      	mov	r4, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    77a0:	d024      	beq.n	77ec <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5c>
    if (!writeStart(sector)) {
    77a2:	682b      	ldr	r3, [r5, #0]
    77a4:	4631      	mov	r1, r6
    77a6:	4628      	mov	r0, r5
    77a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    77aa:	4798      	blx	r3
    77ac:	b178      	cbz	r0, 77ce <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3e>
    m_curSector = sector;
    77ae:	61ae      	str	r6, [r5, #24]
  for (size_t i = 0; i < ns; i++, src += 512) {
    77b0:	b187      	cbz	r7, 77d4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeStart(sector)) {
    77b2:	2600      	movs	r6, #0
    77b4:	e001      	b.n	77ba <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  for (size_t i = 0; i < ns; i++, src += 512) {
    77b6:	42b7      	cmp	r7, r6
    77b8:	d00c      	beq.n	77d4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    77ba:	682a      	ldr	r2, [r5, #0]
    77bc:	4621      	mov	r1, r4
    77be:	4628      	mov	r0, r5
  for (size_t i = 0; i < ns; i++, src += 512) {
    77c0:	3601      	adds	r6, #1
    if (!writeData(src)) {
    77c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++, src += 512) {
    77c4:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
    77c8:	4790      	blx	r2
    77ca:	2800      	cmp	r0, #0
    77cc:	d1f3      	bne.n	77b6 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
  return false;
    77ce:	2000      	movs	r0, #0
}
    77d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_curSector += ns;
    77d4:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    77d6:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    77d8:	443b      	add	r3, r7
    77da:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    77dc:	2800      	cmp	r0, #0
    77de:	d1f7      	bne.n	77d0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x40>
    77e0:	682b      	ldr	r3, [r5, #0]
    77e2:	4628      	mov	r0, r5
    77e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    77e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    77ea:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    77ec:	6983      	ldr	r3, [r0, #24]
    77ee:	428b      	cmp	r3, r1
    77f0:	d1d7      	bne.n	77a2 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    77f2:	e7dd      	b.n	77b0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>

000077f4 <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    77f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    77f8:	4e20      	ldr	r6, [pc, #128]	; (787c <SharedSpiCard::writeStop()+0x88>)
    77fa:	4607      	mov	r7, r0
    return m_spiDriver.receive();
    77fc:	f100 0804 	add.w	r8, r0, #4
    7800:	6835      	ldr	r5, [r6, #0]
    m_endTime = ms + millis16();
    7802:	f505 7516 	add.w	r5, r5, #600	; 0x258
    7806:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    7808:	e003      	b.n	7812 <SharedSpiCard::writeStop()+0x1e>
    780a:	6833      	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    780c:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    780e:	041b      	lsls	r3, r3, #16
    7810:	d410      	bmi.n	7834 <SharedSpiCard::writeStop()+0x40>
    7812:	4640      	mov	r0, r8
    7814:	f002 f8f4 	bl	9a00 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    7818:	28ff      	cmp	r0, #255	; 0xff
    781a:	4604      	mov	r4, r0
    781c:	d1f5      	bne.n	780a <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
    781e:	21fd      	movs	r1, #253	; 0xfd
    7820:	4640      	mov	r0, r8
    7822:	f002 f90b 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    7826:	7cbb      	ldrb	r3, [r7, #18]
    7828:	b9cb      	cbnz	r3, 785e <SharedSpiCard::writeStop()+0x6a>
  m_state = IDLE_STATE;
    782a:	2300      	movs	r3, #0
    782c:	2001      	movs	r0, #1
    782e:	74fb      	strb	r3, [r7, #19]
}
    7830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    7834:	231e      	movs	r3, #30
  if (m_spiActive) {
    7836:	7cb8      	ldrb	r0, [r7, #18]
    7838:	747b      	strb	r3, [r7, #17]
    783a:	2800      	cmp	r0, #0
    783c:	d0f8      	beq.n	7830 <SharedSpiCard::writeStop()+0x3c>
    sdCsWrite(m_csPin, true);
    783e:	7c38      	ldrb	r0, [r7, #16]
    7840:	2101      	movs	r1, #1
    7842:	f002 f809 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7846:	21ff      	movs	r1, #255	; 0xff
    7848:	4640      	mov	r0, r8
    784a:	f002 f8f7 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    784e:	4640      	mov	r0, r8
    7850:	f002 f8aa 	bl	99a8 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7854:	2300      	movs	r3, #0
  return false;
    7856:	4618      	mov	r0, r3
    m_spiActive = false;
    7858:	74bb      	strb	r3, [r7, #18]
}
    785a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sdCsWrite(m_csPin, true);
    785e:	2101      	movs	r1, #1
    7860:	7c38      	ldrb	r0, [r7, #16]
    7862:	f001 fff9 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7866:	4621      	mov	r1, r4
    7868:	4640      	mov	r0, r8
    786a:	f002 f8e7 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    786e:	4640      	mov	r0, r8
    7870:	f002 f89a 	bl	99a8 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7874:	2300      	movs	r3, #0
    7876:	74bb      	strb	r3, [r7, #18]
}
    7878:	e7d7      	b.n	782a <SharedSpiCard::writeStop()+0x36>
    787a:	bf00      	nop
    787c:	200038d8 	.word	0x200038d8

00007880 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    7880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
    7884:	7cc3      	ldrb	r3, [r0, #19]
    7886:	2b01      	cmp	r3, #1
    7888:	d035      	beq.n	78f6 <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
    788a:	7c86      	ldrb	r6, [r0, #18]
    788c:	4604      	mov	r4, r0
    788e:	b14e      	cbz	r6, 78a4 <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
    7890:	3004      	adds	r0, #4
    7892:	f002 f8b5 	bl	9a00 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    7896:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    789a:	bf18      	it	ne
    789c:	2501      	movne	r5, #1
}
    789e:	4628      	mov	r0, r5
    78a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_spiDriver.activate();
    78a4:	1d07      	adds	r7, r0, #4
    m_spiActive = true;
    78a6:	f04f 0801 	mov.w	r8, #1
    78aa:	4638      	mov	r0, r7
    78ac:	f002 f85e 	bl	996c <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    78b0:	4631      	mov	r1, r6
    78b2:	7c20      	ldrb	r0, [r4, #16]
    78b4:	f001 ffd0 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    78b8:	21ff      	movs	r1, #255	; 0xff
    78ba:	4638      	mov	r0, r7
    78bc:	f002 f8be 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    78c0:	4638      	mov	r0, r7
    78c2:	f884 8012 	strb.w	r8, [r4, #18]
    78c6:	f002 f89b 	bl	9a00 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    78ca:	7ca3      	ldrb	r3, [r4, #18]
  bool rtn = 0XFF != spiReceive();
    78cc:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    78d0:	bf18      	it	ne
    78d2:	2501      	movne	r5, #1
  if (m_spiActive) {
    78d4:	2b00      	cmp	r3, #0
    78d6:	d0e2      	beq.n	789e <SharedSpiCard::isBusy()+0x1e>
    sdCsWrite(m_csPin, true);
    78d8:	4641      	mov	r1, r8
    78da:	7c20      	ldrb	r0, [r4, #16]
    78dc:	f001 ffbc 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    78e0:	21ff      	movs	r1, #255	; 0xff
    78e2:	4638      	mov	r0, r7
    78e4:	f002 f8aa 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    78e8:	4638      	mov	r0, r7
    78ea:	f002 f85d 	bl	99a8 <SdSpiArduinoDriver::deactivate()>
}
    78ee:	4628      	mov	r0, r5
    m_spiActive = false;
    78f0:	74a6      	strb	r6, [r4, #18]
}
    78f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    78f6:	2500      	movs	r5, #0
}
    78f8:	4628      	mov	r0, r5
    78fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    78fe:	bf00      	nop

00007900 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    7900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7904:	4f20      	ldr	r7, [pc, #128]	; (7988 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
    7906:	4604      	mov	r4, r0
    7908:	4688      	mov	r8, r1
    790a:	4691      	mov	r9, r2
    790c:	683d      	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
    790e:	1d06      	adds	r6, r0, #4
    m_endTime = ms + millis16();
    7910:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    7914:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    7916:	e003      	b.n	7920 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    7918:	683b      	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    791a:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    791c:	041b      	lsls	r3, r3, #16
    791e:	d40d      	bmi.n	793c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
    7920:	4630      	mov	r0, r6
    7922:	f002 f86d 	bl	9a00 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    7926:	28ff      	cmp	r0, #255	; 0xff
    7928:	7520      	strb	r0, [r4, #20]
    792a:	d0f5      	beq.n	7918 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
    792c:	28fe      	cmp	r0, #254	; 0xfe
    792e:	d01a      	beq.n	7966 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    7930:	2318      	movs	r3, #24
  if (m_spiActive) {
    7932:	7ca0      	ldrb	r0, [r4, #18]
    m_errorCode = code;
    7934:	7463      	strb	r3, [r4, #17]
    7936:	b930      	cbnz	r0, 7946 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
    7938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    793c:	231d      	movs	r3, #29
  if (m_spiActive) {
    793e:	7ca0      	ldrb	r0, [r4, #18]
    7940:	7463      	strb	r3, [r4, #17]
    7942:	2800      	cmp	r0, #0
    7944:	d0f8      	beq.n	7938 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    sdCsWrite(m_csPin, true);
    7946:	7c20      	ldrb	r0, [r4, #16]
    7948:	2101      	movs	r1, #1
    794a:	f001 ff85 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    794e:	21ff      	movs	r1, #255	; 0xff
    7950:	4630      	mov	r0, r6
    7952:	f002 f873 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    7956:	4630      	mov	r0, r6
    7958:	f002 f826 	bl	99a8 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    795c:	2300      	movs	r3, #0
  return false;
    795e:	4618      	mov	r0, r3
    m_spiActive = false;
    7960:	74a3      	strb	r3, [r4, #18]
}
    7962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
    7966:	464a      	mov	r2, r9
    7968:	4641      	mov	r1, r8
    796a:	4630      	mov	r0, r6
    796c:	f002 f854 	bl	9a18 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    7970:	7520      	strb	r0, [r4, #20]
    7972:	b938      	cbnz	r0, 7984 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    7974:	4630      	mov	r0, r6
    7976:	f002 f843 	bl	9a00 <SdSpiArduinoDriver::receive()>
    797a:	4630      	mov	r0, r6
    797c:	f002 f840 	bl	9a00 <SdSpiArduinoDriver::receive()>
  return true;
    7980:	2001      	movs	r0, #1
    7982:	e7d9      	b.n	7938 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    7984:	2325      	movs	r3, #37	; 0x25
    7986:	e7d4      	b.n	7932 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
    7988:	200038d8 	.word	0x200038d8

0000798c <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    798c:	b5f0      	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
    798e:	2700      	movs	r7, #0
bool SharedSpiCard::readStop() {
    7990:	b083      	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
    7992:	210c      	movs	r1, #12
bool SharedSpiCard::readStop() {
    7994:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    7996:	463a      	mov	r2, r7
  m_state = IDLE_STATE;
    7998:	74c7      	strb	r7, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    799a:	f000 f85b 	bl	7a54 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    799e:	b9b0      	cbnz	r0, 79ce <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
    79a0:	7ca6      	ldrb	r6, [r4, #18]
    79a2:	b91e      	cbnz	r6, 79ac <SharedSpiCard::readStop()+0x20>
  return true;
    79a4:	2601      	movs	r6, #1
}
    79a6:	4630      	mov	r0, r6
    79a8:	b003      	add	sp, #12
    79aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    79ac:	4605      	mov	r5, r0
    79ae:	2101      	movs	r1, #1
    79b0:	7c20      	ldrb	r0, [r4, #16]
    79b2:	f001 ff51 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    79b6:	1d20      	adds	r0, r4, #4
    79b8:	21ff      	movs	r1, #255	; 0xff
    79ba:	9001      	str	r0, [sp, #4]
    79bc:	f002 f83e 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    79c0:	9801      	ldr	r0, [sp, #4]
    79c2:	f001 fff1 	bl	99a8 <SdSpiArduinoDriver::deactivate()>
    79c6:	4630      	mov	r0, r6
    m_spiActive = false;
    79c8:	74a5      	strb	r5, [r4, #18]
}
    79ca:	b003      	add	sp, #12
    79cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
    79ce:	2309      	movs	r3, #9
  if (m_spiActive) {
    79d0:	7ca6      	ldrb	r6, [r4, #18]
    79d2:	7463      	strb	r3, [r4, #17]
    79d4:	2e00      	cmp	r6, #0
    79d6:	d0e6      	beq.n	79a6 <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
    79d8:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    79da:	7c20      	ldrb	r0, [r4, #16]
    79dc:	2101      	movs	r1, #1
}
    79de:	463e      	mov	r6, r7
    79e0:	f001 ff3a 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    79e4:	21ff      	movs	r1, #255	; 0xff
    79e6:	4628      	mov	r0, r5
    79e8:	f002 f828 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    79ec:	4628      	mov	r0, r5
    79ee:	f001 ffdb 	bl	99a8 <SdSpiArduinoDriver::deactivate()>
}
    79f2:	4630      	mov	r0, r6
    m_spiActive = false;
    79f4:	74a7      	strb	r7, [r4, #18]
}
    79f6:	b003      	add	sp, #12
    79f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    79fa:	bf00      	nop

000079fc <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    79fc:	7cc2      	ldrb	r2, [r0, #19]
    79fe:	2a02      	cmp	r2, #2
    7a00:	d003      	beq.n	7a0a <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
    7a02:	2a01      	cmp	r2, #1
    7a04:	d004      	beq.n	7a10 <SharedSpiCard::syncDevice()+0x14>
}
    7a06:	2001      	movs	r0, #1
    7a08:	4770      	bx	lr
    return writeStop();
    7a0a:	6803      	ldr	r3, [r0, #0]
    7a0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    7a0e:	4718      	bx	r3
    return readStop();
    7a10:	f7ff bfbc 	b.w	798c <SharedSpiCard::readStop()>

00007a14 <DedicatedSpiCard::setDedicatedSpi(bool)>:
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    7a14:	b538      	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    7a16:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    7a18:	460d      	mov	r5, r1
    7a1a:	490d      	ldr	r1, [pc, #52]	; (7a50 <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>)
    7a1c:	4604      	mov	r4, r0
  if (!syncDevice()) {
    7a1e:	6a1a      	ldr	r2, [r3, #32]
    7a20:	428a      	cmp	r2, r1
    7a22:	d10c      	bne.n	7a3e <DedicatedSpiCard::setDedicatedSpi(bool)+0x2a>
  if (m_state == WRITE_STATE) {
    7a24:	7cc2      	ldrb	r2, [r0, #19]
    7a26:	2a02      	cmp	r2, #2
    7a28:	d004      	beq.n	7a34 <DedicatedSpiCard::setDedicatedSpi(bool)+0x20>
  if (m_state == READ_STATE) {
    7a2a:	2a01      	cmp	r2, #1
    7a2c:	d00b      	beq.n	7a46 <DedicatedSpiCard::setDedicatedSpi(bool)+0x32>
  return true;
    7a2e:	2001      	movs	r0, #1
  m_dedicatedSpi = value;
    7a30:	7725      	strb	r5, [r4, #28]
}
    7a32:	bd38      	pop	{r3, r4, r5, pc}
    return writeStop();
    7a34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    7a36:	4798      	blx	r3
  if (!syncDevice()) {
    7a38:	2800      	cmp	r0, #0
    7a3a:	d1f8      	bne.n	7a2e <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
}
    7a3c:	bd38      	pop	{r3, r4, r5, pc}
  if (!syncDevice()) {
    7a3e:	4790      	blx	r2
    7a40:	2800      	cmp	r0, #0
    7a42:	d0fb      	beq.n	7a3c <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    7a44:	e7f3      	b.n	7a2e <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    return readStop();
    7a46:	f7ff ffa1 	bl	798c <SharedSpiCard::readStop()>
  if (!syncDevice()) {
    7a4a:	2800      	cmp	r0, #0
    7a4c:	d0f6      	beq.n	7a3c <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    7a4e:	e7ee      	b.n	7a2e <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    7a50:	000079fd 	.word	0x000079fd

00007a54 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    7a58:	6803      	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7a5a:	b082      	sub	sp, #8
    7a5c:	460f      	mov	r7, r1
    7a5e:	4935      	ldr	r1, [pc, #212]	; (7b34 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe0>)
    7a60:	9201      	str	r2, [sp, #4]
    7a62:	4606      	mov	r6, r0
  if (!syncDevice()) {
    7a64:	6a1a      	ldr	r2, [r3, #32]
    7a66:	428a      	cmp	r2, r1
    7a68:	d15e      	bne.n	7b28 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd4>
  if (m_state == WRITE_STATE) {
    7a6a:	7cc2      	ldrb	r2, [r0, #19]
    7a6c:	2a02      	cmp	r2, #2
    7a6e:	d041      	beq.n	7af4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa0>
  if (m_state == READ_STATE) {
    7a70:	2a01      	cmp	r2, #1
    7a72:	d05b      	beq.n	7b2c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd8>
  if (!m_spiActive) {
    7a74:	7cb4      	ldrb	r4, [r6, #18]
    7a76:	2c00      	cmp	r4, #0
    7a78:	d047      	beq.n	7b0a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb6>
    m_spiDriver.activate();
    7a7a:	1d35      	adds	r5, r6, #4
  if (cmd != CMD12) {
    7a7c:	2f0c      	cmp	r7, #12
    7a7e:	d011      	beq.n	7aa4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    7a80:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 7b38 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>
    7a84:	f8d8 4000 	ldr.w	r4, [r8]
    m_endTime = ms + millis16();
    7a88:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    7a8c:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    7a8e:	e004      	b.n	7a9a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x46>
    7a90:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    7a94:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    7a96:	041a      	lsls	r2, r3, #16
    7a98:	d434      	bmi.n	7b04 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb0>
    return m_spiDriver.receive();
    7a9a:	4628      	mov	r0, r5
    7a9c:	f001 ffb0 	bl	9a00 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    7aa0:	28ff      	cmp	r0, #255	; 0xff
    7aa2:	d1f5      	bne.n	7a90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3c>
    m_spiDriver.send(data);
    7aa4:	f10d 0804 	add.w	r8, sp, #4
    7aa8:	ac02      	add	r4, sp, #8
    7aaa:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    7aae:	4628      	mov	r0, r5
    7ab0:	f001 ffc4 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    7ab4:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    7ab8:	4628      	mov	r0, r5
    7aba:	f001 ffbf 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    7abe:	45a0      	cmp	r8, r4
    7ac0:	d1f8      	bne.n	7ab4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x60>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    7ac2:	2f00      	cmp	r7, #0
    7ac4:	4628      	mov	r0, r5
    return m_spiDriver.receive();
    7ac6:	f04f 040a 	mov.w	r4, #10
    m_spiDriver.send(data);
    7aca:	bf0c      	ite	eq
    7acc:	2195      	moveq	r1, #149	; 0x95
    7ace:	2187      	movne	r1, #135	; 0x87
    7ad0:	f001 ffb4 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    7ad4:	4628      	mov	r0, r5
    7ad6:	f001 ff93 	bl	9a00 <SdSpiArduinoDriver::receive()>
    7ada:	4628      	mov	r0, r5
  } while (m_status & 0X80 && ++n < 10);
    7adc:	3c01      	subs	r4, #1
    7ade:	f001 ff8f 	bl	9a00 <SdSpiArduinoDriver::receive()>
    7ae2:	0603      	lsls	r3, r0, #24
    7ae4:	b2a4      	uxth	r4, r4
    m_status = spiReceive();
    7ae6:	7530      	strb	r0, [r6, #20]
  } while (m_status & 0X80 && ++n < 10);
    7ae8:	d501      	bpl.n	7aee <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9a>
    7aea:	2c00      	cmp	r4, #0
    7aec:	d1f5      	bne.n	7ada <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
}
    7aee:	b002      	add	sp, #8
    7af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    7af4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    7af6:	4798      	blx	r3
  if (!syncDevice()) {
    7af8:	2800      	cmp	r0, #0
    7afa:	d1bb      	bne.n	7a74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
    7afc:	20ff      	movs	r0, #255	; 0xff
}
    7afe:	b002      	add	sp, #8
    7b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    7b04:	2f00      	cmp	r7, #0
    7b06:	d0cd      	beq.n	7aa4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    7b08:	e7f8      	b.n	7afc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa8>
    m_spiDriver.activate();
    7b0a:	1d35      	adds	r5, r6, #4
    7b0c:	4628      	mov	r0, r5
    7b0e:	f001 ff2d 	bl	996c <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    7b12:	4621      	mov	r1, r4
    7b14:	7c30      	ldrb	r0, [r6, #16]
    7b16:	f001 fe9f 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7b1a:	21ff      	movs	r1, #255	; 0xff
    7b1c:	4628      	mov	r0, r5
    7b1e:	f001 ff8d 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    7b22:	2301      	movs	r3, #1
    7b24:	74b3      	strb	r3, [r6, #18]
}
    7b26:	e7a9      	b.n	7a7c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
    7b28:	4790      	blx	r2
    7b2a:	e7e5      	b.n	7af8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    return readStop();
    7b2c:	f7ff ff2e 	bl	798c <SharedSpiCard::readStop()>
    7b30:	e7e2      	b.n	7af8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    7b32:	bf00      	nop
    7b34:	000079fd 	.word	0x000079fd
    7b38:	200038d8 	.word	0x200038d8

00007b3c <SharedSpiCard::begin(SdSpiConfig)>:
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    7b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7b40:	b088      	sub	sp, #32
    7b42:	4605      	mov	r5, r0
  m_spiActive = false;
    7b44:	f04f 0800 	mov.w	r8, #0
    7b48:	4617      	mov	r7, r2
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    7b4a:	ac01      	add	r4, sp, #4
    m_spiDriver.begin(spiConfig);
    7b4c:	1d2e      	adds	r6, r5, #4
  m_spiActive = false;
    7b4e:	f885 8012 	strb.w	r8, [r5, #18]
  m_errorCode = SD_CARD_ERROR_NONE;
    7b52:	f885 8011 	strb.w	r8, [r5, #17]
  m_type = 0;
    7b56:	f885 8015 	strb.w	r8, [r5, #21]
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    7b5a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    7b5e:	f89d 0004 	ldrb.w	r0, [sp, #4]
  m_csPin = spiConfig.csPin;
    7b62:	7428      	strb	r0, [r5, #16]
  sdCsInit(m_csPin);
    7b64:	f001 fe74 	bl	9850 <sdCsInit(unsigned char)>
    sdCsWrite(m_csPin, true);
    7b68:	2101      	movs	r1, #1
    7b6a:	7c28      	ldrb	r0, [r5, #16]
    7b6c:	f001 fe74 	bl	9858 <sdCsWrite(unsigned char, bool)>
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    7b70:	496c      	ldr	r1, [pc, #432]	; (7d24 <SharedSpiCard::begin(SdSpiConfig)+0x1e8>)
    7b72:	2307      	movs	r3, #7
    7b74:	e9c5 1302 	strd	r1, r3, [r5, #8]
  spiBegin(spiConfig);
    7b78:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    7b7c:	ab05      	add	r3, sp, #20
    7b7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    m_spiDriver.begin(spiConfig);
    7b82:	4630      	mov	r0, r6
    7b84:	cb0e      	ldmia	r3, {r1, r2, r3}
    7b86:	f001 fefb 	bl	9980 <SdSpiArduinoDriver::begin(SdSpiConfig)>
  if (!m_spiActive) {
    7b8a:	7cac      	ldrb	r4, [r5, #18]
  m_state = IDLE_STATE;
    7b8c:	f885 8013 	strb.w	r8, [r5, #19]
  if (!m_spiActive) {
    7b90:	2c00      	cmp	r4, #0
    7b92:	d067      	beq.n	7c64 <SharedSpiCard::begin(SdSpiConfig)+0x128>
    sdCsWrite(m_csPin, true);
    7b94:	240a      	movs	r4, #10
    7b96:	2101      	movs	r1, #1
    7b98:	7c28      	ldrb	r0, [r5, #16]
    7b9a:	f001 fe5d 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7b9e:	21ff      	movs	r1, #255	; 0xff
    7ba0:	4630      	mov	r0, r6
    7ba2:	f001 ff4b 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
  for (uint8_t i = 0; i < 10; i++) {
    7ba6:	1e61      	subs	r1, r4, #1
    7ba8:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
    7bac:	d1f7      	bne.n	7b9e <SharedSpiCard::begin(SdSpiConfig)+0x62>
    sdCsWrite(m_csPin, false);
    7bae:	4621      	mov	r1, r4
    7bb0:	240a      	movs	r4, #10
    7bb2:	7c28      	ldrb	r0, [r5, #16]
    7bb4:	f001 fe50 	bl	9858 <sdCsWrite(unsigned char, bool)>
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    7bb8:	2200      	movs	r2, #0
    7bba:	4628      	mov	r0, r5
    7bbc:	4611      	mov	r1, r2
    7bbe:	f7ff ff49 	bl	7a54 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7bc2:	2801      	cmp	r0, #1
    if (i == SD_CMD0_RETRY) {
    7bc4:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    7bc8:	4604      	mov	r4, r0
    7bca:	d00a      	beq.n	7be2 <SharedSpiCard::begin(SdSpiConfig)+0xa6>
    if (i == SD_CMD0_RETRY) {
    7bcc:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    7bd0:	d1f2      	bne.n	7bb8 <SharedSpiCard::begin(SdSpiConfig)+0x7c>
    7bd2:	2301      	movs	r3, #1
  if (m_spiActive) {
    7bd4:	7ca8      	ldrb	r0, [r5, #18]
    m_errorCode = code;
    7bd6:	746b      	strb	r3, [r5, #17]
    7bd8:	2800      	cmp	r0, #0
    7bda:	d151      	bne.n	7c80 <SharedSpiCard::begin(SdSpiConfig)+0x144>
}
    7bdc:	b008      	add	sp, #32
    7bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    7be2:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    7be6:	2108      	movs	r1, #8
    7be8:	4628      	mov	r0, r5
    7bea:	f7ff ff33 	bl	7a54 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7bee:	0742      	lsls	r2, r0, #29
    7bf0:	d557      	bpl.n	7ca2 <SharedSpiCard::begin(SdSpiConfig)+0x166>
    m_type = value;
    7bf2:	756c      	strb	r4, [r5, #21]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    7bf4:	682b      	ldr	r3, [r5, #0]
    7bf6:	f8df a130 	ldr.w	sl, [pc, #304]	; 7d28 <SharedSpiCard::begin(SdSpiConfig)+0x1ec>
    7bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    7bfc:	4553      	cmp	r3, sl
    7bfe:	d161      	bne.n	7cc4 <SharedSpiCard::begin(SdSpiConfig)+0x188>
    return m_type;
    7c00:	7d68      	ldrb	r0, [r5, #21]
    7c02:	f1a0 0402 	sub.w	r4, r0, #2
    7c06:	f8df 9124 	ldr.w	r9, [pc, #292]	; 7d2c <SharedSpiCard::begin(SdSpiConfig)+0x1f0>
    7c0a:	fab4 f484 	clz	r4, r4
    7c0e:	f8d9 3000 	ldr.w	r3, [r9]
    7c12:	0964      	lsrs	r4, r4, #5
    m_endTime = ms + millis16();
    7c14:	f503 68fa 	add.w	r8, r3, #2000	; 0x7d0
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    7c18:	07a4      	lsls	r4, r4, #30
    m_endTime = ms + millis16();
    7c1a:	fa1f f888 	uxth.w	r8, r8
  }
    7c1e:	e005      	b.n	7c2c <SharedSpiCard::begin(SdSpiConfig)+0xf0>
    7c20:	f8d9 3000 	ldr.w	r3, [r9]
    return (int16_t)(m_endTime - millis16()) < 0;
    7c24:	eba8 0303 	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    7c28:	041b      	lsls	r3, r3, #16
    7c2a:	d449      	bmi.n	7cc0 <SharedSpiCard::begin(SdSpiConfig)+0x184>
    cardCommand(CMD55, 0);
    7c2c:	2137      	movs	r1, #55	; 0x37
    7c2e:	2200      	movs	r2, #0
    7c30:	4628      	mov	r0, r5
    7c32:	f7ff ff0f 	bl	7a54 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    7c36:	4622      	mov	r2, r4
    7c38:	2129      	movs	r1, #41	; 0x29
    7c3a:	4628      	mov	r0, r5
    7c3c:	f7ff ff0a 	bl	7a54 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    7c40:	2800      	cmp	r0, #0
    7c42:	d1ed      	bne.n	7c20 <SharedSpiCard::begin(SdSpiConfig)+0xe4>
  if (type() == SD_CARD_TYPE_SD2) {
    7c44:	682b      	ldr	r3, [r5, #0]
    7c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    7c48:	4553      	cmp	r3, sl
    7c4a:	d165      	bne.n	7d18 <SharedSpiCard::begin(SdSpiConfig)+0x1dc>
    return m_type;
    7c4c:	7d68      	ldrb	r0, [r5, #21]
    7c4e:	2802      	cmp	r0, #2
    7c50:	d049      	beq.n	7ce6 <SharedSpiCard::begin(SdSpiConfig)+0x1aa>
  if (m_spiActive) {
    7c52:	7cab      	ldrb	r3, [r5, #18]
    7c54:	bbcb      	cbnz	r3, 7cca <SharedSpiCard::begin(SdSpiConfig)+0x18e>
    7c56:	2307      	movs	r3, #7
  return true;
    7c58:	2001      	movs	r0, #1
    7c5a:	e9c5 7302 	strd	r7, r3, [r5, #8]
}
    7c5e:	b008      	add	sp, #32
    7c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_spiDriver.activate();
    7c64:	4630      	mov	r0, r6
    7c66:	f001 fe81 	bl	996c <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    7c6a:	4621      	mov	r1, r4
    7c6c:	7c28      	ldrb	r0, [r5, #16]
    7c6e:	f001 fdf3 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7c72:	21ff      	movs	r1, #255	; 0xff
    7c74:	4630      	mov	r0, r6
    7c76:	f001 fee1 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    7c7a:	2301      	movs	r3, #1
    7c7c:	74ab      	strb	r3, [r5, #18]
}
    7c7e:	e789      	b.n	7b94 <SharedSpiCard::begin(SdSpiConfig)+0x58>
    sdCsWrite(m_csPin, true);
    7c80:	7c28      	ldrb	r0, [r5, #16]
    7c82:	2101      	movs	r1, #1
    7c84:	f001 fde8 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7c88:	21ff      	movs	r1, #255	; 0xff
    7c8a:	4630      	mov	r0, r6
    7c8c:	f001 fed6 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    7c90:	4630      	mov	r0, r6
    7c92:	f001 fe89 	bl	99a8 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7c96:	2300      	movs	r3, #0
  return false;
    7c98:	4618      	mov	r0, r3
    m_spiActive = false;
    7c9a:	74ab      	strb	r3, [r5, #18]
}
    7c9c:	b008      	add	sp, #32
    7c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_type = value;
    7ca2:	2302      	movs	r3, #2
    7ca4:	2404      	movs	r4, #4
    7ca6:	756b      	strb	r3, [r5, #21]
    return m_spiDriver.receive();
    7ca8:	4630      	mov	r0, r6
    7caa:	f001 fea9 	bl	9a00 <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 4; i++) {
    7cae:	1e63      	subs	r3, r4, #1
      m_status = spiReceive();
    7cb0:	7528      	strb	r0, [r5, #20]
    for (uint8_t i = 0; i < 4; i++) {
    7cb2:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    7cb6:	d1f7      	bne.n	7ca8 <SharedSpiCard::begin(SdSpiConfig)+0x16c>
    if (m_status != 0XAA) {
    7cb8:	28aa      	cmp	r0, #170	; 0xaa
    7cba:	d09b      	beq.n	7bf4 <SharedSpiCard::begin(SdSpiConfig)+0xb8>
    7cbc:	2306      	movs	r3, #6
    7cbe:	e789      	b.n	7bd4 <SharedSpiCard::begin(SdSpiConfig)+0x98>
    7cc0:	2317      	movs	r3, #23
    7cc2:	e787      	b.n	7bd4 <SharedSpiCard::begin(SdSpiConfig)+0x98>
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    7cc4:	4628      	mov	r0, r5
    7cc6:	4798      	blx	r3
    7cc8:	e79b      	b.n	7c02 <SharedSpiCard::begin(SdSpiConfig)+0xc6>
    sdCsWrite(m_csPin, true);
    7cca:	2101      	movs	r1, #1
    7ccc:	7c28      	ldrb	r0, [r5, #16]
    7cce:	f001 fdc3 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7cd2:	21ff      	movs	r1, #255	; 0xff
    7cd4:	4630      	mov	r0, r6
    7cd6:	f001 feb1 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    7cda:	4630      	mov	r0, r6
    7cdc:	f001 fe64 	bl	99a8 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7ce0:	2300      	movs	r3, #0
    7ce2:	74ab      	strb	r3, [r5, #18]
}
    7ce4:	e7b7      	b.n	7c56 <SharedSpiCard::begin(SdSpiConfig)+0x11a>
    if (cardCommand(CMD58, 0)) {
    7ce6:	2200      	movs	r2, #0
    7ce8:	213a      	movs	r1, #58	; 0x3a
    7cea:	4628      	mov	r0, r5
    7cec:	f7ff feb2 	bl	7a54 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7cf0:	b9a8      	cbnz	r0, 7d1e <SharedSpiCard::begin(SdSpiConfig)+0x1e2>
    return m_spiDriver.receive();
    7cf2:	4630      	mov	r0, r6
    7cf4:	f001 fe84 	bl	9a00 <SdSpiArduinoDriver::receive()>
    if ((spiReceive() & 0XC0) == 0XC0) {
    7cf8:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    7cfc:	28c0      	cmp	r0, #192	; 0xc0
    7cfe:	d101      	bne.n	7d04 <SharedSpiCard::begin(SdSpiConfig)+0x1c8>
    m_type = value;
    7d00:	2303      	movs	r3, #3
    7d02:	756b      	strb	r3, [r5, #21]
    return m_spiDriver.receive();
    7d04:	4630      	mov	r0, r6
    7d06:	f001 fe7b 	bl	9a00 <SdSpiArduinoDriver::receive()>
    7d0a:	4630      	mov	r0, r6
    7d0c:	f001 fe78 	bl	9a00 <SdSpiArduinoDriver::receive()>
    7d10:	4630      	mov	r0, r6
    7d12:	f001 fe75 	bl	9a00 <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 3; i++) {
    7d16:	e79c      	b.n	7c52 <SharedSpiCard::begin(SdSpiConfig)+0x116>
  if (type() == SD_CARD_TYPE_SD2) {
    7d18:	4628      	mov	r0, r5
    7d1a:	4798      	blx	r3
    7d1c:	e797      	b.n	7c4e <SharedSpiCard::begin(SdSpiConfig)+0x112>
    7d1e:	2312      	movs	r3, #18
    7d20:	e758      	b.n	7bd4 <SharedSpiCard::begin(SdSpiConfig)+0x98>
    7d22:	bf00      	nop
    7d24:	00061a80 	.word	0x00061a80
    7d28:	000076f9 	.word	0x000076f9
    7d2c:	200038d8 	.word	0x200038d8

00007d30 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    7d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    7d32:	2200      	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    7d34:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    7d36:	213a      	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    7d38:	4606      	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
    7d3a:	f7ff fe8b 	bl	7a54 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7d3e:	b9e0      	cbnz	r0, 7d7a <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    m_spiDriver.send(data);
    7d40:	1d37      	adds	r7, r6, #4
    7d42:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
    7d44:	4638      	mov	r0, r7
    7d46:	f001 fe5b 	bl	9a00 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    7d4a:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    7d4e:	42a5      	cmp	r5, r4
    7d50:	d1f8      	bne.n	7d44 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
    7d52:	7cb4      	ldrb	r4, [r6, #18]
    7d54:	b914      	cbnz	r4, 7d5c <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    7d56:	2401      	movs	r4, #1
}
    7d58:	4620      	mov	r0, r4
    7d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    7d5c:	7c30      	ldrb	r0, [r6, #16]
    7d5e:	2101      	movs	r1, #1
    7d60:	f001 fd7a 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7d64:	21ff      	movs	r1, #255	; 0xff
    7d66:	4638      	mov	r0, r7
    7d68:	f001 fe68 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    7d6c:	4638      	mov	r0, r7
    7d6e:	f001 fe1b 	bl	99a8 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7d72:	2300      	movs	r3, #0
}
    7d74:	4620      	mov	r0, r4
    m_spiActive = false;
    7d76:	74b3      	strb	r3, [r6, #18]
}
    7d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    7d7a:	2312      	movs	r3, #18
  if (m_spiActive) {
    7d7c:	7cb4      	ldrb	r4, [r6, #18]
    7d7e:	7473      	strb	r3, [r6, #17]
    7d80:	2c00      	cmp	r4, #0
    7d82:	d0e9      	beq.n	7d58 <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
    7d84:	1d34      	adds	r4, r6, #4
    sdCsWrite(m_csPin, true);
    7d86:	7c30      	ldrb	r0, [r6, #16]
    7d88:	2101      	movs	r1, #1
    7d8a:	f001 fd65 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7d8e:	21ff      	movs	r1, #255	; 0xff
    7d90:	4620      	mov	r0, r4
    7d92:	f001 fe53 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    7d96:	4620      	mov	r0, r4
    7d98:	f001 fe06 	bl	99a8 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7d9c:	2300      	movs	r3, #0
  return false;
    7d9e:	461c      	mov	r4, r3
    m_spiActive = false;
    7da0:	74b3      	strb	r3, [r6, #18]
}
    7da2:	4620      	mov	r0, r4
    7da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7da6:	bf00      	nop

00007da8 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    7da8:	b570      	push	{r4, r5, r6, lr}
    7daa:	4616      	mov	r6, r2
    7dac:	b082      	sub	sp, #8
  if (cardCommand(cmd, 0)) {
    7dae:	2200      	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    7db0:	4604      	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    7db2:	f7ff fe4f 	bl	7a54 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7db6:	b1b0      	cbz	r0, 7de6 <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
    7db8:	231b      	movs	r3, #27
    7dba:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    7dbc:	7ca0      	ldrb	r0, [r4, #18]
    7dbe:	b908      	cbnz	r0, 7dc4 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
    7dc0:	b002      	add	sp, #8
    7dc2:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    7dc4:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    7dc6:	7c20      	ldrb	r0, [r4, #16]
    7dc8:	2101      	movs	r1, #1
    7dca:	f001 fd45 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7dce:	21ff      	movs	r1, #255	; 0xff
    7dd0:	4628      	mov	r0, r5
    7dd2:	f001 fe33 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    7dd6:	4628      	mov	r0, r5
    7dd8:	f001 fde6 	bl	99a8 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7ddc:	2300      	movs	r3, #0
  return false;
    7dde:	4618      	mov	r0, r3
    m_spiActive = false;
    7de0:	74a3      	strb	r3, [r4, #18]
}
    7de2:	b002      	add	sp, #8
    7de4:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    7de6:	4605      	mov	r5, r0
    7de8:	2210      	movs	r2, #16
    7dea:	4631      	mov	r1, r6
    7dec:	4620      	mov	r0, r4
    7dee:	f7ff fd87 	bl	7900 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    7df2:	2800      	cmp	r0, #0
    7df4:	d0e2      	beq.n	7dbc <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
    7df6:	7ca6      	ldrb	r6, [r4, #18]
    7df8:	2e00      	cmp	r6, #0
    7dfa:	d0e1      	beq.n	7dc0 <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
    sdCsWrite(m_csPin, true);
    7dfc:	7c20      	ldrb	r0, [r4, #16]
    7dfe:	2101      	movs	r1, #1
    7e00:	f001 fd2a 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7e04:	1d20      	adds	r0, r4, #4
    7e06:	21ff      	movs	r1, #255	; 0xff
    7e08:	9001      	str	r0, [sp, #4]
    7e0a:	f001 fe17 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    7e0e:	9801      	ldr	r0, [sp, #4]
    7e10:	f001 fdca 	bl	99a8 <SdSpiArduinoDriver::deactivate()>
}
    7e14:	4630      	mov	r0, r6
    m_spiActive = false;
    7e16:	74a5      	strb	r5, [r4, #18]
}
    7e18:	b002      	add	sp, #8
    7e1a:	bd70      	pop	{r4, r5, r6, pc}

00007e1c <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    7e1c:	6803      	ldr	r3, [r0, #0]
    7e1e:	4a25      	ldr	r2, [pc, #148]	; (7eb4 <SharedSpiCard::sectorCount()+0x98>)
    7e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    7e22:	4293      	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
    7e24:	b500      	push	{lr}
    7e26:	b085      	sub	sp, #20
    7e28:	d10f      	bne.n	7e4a <SharedSpiCard::sectorCount()+0x2e>
    return readRegister(CMD9, csd);
    7e2a:	466a      	mov	r2, sp
    7e2c:	2109      	movs	r1, #9
    7e2e:	f7ff ffbb 	bl	7da8 <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    7e32:	b138      	cbz	r0, 7e44 <SharedSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    7e34:	f89d 3000 	ldrb.w	r3, [sp]
    7e38:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    7e3c:	d008      	beq.n	7e50 <SharedSpiCard::sectorCount()+0x34>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    7e3e:	2b40      	cmp	r3, #64	; 0x40
    7e40:	d027      	beq.n	7e92 <SharedSpiCard::sectorCount()+0x76>
    7e42:	2000      	movs	r0, #0
}
    7e44:	b005      	add	sp, #20
    7e46:	f85d fb04 	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    7e4a:	4669      	mov	r1, sp
    7e4c:	4798      	blx	r3
    7e4e:	e7f0      	b.n	7e32 <SharedSpiCard::sectorCount()+0x16>
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    7e50:	f89d 3009 	ldrb.w	r3, [sp, #9]
                          | csd->v1.c_size_mult_low;
    7e54:	f89d 200a 	ldrb.w	r2, [sp, #10]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    7e58:	f003 0303 	and.w	r3, r3, #3
    uint16_t c_size = (csd->v1.c_size_high << 10)
    7e5c:	f89d 1006 	ldrb.w	r1, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    7e60:	f89d 0007 	ldrb.w	r0, [sp, #7]
                          | csd->v1.c_size_mult_low;
    7e64:	005b      	lsls	r3, r3, #1
    uint16_t c_size = (csd->v1.c_size_high << 10)
    7e66:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    7e6a:	0080      	lsls	r0, r0, #2
    7e6c:	f89d c008 	ldrb.w	ip, [sp, #8]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7e70:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    7e74:	f89d 2005 	ldrb.w	r2, [sp, #5]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    7e78:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7e7c:	f002 020f 	and.w	r2, r2, #15
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    7e80:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7e84:	4413      	add	r3, r2
    7e86:	3001      	adds	r0, #1
    7e88:	3b07      	subs	r3, #7
    7e8a:	4098      	lsls	r0, r3
}
    7e8c:	b005      	add	sp, #20
    7e8e:	f85d fb04 	ldr.w	pc, [sp], #4
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7e92:	f89d 0009 	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    7e96:	f89d 3007 	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7e9a:	3001      	adds	r0, #1
    7e9c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    7ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7ea4:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    7ea8:	eb00 2002 	add.w	r0, r0, r2, lsl #8
    7eac:	0280      	lsls	r0, r0, #10
    7eae:	b005      	add	sp, #20
    7eb0:	f85d fb04 	ldr.w	pc, [sp], #4
    7eb4:	000081d9 	.word	0x000081d9

00007eb8 <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    7eb8:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    7eba:	460a      	mov	r2, r1
    7ebc:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    7ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::readStart(uint32_t sector) {
    7ec0:	b083      	sub	sp, #12
    7ec2:	4d16      	ldr	r5, [pc, #88]	; (7f1c <SharedSpiCard::readStart(unsigned long)+0x64>)
    7ec4:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    7ec6:	42ab      	cmp	r3, r5
    7ec8:	d124      	bne.n	7f14 <SharedSpiCard::readStart(unsigned long)+0x5c>
    return m_type;
    7eca:	7d40      	ldrb	r0, [r0, #21]
    7ecc:	2803      	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    7ece:	f04f 0112 	mov.w	r1, #18
    7ed2:	4620      	mov	r0, r4
    sector <<= 9;
    7ed4:	bf18      	it	ne
    7ed6:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
    7ed8:	f7ff fdbc 	bl	7a54 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7edc:	b920      	cbnz	r0, 7ee8 <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
    7ede:	2301      	movs	r3, #1
  return true;
    7ee0:	4618      	mov	r0, r3
  m_state = READ_STATE;
    7ee2:	74e3      	strb	r3, [r4, #19]
}
    7ee4:	b003      	add	sp, #12
    7ee6:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    7ee8:	230c      	movs	r3, #12
  if (m_spiActive) {
    7eea:	7ca0      	ldrb	r0, [r4, #18]
    7eec:	7463      	strb	r3, [r4, #17]
    7eee:	2800      	cmp	r0, #0
    7ef0:	d0f8      	beq.n	7ee4 <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    7ef2:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    7ef4:	7c20      	ldrb	r0, [r4, #16]
    7ef6:	2101      	movs	r1, #1
    7ef8:	f001 fcae 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7efc:	21ff      	movs	r1, #255	; 0xff
    7efe:	4628      	mov	r0, r5
    7f00:	f001 fd9c 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    7f04:	4628      	mov	r0, r5
    7f06:	f001 fd4f 	bl	99a8 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7f0a:	2300      	movs	r3, #0
}
    7f0c:	4618      	mov	r0, r3
    m_spiActive = false;
    7f0e:	74a3      	strb	r3, [r4, #18]
}
    7f10:	b003      	add	sp, #12
    7f12:	bd30      	pop	{r4, r5, pc}
    7f14:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    7f16:	4798      	blx	r3
    7f18:	9a01      	ldr	r2, [sp, #4]
    7f1a:	e7d7      	b.n	7ecc <SharedSpiCard::readStart(unsigned long)+0x14>
    7f1c:	000076f9 	.word	0x000076f9

00007f20 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    7f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f22:	4614      	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    7f24:	7cc2      	ldrb	r2, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    7f26:	4606      	mov	r6, r0
    7f28:	460d      	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    7f2a:	2a01      	cmp	r2, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    7f2c:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    7f2e:	d102      	bne.n	7f36 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    7f30:	6983      	ldr	r3, [r0, #24]
    7f32:	428b      	cmp	r3, r1
    7f34:	d005      	beq.n	7f42 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!readStart(sector)) {
    7f36:	4629      	mov	r1, r5
    7f38:	4630      	mov	r0, r6
    7f3a:	f7ff ffbd 	bl	7eb8 <SharedSpiCard::readStart(unsigned long)>
    7f3e:	b180      	cbz	r0, 7f62 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x42>
    m_curSector = sector;
    7f40:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    7f42:	b187      	cbz	r7, 7f66 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readStart(sector)) {
    7f44:	2500      	movs	r5, #0
    7f46:	e001      	b.n	7f4c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    7f48:	42af      	cmp	r7, r5
    7f4a:	d00c      	beq.n	7f66 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  return readData(dst, 512);
    7f4c:	4621      	mov	r1, r4
    7f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
    7f52:	4630      	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
    7f54:	3501      	adds	r5, #1
    7f56:	f504 7400 	add.w	r4, r4, #512	; 0x200
  return readData(dst, 512);
    7f5a:	f7ff fcd1 	bl	7900 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    7f5e:	2800      	cmp	r0, #0
    7f60:	d1f2      	bne.n	7f48 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
  return false;
    7f62:	2000      	movs	r0, #0
}
    7f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  m_curSector += ns;
    7f66:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    7f68:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    7f6a:	443b      	add	r3, r7
    7f6c:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    7f6e:	2800      	cmp	r0, #0
    7f70:	d1f8      	bne.n	7f64 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    7f72:	4630      	mov	r0, r6
}
    7f74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    7f78:	f7ff bd08 	b.w	798c <SharedSpiCard::readStop()>

00007f7c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    7f7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7f80:	469b      	mov	fp, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    7f82:	7cc3      	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    7f84:	4606      	mov	r6, r0
    7f86:	460c      	mov	r4, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    7f88:	2b01      	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    7f8a:	4615      	mov	r5, r2
    7f8c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    7f90:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  if (sdState() != READ_STATE || sector != m_curSector) {
    7f94:	d102      	bne.n	7f9c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x20>
    7f96:	6983      	ldr	r3, [r0, #24]
    7f98:	428b      	cmp	r3, r1
    7f9a:	d005      	beq.n	7fa8 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
    if (!readStart(sector)) {
    7f9c:	4621      	mov	r1, r4
    7f9e:	4630      	mov	r0, r6
    7fa0:	f7ff ff8a 	bl	7eb8 <SharedSpiCard::readStart(unsigned long)>
    7fa4:	b1b0      	cbz	r0, 7fd4 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x58>
    m_curSector = sector;
    7fa6:	61b4      	str	r4, [r6, #24]
  for (size_t i = 0; i < ns; i++) {
    7fa8:	f1bb 0f00 	cmp.w	fp, #0
    7fac:	d015      	beq.n	7fda <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
    7fae:	eb04 0a0b 	add.w	sl, r4, fp
    7fb2:	e002      	b.n	7fba <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3e>
      callback(sector + i, dst, context);
    7fb4:	47c8      	blx	r9
  for (size_t i = 0; i < ns; i++) {
    7fb6:	45a2      	cmp	sl, r4
    7fb8:	d00f      	beq.n	7fda <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
  return readData(dst, 512);
    7fba:	f44f 7200 	mov.w	r2, #512	; 0x200
    7fbe:	4629      	mov	r1, r5
    7fc0:	4630      	mov	r0, r6
    7fc2:	f7ff fc9d 	bl	7900 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    7fc6:	4607      	mov	r7, r0
      callback(sector + i, dst, context);
    7fc8:	4642      	mov	r2, r8
    7fca:	4620      	mov	r0, r4
    7fcc:	4629      	mov	r1, r5
  for (size_t i = 0; i < ns; i++) {
    7fce:	3401      	adds	r4, #1
    if (readData(dst)) {
    7fd0:	2f00      	cmp	r7, #0
    7fd2:	d1ef      	bne.n	7fb4 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x38>
  return false;
    7fd4:	2000      	movs	r0, #0
}
    7fd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_curSector += ns;
    7fda:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    7fdc:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    7fde:	445b      	add	r3, fp
    7fe0:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    7fe2:	2800      	cmp	r0, #0
    7fe4:	d1f7      	bne.n	7fd6 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
    7fe6:	4630      	mov	r0, r6
}
    7fe8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : readStop();
    7fec:	f7ff bcce 	b.w	798c <SharedSpiCard::readStop()>

00007ff0 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  return readSectors(sector, dst, 1);
    7ff0:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    7ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    7ff6:	695f      	ldr	r7, [r3, #20]
    7ff8:	4b16      	ldr	r3, [pc, #88]	; (8054 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
    7ffa:	429f      	cmp	r7, r3
    7ffc:	d11f      	bne.n	803e <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
  if (sdState() != READ_STATE || sector != m_curSector) {
    7ffe:	7cc3      	ldrb	r3, [r0, #19]
    8000:	4604      	mov	r4, r0
    8002:	460d      	mov	r5, r1
    8004:	4616      	mov	r6, r2
    8006:	2b01      	cmp	r3, #1
    8008:	d102      	bne.n	8010 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
    800a:	6983      	ldr	r3, [r0, #24]
    800c:	4299      	cmp	r1, r3
    800e:	d005      	beq.n	801c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
    8010:	4629      	mov	r1, r5
    8012:	4620      	mov	r0, r4
    8014:	f7ff ff50 	bl	7eb8 <SharedSpiCard::readStart(unsigned long)>
    8018:	b170      	cbz	r0, 8038 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
    m_curSector = sector;
    801a:	61a5      	str	r5, [r4, #24]
  return readData(dst, 512);
    801c:	f44f 7200 	mov.w	r2, #512	; 0x200
    8020:	4631      	mov	r1, r6
    8022:	4620      	mov	r0, r4
    8024:	f7ff fc6c 	bl	7900 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    8028:	b130      	cbz	r0, 8038 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
  m_curSector += ns;
    802a:	69a3      	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    802c:	7f20      	ldrb	r0, [r4, #28]
  m_curSector += ns;
    802e:	3301      	adds	r3, #1
    8030:	61a3      	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8032:	b148      	cbz	r0, 8048 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
    8034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    8038:	2000      	movs	r0, #0
}
    803a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
    803e:	46bc      	mov	ip, r7
    8040:	2301      	movs	r3, #1
}
    8042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    8046:	4760      	bx	ip
  return m_dedicatedSpi ? true : readStop();
    8048:	4620      	mov	r0, r4
}
    804a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
    804e:	f7ff bc9d 	b.w	798c <SharedSpiCard::readStop()>
    8052:	bf00      	nop
    8054:	00007f21 	.word	0x00007f21

00008058 <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    8058:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    805a:	460a      	mov	r2, r1
    805c:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    805e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeStart(uint32_t sector) {
    8060:	b083      	sub	sp, #12
    8062:	4d16      	ldr	r5, [pc, #88]	; (80bc <SharedSpiCard::writeStart(unsigned long)+0x64>)
    8064:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    8066:	42ab      	cmp	r3, r5
    8068:	d124      	bne.n	80b4 <SharedSpiCard::writeStart(unsigned long)+0x5c>
    return m_type;
    806a:	7d40      	ldrb	r0, [r0, #21]
    806c:	2803      	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    806e:	f04f 0119 	mov.w	r1, #25
    8072:	4620      	mov	r0, r4
    sector <<= 9;
    8074:	bf18      	it	ne
    8076:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
    8078:	f7ff fcec 	bl	7a54 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    807c:	b920      	cbnz	r0, 8088 <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
    807e:	2302      	movs	r3, #2
  return true;
    8080:	2001      	movs	r0, #1
  m_state = WRITE_STATE;
    8082:	74e3      	strb	r3, [r4, #19]
}
    8084:	b003      	add	sp, #12
    8086:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    8088:	230e      	movs	r3, #14
  if (m_spiActive) {
    808a:	7ca0      	ldrb	r0, [r4, #18]
    808c:	7463      	strb	r3, [r4, #17]
    808e:	2800      	cmp	r0, #0
    8090:	d0f8      	beq.n	8084 <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    8092:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    8094:	7c20      	ldrb	r0, [r4, #16]
    8096:	2101      	movs	r1, #1
    8098:	f001 fbde 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    809c:	21ff      	movs	r1, #255	; 0xff
    809e:	4628      	mov	r0, r5
    80a0:	f001 fccc 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    80a4:	4628      	mov	r0, r5
    80a6:	f001 fc7f 	bl	99a8 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    80aa:	2300      	movs	r3, #0
}
    80ac:	4618      	mov	r0, r3
    m_spiActive = false;
    80ae:	74a3      	strb	r3, [r4, #18]
}
    80b0:	b003      	add	sp, #12
    80b2:	bd30      	pop	{r4, r5, pc}
    80b4:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    80b6:	4798      	blx	r3
    80b8:	9a01      	ldr	r2, [sp, #4]
    80ba:	e7d7      	b.n	806c <SharedSpiCard::writeStart(unsigned long)+0x14>
    80bc:	000076f9 	.word	0x000076f9

000080c0 <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
    80c0:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    80c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
    80c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    80c8:	4617      	mov	r7, r2
    80ca:	4a41      	ldr	r2, [pc, #260]	; (81d0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
    80cc:	b085      	sub	sp, #20
    80ce:	4604      	mov	r4, r0
    80d0:	460e      	mov	r6, r1
    80d2:	4293      	cmp	r3, r2
    80d4:	d145      	bne.n	8162 <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
    return readRegister(CMD9, csd);
    80d6:	466a      	mov	r2, sp
    80d8:	2109      	movs	r1, #9
    80da:	f7ff fe65 	bl	7da8 <SharedSpiCard::readRegister(unsigned char, void*)>
    80de:	4605      	mov	r5, r0
  if (!readCSD(&csd)) {
    80e0:	b1b5      	cbz	r5, 8110 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
  if (!csd.v1.erase_blk_en) {
    80e2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    80e6:	065a      	lsls	r2, r3, #25
    80e8:	d518      	bpl.n	811c <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    80ea:	7d63      	ldrb	r3, [r4, #21]
    80ec:	2b03      	cmp	r3, #3
    80ee:	d001      	beq.n	80f4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    80f0:	0276      	lsls	r6, r6, #9
    lastSector <<= 9;
    80f2:	027f      	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector)
    80f4:	4632      	mov	r2, r6
    80f6:	2120      	movs	r1, #32
    80f8:	4620      	mov	r0, r4
    80fa:	f7ff fcab 	bl	7a54 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    80fe:	b928      	cbnz	r0, 810c <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
      || cardCommand(CMD33, lastSector)
    8100:	463a      	mov	r2, r7
    8102:	2121      	movs	r1, #33	; 0x21
    8104:	4620      	mov	r0, r4
    8106:	f7ff fca5 	bl	7a54 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    810a:	b370      	cbz	r0, 816a <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
    810c:	2326      	movs	r3, #38	; 0x26
    810e:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    8110:	7ca5      	ldrb	r5, [r4, #18]
    8112:	b99d      	cbnz	r5, 813c <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
    8114:	4628      	mov	r0, r5
    8116:	b005      	add	sp, #20
    8118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    811c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8120:	f89d 200b 	ldrb.w	r2, [sp, #11]
    8124:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8126:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    812a:	1c7a      	adds	r2, r7, #1
    812c:	4332      	orrs	r2, r6
    812e:	4213      	tst	r3, r2
    8130:	d0db      	beq.n	80ea <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    8132:	2327      	movs	r3, #39	; 0x27
  if (m_spiActive) {
    8134:	7ca5      	ldrb	r5, [r4, #18]
    8136:	7463      	strb	r3, [r4, #17]
    8138:	2d00      	cmp	r5, #0
    813a:	d0eb      	beq.n	8114 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
    813c:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    813e:	7c20      	ldrb	r0, [r4, #16]
    8140:	2101      	movs	r1, #1
    8142:	f001 fb89 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8146:	21ff      	movs	r1, #255	; 0xff
    8148:	4628      	mov	r0, r5
    814a:	f001 fc77 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    814e:	4628      	mov	r0, r5
    8150:	f001 fc2a 	bl	99a8 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8154:	2300      	movs	r3, #0
  return false;
    8156:	461d      	mov	r5, r3
    m_spiActive = false;
    8158:	74a3      	strb	r3, [r4, #18]
}
    815a:	4628      	mov	r0, r5
    815c:	b005      	add	sp, #20
    815e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
    8162:	4669      	mov	r1, sp
    8164:	4798      	blx	r3
    8166:	4605      	mov	r5, r0
    8168:	e7ba      	b.n	80e0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      || cardCommand(CMD38, 0)) {
    816a:	4602      	mov	r2, r0
    816c:	2126      	movs	r1, #38	; 0x26
    816e:	4620      	mov	r0, r4
    8170:	f7ff fc70 	bl	7a54 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8174:	2800      	cmp	r0, #0
    8176:	d1c9      	bne.n	810c <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    8178:	f8df 8058 	ldr.w	r8, [pc, #88]	; 81d4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
    m_endTime = ms + millis16();
    817c:	f242 7710 	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
    8180:	f104 0904 	add.w	r9, r4, #4
    8184:	f8d8 3000 	ldr.w	r3, [r8]
    8188:	441f      	add	r7, r3
    818a:	b2bf      	uxth	r7, r7
  explicit Timeout(uint16_t ms) {set(ms);}
    818c:	e004      	b.n	8198 <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
    818e:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    8192:	1afb      	subs	r3, r7, r3
    if (timeout.timedOut()) {
    8194:	041b      	lsls	r3, r3, #16
    8196:	d417      	bmi.n	81c8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
    8198:	4648      	mov	r0, r9
    819a:	f001 fc31 	bl	9a00 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    819e:	28ff      	cmp	r0, #255	; 0xff
    81a0:	4606      	mov	r6, r0
    81a2:	d1f4      	bne.n	818e <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
    81a4:	7ca3      	ldrb	r3, [r4, #18]
    81a6:	2b00      	cmp	r3, #0
    81a8:	d0b4      	beq.n	8114 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    sdCsWrite(m_csPin, true);
    81aa:	2101      	movs	r1, #1
    81ac:	7c20      	ldrb	r0, [r4, #16]
  return true;
    81ae:	461d      	mov	r5, r3
    81b0:	f001 fb52 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    81b4:	4631      	mov	r1, r6
    81b6:	4648      	mov	r0, r9
    81b8:	f001 fc40 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    81bc:	4648      	mov	r0, r9
    81be:	f001 fbf3 	bl	99a8 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    81c2:	2300      	movs	r3, #0
    81c4:	74a3      	strb	r3, [r4, #18]
}
    81c6:	e7a5      	b.n	8114 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
    81c8:	2328      	movs	r3, #40	; 0x28
    81ca:	7463      	strb	r3, [r4, #17]
    goto fail;
    81cc:	e7a0      	b.n	8110 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    81ce:	bf00      	nop
    81d0:	000081d9 	.word	0x000081d9
    81d4:	200038d8 	.word	0x200038d8

000081d8 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    81d8:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    81da:	2200      	movs	r2, #0
    81dc:	b082      	sub	sp, #8
    81de:	460e      	mov	r6, r1
    81e0:	2109      	movs	r1, #9
    81e2:	4604      	mov	r4, r0
    81e4:	f7ff fc36 	bl	7a54 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    81e8:	b1b0      	cbz	r0, 8218 <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
    81ea:	231b      	movs	r3, #27
    81ec:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    81ee:	7ca0      	ldrb	r0, [r4, #18]
    81f0:	b908      	cbnz	r0, 81f6 <SharedSpiCard::readCSD(csd_t*)+0x1e>
  }
    81f2:	b002      	add	sp, #8
    81f4:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    81f6:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    81f8:	7c20      	ldrb	r0, [r4, #16]
    81fa:	2101      	movs	r1, #1
    81fc:	f001 fb2c 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8200:	21ff      	movs	r1, #255	; 0xff
    8202:	4628      	mov	r0, r5
    8204:	f001 fc1a 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    8208:	4628      	mov	r0, r5
    820a:	f001 fbcd 	bl	99a8 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    820e:	2300      	movs	r3, #0
  return false;
    8210:	4618      	mov	r0, r3
    m_spiActive = false;
    8212:	74a3      	strb	r3, [r4, #18]
  }
    8214:	b002      	add	sp, #8
    8216:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    8218:	4605      	mov	r5, r0
    821a:	2210      	movs	r2, #16
    821c:	4631      	mov	r1, r6
    821e:	4620      	mov	r0, r4
    8220:	f7ff fb6e 	bl	7900 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    8224:	2800      	cmp	r0, #0
    8226:	d0e2      	beq.n	81ee <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
    8228:	7ca6      	ldrb	r6, [r4, #18]
    822a:	2e00      	cmp	r6, #0
    822c:	d0e1      	beq.n	81f2 <SharedSpiCard::readCSD(csd_t*)+0x1a>
    sdCsWrite(m_csPin, true);
    822e:	7c20      	ldrb	r0, [r4, #16]
    8230:	2101      	movs	r1, #1
    8232:	f001 fb11 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8236:	1d20      	adds	r0, r4, #4
    8238:	21ff      	movs	r1, #255	; 0xff
    823a:	9001      	str	r0, [sp, #4]
    823c:	f001 fbfe 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    8240:	9801      	ldr	r0, [sp, #4]
    8242:	f001 fbb1 	bl	99a8 <SdSpiArduinoDriver::deactivate()>
}
    8246:	4630      	mov	r0, r6
    m_spiActive = false;
    8248:	74a5      	strb	r5, [r4, #18]
  }
    824a:	b002      	add	sp, #8
    824c:	bd70      	pop	{r4, r5, r6, pc}
    824e:	bf00      	nop

00008250 <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    8250:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    8252:	2200      	movs	r2, #0
    8254:	b082      	sub	sp, #8
    8256:	460e      	mov	r6, r1
    8258:	210a      	movs	r1, #10
    825a:	4604      	mov	r4, r0
    825c:	f7ff fbfa 	bl	7a54 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8260:	b1b0      	cbz	r0, 8290 <SharedSpiCard::readCID(CID*)+0x40>
    m_errorCode = code;
    8262:	231b      	movs	r3, #27
    8264:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    8266:	7ca0      	ldrb	r0, [r4, #18]
    8268:	b908      	cbnz	r0, 826e <SharedSpiCard::readCID(CID*)+0x1e>
  }
    826a:	b002      	add	sp, #8
    826c:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    826e:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    8270:	7c20      	ldrb	r0, [r4, #16]
    8272:	2101      	movs	r1, #1
    8274:	f001 faf0 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8278:	21ff      	movs	r1, #255	; 0xff
    827a:	4628      	mov	r0, r5
    827c:	f001 fbde 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    8280:	4628      	mov	r0, r5
    8282:	f001 fb91 	bl	99a8 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8286:	2300      	movs	r3, #0
  return false;
    8288:	4618      	mov	r0, r3
    m_spiActive = false;
    828a:	74a3      	strb	r3, [r4, #18]
  }
    828c:	b002      	add	sp, #8
    828e:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    8290:	4605      	mov	r5, r0
    8292:	2210      	movs	r2, #16
    8294:	4631      	mov	r1, r6
    8296:	4620      	mov	r0, r4
    8298:	f7ff fb32 	bl	7900 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    829c:	2800      	cmp	r0, #0
    829e:	d0e2      	beq.n	8266 <SharedSpiCard::readCID(CID*)+0x16>
  if (m_spiActive) {
    82a0:	7ca6      	ldrb	r6, [r4, #18]
    82a2:	2e00      	cmp	r6, #0
    82a4:	d0e1      	beq.n	826a <SharedSpiCard::readCID(CID*)+0x1a>
    sdCsWrite(m_csPin, true);
    82a6:	7c20      	ldrb	r0, [r4, #16]
    82a8:	2101      	movs	r1, #1
    82aa:	f001 fad5 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    82ae:	1d20      	adds	r0, r4, #4
    82b0:	21ff      	movs	r1, #255	; 0xff
    82b2:	9001      	str	r0, [sp, #4]
    82b4:	f001 fbc2 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    82b8:	9801      	ldr	r0, [sp, #4]
    82ba:	f001 fb75 	bl	99a8 <SdSpiArduinoDriver::deactivate()>
}
    82be:	4630      	mov	r0, r6
    m_spiActive = false;
    82c0:	74a5      	strb	r5, [r4, #18]
  }
    82c2:	b002      	add	sp, #8
    82c4:	bd70      	pop	{r4, r5, r6, pc}
    82c6:	bf00      	nop

000082c8 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    82c8:	b570      	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
    82ca:	1d05      	adds	r5, r0, #4
    82cc:	4616      	mov	r6, r2
    82ce:	4604      	mov	r4, r0
    82d0:	4628      	mov	r0, r5
    82d2:	f001 fbb3 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    82d6:	f44f 7200 	mov.w	r2, #512	; 0x200
    82da:	4631      	mov	r1, r6
    82dc:	4628      	mov	r0, r5
    82de:	f001 fbb7 	bl	9a50 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    82e2:	21ff      	movs	r1, #255	; 0xff
    82e4:	4628      	mov	r0, r5
    82e6:	f001 fba9 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    82ea:	21ff      	movs	r1, #255	; 0xff
    82ec:	4628      	mov	r0, r5
    82ee:	f001 fba5 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    82f2:	4628      	mov	r0, r5
    82f4:	f001 fb84 	bl	9a00 <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    82f8:	f000 031f 	and.w	r3, r0, #31
  m_status = spiReceive();
    82fc:	7520      	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    82fe:	2b05      	cmp	r3, #5
    8300:	d004      	beq.n	830c <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
    8302:	2320      	movs	r3, #32
  if (m_spiActive) {
    8304:	7ca0      	ldrb	r0, [r4, #18]
    8306:	7463      	strb	r3, [r4, #17]
    8308:	b910      	cbnz	r0, 8310 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
    830a:	bd70      	pop	{r4, r5, r6, pc}
  return true;
    830c:	2001      	movs	r0, #1
}
    830e:	bd70      	pop	{r4, r5, r6, pc}
    sdCsWrite(m_csPin, true);
    8310:	7c20      	ldrb	r0, [r4, #16]
    8312:	2101      	movs	r1, #1
    8314:	f001 faa0 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8318:	21ff      	movs	r1, #255	; 0xff
    831a:	4628      	mov	r0, r5
    831c:	f001 fb8e 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    8320:	4628      	mov	r0, r5
    8322:	f001 fb41 	bl	99a8 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8326:	2300      	movs	r3, #0
}
    8328:	4618      	mov	r0, r3
    m_spiActive = false;
    832a:	74a3      	strb	r3, [r4, #18]
}
    832c:	bd70      	pop	{r4, r5, r6, pc}
    832e:	bf00      	nop

00008330 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    8330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8334:	4d17      	ldr	r5, [pc, #92]	; (8394 <SharedSpiCard::writeData(unsigned char const*)+0x64>)
    8336:	4606      	mov	r6, r0
    8338:	460f      	mov	r7, r1
    return m_spiDriver.receive();
    833a:	f100 0804 	add.w	r8, r0, #4
    833e:	682c      	ldr	r4, [r5, #0]
    m_endTime = ms + millis16();
    8340:	f504 7416 	add.w	r4, r4, #600	; 0x258
    8344:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    8346:	e003      	b.n	8350 <SharedSpiCard::writeData(unsigned char const*)+0x20>
    8348:	682b      	ldr	r3, [r5, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    834a:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    834c:	041b      	lsls	r3, r3, #16
    834e:	d40c      	bmi.n	836a <SharedSpiCard::writeData(unsigned char const*)+0x3a>
    8350:	4640      	mov	r0, r8
    8352:	f001 fb55 	bl	9a00 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    8356:	28ff      	cmp	r0, #255	; 0xff
    8358:	d1f6      	bne.n	8348 <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    835a:	463a      	mov	r2, r7
    835c:	21fc      	movs	r1, #252	; 0xfc
    835e:	4630      	mov	r0, r6
    8360:	f7ff ffb2 	bl	82c8 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    8364:	b118      	cbz	r0, 836e <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
    8366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    836a:	2324      	movs	r3, #36	; 0x24
    836c:	7473      	strb	r3, [r6, #17]
  if (m_spiActive) {
    836e:	7cb0      	ldrb	r0, [r6, #18]
    8370:	2800      	cmp	r0, #0
    8372:	d0f8      	beq.n	8366 <SharedSpiCard::writeData(unsigned char const*)+0x36>
    sdCsWrite(m_csPin, true);
    8374:	7c30      	ldrb	r0, [r6, #16]
    8376:	2101      	movs	r1, #1
    8378:	f001 fa6e 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    837c:	21ff      	movs	r1, #255	; 0xff
    837e:	4640      	mov	r0, r8
    8380:	f001 fb5c 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    8384:	4640      	mov	r0, r8
    8386:	f001 fb0f 	bl	99a8 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    838a:	2300      	movs	r3, #0
}
    838c:	4618      	mov	r0, r3
    m_spiActive = false;
    838e:	74b3      	strb	r3, [r6, #18]
}
    8390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8394:	200038d8 	.word	0x200038d8

00008398 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    8398:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    839a:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    839c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    839e:	4616      	mov	r6, r2
    83a0:	4a22      	ldr	r2, [pc, #136]	; (842c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x94>)
    83a2:	b082      	sub	sp, #8
    83a4:	4604      	mov	r4, r0
    83a6:	460d      	mov	r5, r1
    83a8:	4293      	cmp	r3, r2
    83aa:	d13c      	bne.n	8426 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x8e>
    return m_type;
    83ac:	7d40      	ldrb	r0, [r0, #21]
  if (type() != SD_CARD_TYPE_SDHC) {
    83ae:	2803      	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    83b0:	f04f 0118 	mov.w	r1, #24
    83b4:	4620      	mov	r0, r4
    sector <<= 9;
    83b6:	bf18      	it	ne
    83b8:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    83ba:	462a      	mov	r2, r5
    83bc:	f7ff fb4a 	bl	7a54 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    83c0:	4605      	mov	r5, r0
    83c2:	b1b0      	cbz	r0, 83f2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5a>
    m_errorCode = code;
    83c4:	230d      	movs	r3, #13
    83c6:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    83c8:	7ca0      	ldrb	r0, [r4, #18]
    83ca:	b908      	cbnz	r0, 83d0 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
}
    83cc:	b002      	add	sp, #8
    83ce:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    83d0:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    83d2:	7c20      	ldrb	r0, [r4, #16]
    83d4:	2101      	movs	r1, #1
    83d6:	f001 fa3f 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    83da:	21ff      	movs	r1, #255	; 0xff
    83dc:	4628      	mov	r0, r5
    83de:	f001 fb2d 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    83e2:	4628      	mov	r0, r5
    83e4:	f001 fae0 	bl	99a8 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    83e8:	2300      	movs	r3, #0
  return false;
    83ea:	4618      	mov	r0, r3
    m_spiActive = false;
    83ec:	74a3      	strb	r3, [r4, #18]
}
    83ee:	b002      	add	sp, #8
    83f0:	bd70      	pop	{r4, r5, r6, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    83f2:	4632      	mov	r2, r6
    83f4:	21fe      	movs	r1, #254	; 0xfe
    83f6:	4620      	mov	r0, r4
    83f8:	f7ff ff66 	bl	82c8 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    83fc:	2800      	cmp	r0, #0
    83fe:	d0e3      	beq.n	83c8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
  if (m_spiActive) {
    8400:	7ca6      	ldrb	r6, [r4, #18]
    8402:	2e00      	cmp	r6, #0
    8404:	d0e2      	beq.n	83cc <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x34>
    sdCsWrite(m_csPin, true);
    8406:	7c20      	ldrb	r0, [r4, #16]
    8408:	2101      	movs	r1, #1
    840a:	f001 fa25 	bl	9858 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    840e:	1d20      	adds	r0, r4, #4
    8410:	21ff      	movs	r1, #255	; 0xff
    8412:	9001      	str	r0, [sp, #4]
    8414:	f001 fb12 	bl	9a3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    8418:	9801      	ldr	r0, [sp, #4]
    841a:	f001 fac5 	bl	99a8 <SdSpiArduinoDriver::deactivate()>
  return true;
    841e:	4630      	mov	r0, r6
    m_spiActive = false;
    8420:	74a5      	strb	r5, [r4, #18]
}
    8422:	b002      	add	sp, #8
    8424:	bd70      	pop	{r4, r5, r6, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
    8426:	4798      	blx	r3
    8428:	e7c1      	b.n	83ae <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    842a:	bf00      	nop
    842c:	000076f9 	.word	0x000076f9

00008430 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8430:	b410      	push	{r4}
  if (m_dedicatedSpi) {
    8432:	7f04      	ldrb	r4, [r0, #28]
    8434:	b134      	cbz	r4, 8444 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    8436:	6804      	ldr	r4, [r0, #0]
    8438:	2301      	movs	r3, #1
    843a:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    843c:	46a4      	mov	ip, r4
}
    843e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    8442:	4760      	bx	ip
}
    8444:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    8448:	f7ff bfa6 	b.w	8398 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

0000844c <DedicatedSpiCard::begin(SdSpiConfig)>:
bool DedicatedSpiCard::begin(SdSpiConfig spiConfig) {
    844c:	b510      	push	{r4, lr}
    844e:	b084      	sub	sp, #16
    8450:	4604      	mov	r4, r0
    8452:	f10d 0c04 	add.w	ip, sp, #4
    8456:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (!SharedSpiCard::begin(spiConfig)) {
    845a:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
    845e:	f7ff fb6d 	bl	7b3c <SharedSpiCard::begin(SdSpiConfig)>
    8462:	b120      	cbz	r0, 846e <DedicatedSpiCard::begin(SdSpiConfig)+0x22>
const uint8_t DEDICATED_SPI = 1;
/**
 * \param[in] opt option field of SdSpiConfig.
 * \return true for dedicated SPI.
 */
inline bool spiOptionDedicated(uint8_t opt) {return opt & DEDICATED_SPI;}
    8464:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8468:	f003 0301 	and.w	r3, r3, #1
    846c:	7723      	strb	r3, [r4, #28]
}
    846e:	b004      	add	sp, #16
    8470:	bd10      	pop	{r4, pc}
    8472:	bf00      	nop

00008474 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    8474:	2000      	movs	r0, #0
    8476:	4770      	bx	lr

00008478 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    8478:	2000      	movs	r0, #0
    847a:	4770      	bx	lr

0000847c <SdCardInterface::setDedicatedSpi(bool)>:
  }
    847c:	2000      	movs	r0, #0
    847e:	4770      	bx	lr

00008480 <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    8480:	4770      	bx	lr
    8482:	bf00      	nop

00008484 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    8484:	4b08      	ldr	r3, [pc, #32]	; (84a8 <sdIrs()+0x24>)
    8486:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    8488:	4a08      	ldr	r2, [pc, #32]	; (84ac <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    848a:	4809      	ldr	r0, [pc, #36]	; (84b0 <sdIrs()+0x2c>)
static void sdIrs() {
    848c:	b410      	push	{r4}
  SDHC_IRQSIGEN = 0;
    848e:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    8490:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    8492:	6014      	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    8494:	6812      	ldr	r2, [r2, #0]
}
    8496:	f85d 4b04 	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
    849a:	631a      	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    849c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    849e:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    84a2:	649a      	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
    84a4:	7001      	strb	r1, [r0, #0]
}
    84a6:	4770      	bx	lr
    84a8:	402c0000 	.word	0x402c0000
    84ac:	200033f4 	.word	0x200033f4
    84b0:	200038fe 	.word	0x200038fe

000084b4 <isBusyDat()>:
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    84b4:	4b03      	ldr	r3, [pc, #12]	; (84c4 <isBusyDat()+0x10>)
    84b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
    84b8:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
}
    84bc:	f3c0 6000 	ubfx	r0, r0, #24, #1
    84c0:	4770      	bx	lr
    84c2:	bf00      	nop
    84c4:	402c0000 	.word	0x402c0000

000084c8 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    84c8:	4b01      	ldr	r3, [pc, #4]	; (84d0 <isBusyDMA()+0x8>)
    84ca:	7818      	ldrb	r0, [r3, #0]
}
    84cc:	4770      	bx	lr
    84ce:	bf00      	nop
    84d0:	200038fe 	.word	0x200038fe

000084d4 <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    84d4:	4a2b      	ldr	r2, [pc, #172]	; (8584 <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    84d6:	4b2c      	ldr	r3, [pc, #176]	; (8588 <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    84d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    84da:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    84de:	492b      	ldr	r1, [pc, #172]	; (858c <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    84e0:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    84e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    84e8:	3201      	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    84ea:	b570      	push	{r4, r5, r6, lr}
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    84ec:	4c28      	ldr	r4, [pc, #160]	; (8590 <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    84ee:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    84f2:	fba4 4303 	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000*kHzMax;
    84f6:	fb05 f000 	mul.w	r0, r5, r0
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    84fa:	089b      	lsrs	r3, r3, #2
    84fc:	fbb1 fef3 	udiv	lr, r1, r3
    8500:	fbbe fef2 	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8504:	ebb0 1f1e 	cmp.w	r0, lr, lsr #4
    8508:	d235      	bcs.n	8576 <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
    850a:	2301      	movs	r3, #1
    sdclkfs <<= 1;
    850c:	461e      	mov	r6, r3
    850e:	005b      	lsls	r3, r3, #1
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8510:	011a      	lsls	r2, r3, #4
    8512:	fbbe f2f2 	udiv	r2, lr, r2
    8516:	4282      	cmp	r2, r0
    8518:	d901      	bls.n	851e <setSdclk(unsigned long)+0x4a>
    851a:	2bff      	cmp	r3, #255	; 0xff
    851c:	d9f6      	bls.n	850c <setSdclk(unsigned long)+0x38>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    851e:	fbbe f2f3 	udiv	r2, lr, r3
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    8522:	0236      	lsls	r6, r6, #8
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8524:	4290      	cmp	r0, r2
    8526:	d22a      	bcs.n	857e <setSdclk(unsigned long)+0xaa>
    8528:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    852c:	2201      	movs	r2, #1
    852e:	e000      	b.n	8532 <setSdclk(unsigned long)+0x5e>
    8530:	46a4      	mov	ip, r4
    dvs++;
    8532:	4615      	mov	r5, r2
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8534:	eb03 040c 	add.w	r4, r3, ip
    dvs++;
    8538:	3201      	adds	r2, #1
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    853a:	fbbe f1fc 	udiv	r1, lr, ip
    853e:	4281      	cmp	r1, r0
    8540:	d917      	bls.n	8572 <setSdclk(unsigned long)+0x9e>
    8542:	2a10      	cmp	r2, #16
    8544:	d1f4      	bne.n	8530 <setSdclk(unsigned long)+0x5c>
    8546:	25f0      	movs	r5, #240	; 0xf0
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    8548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    854c:	4911      	ldr	r1, [pc, #68]	; (8594 <setSdclk(unsigned long)+0xc0>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    854e:	4a12      	ldr	r2, [pc, #72]	; (8598 <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    8550:	fb03 fc0c 	mul.w	ip, r3, ip
    8554:	fbbe f3fc 	udiv	r3, lr, ip
    8558:	600b      	str	r3, [r1, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    855a:	4b10      	ldr	r3, [pc, #64]	; (859c <setSdclk(unsigned long)+0xc8>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    855c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    855e:	400b      	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    8560:	432b      	orrs	r3, r5
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    8562:	4333      	orrs	r3, r6
    8564:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    8568:	62d3      	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    856a:	6a53      	ldr	r3, [r2, #36]	; 0x24
    856c:	071b      	lsls	r3, r3, #28
    856e:	d5fc      	bpl.n	856a <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    8570:	bd70      	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    8572:	012d      	lsls	r5, r5, #4
    8574:	e7e8      	b.n	8548 <setSdclk(unsigned long)+0x74>
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8576:	4672      	mov	r2, lr
    8578:	2600      	movs	r6, #0
  uint32_t sdclkfs = 1;
    857a:	2301      	movs	r3, #1
    857c:	e7d2      	b.n	8524 <setSdclk(unsigned long)+0x50>
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    857e:	469c      	mov	ip, r3
    8580:	2500      	movs	r5, #0
    8582:	e7e1      	b.n	8548 <setSdclk(unsigned long)+0x74>
    8584:	400fc000 	.word	0x400fc000
    8588:	400d8000 	.word	0x400d8000
    858c:	5e69ec00 	.word	0x5e69ec00
    8590:	aaaaaaab 	.word	0xaaaaaaab
    8594:	200032d8 	.word	0x200032d8
    8598:	402c0000 	.word	0x402c0000
    859c:	fff0000f 	.word	0xfff0000f

000085a0 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    85a0:	4b01      	ldr	r3, [pc, #4]	; (85a8 <SdioCard::errorCode() const+0x8>)
}
    85a2:	7818      	ldrb	r0, [r3, #0]
    85a4:	4770      	bx	lr
    85a6:	bf00      	nop
    85a8:	200022a6 	.word	0x200022a6

000085ac <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    85ac:	4b01      	ldr	r3, [pc, #4]	; (85b4 <SdioCard::errorData() const+0x8>)
    85ae:	6818      	ldr	r0, [r3, #0]
}
    85b0:	4770      	bx	lr
    85b2:	bf00      	nop
    85b4:	200033f4 	.word	0x200033f4

000085b8 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    85b8:	b410      	push	{r4}
  memcpy(cid, &m_cid, 16);
    85ba:	4c07      	ldr	r4, [pc, #28]	; (85d8 <SdioCard::readCID(CID*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
    85bc:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, 16);
    85be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    85c0:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    85c4:	2001      	movs	r0, #1
  memcpy(cid, &m_cid, 16);
    85c6:	f8cc 1004 	str.w	r1, [ip, #4]
    85ca:	f8cc 2008 	str.w	r2, [ip, #8]
    85ce:	f8cc 300c 	str.w	r3, [ip, #12]
}
    85d2:	f85d 4b04 	ldr.w	r4, [sp], #4
    85d6:	4770      	bx	lr
    85d8:	200033c8 	.word	0x200033c8

000085dc <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    85dc:	b410      	push	{r4}
  memcpy(csd, &m_csd, 16);
    85de:	4c07      	ldr	r4, [pc, #28]	; (85fc <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
    85e0:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, 16);
    85e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    85e4:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    85e8:	2001      	movs	r0, #1
  memcpy(csd, &m_csd, 16);
    85ea:	f8cc 1004 	str.w	r1, [ip, #4]
    85ee:	f8cc 2008 	str.w	r2, [ip, #8]
    85f2:	f8cc 300c 	str.w	r3, [ip, #12]
}
    85f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    85fa:	4770      	bx	lr
    85fc:	200033d8 	.word	0x200033d8

00008600 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    8600:	4b02      	ldr	r3, [pc, #8]	; (860c <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    8602:	2001      	movs	r0, #1
  *ocr = m_ocr;
    8604:	681b      	ldr	r3, [r3, #0]
    8606:	600b      	str	r3, [r1, #0]
}
    8608:	4770      	bx	lr
    860a:	bf00      	nop
    860c:	200033e8 	.word	0x200033e8

00008610 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    8610:	4770      	bx	lr
    8612:	bf00      	nop

00008614 <SdioCard::~SdioCard()>:
    8614:	b510      	push	{r4, lr}
    8616:	4604      	mov	r4, r0
    8618:	210c      	movs	r1, #12
    861a:	f003 f925 	bl	b868 <operator delete(void*, unsigned int)>
    861e:	4620      	mov	r0, r4
    8620:	bd10      	pop	{r4, pc}
    8622:	bf00      	nop

00008624 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    8624:	4b04      	ldr	r3, [pc, #16]	; (8638 <SdioCard::type() const+0x14>)
    8626:	781b      	ldrb	r3, [r3, #0]
    8628:	b123      	cbz	r3, 8634 <SdioCard::type() const+0x10>
    862a:	4b04      	ldr	r3, [pc, #16]	; (863c <SdioCard::type() const+0x18>)
    862c:	7818      	ldrb	r0, [r3, #0]
    862e:	3002      	adds	r0, #2
    8630:	b2c0      	uxtb	r0, r0
    8632:	4770      	bx	lr
    8634:	2001      	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    8636:	4770      	bx	lr
    8638:	200038fb 	.word	0x200038fb
    863c:	200038fc 	.word	0x200038fc

00008640 <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    8640:	4b18      	ldr	r3, [pc, #96]	; (86a4 <SdioCard::sectorCount()+0x64>)
    8642:	781a      	ldrb	r2, [r3, #0]
    8644:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
    8648:	d00f      	beq.n	866a <SdioCard::sectorCount()+0x2a>
  } else if (csd->v2.csd_ver == 1) {
    864a:	2a40      	cmp	r2, #64	; 0x40
    864c:	d001      	beq.n	8652 <SdioCard::sectorCount()+0x12>
  } else {
    return 0;
    864e:	2000      	movs	r0, #0
}
    8650:	4770      	bx	lr
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8652:	7a58      	ldrb	r0, [r3, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    8654:	79da      	ldrb	r2, [r3, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8656:	7a19      	ldrb	r1, [r3, #8]
    8658:	3001      	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    865a:	f002 033f 	and.w	r3, r2, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    865e:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    8662:	eb00 2001 	add.w	r0, r0, r1, lsl #8
    8666:	0280      	lsls	r0, r0, #10
    8668:	4770      	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    866a:	7a5a      	ldrb	r2, [r3, #9]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    866c:	7999      	ldrb	r1, [r3, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    866e:	79d8      	ldrb	r0, [r3, #7]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    8670:	f002 0203 	and.w	r2, r2, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8674:	f893 c008 	ldrb.w	ip, [r3, #8]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    8678:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    867c:	0080      	lsls	r0, r0, #2
                          | csd->v1.c_size_mult_low;
    867e:	0052      	lsls	r2, r2, #1
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8680:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
uint32_t SdioCard::sectorCount() {
    8684:	b500      	push	{lr}
                          | csd->v1.c_size_mult_low;
    8686:	f893 e00a 	ldrb.w	lr, [r3, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    868a:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    uint8_t read_bl_len = csd->v1.read_bl_len;
    868e:	795b      	ldrb	r3, [r3, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8690:	ea42 12de 	orr.w	r2, r2, lr, lsr #7
    8694:	3001      	adds	r0, #1
    8696:	f003 030f 	and.w	r3, r3, #15
    869a:	4413      	add	r3, r2
    869c:	3b07      	subs	r3, #7
    869e:	4098      	lsls	r0, r3
}
    86a0:	f85d fb04 	ldr.w	pc, [sp], #4
    86a4:	200033d8 	.word	0x200033d8

000086a8 <initSDHC()>:
  CCM_ANALOG_PFD_528 |= (1 << 7);
    86a8:	4a40      	ldr	r2, [pc, #256]	; (87ac <initSDHC()+0x104>)
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    86aa:	2005      	movs	r0, #5
    86ac:	4940      	ldr	r1, [pc, #256]	; (87b0 <initSDHC()+0x108>)
static void initSDHC() {
    86ae:	b538      	push	{r3, r4, r5, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    86b0:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    86b4:	4b3f      	ldr	r3, [pc, #252]	; (87b4 <initSDHC()+0x10c>)
  CCM_ANALOG_PFD_528 |= (1 << 7);
    86b6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
    86ba:	4d3f      	ldr	r5, [pc, #252]	; (87b8 <initSDHC()+0x110>)
  CCM_ANALOG_PFD_528 |= (1 << 7);
    86bc:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    86c0:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    86c4:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
    86c8:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    86cc:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    86d0:	f044 0418 	orr.w	r4, r4, #24
    86d4:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    86d8:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    86dc:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    86e0:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    86e4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    86e8:	f042 020c 	orr.w	r2, r2, #12
    86ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    86f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    86f2:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
    86f6:	625a      	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    86f8:	69da      	ldr	r2, [r3, #28]
    86fa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    86fe:	61da      	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    8700:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    8702:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    8706:	625a      	str	r2, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    8708:	f8c1 01cc 	str.w	r0, [r1, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    870c:	f8c1 01d0 	str.w	r0, [r1, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    8710:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    8714:	f8c1 01c0 	str.w	r0, [r1, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    8718:	f8c1 01c4 	str.w	r0, [r1, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    871c:	f8c1 01c8 	str.w	r0, [r1, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
    8720:	6caa      	ldr	r2, [r5, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    8722:	4b26      	ldr	r3, [pc, #152]	; (87bc <initSDHC()+0x114>)
  SDHC_MIX_CTRL |= 0x80000000;
    8724:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    8728:	64aa      	str	r2, [r5, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    872a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    872c:	4313      	orrs	r3, r2
    872e:	62eb      	str	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    8730:	6aec      	ldr	r4, [r5, #44]	; 0x2c
    8732:	f014 7480 	ands.w	r4, r4, #16777216	; 0x1000000
    8736:	d1fb      	bne.n	8730 <initSDHC()+0x88>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    8738:	f44f 70c8 	mov.w	r0, #400	; 0x190
    873c:	f7ff feca 	bl	84d4 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    8740:	4b1b      	ldr	r3, [pc, #108]	; (87b0 <initSDHC()+0x108>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    8742:	f247 02b8 	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    8746:	f241 01b8 	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    874a:	f8c3 41cc 	str.w	r4, [r3, #460]	; 0x1cc
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    874e:	481c      	ldr	r0, [pc, #112]	; (87c0 <initSDHC()+0x118>)
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    8750:	f8c3 41d0 	str.w	r4, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    8754:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    8758:	f8c3 41c0 	str.w	r4, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    875c:	f8c3 41c4 	str.w	r4, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    8760:	f8c3 41c8 	str.w	r4, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    8764:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    8768:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    876c:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    8770:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    8774:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    8778:	4912      	ldr	r1, [pc, #72]	; (87c4 <initSDHC()+0x11c>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    877a:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
    877e:	4b12      	ldr	r3, [pc, #72]	; (87c8 <initSDHC()+0x120>)
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    8780:	6368      	str	r0, [r5, #52]	; 0x34
    8782:	f8c1 31f8 	str.w	r3, [r1, #504]	; 0x1f8
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    8786:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    878a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    878e:	490f      	ldr	r1, [pc, #60]	; (87cc <initSDHC()+0x124>)
    8790:	2060      	movs	r0, #96	; 0x60
    8792:	f881 006e 	strb.w	r0, [r1, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    8796:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    879a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    879c:	4a06      	ldr	r2, [pc, #24]	; (87b8 <initSDHC()+0x110>)
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    879e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    87a2:	62eb      	str	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    87a4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    87a6:	011b      	lsls	r3, r3, #4
    87a8:	d4fc      	bmi.n	87a4 <initSDHC()+0xfc>
}
    87aa:	bd38      	pop	{r3, r4, r5, pc}
    87ac:	400d8000 	.word	0x400d8000
    87b0:	401f8000 	.word	0x401f8000
    87b4:	400fc000 	.word	0x400fc000
    87b8:	402c0000 	.word	0x402c0000
    87bc:	01008000 	.word	0x01008000
    87c0:	117f000b 	.word	0x117f000b
    87c4:	20002400 	.word	0x20002400
    87c8:	00008485 	.word	0x00008485
    87cc:	e000e400 	.word	0xe000e400

000087d0 <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
    87d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
    87d4:	f002 ff06 	bl	b5e4 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    87d8:	4e17      	ldr	r6, [pc, #92]	; (8838 <waitTransferComplete() [clone .part.0]+0x68>)
    87da:	4d18      	ldr	r5, [pc, #96]	; (883c <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
    87dc:	4607      	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    87de:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8854 <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
    87e2:	e004      	b.n	87ee <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    87e4:	f002 fefe 	bl	b5e4 <micros>
    87e8:	1bc0      	subs	r0, r0, r7
    87ea:	4540      	cmp	r0, r8
    87ec:	d81b      	bhi.n	8826 <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    87ee:	6b34      	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
    87f0:	402c      	ands	r4, r5
    87f2:	d0f7      	beq.n	87e4 <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
    87f4:	4a12      	ldr	r2, [pc, #72]	; (8840 <waitTransferComplete() [clone .part.0]+0x70>)
    87f6:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    87f8:	4b12      	ldr	r3, [pc, #72]	; (8844 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    87fa:	7011      	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    87fc:	6b32      	ldr	r2, [r6, #48]	; 0x30
    87fe:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8800:	6819      	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    8802:	4a11      	ldr	r2, [pc, #68]	; (8848 <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
    8804:	6331      	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    8806:	681b      	ldr	r3, [r3, #0]
    8808:	4213      	tst	r3, r2
    880a:	d009      	beq.n	8820 <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
    880c:	490f      	ldr	r1, [pc, #60]	; (884c <waitTransferComplete() [clone .part.0]+0x7c>)
    880e:	241f      	movs	r4, #31
  m_errorLine = line;
    8810:	4b0f      	ldr	r3, [pc, #60]	; (8850 <waitTransferComplete() [clone .part.0]+0x80>)
    8812:	f240 227a 	movw	r2, #634	; 0x27a
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    8816:	2000      	movs	r0, #0
  m_errorCode = code;
    8818:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    881a:	601a      	str	r2, [r3, #0]
}
    881c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    8820:	2001      	movs	r0, #1
}
    8822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
    8826:	4a06      	ldr	r2, [pc, #24]	; (8840 <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
    8828:	4b06      	ldr	r3, [pc, #24]	; (8844 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    882a:	7014      	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    882c:	6b32      	ldr	r2, [r6, #48]	; 0x30
    882e:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8830:	681b      	ldr	r3, [r3, #0]
    8832:	6333      	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    8834:	e7ea      	b.n	880c <waitTransferComplete() [clone .part.0]+0x3c>
    8836:	bf00      	nop
    8838:	402c0000 	.word	0x402c0000
    883c:	117f0002 	.word	0x117f0002
    8840:	200038fd 	.word	0x200038fd
    8844:	200033f4 	.word	0x200033f4
    8848:	117f0000 	.word	0x117f0000
    884c:	200022a6 	.word	0x200022a6
    8850:	200033c4 	.word	0x200033c4
    8854:	000f4240 	.word	0x000f4240

00008858 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    8858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
    885c:	4c26      	ldr	r4, [pc, #152]	; (88f8 <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
    885e:	460f      	mov	r7, r1
  if (!m_transferActive) {
    8860:	7823      	ldrb	r3, [r4, #0]
    8862:	2b00      	cmp	r3, #0
    8864:	d138      	bne.n	88d8 <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    8866:	4b25      	ldr	r3, [pc, #148]	; (88fc <SdioCard::writeData(unsigned char const*)+0xa4>)
    8868:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    886a:	05d2      	lsls	r2, r2, #23
    886c:	d52b      	bpl.n	88c6 <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    886e:	4d23      	ldr	r5, [pc, #140]	; (88fc <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8870:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8908 <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8874:	6aab      	ldr	r3, [r5, #40]	; 0x28
    8876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    887a:	62ab      	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
    887c:	f002 feb2 	bl	b5e4 <micros>
    8880:	4606      	mov	r6, r0
  while (fcn()) {
    8882:	e004      	b.n	888e <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8884:	f002 feae 	bl	b5e4 <micros>
    8888:	1b80      	subs	r0, r0, r6
    888a:	4540      	cmp	r0, r8
    888c:	d82a      	bhi.n	88e4 <SdioCard::writeData(unsigned char const*)+0x8c>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    888e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
    8890:	f413 6980 	ands.w	r9, r3, #1024	; 0x400
    8894:	d0f6      	beq.n	8884 <SdioCard::writeData(unsigned char const*)+0x2c>
    8896:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    889a:	4818      	ldr	r0, [pc, #96]	; (88fc <SdioCard::writeData(unsigned char const*)+0xa4>)
    889c:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    88a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
    88a2:	055b      	lsls	r3, r3, #21
    88a4:	d5fc      	bpl.n	88a0 <SdioCard::writeData(unsigned char const*)+0x48>
    88a6:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    88aa:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    88ae:	459c      	cmp	ip, r3
      SDHC_DATPORT = p32[i];
    88b0:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    88b2:	d1fa      	bne.n	88aa <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    88b4:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    88b8:	45bc      	cmp	ip, r7
    88ba:	d1f1      	bne.n	88a0 <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    88bc:	2301      	movs	r3, #1
  return true;
    88be:	4618      	mov	r0, r3
  m_transferActive = true;
    88c0:	7023      	strb	r3, [r4, #0]
}
    88c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    88c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    88c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    88cc:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    88ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    88d0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    88d4:	629a      	str	r2, [r3, #40]	; 0x28
    88d6:	e7ca      	b.n	886e <SdioCard::writeData(unsigned char const*)+0x16>
    88d8:	f7ff ff7a 	bl	87d0 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    88dc:	2800      	cmp	r0, #0
    88de:	d1c2      	bne.n	8866 <SdioCard::writeData(unsigned char const*)+0xe>
}
    88e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
    88e4:	4906      	ldr	r1, [pc, #24]	; (8900 <SdioCard::writeData(unsigned char const*)+0xa8>)
    88e6:	2421      	movs	r4, #33	; 0x21
  m_errorLine = line;
    88e8:	4b06      	ldr	r3, [pc, #24]	; (8904 <SdioCard::writeData(unsigned char const*)+0xac>)
    88ea:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    88ee:	4648      	mov	r0, r9
  m_errorCode = code;
    88f0:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    88f2:	601a      	str	r2, [r3, #0]
}
    88f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    88f8:	200038fd 	.word	0x200038fd
    88fc:	402c0000 	.word	0x402c0000
    8900:	200022a6 	.word	0x200022a6
    8904:	200033c4 	.word	0x200033c4
    8908:	000f4240 	.word	0x000f4240

0000890c <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    890c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8910:	4607      	mov	r7, r0
    8912:	4688      	mov	r8, r1
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    8914:	4c1f      	ldr	r4, [pc, #124]	; (8994 <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
    8916:	f002 fe65 	bl	b5e4 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    891a:	4e1f      	ldr	r6, [pc, #124]	; (8998 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    891c:	4605      	mov	r5, r0
  while (fcn()) {
    891e:	e004      	b.n	892a <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8920:	f002 fe60 	bl	b5e4 <micros>
    8924:	1b43      	subs	r3, r0, r5
    8926:	42b3      	cmp	r3, r6
    8928:	d824      	bhi.n	8974 <cardCommand(unsigned long, unsigned long)+0x68>
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    892a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    892c:	07d9      	lsls	r1, r3, #31
    892e:	d4f7      	bmi.n	8920 <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    8930:	02bb      	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
    8932:	f8c4 8008 	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    8936:	d420      	bmi.n	897a <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    8938:	f027 03ff 	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    893c:	4c15      	ldr	r4, [pc, #84]	; (8994 <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    893e:	4e17      	ldr	r6, [pc, #92]	; (899c <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
    8940:	60e3      	str	r3, [r4, #12]
  uint32_t m = micros();
    8942:	f002 fe4f 	bl	b5e4 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8946:	4f14      	ldr	r7, [pc, #80]	; (8998 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    8948:	4605      	mov	r5, r0
  while (fcn()) {
    894a:	e004      	b.n	8956 <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    894c:	f002 fe4a 	bl	b5e4 <micros>
    8950:	1b40      	subs	r0, r0, r5
    8952:	42b8      	cmp	r0, r7
    8954:	d80e      	bhi.n	8974 <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    8956:	6b23      	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
    8958:	4233      	tst	r3, r6
    895a:	d0f7      	beq.n	894c <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
    895c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    895e:	4b10      	ldr	r3, [pc, #64]	; (89a0 <cardCommand(unsigned long, unsigned long)+0x94>)
    8960:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8962:	681a      	ldr	r2, [r3, #0]
    8964:	6322      	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    8966:	681a      	ldr	r2, [r3, #0]
    8968:	07d2      	lsls	r2, r2, #31
    896a:	d503      	bpl.n	8974 <cardCommand(unsigned long, unsigned long)+0x68>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    896c:	681b      	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    896e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    8972:	d00b      	beq.n	898c <cardCommand(unsigned long, unsigned long)+0x80>
    8974:	2000      	movs	r0, #0
}
    8976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    897a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    897c:	b2fb      	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    897e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    8982:	64a2      	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    8984:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    8986:	4313      	orrs	r3, r2
    8988:	64a3      	str	r3, [r4, #72]	; 0x48
    898a:	e7d5      	b.n	8938 <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    898c:	2001      	movs	r0, #1
}
    898e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8992:	bf00      	nop
    8994:	402c0000 	.word	0x402c0000
    8998:	000f4240 	.word	0x000f4240
    899c:	000f0001 	.word	0x000f0001
    89a0:	200033f4 	.word	0x200033f4

000089a4 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    89a4:	4b15      	ldr	r3, [pc, #84]	; (89fc <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
    89a6:	b530      	push	{r4, r5, lr}
    89a8:	460d      	mov	r5, r1
    89aa:	b085      	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    89ac:	6819      	ldr	r1, [r3, #0]
    89ae:	f7ff ffad 	bl	890c <cardCommand(unsigned long, unsigned long)>
    89b2:	b308      	cbz	r0, 89f8 <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    89b4:	4b12      	ldr	r3, [pc, #72]	; (8a00 <readReg16(unsigned long, void*)+0x5c>)
    89b6:	f105 040f 	add.w	r4, r5, #15
    89ba:	691a      	ldr	r2, [r3, #16]
    89bc:	9200      	str	r2, [sp, #0]
    89be:	6959      	ldr	r1, [r3, #20]
    89c0:	9101      	str	r1, [sp, #4]
    89c2:	6999      	ldr	r1, [r3, #24]
    89c4:	9102      	str	r1, [sp, #8]
    89c6:	69db      	ldr	r3, [r3, #28]
    89c8:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    89ca:	2300      	movs	r3, #0
    89cc:	e001      	b.n	89d2 <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
    89ce:	f85e 2c10 	ldr.w	r2, [lr, #-16]
    89d2:	f003 0c03 	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
    89d6:	3301      	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    89d8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    89dc:	f023 0e03 	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
    89e0:	2b0f      	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    89e2:	fa22 f20c 	lsr.w	r2, r2, ip
    89e6:	f10e 0110 	add.w	r1, lr, #16
    89ea:	f804 2d01 	strb.w	r2, [r4, #-1]!
    89ee:	eb0d 0e01 	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
    89f2:	d1ec      	bne.n	89ce <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
    89f4:	2300      	movs	r3, #0
    89f6:	73eb      	strb	r3, [r5, #15]
}
    89f8:	b005      	add	sp, #20
    89fa:	bd30      	pop	{r4, r5, pc}
    89fc:	200033ec 	.word	0x200033ec
    8a00:	402c0000 	.word	0x402c0000

00008a04 <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    8a04:	b510      	push	{r4, lr}
  bool useDma() {return m_options & DMA_SDIO;}
    8a06:	7a03      	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    8a08:	07db      	lsls	r3, r3, #31
    8a0a:	d505      	bpl.n	8a18 <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8a0c:	4b15      	ldr	r3, [pc, #84]	; (8a64 <SdioCard::isBusy()+0x60>)
    8a0e:	681b      	ldr	r3, [r3, #0]
    8a10:	b1b3      	cbz	r3, 8a40 <SdioCard::isBusy()+0x3c>
}
    8a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8a16:	4718      	bx	r3
    if (m_transferActive) {
    8a18:	4b13      	ldr	r3, [pc, #76]	; (8a68 <SdioCard::isBusy()+0x64>)
    8a1a:	781b      	ldrb	r3, [r3, #0]
    8a1c:	b93b      	cbnz	r3, 8a2e <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    8a1e:	4b13      	ldr	r3, [pc, #76]	; (8a6c <SdioCard::isBusy()+0x68>)
    8a20:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    8a22:	f084 7480 	eor.w	r4, r4, #16777216	; 0x1000000
    8a26:	f3c4 6400 	ubfx	r4, r4, #24, #1
}
    8a2a:	4620      	mov	r0, r4
    8a2c:	bd10      	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8a2e:	4b0f      	ldr	r3, [pc, #60]	; (8a6c <SdioCard::isBusy()+0x68>)
    8a30:	4c0f      	ldr	r4, [pc, #60]	; (8a70 <SdioCard::isBusy()+0x6c>)
    8a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8a34:	401c      	ands	r4, r3
      if (isBusyTransferComplete()) {
    8a36:	fab4 f484 	clz	r4, r4
    8a3a:	0964      	lsrs	r4, r4, #5
}
    8a3c:	4620      	mov	r0, r4
    8a3e:	bd10      	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8a40:	4b0c      	ldr	r3, [pc, #48]	; (8a74 <SdioCard::isBusy()+0x70>)
    8a42:	781c      	ldrb	r4, [r3, #0]
    8a44:	2c00      	cmp	r4, #0
    8a46:	d0f0      	beq.n	8a2a <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8a48:	4b0b      	ldr	r3, [pc, #44]	; (8a78 <SdioCard::isBusy()+0x74>)
    8a4a:	480c      	ldr	r0, [pc, #48]	; (8a7c <SdioCard::isBusy()+0x78>)
    8a4c:	6819      	ldr	r1, [r3, #0]
    8a4e:	f7ff ff5d 	bl	890c <cardCommand(unsigned long, unsigned long)>
    8a52:	2800      	cmp	r0, #0
    8a54:	d0e9      	beq.n	8a2a <SdioCard::isBusy()+0x26>
    8a56:	4b05      	ldr	r3, [pc, #20]	; (8a6c <SdioCard::isBusy()+0x68>)
    8a58:	691c      	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8a5a:	f484 7480 	eor.w	r4, r4, #256	; 0x100
    8a5e:	f3c4 2400 	ubfx	r4, r4, #8, #1
    8a62:	e7e2      	b.n	8a2a <SdioCard::isBusy()+0x26>
    8a64:	200033f0 	.word	0x200033f0
    8a68:	200038fd 	.word	0x200038fd
    8a6c:	402c0000 	.word	0x402c0000
    8a70:	117f0002 	.word	0x117f0002
    8a74:	200038fa 	.word	0x200038fa
    8a78:	200033ec 	.word	0x200033ec
    8a7c:	0d1a0000 	.word	0x0d1a0000

00008a80 <SdioCard::status()>:
uint32_t SdioCard::status() {
    8a80:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8a82:	4b04      	ldr	r3, [pc, #16]	; (8a94 <SdioCard::status()+0x14>)
    8a84:	4804      	ldr	r0, [pc, #16]	; (8a98 <SdioCard::status()+0x18>)
    8a86:	6819      	ldr	r1, [r3, #0]
    8a88:	f7ff ff40 	bl	890c <cardCommand(unsigned long, unsigned long)>
    8a8c:	b108      	cbz	r0, 8a92 <SdioCard::status()+0x12>
    8a8e:	4b03      	ldr	r3, [pc, #12]	; (8a9c <SdioCard::status()+0x1c>)
    8a90:	6918      	ldr	r0, [r3, #16]
}
    8a92:	bd08      	pop	{r3, pc}
    8a94:	200033ec 	.word	0x200033ec
    8a98:	0d1a0000 	.word	0x0d1a0000
    8a9c:	402c0000 	.word	0x402c0000

00008aa0 <isBusyCMD13()>:
static bool isBusyCMD13() {
    8aa0:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8aa2:	4b07      	ldr	r3, [pc, #28]	; (8ac0 <isBusyCMD13()+0x20>)
    8aa4:	4807      	ldr	r0, [pc, #28]	; (8ac4 <isBusyCMD13()+0x24>)
    8aa6:	6819      	ldr	r1, [r3, #0]
    8aa8:	f7ff ff30 	bl	890c <cardCommand(unsigned long, unsigned long)>
    8aac:	b130      	cbz	r0, 8abc <isBusyCMD13()+0x1c>
    8aae:	4b06      	ldr	r3, [pc, #24]	; (8ac8 <isBusyCMD13()+0x28>)
    8ab0:	6918      	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    8ab2:	f480 7080 	eor.w	r0, r0, #256	; 0x100
    8ab6:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
    8aba:	bd08      	pop	{r3, pc}
    8abc:	2001      	movs	r0, #1
    8abe:	bd08      	pop	{r3, pc}
    8ac0:	200033ec 	.word	0x200033ec
    8ac4:	0d1a0000 	.word	0x0d1a0000
    8ac8:	402c0000 	.word	0x402c0000

00008acc <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    8acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    8ad0:	4b29      	ldr	r3, [pc, #164]	; (8b78 <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
    8ad2:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    8ad4:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8b98 <SdioCard::writeStart(unsigned long)+0xcc>
    8ad8:	4e28      	ldr	r6, [pc, #160]	; (8b7c <SdioCard::writeStart(unsigned long)+0xb0>)
    8ada:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    8ade:	f002 fd81 	bl	b5e4 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8ae2:	4d27      	ldr	r5, [pc, #156]	; (8b80 <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    8ae4:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8ae6:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8b9c <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8aea:	4f26      	ldr	r7, [pc, #152]	; (8b84 <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
    8aec:	e006      	b.n	8afc <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8aee:	f002 fd79 	bl	b5e4 <micros>
    8af2:	1b00      	subs	r0, r0, r4
    8af4:	42b8      	cmp	r0, r7
    8af6:	d829      	bhi.n	8b4c <SdioCard::writeStart(unsigned long)+0x80>
    yield();
    8af8:	f004 f884 	bl	cc04 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8afc:	6831      	ldr	r1, [r6, #0]
    8afe:	4628      	mov	r0, r5
    8b00:	f7ff ff04 	bl	890c <cardCommand(unsigned long, unsigned long)>
    8b04:	2800      	cmp	r0, #0
    8b06:	d0f2      	beq.n	8aee <SdioCard::writeStart(unsigned long)+0x22>
    8b08:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    8b0c:	05db      	lsls	r3, r3, #23
    8b0e:	d5ee      	bpl.n	8aee <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
    8b10:	2300      	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    8b12:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    8b16:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8b1a:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    8b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    8b22:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8b26:	4b18      	ldr	r3, [pc, #96]	; (8b88 <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    8b28:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8b2c:	781b      	ldrb	r3, [r3, #0]
    8b2e:	b1cb      	cbz	r3, 8b64 <SdioCard::writeStart(unsigned long)+0x98>
    8b30:	4649      	mov	r1, r9
    8b32:	4816      	ldr	r0, [pc, #88]	; (8b8c <SdioCard::writeStart(unsigned long)+0xc0>)
    8b34:	f7ff feea 	bl	890c <cardCommand(unsigned long, unsigned long)>
    8b38:	b930      	cbnz	r0, 8b48 <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
    8b3a:	4915      	ldr	r1, [pc, #84]	; (8b90 <SdioCard::writeStart(unsigned long)+0xc4>)
    8b3c:	240e      	movs	r4, #14
  m_errorLine = line;
    8b3e:	4b15      	ldr	r3, [pc, #84]	; (8b94 <SdioCard::writeStart(unsigned long)+0xc8>)
    8b40:	f240 4257 	movw	r2, #1111	; 0x457
  m_errorCode = code;
    8b44:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    8b46:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    8b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    8b4c:	4a10      	ldr	r2, [pc, #64]	; (8b90 <SdioCard::writeStart(unsigned long)+0xc4>)
    8b4e:	210a      	movs	r1, #10
      m_busyFcn = 0;
    8b50:	2000      	movs	r0, #0
  m_errorLine = line;
    8b52:	4b10      	ldr	r3, [pc, #64]	; (8b94 <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
    8b54:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    8b56:	f240 424b 	movw	r2, #1099	; 0x44b
      m_busyFcn = 0;
    8b5a:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    8b5e:	601a      	str	r2, [r3, #0]
}
    8b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8b64:	ea4f 2949 	mov.w	r9, r9, lsl #9
    8b68:	4808      	ldr	r0, [pc, #32]	; (8b8c <SdioCard::writeStart(unsigned long)+0xc0>)
    8b6a:	4649      	mov	r1, r9
    8b6c:	f7ff fece 	bl	890c <cardCommand(unsigned long, unsigned long)>
    8b70:	2800      	cmp	r0, #0
    8b72:	d1e9      	bne.n	8b48 <SdioCard::writeStart(unsigned long)+0x7c>
    8b74:	e7e1      	b.n	8b3a <SdioCard::writeStart(unsigned long)+0x6e>
    8b76:	bf00      	nop
    8b78:	00008aa1 	.word	0x00008aa1
    8b7c:	200033ec 	.word	0x200033ec
    8b80:	0d1a0000 	.word	0x0d1a0000
    8b84:	000f4240 	.word	0x000f4240
    8b88:	200038fc 	.word	0x200038fc
    8b8c:	193a0020 	.word	0x193a0020
    8b90:	200022a6 	.word	0x200022a6
    8b94:	200033c4 	.word	0x200033c4
    8b98:	200033f0 	.word	0x200033f0
    8b9c:	402c0000 	.word	0x402c0000

00008ba0 <SdioCard::readStop()>:
bool SdioCard::readStop() {
    8ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8ba4:	4c25      	ldr	r4, [pc, #148]	; (8c3c <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    8ba6:	2100      	movs	r1, #0
    8ba8:	4825      	ldr	r0, [pc, #148]	; (8c40 <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8baa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    8bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    8bb0:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    8bb2:	f7ff feab 	bl	890c <cardCommand(unsigned long, unsigned long)>
    8bb6:	4605      	mov	r5, r0
    8bb8:	b948      	cbnz	r0, 8bce <SdioCard::readStop()+0x2e>
  m_errorCode = code;
    8bba:	4922      	ldr	r1, [pc, #136]	; (8c44 <SdioCard::readStop()+0xa4>)
    8bbc:	2009      	movs	r0, #9
  m_errorLine = line;
    8bbe:	4b22      	ldr	r3, [pc, #136]	; (8c48 <SdioCard::readStop()+0xa8>)
    8bc0:	f240 223d 	movw	r2, #573	; 0x23d
  m_errorCode = code;
    8bc4:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    8bc6:	601a      	str	r2, [r3, #0]
}
    8bc8:	4628      	mov	r0, r5
    8bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
    8bce:	4b1f      	ldr	r3, [pc, #124]	; (8c4c <SdioCard::readStop()+0xac>)
    8bd0:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8c54 <SdioCard::readStop()+0xb4>
    8bd4:	f8c8 3000 	str.w	r3, [r8]
  uint32_t m = micros();
    8bd8:	f002 fd04 	bl	b5e4 <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    8bdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    8bde:	4606      	mov	r6, r0
  while (fcn()) {
    8be0:	01d8      	lsls	r0, r3, #7
    8be2:	d418      	bmi.n	8c16 <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8be4:	4f1a      	ldr	r7, [pc, #104]	; (8c50 <SdioCard::readStop()+0xb0>)
    8be6:	e004      	b.n	8bf2 <SdioCard::readStop()+0x52>
    yield();
    8be8:	f004 f80c 	bl	cc04 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    8bec:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    8bee:	01d9      	lsls	r1, r3, #7
    8bf0:	d411      	bmi.n	8c16 <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8bf2:	f002 fcf7 	bl	b5e4 <micros>
    8bf6:	1b83      	subs	r3, r0, r6
    8bf8:	42bb      	cmp	r3, r7
    8bfa:	d9f5      	bls.n	8be8 <SdioCard::readStop()+0x48>
  m_errorCode = code;
    8bfc:	4a11      	ldr	r2, [pc, #68]	; (8c44 <SdioCard::readStop()+0xa4>)
    8bfe:	210a      	movs	r1, #10
      m_busyFcn = 0;
    8c00:	2500      	movs	r5, #0
  m_errorLine = line;
    8c02:	4b11      	ldr	r3, [pc, #68]	; (8c48 <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
    8c04:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    8c06:	f44f 7210 	mov.w	r2, #576	; 0x240
}
    8c0a:	4628      	mov	r0, r5
      m_busyFcn = 0;
    8c0c:	f8c8 5000 	str.w	r5, [r8]
  m_errorLine = line;
    8c10:	601a      	str	r2, [r3, #0]
}
    8c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
    8c16:	2200      	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    8c18:	4b08      	ldr	r3, [pc, #32]	; (8c3c <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
    8c1a:	f8c8 2000 	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    8c1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    8c20:	0792      	lsls	r2, r2, #30
    8c22:	d5d1      	bpl.n	8bc8 <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    8c24:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    8c26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    8c28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    8c2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    8c2e:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    8c32:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    8c34:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    8c36:	629a      	str	r2, [r3, #40]	; 0x28
    8c38:	e7c6      	b.n	8bc8 <SdioCard::readStop()+0x28>
    8c3a:	bf00      	nop
    8c3c:	402c0000 	.word	0x402c0000
    8c40:	0cdb0000 	.word	0x0cdb0000
    8c44:	200022a6 	.word	0x200022a6
    8c48:	200033c4 	.word	0x200033c4
    8c4c:	000084b5 	.word	0x000084b5
    8c50:	000f4240 	.word	0x000f4240
    8c54:	200033f0 	.word	0x200033f0

00008c58 <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    8c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8c5c:	4682      	mov	sl, r0
    8c5e:	4689      	mov	r9, r1
    8c60:	4e36      	ldr	r6, [pc, #216]	; (8d3c <cardCMD6(unsigned long, unsigned char*)+0xe4>)
  uint32_t m = micros();
    8c62:	f002 fcbf 	bl	b5e4 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8c66:	4d36      	ldr	r5, [pc, #216]	; (8d40 <cardCMD6(unsigned long, unsigned char*)+0xe8>)
  uint32_t m = micros();
    8c68:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8c6a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8d6c <cardCMD6(unsigned long, unsigned char*)+0x114>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8c6e:	4f35      	ldr	r7, [pc, #212]	; (8d44 <cardCMD6(unsigned long, unsigned char*)+0xec>)
  while (fcn()) {
    8c70:	e004      	b.n	8c7c <cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8c72:	f002 fcb7 	bl	b5e4 <micros>
    8c76:	1b03      	subs	r3, r0, r4
    8c78:	42bb      	cmp	r3, r7
    8c7a:	d827      	bhi.n	8ccc <cardCMD6(unsigned long, unsigned char*)+0x74>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8c7c:	6831      	ldr	r1, [r6, #0]
    8c7e:	4628      	mov	r0, r5
    8c80:	f7ff fe44 	bl	890c <cardCommand(unsigned long, unsigned long)>
    8c84:	2800      	cmp	r0, #0
    8c86:	d0f4      	beq.n	8c72 <cardCMD6(unsigned long, unsigned char*)+0x1a>
    8c88:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    8c8c:	05da      	lsls	r2, r3, #23
    8c8e:	d5f0      	bpl.n	8c72 <cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
    8c90:	2301      	movs	r3, #1
    8c92:	4d2d      	ldr	r5, [pc, #180]	; (8d48 <cardCMD6(unsigned long, unsigned char*)+0xf0>)
  m_irqstat = 0;
    8c94:	4f2d      	ldr	r7, [pc, #180]	; (8d4c <cardCMD6(unsigned long, unsigned char*)+0xf4>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    8c96:	4651      	mov	r1, sl
  m_dmaBusy = true;
    8c98:	702b      	strb	r3, [r5, #0]
  m_irqstat = 0;
    8c9a:	2300      	movs	r3, #0
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    8c9c:	482c      	ldr	r0, [pc, #176]	; (8d50 <cardCMD6(unsigned long, unsigned char*)+0xf8>)
  m_irqstat = 0;
    8c9e:	603b      	str	r3, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    8ca0:	4b2c      	ldr	r3, [pc, #176]	; (8d54 <cardCMD6(unsigned long, unsigned char*)+0xfc>)
  SDHC_DSADDR  = (uint32_t)status;
    8ca2:	f8c8 9000 	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    8ca6:	f8c8 3004 	str.w	r3, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8caa:	4b2b      	ldr	r3, [pc, #172]	; (8d58 <cardCMD6(unsigned long, unsigned char*)+0x100>)
    8cac:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    8cb0:	f7ff fe2c 	bl	890c <cardCommand(unsigned long, unsigned long)>
    8cb4:	4604      	mov	r4, r0
    8cb6:	b9a0      	cbnz	r0, 8ce2 <cardCMD6(unsigned long, unsigned char*)+0x8a>
  m_errorCode = code;
    8cb8:	4928      	ldr	r1, [pc, #160]	; (8d5c <cardCMD6(unsigned long, unsigned char*)+0x104>)
    8cba:	2004      	movs	r0, #4
  m_errorLine = line;
    8cbc:	4b28      	ldr	r3, [pc, #160]	; (8d60 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    8cbe:	f240 129f 	movw	r2, #415	; 0x19f
  m_errorCode = code;
    8cc2:	7008      	strb	r0, [r1, #0]
}
    8cc4:	4620      	mov	r0, r4
  m_errorLine = line;
    8cc6:	601a      	str	r2, [r3, #0]
}
    8cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    8ccc:	4923      	ldr	r1, [pc, #140]	; (8d5c <cardCMD6(unsigned long, unsigned char*)+0x104>)
    8cce:	200a      	movs	r0, #10
  m_errorLine = line;
    8cd0:	4b23      	ldr	r3, [pc, #140]	; (8d60 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    8cd2:	f44f 72cc 	mov.w	r2, #408	; 0x198
    return sdError(SD_CARD_ERROR_CMD13);
    8cd6:	2400      	movs	r4, #0
  m_errorCode = code;
    8cd8:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    8cda:	601a      	str	r2, [r3, #0]
}
    8cdc:	4620      	mov	r0, r4
    8cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_busyFcn = fcn;
    8ce2:	4b20      	ldr	r3, [pc, #128]	; (8d64 <cardCMD6(unsigned long, unsigned char*)+0x10c>)
    8ce4:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8d70 <cardCMD6(unsigned long, unsigned char*)+0x118>
    8ce8:	f8c9 3000 	str.w	r3, [r9]
  uint32_t m = micros();
    8cec:	f002 fc7a 	bl	b5e4 <micros>
  return m_dmaBusy;
    8cf0:	782b      	ldrb	r3, [r5, #0]
  uint32_t m = micros();
    8cf2:	4606      	mov	r6, r0
  while (fcn()) {
    8cf4:	b1bb      	cbz	r3, 8d26 <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8cf6:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8d44 <cardCMD6(unsigned long, unsigned char*)+0xec>
    8cfa:	e003      	b.n	8d04 <cardCMD6(unsigned long, unsigned char*)+0xac>
    yield();
    8cfc:	f003 ff82 	bl	cc04 <yield>
  return m_dmaBusy;
    8d00:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
    8d02:	b183      	cbz	r3, 8d26 <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8d04:	f002 fc6e 	bl	b5e4 <micros>
    8d08:	1b83      	subs	r3, r0, r6
    8d0a:	4543      	cmp	r3, r8
    8d0c:	d9f6      	bls.n	8cfc <cardCMD6(unsigned long, unsigned char*)+0xa4>
      m_busyFcn = 0;
    8d0e:	2300      	movs	r3, #0
    8d10:	f8c9 3000 	str.w	r3, [r9]
  m_errorCode = code;
    8d14:	4911      	ldr	r1, [pc, #68]	; (8d5c <cardCMD6(unsigned long, unsigned char*)+0x104>)
    8d16:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    8d18:	4b11      	ldr	r3, [pc, #68]	; (8d60 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    8d1a:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
    return sdError(SD_CARD_ERROR_DMA);
    8d1e:	2400      	movs	r4, #0
  m_errorCode = code;
    8d20:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    8d22:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    8d24:	e7da      	b.n	8cdc <cardCMD6(unsigned long, unsigned char*)+0x84>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8d26:	683b      	ldr	r3, [r7, #0]
  m_busyFcn = 0;
    8d28:	2200      	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8d2a:	079b      	lsls	r3, r3, #30
  m_busyFcn = 0;
    8d2c:	f8c9 2000 	str.w	r2, [r9]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8d30:	d5f0      	bpl.n	8d14 <cardCMD6(unsigned long, unsigned char*)+0xbc>
    8d32:	683a      	ldr	r2, [r7, #0]
    8d34:	4b0c      	ldr	r3, [pc, #48]	; (8d68 <cardCMD6(unsigned long, unsigned char*)+0x110>)
    8d36:	421a      	tst	r2, r3
    8d38:	d0d0      	beq.n	8cdc <cardCMD6(unsigned long, unsigned char*)+0x84>
    8d3a:	e7eb      	b.n	8d14 <cardCMD6(unsigned long, unsigned char*)+0xbc>
    8d3c:	200033ec 	.word	0x200033ec
    8d40:	0d1a0000 	.word	0x0d1a0000
    8d44:	000f4240 	.word	0x000f4240
    8d48:	200038fe 	.word	0x200038fe
    8d4c:	200033f4 	.word	0x200033f4
    8d50:	063a0011 	.word	0x063a0011
    8d54:	00010040 	.word	0x00010040
    8d58:	117f0002 	.word	0x117f0002
    8d5c:	200022a6 	.word	0x200022a6
    8d60:	200033c4 	.word	0x200033c4
    8d64:	000084c9 	.word	0x000084c9
    8d68:	117f0000 	.word	0x117f0000
    8d6c:	402c0000 	.word	0x402c0000
    8d70:	200033f0 	.word	0x200033f0

00008d74 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!m_csd.v1.erase_blk_en) {
    8d78:	4d32      	ldr	r5, [pc, #200]	; (8e44 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8d7a:	4614      	mov	r4, r2
  if (!m_csd.v1.erase_blk_en) {
    8d7c:	7aab      	ldrb	r3, [r5, #10]
    8d7e:	f013 0040 	ands.w	r0, r3, #64	; 0x40
    8d82:	d112      	bne.n	8daa <SdioCard::erase(unsigned long, unsigned long)+0x36>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    8d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8d88:	7aea      	ldrb	r2, [r5, #11]
    8d8a:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8d8c:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    8d90:	1c62      	adds	r2, r4, #1
    8d92:	430a      	orrs	r2, r1
    8d94:	4213      	tst	r3, r2
    8d96:	d008      	beq.n	8daa <SdioCard::erase(unsigned long, unsigned long)+0x36>
  m_errorCode = code;
    8d98:	492b      	ldr	r1, [pc, #172]	; (8e48 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    8d9a:	2427      	movs	r4, #39	; 0x27
  m_errorLine = line;
    8d9c:	4b2b      	ldr	r3, [pc, #172]	; (8e4c <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    8d9e:	f240 3202 	movw	r2, #770	; 0x302
  m_errorCode = code;
    8da2:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    8da4:	601a      	str	r2, [r3, #0]
}
    8da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
    8daa:	4b29      	ldr	r3, [pc, #164]	; (8e50 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    8dac:	781b      	ldrb	r3, [r3, #0]
    8dae:	b90b      	cbnz	r3, 8db4 <SdioCard::erase(unsigned long, unsigned long)+0x40>
    firstSector <<= 9;
    8db0:	0249      	lsls	r1, r1, #9
    lastSector <<= 9;
    8db2:	0264      	lsls	r4, r4, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    8db4:	4827      	ldr	r0, [pc, #156]	; (8e54 <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    8db6:	f7ff fda9 	bl	890c <cardCommand(unsigned long, unsigned long)>
    8dba:	b940      	cbnz	r0, 8dce <SdioCard::erase(unsigned long, unsigned long)+0x5a>
  m_errorCode = code;
    8dbc:	4922      	ldr	r1, [pc, #136]	; (8e48 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    8dbe:	240f      	movs	r4, #15
  m_errorLine = line;
    8dc0:	4b22      	ldr	r3, [pc, #136]	; (8e4c <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    8dc2:	f240 320a 	movw	r2, #778	; 0x30a
  m_errorCode = code;
    8dc6:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    8dc8:	601a      	str	r2, [r3, #0]
}
    8dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    8dce:	4621      	mov	r1, r4
    8dd0:	4821      	ldr	r0, [pc, #132]	; (8e58 <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    8dd2:	f7ff fd9b 	bl	890c <cardCommand(unsigned long, unsigned long)>
    8dd6:	b940      	cbnz	r0, 8dea <SdioCard::erase(unsigned long, unsigned long)+0x76>
  m_errorCode = code;
    8dd8:	491b      	ldr	r1, [pc, #108]	; (8e48 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    8dda:	2410      	movs	r4, #16
  m_errorLine = line;
    8ddc:	4b1b      	ldr	r3, [pc, #108]	; (8e4c <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    8dde:	f240 320d 	movw	r2, #781	; 0x30d
  m_errorCode = code;
    8de2:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    8de4:	601a      	str	r2, [r3, #0]
}
    8de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    8dea:	2100      	movs	r1, #0
    8dec:	481b      	ldr	r0, [pc, #108]	; (8e5c <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    8dee:	f7ff fd8d 	bl	890c <cardCommand(unsigned long, unsigned long)>
    8df2:	b938      	cbnz	r0, 8e04 <SdioCard::erase(unsigned long, unsigned long)+0x90>
  m_errorCode = code;
    8df4:	4914      	ldr	r1, [pc, #80]	; (8e48 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    8df6:	2411      	movs	r4, #17
  m_errorLine = line;
    8df8:	4b14      	ldr	r3, [pc, #80]	; (8e4c <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    8dfa:	f44f 7244 	mov.w	r2, #784	; 0x310
  m_errorCode = code;
    8dfe:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    8e00:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    8e02:	e7e2      	b.n	8dca <SdioCard::erase(unsigned long, unsigned long)+0x56>
  uint32_t m = micros();
    8e04:	f002 fbee 	bl	b5e4 <micros>
    8e08:	4e15      	ldr	r6, [pc, #84]	; (8e60 <SdioCard::erase(unsigned long, unsigned long)+0xec>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8e0a:	4d16      	ldr	r5, [pc, #88]	; (8e64 <SdioCard::erase(unsigned long, unsigned long)+0xf0>)
  uint32_t m = micros();
    8e0c:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8e0e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8e6c <SdioCard::erase(unsigned long, unsigned long)+0xf8>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8e12:	4f15      	ldr	r7, [pc, #84]	; (8e68 <SdioCard::erase(unsigned long, unsigned long)+0xf4>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8e14:	6831      	ldr	r1, [r6, #0]
    8e16:	4628      	mov	r0, r5
    8e18:	f7ff fd78 	bl	890c <cardCommand(unsigned long, unsigned long)>
    8e1c:	b118      	cbz	r0, 8e26 <SdioCard::erase(unsigned long, unsigned long)+0xb2>
    8e1e:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    8e22:	05db      	lsls	r3, r3, #23
    8e24:	d4d1      	bmi.n	8dca <SdioCard::erase(unsigned long, unsigned long)+0x56>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8e26:	f002 fbdd 	bl	b5e4 <micros>
    8e2a:	1b00      	subs	r0, r0, r4
    8e2c:	42b8      	cmp	r0, r7
    8e2e:	d9f1      	bls.n	8e14 <SdioCard::erase(unsigned long, unsigned long)+0xa0>
  m_errorCode = code;
    8e30:	4905      	ldr	r1, [pc, #20]	; (8e48 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    8e32:	2428      	movs	r4, #40	; 0x28
  m_errorLine = line;
    8e34:	4b05      	ldr	r3, [pc, #20]	; (8e4c <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    8e36:	f240 3213 	movw	r2, #787	; 0x313
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    8e3a:	2000      	movs	r0, #0
  m_errorCode = code;
    8e3c:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    8e3e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    8e40:	e7c3      	b.n	8dca <SdioCard::erase(unsigned long, unsigned long)+0x56>
    8e42:	bf00      	nop
    8e44:	200033d8 	.word	0x200033d8
    8e48:	200022a6 	.word	0x200022a6
    8e4c:	200033c4 	.word	0x200033c4
    8e50:	200038fc 	.word	0x200038fc
    8e54:	201a0000 	.word	0x201a0000
    8e58:	211a0000 	.word	0x211a0000
    8e5c:	261b0000 	.word	0x261b0000
    8e60:	200033ec 	.word	0x200033ec
    8e64:	0d1a0000 	.word	0x0d1a0000
    8e68:	000f4240 	.word	0x000f4240
    8e6c:	402c0000 	.word	0x402c0000

00008e70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    8e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    8e74:	f012 0403 	ands.w	r4, r2, #3
                       uint32_t sector, uint8_t* buf, size_t n) {
    8e78:	b083      	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
    8e7a:	bf18      	it	ne
    8e7c:	2401      	movne	r4, #1
                       uint32_t sector, uint8_t* buf, size_t n) {
    8e7e:	9001      	str	r0, [sp, #4]
  if ((3 & (uint32_t)buf) || n == 0) {
    8e80:	9300      	str	r3, [sp, #0]
    8e82:	2b00      	cmp	r3, #0
    8e84:	bf08      	it	eq
    8e86:	f044 0401 	orreq.w	r4, r4, #1
    8e8a:	b15c      	cbz	r4, 8ea4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    8e8c:	4940      	ldr	r1, [pc, #256]	; (8f90 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    8e8e:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    8e90:	4b40      	ldr	r3, [pc, #256]	; (8f94 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
    8e92:	f240 12f5 	movw	r2, #501	; 0x1f5
    return sdError(SD_CARD_ERROR_DMA);
    8e96:	2400      	movs	r4, #0
  m_errorCode = code;
    8e98:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    8e9a:	601a      	str	r2, [r3, #0]
}
    8e9c:	4620      	mov	r0, r4
    8e9e:	b003      	add	sp, #12
    8ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
    8ea4:	4b3c      	ldr	r3, [pc, #240]	; (8f98 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x128>)
    8ea6:	4615      	mov	r5, r2
    8ea8:	4a3c      	ldr	r2, [pc, #240]	; (8f9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    8eaa:	460e      	mov	r6, r1
    8eac:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8fbc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x14c>
    8eb0:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    8eb2:	f002 fb97 	bl	b5e4 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8eb6:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8fc0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x150>
  uint32_t m = micros();
    8eba:	4607      	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8ebc:	f8df b104 	ldr.w	fp, [pc, #260]	; 8fc4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x154>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8ec0:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 8fb4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>
  while (fcn()) {
    8ec4:	e006      	b.n	8ed4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x64>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8ec6:	f002 fb8d 	bl	b5e4 <micros>
    8eca:	1bc0      	subs	r0, r0, r7
    8ecc:	4550      	cmp	r0, sl
    8ece:	d844      	bhi.n	8f5a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xea>
    yield();
    8ed0:	f003 fe98 	bl	cc04 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8ed4:	f8d9 1000 	ldr.w	r1, [r9]
    8ed8:	4640      	mov	r0, r8
    8eda:	f7ff fd17 	bl	890c <cardCommand(unsigned long, unsigned long)>
    8ede:	2800      	cmp	r0, #0
    8ee0:	d0f1      	beq.n	8ec6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    8ee2:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
    8ee6:	05da      	lsls	r2, r3, #23
    8ee8:	d5ed      	bpl.n	8ec6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8eea:	9a00      	ldr	r2, [sp, #0]
    8eec:	4b2c      	ldr	r3, [pc, #176]	; (8fa0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x130>)
  m_busyFcn = 0;
    8eee:	492b      	ldr	r1, [pc, #172]	; (8f9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8ef0:	ea03 4302 	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
    8ef4:	2200      	movs	r2, #0
  m_dmaBusy = true;
    8ef6:	4f2b      	ldr	r7, [pc, #172]	; (8fa4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x134>)
  m_busyFcn = 0;
    8ef8:	600a      	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
    8efe:	2101      	movs	r1, #1
  m_irqstat = 0;
    8f00:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8fc8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x158>
  m_dmaBusy = true;
    8f04:	7039      	strb	r1, [r7, #0]
  m_irqstat = 0;
    8f06:	f8c8 2000 	str.w	r2, [r8]
  SDHC_DSADDR  = (uint32_t)buf;
    8f0a:	f8cb 5000 	str.w	r5, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8f0e:	f8cb 3004 	str.w	r3, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8f12:	4b25      	ldr	r3, [pc, #148]	; (8fa8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x138>)
    8f14:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    8f18:	4b24      	ldr	r3, [pc, #144]	; (8fac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x13c>)
    8f1a:	781b      	ldrb	r3, [r3, #0]
    8f1c:	b343      	cbz	r3, 8f70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
    8f1e:	4631      	mov	r1, r6
    8f20:	9801      	ldr	r0, [sp, #4]
    8f22:	f7ff fcf3 	bl	890c <cardCommand(unsigned long, unsigned long)>
    8f26:	4681      	mov	r9, r0
    8f28:	2800      	cmp	r0, #0
    8f2a:	d0b7      	beq.n	8e9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_busyFcn = fcn;
    8f2c:	4b20      	ldr	r3, [pc, #128]	; (8fb0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x140>)
    8f2e:	4a1b      	ldr	r2, [pc, #108]	; (8f9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    8f30:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    8f32:	f002 fb57 	bl	b5e4 <micros>
  return m_dmaBusy;
    8f36:	783b      	ldrb	r3, [r7, #0]
  uint32_t m = micros();
    8f38:	4605      	mov	r5, r0
  while (fcn()) {
    8f3a:	b1db      	cbz	r3, 8f74 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8f3c:	4e1d      	ldr	r6, [pc, #116]	; (8fb4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>)
    8f3e:	e003      	b.n	8f48 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>
    yield();
    8f40:	f003 fe60 	bl	cc04 <yield>
  return m_dmaBusy;
    8f44:	783b      	ldrb	r3, [r7, #0]
  while (fcn()) {
    8f46:	b1ab      	cbz	r3, 8f74 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8f48:	f002 fb4c 	bl	b5e4 <micros>
    8f4c:	1b40      	subs	r0, r0, r5
    8f4e:	42b0      	cmp	r0, r6
    8f50:	d9f6      	bls.n	8f40 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd0>
      m_busyFcn = 0;
    8f52:	2300      	movs	r3, #0
    8f54:	4a11      	ldr	r2, [pc, #68]	; (8f9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    8f56:	6013      	str	r3, [r2, #0]
      return true;
    8f58:	e7a0      	b.n	8e9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_errorCode = code;
    8f5a:	4b0d      	ldr	r3, [pc, #52]	; (8f90 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    8f5c:	220a      	movs	r2, #10
      m_busyFcn = 0;
    8f5e:	2100      	movs	r1, #0
    8f60:	480e      	ldr	r0, [pc, #56]	; (8f9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  m_errorCode = code;
    8f62:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    8f64:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
    8f68:	4b0a      	ldr	r3, [pc, #40]	; (8f94 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
      m_busyFcn = 0;
    8f6a:	6001      	str	r1, [r0, #0]
  m_errorLine = line;
    8f6c:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    8f6e:	e795      	b.n	8e9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    8f70:	0276      	lsls	r6, r6, #9
    8f72:	e7d4      	b.n	8f1e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xae>
  m_busyFcn = 0;
    8f74:	2300      	movs	r3, #0
    8f76:	4a09      	ldr	r2, [pc, #36]	; (8f9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    8f78:	6013      	str	r3, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8f7a:	f8d8 3000 	ldr.w	r3, [r8]
    8f7e:	079b      	lsls	r3, r3, #30
    8f80:	d58c      	bpl.n	8e9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    8f82:	f8d8 2000 	ldr.w	r2, [r8]
    8f86:	4b0c      	ldr	r3, [pc, #48]	; (8fb8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x148>)
    8f88:	421a      	tst	r2, r3
    8f8a:	bf08      	it	eq
    8f8c:	464c      	moveq	r4, r9
    8f8e:	e785      	b.n	8e9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    8f90:	200022a6 	.word	0x200022a6
    8f94:	200033c4 	.word	0x200033c4
    8f98:	00008aa1 	.word	0x00008aa1
    8f9c:	200033f0 	.word	0x200033f0
    8fa0:	1fff0000 	.word	0x1fff0000
    8fa4:	200038fe 	.word	0x200038fe
    8fa8:	117f0002 	.word	0x117f0002
    8fac:	200038fc 	.word	0x200038fc
    8fb0:	000084c9 	.word	0x000084c9
    8fb4:	000f4240 	.word	0x000f4240
    8fb8:	117f0000 	.word	0x117f0000
    8fbc:	200033ec 	.word	0x200033ec
    8fc0:	0d1a0000 	.word	0x0d1a0000
    8fc4:	402c0000 	.word	0x402c0000
    8fc8:	200033f4 	.word	0x200033f4

00008fcc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    8fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8fce:	4606      	mov	r6, r0
    8fd0:	7a00      	ldrb	r0, [r0, #8]
    8fd2:	460c      	mov	r4, r1
    8fd4:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    8fd6:	07c0      	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    8fd8:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    8fda:	d413      	bmi.n	9004 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    8fdc:	b183      	cbz	r3, 9000 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    8fde:	440f      	add	r7, r1
    8fe0:	e001      	b.n	8fe6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    8fe2:	42bc      	cmp	r4, r7
    8fe4:	d00c      	beq.n	9000 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    8fe6:	6833      	ldr	r3, [r6, #0]
    8fe8:	462a      	mov	r2, r5
    8fea:	4621      	mov	r1, r4
    8fec:	4630      	mov	r0, r6
    8fee:	691b      	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
    8ff0:	3401      	adds	r4, #1
    8ff2:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i*512UL)) {
    8ff6:	4798      	blx	r3
    8ff8:	2800      	cmp	r0, #0
    8ffa:	d1f2      	bne.n	8fe2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
    8ffc:	2000      	movs	r0, #0
}
    8ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    9000:	2001      	movs	r0, #1
}
    9002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
    9004:	0790      	lsls	r0, r2, #30
    9006:	d012      	beq.n	902e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    9008:	2b00      	cmp	r3, #0
    900a:	d0f9      	beq.n	9000 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    900c:	440f      	add	r7, r1
    900e:	e001      	b.n	9014 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    9010:	42bc      	cmp	r4, r7
    9012:	d0f5      	beq.n	9000 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    9014:	6833      	ldr	r3, [r6, #0]
    9016:	462a      	mov	r2, r5
    9018:	4621      	mov	r1, r4
    901a:	4630      	mov	r0, r6
    901c:	691b      	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    901e:	3401      	adds	r4, #1
    9020:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    9024:	4798      	blx	r3
    9026:	2800      	cmp	r0, #0
    9028:	d1f2      	bne.n	9010 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    902a:	2000      	movs	r0, #0
    902c:	e7e7      	b.n	8ffe <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    902e:	4806      	ldr	r0, [pc, #24]	; (9048 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    9030:	f7ff ff1e 	bl	8e70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9034:	2800      	cmp	r0, #0
    9036:	d1e3      	bne.n	9000 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    9038:	4904      	ldr	r1, [pc, #16]	; (904c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    903a:	240c      	movs	r4, #12
  m_errorLine = line;
    903c:	4b04      	ldr	r3, [pc, #16]	; (9050 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    903e:	f240 32a1 	movw	r2, #929	; 0x3a1
  m_errorCode = code;
    9042:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    9044:	601a      	str	r2, [r3, #0]
}
    9046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9048:	123a0037 	.word	0x123a0037
    904c:	200022a6 	.word	0x200022a6
    9050:	200033c4 	.word	0x200033c4

00009054 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    9054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9056:	4606      	mov	r6, r0
    9058:	7a00      	ldrb	r0, [r0, #8]
    905a:	460c      	mov	r4, r1
    905c:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    905e:	07c0      	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    9060:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    9062:	d413      	bmi.n	908c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    9064:	b183      	cbz	r3, 9088 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    9066:	440f      	add	r7, r1
    9068:	e001      	b.n	906e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    906a:	42bc      	cmp	r4, r7
    906c:	d00c      	beq.n	9088 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    906e:	6833      	ldr	r3, [r6, #0]
    9070:	462a      	mov	r2, r5
    9072:	4621      	mov	r1, r4
    9074:	4630      	mov	r0, r6
    9076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (size_t i = 0; i < n; i++) {
    9078:	3401      	adds	r4, #1
    907a:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i*512UL)) {
    907e:	4798      	blx	r3
    9080:	2800      	cmp	r0, #0
    9082:	d1f2      	bne.n	906a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
    9084:	2000      	movs	r0, #0
}
    9086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    9088:	2001      	movs	r0, #1
}
    908a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
    908c:	0790      	lsls	r0, r2, #30
    908e:	d012      	beq.n	90b6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    9090:	2b00      	cmp	r3, #0
    9092:	d0f9      	beq.n	9088 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    9094:	440f      	add	r7, r1
    9096:	e001      	b.n	909c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    9098:	42bc      	cmp	r4, r7
    909a:	d0f5      	beq.n	9088 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    909c:	6833      	ldr	r3, [r6, #0]
    909e:	462a      	mov	r2, r5
    90a0:	4621      	mov	r1, r4
    90a2:	4630      	mov	r0, r6
    90a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    90a6:	3401      	adds	r4, #1
    90a8:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    90ac:	4798      	blx	r3
    90ae:	2800      	cmp	r0, #0
    90b0:	d1f2      	bne.n	9098 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    90b2:	2000      	movs	r0, #0
    90b4:	e7e7      	b.n	9086 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    90b6:	4806      	ldr	r0, [pc, #24]	; (90d0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    90b8:	f7ff feda 	bl	8e70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    90bc:	2800      	cmp	r0, #0
    90be:	d1e3      	bne.n	9088 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
    90c0:	4904      	ldr	r1, [pc, #16]	; (90d4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    90c2:	240e      	movs	r4, #14
  m_errorLine = line;
    90c4:	4b04      	ldr	r3, [pc, #16]	; (90d8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    90c6:	f240 423d 	movw	r2, #1085	; 0x43d
  m_errorCode = code;
    90ca:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    90cc:	601a      	str	r2, [r3, #0]
}
    90ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    90d0:	193a0027 	.word	0x193a0027
    90d4:	200022a6 	.word	0x200022a6
    90d8:	200033c4 	.word	0x200033c4

000090dc <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    90dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_curState = IDLE_STATE;
    90e0:	2500      	movs	r5, #0
  m_initDone = false;
    90e2:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 93a4 <SdioCard::begin(SdioConfig)+0x2c8>
  m_errorCode = SD_CARD_ERROR_NONE;
    90e6:	4c9b      	ldr	r4, [pc, #620]	; (9354 <SdioCard::begin(SdioConfig)+0x278>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    90e8:	b091      	sub	sp, #68	; 0x44
  m_highCapacity = false;
    90ea:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 93a8 <SdioCard::begin(SdioConfig)+0x2cc>
  m_version2 = false;
    90ee:	4e9a      	ldr	r6, [pc, #616]	; (9358 <SdioCard::begin(SdioConfig)+0x27c>)
  m_sdioConfig = sdioConfig;
    90f0:	7201      	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    90f2:	7245      	strb	r5, [r0, #9]
  m_initDone = false;
    90f4:	f889 5000 	strb.w	r5, [r9]
  m_errorCode = SD_CARD_ERROR_NONE;
    90f8:	7025      	strb	r5, [r4, #0]
  m_highCapacity = false;
    90fa:	f888 5000 	strb.w	r5, [r8]
  m_version2 = false;
    90fe:	7035      	strb	r5, [r6, #0]
  initSDHC();
    9100:	f7ff fad2 	bl	86a8 <initSDHC()>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    9104:	4629      	mov	r1, r5
    9106:	4628      	mov	r0, r5
    9108:	f7ff fc00 	bl	890c <cardCommand(unsigned long, unsigned long)>
    910c:	b950      	cbnz	r0, 9124 <SdioCard::begin(SdioConfig)+0x48>
  m_errorCode = code;
    910e:	2101      	movs	r1, #1
  m_errorLine = line;
    9110:	4b92      	ldr	r3, [pc, #584]	; (935c <SdioCard::begin(SdioConfig)+0x280>)
    9112:	f240 228e 	movw	r2, #654	; 0x28e
    9116:	4605      	mov	r5, r0
  m_errorCode = code;
    9118:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    911a:	601a      	str	r2, [r3, #0]
}
    911c:	4628      	mov	r0, r5
    911e:	b011      	add	sp, #68	; 0x44
    9120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9124:	2503      	movs	r5, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    9126:	4f8e      	ldr	r7, [pc, #568]	; (9360 <SdioCard::begin(SdioConfig)+0x284>)
    9128:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    912c:	4638      	mov	r0, r7
    912e:	f7ff fbed 	bl	890c <cardCommand(unsigned long, unsigned long)>
    9132:	2800      	cmp	r0, #0
    9134:	d14e      	bne.n	91d4 <SdioCard::begin(SdioConfig)+0xf8>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    9136:	3d01      	subs	r5, #1
    9138:	d1f6      	bne.n	9128 <SdioCard::begin(SdioConfig)+0x4c>
  if (!m_version2) {
    913a:	7833      	ldrb	r3, [r6, #0]
    913c:	2b00      	cmp	r3, #0
    913e:	d03d      	beq.n	91bc <SdioCard::begin(SdioConfig)+0xe0>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    9140:	f8df b268 	ldr.w	fp, [pc, #616]	; 93ac <SdioCard::begin(SdioConfig)+0x2d0>
  int m = micros();
    9144:	f002 fa4e 	bl	b5e4 <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9148:	4e86      	ldr	r6, [pc, #536]	; (9364 <SdioCard::begin(SdioConfig)+0x288>)
  int m = micros();
    914a:	4605      	mov	r5, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    914c:	f8df a260 	ldr.w	sl, [pc, #608]	; 93b0 <SdioCard::begin(SdioConfig)+0x2d4>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    9150:	4f85      	ldr	r7, [pc, #532]	; (9368 <SdioCard::begin(SdioConfig)+0x28c>)
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9152:	2100      	movs	r1, #0
    9154:	4630      	mov	r0, r6
    9156:	f7ff fbd9 	bl	890c <cardCommand(unsigned long, unsigned long)>
    915a:	b950      	cbnz	r0, 9172 <SdioCard::begin(SdioConfig)+0x96>
      return sdError(SD_CARD_ERROR_ACMD41);
    915c:	2500      	movs	r5, #0
  m_errorCode = code;
    915e:	2117      	movs	r1, #23
  m_errorLine = line;
    9160:	4b7e      	ldr	r3, [pc, #504]	; (935c <SdioCard::begin(SdioConfig)+0x280>)
    9162:	f44f 722a 	mov.w	r2, #680	; 0x2a8
}
    9166:	4628      	mov	r0, r5
  m_errorCode = code;
    9168:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    916a:	601a      	str	r2, [r3, #0]
}
    916c:	b011      	add	sp, #68	; 0x44
    916e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9172:	4659      	mov	r1, fp
    9174:	4650      	mov	r0, sl
    9176:	f7ff fbc9 	bl	890c <cardCommand(unsigned long, unsigned long)>
    917a:	2800      	cmp	r0, #0
    917c:	d0ee      	beq.n	915c <SdioCard::begin(SdioConfig)+0x80>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    917e:	f002 fa31 	bl	b5e4 <micros>
    9182:	1b40      	subs	r0, r0, r5
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    9184:	4b79      	ldr	r3, [pc, #484]	; (936c <SdioCard::begin(SdioConfig)+0x290>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    9186:	42b8      	cmp	r0, r7
    9188:	d8e8      	bhi.n	915c <SdioCard::begin(SdioConfig)+0x80>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    918a:	691a      	ldr	r2, [r3, #16]
    918c:	2a00      	cmp	r2, #0
    918e:	dae0      	bge.n	9152 <SdioCard::begin(SdioConfig)+0x76>
  m_ocr = SDHC_CMDRSP0;
    9190:	6919      	ldr	r1, [r3, #16]
    9192:	4a77      	ldr	r2, [pc, #476]	; (9370 <SdioCard::begin(SdioConfig)+0x294>)
    9194:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    9196:	691b      	ldr	r3, [r3, #16]
    9198:	005a      	lsls	r2, r3, #1
    919a:	d502      	bpl.n	91a2 <SdioCard::begin(SdioConfig)+0xc6>
    m_highCapacity = true;
    919c:	2301      	movs	r3, #1
    919e:	f888 3000 	strb.w	r3, [r8]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    91a2:	2100      	movs	r1, #0
    91a4:	4873      	ldr	r0, [pc, #460]	; (9374 <SdioCard::begin(SdioConfig)+0x298>)
    91a6:	f7ff fbb1 	bl	890c <cardCommand(unsigned long, unsigned long)>
    91aa:	4605      	mov	r5, r0
    91ac:	bb10      	cbnz	r0, 91f4 <SdioCard::begin(SdioConfig)+0x118>
  m_errorCode = code;
    91ae:	2102      	movs	r1, #2
  m_errorLine = line;
    91b0:	4b6a      	ldr	r3, [pc, #424]	; (935c <SdioCard::begin(SdioConfig)+0x280>)
    91b2:	f240 22b1 	movw	r2, #689	; 0x2b1
  m_errorCode = code;
    91b6:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    91b8:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    91ba:	e7af      	b.n	911c <SdioCard::begin(SdioConfig)+0x40>
    initSDHC();
    91bc:	f7ff fa74 	bl	86a8 <initSDHC()>
    cardCommand(CMD0_XFERTYP, 0);
    91c0:	4629      	mov	r1, r5
    91c2:	4628      	mov	r0, r5
    91c4:	f7ff fba2 	bl	890c <cardCommand(unsigned long, unsigned long)>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    91c8:	7833      	ldrb	r3, [r6, #0]
    91ca:	2b00      	cmp	r3, #0
    91cc:	d1b8      	bne.n	9140 <SdioCard::begin(SdioConfig)+0x64>
    91ce:	f44f 1b40 	mov.w	fp, #3145728	; 0x300000
    91d2:	e7b7      	b.n	9144 <SdioCard::begin(SdioConfig)+0x68>
      if (SDHC_CMDRSP0 != 0X1AA) {
    91d4:	4b65      	ldr	r3, [pc, #404]	; (936c <SdioCard::begin(SdioConfig)+0x290>)
    91d6:	691b      	ldr	r3, [r3, #16]
    91d8:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    91dc:	d007      	beq.n	91ee <SdioCard::begin(SdioConfig)+0x112>
  m_errorCode = code;
    91de:	2106      	movs	r1, #6
  m_errorLine = line;
    91e0:	4b5e      	ldr	r3, [pc, #376]	; (935c <SdioCard::begin(SdioConfig)+0x280>)
    91e2:	f44f 7225 	mov.w	r2, #660	; 0x294
        return sdError(SD_CARD_ERROR_CMD8);
    91e6:	2500      	movs	r5, #0
  m_errorCode = code;
    91e8:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    91ea:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    91ec:	e796      	b.n	911c <SdioCard::begin(SdioConfig)+0x40>
      m_version2 = true;
    91ee:	2301      	movs	r3, #1
    91f0:	7033      	strb	r3, [r6, #0]
  if (!m_version2) {
    91f2:	e7a5      	b.n	9140 <SdioCard::begin(SdioConfig)+0x64>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    91f4:	2100      	movs	r1, #0
    91f6:	4860      	ldr	r0, [pc, #384]	; (9378 <SdioCard::begin(SdioConfig)+0x29c>)
    91f8:	f7ff fb88 	bl	890c <cardCommand(unsigned long, unsigned long)>
    91fc:	4605      	mov	r5, r0
    91fe:	b930      	cbnz	r0, 920e <SdioCard::begin(SdioConfig)+0x132>
  m_errorCode = code;
    9200:	2103      	movs	r1, #3
  m_errorLine = line;
    9202:	4b56      	ldr	r3, [pc, #344]	; (935c <SdioCard::begin(SdioConfig)+0x280>)
    9204:	f44f 722d 	mov.w	r2, #692	; 0x2b4
  m_errorCode = code;
    9208:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    920a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    920c:	e786      	b.n	911c <SdioCard::begin(SdioConfig)+0x40>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    920e:	4e57      	ldr	r6, [pc, #348]	; (936c <SdioCard::begin(SdioConfig)+0x290>)
    9210:	4b5a      	ldr	r3, [pc, #360]	; (937c <SdioCard::begin(SdioConfig)+0x2a0>)
    9212:	6932      	ldr	r2, [r6, #16]
    9214:	4f5a      	ldr	r7, [pc, #360]	; (9380 <SdioCard::begin(SdioConfig)+0x2a4>)
    9216:	4013      	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9218:	495a      	ldr	r1, [pc, #360]	; (9384 <SdioCard::begin(SdioConfig)+0x2a8>)
    921a:	485b      	ldr	r0, [pc, #364]	; (9388 <SdioCard::begin(SdioConfig)+0x2ac>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    921c:	603b      	str	r3, [r7, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    921e:	f7ff fbc1 	bl	89a4 <readReg16(unsigned long, void*)>
    9222:	4605      	mov	r5, r0
    9224:	b930      	cbnz	r0, 9234 <SdioCard::begin(SdioConfig)+0x158>
  m_errorCode = code;
    9226:	2107      	movs	r1, #7
  m_errorLine = line;
    9228:	4b4c      	ldr	r3, [pc, #304]	; (935c <SdioCard::begin(SdioConfig)+0x280>)
    922a:	f240 22b9 	movw	r2, #697	; 0x2b9
  m_errorCode = code;
    922e:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    9230:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    9232:	e773      	b.n	911c <SdioCard::begin(SdioConfig)+0x40>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    9234:	4955      	ldr	r1, [pc, #340]	; (938c <SdioCard::begin(SdioConfig)+0x2b0>)
    9236:	4856      	ldr	r0, [pc, #344]	; (9390 <SdioCard::begin(SdioConfig)+0x2b4>)
    9238:	f7ff fbb4 	bl	89a4 <readReg16(unsigned long, void*)>
    923c:	4605      	mov	r5, r0
    923e:	b930      	cbnz	r0, 924e <SdioCard::begin(SdioConfig)+0x172>
  m_errorCode = code;
    9240:	2108      	movs	r1, #8
  m_errorLine = line;
    9242:	4b46      	ldr	r3, [pc, #280]	; (935c <SdioCard::begin(SdioConfig)+0x280>)
    9244:	f44f 722f 	mov.w	r2, #700	; 0x2bc
  m_errorCode = code;
    9248:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    924a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    924c:	e766      	b.n	911c <SdioCard::begin(SdioConfig)+0x40>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    924e:	6839      	ldr	r1, [r7, #0]
    9250:	4850      	ldr	r0, [pc, #320]	; (9394 <SdioCard::begin(SdioConfig)+0x2b8>)
    9252:	f7ff fb5b 	bl	890c <cardCommand(unsigned long, unsigned long)>
    9256:	4605      	mov	r5, r0
    9258:	b930      	cbnz	r0, 9268 <SdioCard::begin(SdioConfig)+0x18c>
  m_errorCode = code;
    925a:	2105      	movs	r1, #5
  m_errorLine = line;
    925c:	4b3f      	ldr	r3, [pc, #252]	; (935c <SdioCard::begin(SdioConfig)+0x280>)
    925e:	f240 22bf 	movw	r2, #703	; 0x2bf
  m_errorCode = code;
    9262:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    9264:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    9266:	e759      	b.n	911c <SdioCard::begin(SdioConfig)+0x40>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9268:	6839      	ldr	r1, [r7, #0]
    926a:	483e      	ldr	r0, [pc, #248]	; (9364 <SdioCard::begin(SdioConfig)+0x288>)
    926c:	f7ff fb4e 	bl	890c <cardCommand(unsigned long, unsigned long)>
    9270:	b938      	cbnz	r0, 9282 <SdioCard::begin(SdioConfig)+0x1a6>
  m_errorCode = code;
    9272:	2114      	movs	r1, #20
  m_errorLine = line;
    9274:	4b39      	ldr	r3, [pc, #228]	; (935c <SdioCard::begin(SdioConfig)+0x280>)
    9276:	f240 22c3 	movw	r2, #707	; 0x2c3
    return sdError(SD_CARD_ERROR_ACMD6);
    927a:	2500      	movs	r5, #0
  m_errorCode = code;
    927c:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    927e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    9280:	e74c      	b.n	911c <SdioCard::begin(SdioConfig)+0x40>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9282:	2102      	movs	r1, #2
    9284:	4844      	ldr	r0, [pc, #272]	; (9398 <SdioCard::begin(SdioConfig)+0x2bc>)
    9286:	f7ff fb41 	bl	890c <cardCommand(unsigned long, unsigned long)>
    928a:	4605      	mov	r5, r0
    928c:	2800      	cmp	r0, #0
    928e:	d0f0      	beq.n	9272 <SdioCard::begin(SdioConfig)+0x196>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    9290:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    9292:	4669      	mov	r1, sp
    9294:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    9298:	f023 0306 	bic.w	r3, r3, #6
    929c:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    929e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    92a0:	f043 0302 	orr.w	r3, r3, #2
    92a4:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    92a6:	f04f 1310 	mov.w	r3, #1048592	; 0x100010
    92aa:	6473      	str	r3, [r6, #68]	; 0x44
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    92ac:	f7ff fcd4 	bl	8c58 <cardCMD6(unsigned long, unsigned char*)>
  bool highspeedModeSupported = (2 & status[13]);
    92b0:	f89d 300d 	ldrb.w	r3, [sp, #13]
  if (highSpeedModeAsk && highspeedModeSupported) {
    92b4:	079b      	lsls	r3, r3, #30
    92b6:	d543      	bpl.n	9340 <SdioCard::begin(SdioConfig)+0x264>
    92b8:	2800      	cmp	r0, #0
    92ba:	d041      	beq.n	9340 <SdioCard::begin(SdioConfig)+0x264>
    uint32_t m_errorLine_before = m_errorLine;
    92bc:	4e27      	ldr	r6, [pc, #156]	; (935c <SdioCard::begin(SdioConfig)+0x280>)
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    92be:	4669      	mov	r1, sp
    92c0:	4836      	ldr	r0, [pc, #216]	; (939c <SdioCard::begin(SdioConfig)+0x2c0>)
    uint8_t err_code_before = m_errorCode;
    92c2:	f894 8000 	ldrb.w	r8, [r4]
    uint32_t m_errorLine_before = m_errorLine;
    92c6:	6837      	ldr	r7, [r6, #0]
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    92c8:	f7ff fcc6 	bl	8c58 <cardCMD6(unsigned long, unsigned char*)>
    bool switchRequestDone = ((status[16] & 0XF) == 1);
    92cc:	f89d 3010 	ldrb.w	r3, [sp, #16]
    92d0:	f003 030f 	and.w	r3, r3, #15
    if (switchRequestAsk && switchRequestDone) {
    92d4:	2b01      	cmp	r3, #1
    92d6:	d136      	bne.n	9346 <SdioCard::begin(SdioConfig)+0x26a>
    92d8:	b3a8      	cbz	r0, 9346 <SdioCard::begin(SdioConfig)+0x26a>
      kHzSdClk = 50000;
    92da:	f24c 3050 	movw	r0, #50000	; 0xc350
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    92de:	4c30      	ldr	r4, [pc, #192]	; (93a0 <SdioCard::begin(SdioConfig)+0x2c4>)
    92e0:	2305      	movs	r3, #5
    92e2:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    92e6:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    92ea:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    92ee:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    92f2:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    92f6:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
  setSdclk(kHzSdClk);
    92fa:	f7ff f8eb 	bl	84d4 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    92fe:	2300      	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    9300:	f247 02b8 	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    9304:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    9308:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    930c:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    9310:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    9314:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    9318:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    931c:	f241 03b8 	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    9320:	f8c4 23bc 	str.w	r2, [r4, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    9324:	f8c4 23c0 	str.w	r2, [r4, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    9328:	f8c4 23ac 	str.w	r2, [r4, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    932c:	f8c4 33b0 	str.w	r3, [r4, #944]	; 0x3b0
  m_initDone = true;
    9330:	2301      	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    9332:	f8c4 23b4 	str.w	r2, [r4, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    9336:	f8c4 23b8 	str.w	r2, [r4, #952]	; 0x3b8
  m_initDone = true;
    933a:	f889 3000 	strb.w	r3, [r9]
  return true;
    933e:	e6ed      	b.n	911c <SdioCard::begin(SdioConfig)+0x40>
  kHzSdClk = 25000;
    9340:	f246 10a8 	movw	r0, #25000	; 0x61a8
    9344:	e7cb      	b.n	92de <SdioCard::begin(SdioConfig)+0x202>
    9346:	f246 10a8 	movw	r0, #25000	; 0x61a8
      m_errorCode = err_code_before;
    934a:	f884 8000 	strb.w	r8, [r4]
      m_errorLine = m_errorLine_before;
    934e:	6037      	str	r7, [r6, #0]
    9350:	e7c5      	b.n	92de <SdioCard::begin(SdioConfig)+0x202>
    9352:	bf00      	nop
    9354:	200022a6 	.word	0x200022a6
    9358:	200038fb 	.word	0x200038fb
    935c:	200033c4 	.word	0x200033c4
    9360:	081a0000 	.word	0x081a0000
    9364:	371a0000 	.word	0x371a0000
    9368:	000f4240 	.word	0x000f4240
    936c:	402c0000 	.word	0x402c0000
    9370:	200033e8 	.word	0x200033e8
    9374:	02090000 	.word	0x02090000
    9378:	031a0000 	.word	0x031a0000
    937c:	ffff0000 	.word	0xffff0000
    9380:	200033ec 	.word	0x200033ec
    9384:	200033d8 	.word	0x200033d8
    9388:	09090000 	.word	0x09090000
    938c:	200033c8 	.word	0x200033c8
    9390:	0a090000 	.word	0x0a090000
    9394:	071b0000 	.word	0x071b0000
    9398:	061a0000 	.word	0x061a0000
    939c:	80fffff1 	.word	0x80fffff1
    93a0:	401f8000 	.word	0x401f8000
    93a4:	200038fa 	.word	0x200038fa
    93a8:	200038fc 	.word	0x200038fc
    93ac:	40300000 	.word	0x40300000
    93b0:	29020000 	.word	0x29020000

000093b4 <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    93b4:	4b37      	ldr	r3, [pc, #220]	; (9494 <SdioCard::readData(unsigned char*)+0xe0>)
    93b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    93b8:	0592      	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
    93ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    93be:	460f      	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    93c0:	d40d      	bmi.n	93de <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    93c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    93c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    93c8:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    93ca:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    93cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    93ce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    93d2:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    93d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    93d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    93da:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    93dc:	b662      	cpsie	i
  uint32_t m = micros();
    93de:	f002 f901 	bl	b5e4 <micros>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    93e2:	4e2c      	ldr	r6, [pc, #176]	; (9494 <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    93e4:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 94ac <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
    93e8:	4605      	mov	r5, r0
  while (fcn()) {
    93ea:	e004      	b.n	93f6 <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    93ec:	f002 f8fa 	bl	b5e4 <micros>
    93f0:	1b43      	subs	r3, r0, r5
    93f2:	4543      	cmp	r3, r8
    93f4:	d837      	bhi.n	9466 <SdioCard::readData(unsigned char*)+0xb2>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    93f6:	6a74      	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
    93f8:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    93fc:	d0f6      	beq.n	93ec <SdioCard::readData(unsigned char*)+0x38>
    93fe:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    9402:	4824      	ldr	r0, [pc, #144]	; (9494 <SdioCard::readData(unsigned char*)+0xe0>)
    9404:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    9408:	6a43      	ldr	r3, [r0, #36]	; 0x24
    940a:	051b      	lsls	r3, r3, #20
    940c:	d5fc      	bpl.n	9408 <SdioCard::readData(unsigned char*)+0x54>
    940e:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    9412:	6a02      	ldr	r2, [r0, #32]
    9414:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9418:	459c      	cmp	ip, r3
    941a:	d1fa      	bne.n	9412 <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    941c:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    9420:	4567      	cmp	r7, ip
    9422:	d1f1      	bne.n	9408 <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
    9424:	f002 f8de 	bl	b5e4 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    9428:	4f1a      	ldr	r7, [pc, #104]	; (9494 <SdioCard::readData(unsigned char*)+0xe0>)
    942a:	4d1b      	ldr	r5, [pc, #108]	; (9498 <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
    942c:	4606      	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    942e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 94ac <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
    9432:	e004      	b.n	943e <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9434:	f002 f8d6 	bl	b5e4 <micros>
    9438:	1b83      	subs	r3, r0, r6
    943a:	4543      	cmp	r3, r8
    943c:	d81d      	bhi.n	947a <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    943e:	6b3c      	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
    9440:	402c      	ands	r4, r5
    9442:	d0f7      	beq.n	9434 <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
    9444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9446:	4a15      	ldr	r2, [pc, #84]	; (949c <SdioCard::readData(unsigned char*)+0xe8>)
    9448:	6013      	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    944a:	6813      	ldr	r3, [r2, #0]
    944c:	633b      	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    944e:	6813      	ldr	r3, [r2, #0]
    9450:	f013 0302 	ands.w	r3, r3, #2
    9454:	d01b      	beq.n	948e <SdioCard::readData(unsigned char*)+0xda>
    9456:	6812      	ldr	r2, [r2, #0]
    9458:	4b11      	ldr	r3, [pc, #68]	; (94a0 <SdioCard::readData(unsigned char*)+0xec>)
    945a:	421a      	tst	r2, r3
    945c:	bf0c      	ite	eq
    945e:	2001      	moveq	r0, #1
    9460:	2000      	movne	r0, #0
}
    9462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    9466:	490f      	ldr	r1, [pc, #60]	; (94a4 <SdioCard::readData(unsigned char*)+0xf0>)
    9468:	251a      	movs	r5, #26
  m_errorLine = line;
    946a:	4b0f      	ldr	r3, [pc, #60]	; (94a8 <SdioCard::readData(unsigned char*)+0xf4>)
    946c:	f240 3256 	movw	r2, #854	; 0x356
    return sdError(SD_CARD_ERROR_READ_FIFO);
    9470:	4620      	mov	r0, r4
  m_errorCode = code;
    9472:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    9474:	601a      	str	r2, [r3, #0]
}
    9476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    947a:	490a      	ldr	r1, [pc, #40]	; (94a4 <SdioCard::readData(unsigned char*)+0xf0>)
    947c:	251d      	movs	r5, #29
  m_errorLine = line;
    947e:	4b0a      	ldr	r3, [pc, #40]	; (94a8 <SdioCard::readData(unsigned char*)+0xf4>)
    9480:	f240 3261 	movw	r2, #865	; 0x361
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    9484:	4620      	mov	r0, r4
  m_errorCode = code;
    9486:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    9488:	601a      	str	r2, [r3, #0]
}
    948a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    948e:	4618      	mov	r0, r3
}
    9490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9494:	402c0000 	.word	0x402c0000
    9498:	117f0002 	.word	0x117f0002
    949c:	200033f4 	.word	0x200033f4
    94a0:	117f0000 	.word	0x117f0000
    94a4:	200022a6 	.word	0x200022a6
    94a8:	200033c4 	.word	0x200033c4
    94ac:	000f4240 	.word	0x000f4240

000094b0 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    94b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    94b4:	4b29      	ldr	r3, [pc, #164]	; (955c <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
    94b6:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    94b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 957c <SdioCard::readStart(unsigned long)+0xcc>
    94bc:	4e28      	ldr	r6, [pc, #160]	; (9560 <SdioCard::readStart(unsigned long)+0xb0>)
    94be:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    94c2:	f002 f88f 	bl	b5e4 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    94c6:	4d27      	ldr	r5, [pc, #156]	; (9564 <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    94c8:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    94ca:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 9580 <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    94ce:	4f26      	ldr	r7, [pc, #152]	; (9568 <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
    94d0:	e006      	b.n	94e0 <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    94d2:	f002 f887 	bl	b5e4 <micros>
    94d6:	1b00      	subs	r0, r0, r4
    94d8:	42b8      	cmp	r0, r7
    94da:	d829      	bhi.n	9530 <SdioCard::readStart(unsigned long)+0x80>
    yield();
    94dc:	f003 fb92 	bl	cc04 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    94e0:	6831      	ldr	r1, [r6, #0]
    94e2:	4628      	mov	r0, r5
    94e4:	f7ff fa12 	bl	890c <cardCommand(unsigned long, unsigned long)>
    94e8:	2800      	cmp	r0, #0
    94ea:	d0f2      	beq.n	94d2 <SdioCard::readStart(unsigned long)+0x22>
    94ec:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    94f0:	05db      	lsls	r3, r3, #23
    94f2:	d5ee      	bpl.n	94d2 <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
    94f4:	2300      	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    94f6:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    94fa:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    94fe:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    9502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    9506:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    950a:	4b18      	ldr	r3, [pc, #96]	; (956c <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    950c:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9510:	781b      	ldrb	r3, [r3, #0]
    9512:	b1cb      	cbz	r3, 9548 <SdioCard::readStart(unsigned long)+0x98>
    9514:	4649      	mov	r1, r9
    9516:	4816      	ldr	r0, [pc, #88]	; (9570 <SdioCard::readStart(unsigned long)+0xc0>)
    9518:	f7ff f9f8 	bl	890c <cardCommand(unsigned long, unsigned long)>
    951c:	b930      	cbnz	r0, 952c <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
    951e:	4915      	ldr	r1, [pc, #84]	; (9574 <SdioCard::readStart(unsigned long)+0xc4>)
    9520:	240c      	movs	r4, #12
  m_errorLine = line;
    9522:	4b15      	ldr	r3, [pc, #84]	; (9578 <SdioCard::readStart(unsigned long)+0xc8>)
    9524:	f240 32bd 	movw	r2, #957	; 0x3bd
  m_errorCode = code;
    9528:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    952a:	601a      	str	r2, [r3, #0]
}
    952c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    9530:	4a10      	ldr	r2, [pc, #64]	; (9574 <SdioCard::readStart(unsigned long)+0xc4>)
    9532:	210a      	movs	r1, #10
      m_busyFcn = 0;
    9534:	2000      	movs	r0, #0
  m_errorLine = line;
    9536:	4b10      	ldr	r3, [pc, #64]	; (9578 <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
    9538:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    953a:	f240 32b1 	movw	r2, #945	; 0x3b1
      m_busyFcn = 0;
    953e:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    9542:	601a      	str	r2, [r3, #0]
}
    9544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9548:	ea4f 2949 	mov.w	r9, r9, lsl #9
    954c:	4808      	ldr	r0, [pc, #32]	; (9570 <SdioCard::readStart(unsigned long)+0xc0>)
    954e:	4649      	mov	r1, r9
    9550:	f7ff f9dc 	bl	890c <cardCommand(unsigned long, unsigned long)>
    9554:	2800      	cmp	r0, #0
    9556:	d1e9      	bne.n	952c <SdioCard::readStart(unsigned long)+0x7c>
    9558:	e7e1      	b.n	951e <SdioCard::readStart(unsigned long)+0x6e>
    955a:	bf00      	nop
    955c:	00008aa1 	.word	0x00008aa1
    9560:	200033ec 	.word	0x200033ec
    9564:	0d1a0000 	.word	0x0d1a0000
    9568:	000f4240 	.word	0x000f4240
    956c:	200038fc 	.word	0x200038fc
    9570:	123a0030 	.word	0x123a0030
    9574:	200022a6 	.word	0x200022a6
    9578:	200033c4 	.word	0x200033c4
    957c:	200033f0 	.word	0x200033f0
    9580:	402c0000 	.word	0x402c0000

00009584 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    9584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
    9588:	2200      	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    958a:	4c1d      	ldr	r4, [pc, #116]	; (9600 <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
    958c:	460d      	mov	r5, r1
  m_curState = IDLE_STATE;
    958e:	7242      	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9590:	4611      	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9592:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9594:	481b      	ldr	r0, [pc, #108]	; (9604 <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    959a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    959c:	f7ff f9b6 	bl	890c <cardCommand(unsigned long, unsigned long)>
    95a0:	b940      	cbnz	r0, 95b4 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    95a2:	4919      	ldr	r1, [pc, #100]	; (9608 <SdioCard::stopTransmission(bool)+0x84>)
    95a4:	2409      	movs	r4, #9
  m_errorLine = line;
    95a6:	4b19      	ldr	r3, [pc, #100]	; (960c <SdioCard::stopTransmission(bool)+0x88>)
    95a8:	f240 32d3 	movw	r2, #979	; 0x3d3
  m_errorCode = code;
    95ac:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    95ae:	601a      	str	r2, [r3, #0]
}
    95b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
    95b4:	2d00      	cmp	r5, #0
    95b6:	d0fb      	beq.n	95b0 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
    95b8:	4b15      	ldr	r3, [pc, #84]	; (9610 <SdioCard::stopTransmission(bool)+0x8c>)
    95ba:	4e16      	ldr	r6, [pc, #88]	; (9614 <SdioCard::stopTransmission(bool)+0x90>)
    95bc:	6033      	str	r3, [r6, #0]
  uint32_t m = micros();
    95be:	f002 f811 	bl	b5e4 <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    95c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    95c4:	4607      	mov	r7, r0
  while (fcn()) {
    95c6:	01da      	lsls	r2, r3, #7
    95c8:	d416      	bmi.n	95f8 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    95ca:	f8df 804c 	ldr.w	r8, [pc, #76]	; 9618 <SdioCard::stopTransmission(bool)+0x94>
    95ce:	e004      	b.n	95da <SdioCard::stopTransmission(bool)+0x56>
    yield();
    95d0:	f003 fb18 	bl	cc04 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    95d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    95d6:	01db      	lsls	r3, r3, #7
    95d8:	d40e      	bmi.n	95f8 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    95da:	f002 f803 	bl	b5e4 <micros>
    95de:	1bc0      	subs	r0, r0, r7
    95e0:	4540      	cmp	r0, r8
    95e2:	d9f5      	bls.n	95d0 <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
    95e4:	4a08      	ldr	r2, [pc, #32]	; (9608 <SdioCard::stopTransmission(bool)+0x84>)
    95e6:	210a      	movs	r1, #10
      m_busyFcn = 0;
    95e8:	2000      	movs	r0, #0
  m_errorLine = line;
    95ea:	4b08      	ldr	r3, [pc, #32]	; (960c <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
    95ec:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    95ee:	f240 32d7 	movw	r2, #983	; 0x3d7
      m_busyFcn = 0;
    95f2:	6030      	str	r0, [r6, #0]
  m_errorLine = line;
    95f4:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    95f6:	e7db      	b.n	95b0 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
    95f8:	2300      	movs	r3, #0
  return true;
    95fa:	4628      	mov	r0, r5
  m_busyFcn = 0;
    95fc:	6033      	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
    95fe:	e7d7      	b.n	95b0 <SdioCard::stopTransmission(bool)+0x2c>
    9600:	402c0000 	.word	0x402c0000
    9604:	0cdb0000 	.word	0x0cdb0000
    9608:	200022a6 	.word	0x200022a6
    960c:	200033c4 	.word	0x200033c4
    9610:	000084b5 	.word	0x000084b5
    9614:	200033f0 	.word	0x200033f0
    9618:	000f4240 	.word	0x000f4240

0000961c <SdioCard::syncDevice()>:
  if (!m_transferActive) {
    961c:	4b0a      	ldr	r3, [pc, #40]	; (9648 <SdioCard::syncDevice()+0x2c>)
    961e:	781b      	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
    9620:	b510      	push	{r4, lr}
    9622:	4604      	mov	r4, r0
  if (!m_transferActive) {
    9624:	b91b      	cbnz	r3, 962e <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
    9626:	7a63      	ldrb	r3, [r4, #9]
    9628:	b943      	cbnz	r3, 963c <SdioCard::syncDevice()+0x20>
  return true;
    962a:	2001      	movs	r0, #1
}
    962c:	bd10      	pop	{r4, pc}
    962e:	f7ff f8cf 	bl	87d0 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    9632:	2800      	cmp	r0, #0
    9634:	d0fa      	beq.n	962c <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
    9636:	7a63      	ldrb	r3, [r4, #9]
    9638:	2b00      	cmp	r3, #0
    963a:	d0f6      	beq.n	962a <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
    963c:	4620      	mov	r0, r4
    963e:	2101      	movs	r1, #1
}
    9640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    9644:	f7ff bf9e 	b.w	9584 <SdioCard::stopTransmission(bool)>
    9648:	200038fd 	.word	0x200038fd

0000964c <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    964c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9650:	4604      	mov	r4, r0
    9652:	7a00      	ldrb	r0, [r0, #8]
    9654:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    9658:	4616      	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    965a:	f010 0501 	ands.w	r5, r0, #1
    965e:	d013      	beq.n	9688 <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    9660:	0793      	lsls	r3, r2, #30
    9662:	d03c      	beq.n	96de <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9664:	2301      	movs	r3, #1
    9666:	4838      	ldr	r0, [pc, #224]	; (9748 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    9668:	466a      	mov	r2, sp
    966a:	f7ff fc01 	bl	8e70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    966e:	2800      	cmp	r0, #0
    9670:	d03a      	beq.n	96e8 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    9672:	f44f 7200 	mov.w	r2, #512	; 0x200
    9676:	4669      	mov	r1, sp
    9678:	4630      	mov	r0, r6
    967a:	f002 f859 	bl	b730 <memcpy>
}
    967e:	4628      	mov	r0, r5
    9680:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    9684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    9688:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 9758 <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
    968c:	460f      	mov	r7, r1
    968e:	f898 3000 	ldrb.w	r3, [r8]
    9692:	2b00      	cmp	r3, #0
    9694:	d135      	bne.n	9702 <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
    9696:	7a63      	ldrb	r3, [r4, #9]
    9698:	2b01      	cmp	r3, #1
    969a:	d039      	beq.n	9710 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
    969c:	6822      	ldr	r2, [r4, #0]
    969e:	492b      	ldr	r1, [pc, #172]	; (974c <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
    96a0:	6a12      	ldr	r2, [r2, #32]
    96a2:	428a      	cmp	r2, r1
    96a4:	d14a      	bne.n	973c <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
    96a6:	f898 2000 	ldrb.w	r2, [r8]
    96aa:	2a00      	cmp	r2, #0
    96ac:	d134      	bne.n	9718 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
    96ae:	2b00      	cmp	r3, #0
    96b0:	d139      	bne.n	9726 <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
    96b2:	4639      	mov	r1, r7
    96b4:	4620      	mov	r0, r4
    96b6:	f7ff fefb 	bl	94b0 <SdioCard::readStart(unsigned long)>
    96ba:	b1e8      	cbz	r0, 96f8 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
    96bc:	2301      	movs	r3, #1
      m_curSector = sector;
    96be:	6067      	str	r7, [r4, #4]
      m_curState = READ_STATE;
    96c0:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
    96c2:	4631      	mov	r1, r6
    96c4:	4620      	mov	r0, r4
    96c6:	f7ff fe75 	bl	93b4 <SdioCard::readData(unsigned char*)>
    96ca:	b1a8      	cbz	r0, 96f8 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
    96cc:	6863      	ldr	r3, [r4, #4]
  return true;
    96ce:	4605      	mov	r5, r0
    m_curSector++;
    96d0:	3301      	adds	r3, #1
}
    96d2:	4628      	mov	r0, r5
    m_curSector++;
    96d4:	6063      	str	r3, [r4, #4]
}
    96d6:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    96da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    96de:	2301      	movs	r3, #1
    96e0:	4819      	ldr	r0, [pc, #100]	; (9748 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    96e2:	f7ff fbc5 	bl	8e70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    96e6:	b938      	cbnz	r0, 96f8 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
    96e8:	4919      	ldr	r1, [pc, #100]	; (9750 <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
    96ea:	200b      	movs	r0, #11
  m_errorLine = line;
    96ec:	4b19      	ldr	r3, [pc, #100]	; (9754 <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
    96ee:	f44f 725d 	mov.w	r2, #884	; 0x374
      return sdError(SD_CARD_ERROR_CMD17);
    96f2:	2500      	movs	r5, #0
  m_errorCode = code;
    96f4:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    96f6:	601a      	str	r2, [r3, #0]
}
    96f8:	4628      	mov	r0, r5
    96fa:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    96fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9702:	f7ff f865 	bl	87d0 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    9706:	2800      	cmp	r0, #0
    9708:	d0f6      	beq.n	96f8 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
    970a:	7a63      	ldrb	r3, [r4, #9]
    970c:	2b01      	cmp	r3, #1
    970e:	d1c5      	bne.n	969c <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    9710:	6862      	ldr	r2, [r4, #4]
    9712:	42ba      	cmp	r2, r7
    9714:	d1c2      	bne.n	969c <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    9716:	e7d4      	b.n	96c2 <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    9718:	f7ff f85a 	bl	87d0 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    971c:	2800      	cmp	r0, #0
    971e:	d0eb      	beq.n	96f8 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
    9720:	7a63      	ldrb	r3, [r4, #9]
    9722:	2b00      	cmp	r3, #0
    9724:	d0c5      	beq.n	96b2 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
    9726:	2101      	movs	r1, #1
    9728:	4620      	mov	r0, r4
    972a:	f7ff ff2b 	bl	9584 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    972e:	2800      	cmp	r0, #0
    9730:	d1bf      	bne.n	96b2 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
    9732:	4628      	mov	r0, r5
    9734:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    9738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
    973c:	4620      	mov	r0, r4
    973e:	4790      	blx	r2
    9740:	2800      	cmp	r0, #0
    9742:	d0f6      	beq.n	9732 <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
    9744:	e7b5      	b.n	96b2 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    9746:	bf00      	nop
    9748:	113a0011 	.word	0x113a0011
    974c:	0000961d 	.word	0x0000961d
    9750:	200022a6 	.word	0x200022a6
    9754:	200033c4 	.word	0x200033c4
    9758:	200038fd 	.word	0x200038fd

0000975c <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    975c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9760:	7a04      	ldrb	r4, [r0, #8]
    9762:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    9766:	460f      	mov	r7, r1
    9768:	4690      	mov	r8, r2
  if (m_sdioConfig.useDma()) {
    976a:	f014 0401 	ands.w	r4, r4, #1
    976e:	d01d      	beq.n	97ac <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
    9770:	f012 0f03 	tst.w	r2, #3
    9774:	d006      	beq.n	9784 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
    9776:	4668      	mov	r0, sp
    9778:	4611      	mov	r1, r2
    977a:	f44f 7200 	mov.w	r2, #512	; 0x200
      ptr = aligned;
    977e:	4680      	mov	r8, r0
      memcpy(aligned, src, 512);
    9780:	f001 ffd6 	bl	b730 <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    9784:	2301      	movs	r3, #1
    9786:	4642      	mov	r2, r8
    9788:	4639      	mov	r1, r7
    978a:	482c      	ldr	r0, [pc, #176]	; (983c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    978c:	f7ff fb70 	bl	8e70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9790:	4604      	mov	r4, r0
    9792:	b930      	cbnz	r0, 97a2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
    9794:	492a      	ldr	r1, [pc, #168]	; (9840 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    9796:	200d      	movs	r0, #13
  m_errorLine = line;
    9798:	4b2a      	ldr	r3, [pc, #168]	; (9844 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
    979a:	f240 4211 	movw	r2, #1041	; 0x411
  m_errorCode = code;
    979e:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    97a0:	601a      	str	r2, [r3, #0]
}
    97a2:	4620      	mov	r0, r4
    97a4:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    97a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    97ac:	4d26      	ldr	r5, [pc, #152]	; (9848 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
    97ae:	4606      	mov	r6, r0
    97b0:	782b      	ldrb	r3, [r5, #0]
    97b2:	bb2b      	cbnz	r3, 9800 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    97b4:	7a73      	ldrb	r3, [r6, #9]
    97b6:	2b02      	cmp	r3, #2
    97b8:	d029      	beq.n	980e <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
    97ba:	6832      	ldr	r2, [r6, #0]
    97bc:	4923      	ldr	r1, [pc, #140]	; (984c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
    97be:	6a12      	ldr	r2, [r2, #32]
    97c0:	428a      	cmp	r2, r1
    97c2:	d136      	bne.n	9832 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
    97c4:	782a      	ldrb	r2, [r5, #0]
    97c6:	bb32      	cbnz	r2, 9816 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
    97c8:	2b00      	cmp	r3, #0
    97ca:	d12b      	bne.n	9824 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector )) {
    97cc:	6833      	ldr	r3, [r6, #0]
    97ce:	4639      	mov	r1, r7
    97d0:	4630      	mov	r0, r6
    97d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    97d4:	4798      	blx	r3
    97d6:	2800      	cmp	r0, #0
    97d8:	d0e3      	beq.n	97a2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
    97da:	2302      	movs	r3, #2
      m_curSector = sector;
    97dc:	6077      	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
    97de:	7273      	strb	r3, [r6, #9]
    if (!writeData(src)) {
    97e0:	6833      	ldr	r3, [r6, #0]
    97e2:	4641      	mov	r1, r8
    97e4:	4630      	mov	r0, r6
    97e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    97e8:	4798      	blx	r3
    97ea:	2800      	cmp	r0, #0
    97ec:	d0d9      	beq.n	97a2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
    97ee:	6873      	ldr	r3, [r6, #4]
  return true;
    97f0:	4604      	mov	r4, r0
    m_curSector++;
    97f2:	3301      	adds	r3, #1
}
    97f4:	4620      	mov	r0, r4
    m_curSector++;
    97f6:	6073      	str	r3, [r6, #4]
}
    97f8:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    97fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9800:	f7fe ffe6 	bl	87d0 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    9804:	2800      	cmp	r0, #0
    9806:	d0cc      	beq.n	97a2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    9808:	7a73      	ldrb	r3, [r6, #9]
    980a:	2b02      	cmp	r3, #2
    980c:	d1d5      	bne.n	97ba <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    980e:	6872      	ldr	r2, [r6, #4]
    9810:	42ba      	cmp	r2, r7
    9812:	d1d2      	bne.n	97ba <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    9814:	e7e4      	b.n	97e0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    9816:	f7fe ffdb 	bl	87d0 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    981a:	2800      	cmp	r0, #0
    981c:	d0c1      	beq.n	97a2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
    981e:	7a73      	ldrb	r3, [r6, #9]
    9820:	2b00      	cmp	r3, #0
    9822:	d0d3      	beq.n	97cc <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
    9824:	2101      	movs	r1, #1
    9826:	4630      	mov	r0, r6
    9828:	f7ff feac 	bl	9584 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    982c:	2800      	cmp	r0, #0
    982e:	d0b8      	beq.n	97a2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    9830:	e7cc      	b.n	97cc <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    9832:	4630      	mov	r0, r6
    9834:	4790      	blx	r2
    9836:	2800      	cmp	r0, #0
    9838:	d0b3      	beq.n	97a2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    983a:	e7c7      	b.n	97cc <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    983c:	183a0001 	.word	0x183a0001
    9840:	200022a6 	.word	0x200022a6
    9844:	200033c4 	.word	0x200033c4
    9848:	200038fd 	.word	0x200038fd
    984c:	0000961d 	.word	0x0000961d

00009850 <sdCsInit(unsigned char)>:
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
    9850:	2101      	movs	r1, #1
    9852:	f001 bf2d 	b.w	b6b0 <pinMode>
    9856:	bf00      	nop

00009858 <sdCsWrite(unsigned char, bool)>:
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    9858:	f001 beee 	b.w	b638 <digitalWrite>

0000985c <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
    985c:	b430      	push	{r4, r5}
    985e:	b082      	sub	sp, #8
    9860:	460c      	mov	r4, r1
    9862:	ab02      	add	r3, sp, #8
    9864:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    9868:	7cc3      	ldrb	r3, [r0, #19]
    986a:	2b00      	cmp	r3, #0
    986c:	d030      	beq.n	98d0 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    986e:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    9870:	7cc3      	ldrb	r3, [r0, #19]
    9872:	07da      	lsls	r2, r3, #31
    9874:	d508      	bpl.n	9888 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    9876:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    987a:	6945      	ldr	r5, [r0, #20]
    987c:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    9880:	402a      	ands	r2, r5
    9882:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    9884:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			}
			if (interruptMasksUsed & 0x02) {
    9888:	079d      	lsls	r5, r3, #30
    988a:	d508      	bpl.n	989e <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    988c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    9890:	6985      	ldr	r5, [r0, #24]
    9892:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    9896:	402a      	ands	r2, r5
    9898:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    989a:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			}
			if (interruptMasksUsed & 0x04) {
    989e:	0759      	lsls	r1, r3, #29
    98a0:	d508      	bpl.n	98b4 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    98a2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    98a6:	69c5      	ldr	r5, [r0, #28]
    98a8:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    98ac:	402a      	ands	r2, r5
    98ae:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    98b0:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			}
			if (interruptMasksUsed & 0x08) {
    98b4:	071a      	lsls	r2, r3, #28
    98b6:	d508      	bpl.n	98ca <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    98b8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    98bc:	6a05      	ldr	r5, [r0, #32]
    98be:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    98c2:	402a      	ands	r2, r5
    98c4:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    98c6:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			}
			if (interruptMasksUsed & 0x10) {
    98ca:	06db      	lsls	r3, r3, #27
    98cc:	d42f      	bmi.n	992e <SPIClass::beginTransaction(SPISettings)+0xd2>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    98ce:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    98d0:	6883      	ldr	r3, [r0, #8]
    98d2:	429c      	cmp	r4, r3
    98d4:	d035      	beq.n	9942 <SPIClass::beginTransaction(SPISettings)+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    98d6:	4b22      	ldr	r3, [pc, #136]	; (9960 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    98d8:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    98da:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    98dc:	4a21      	ldr	r2, [pc, #132]	; (9964 <SPIClass::beginTransaction(SPISettings)+0x108>)
    98de:	f3c3 1101 	ubfx	r1, r3, #4, #2
    98e2:	f3c3 6382 	ubfx	r3, r3, #26, #3
    98e6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    98ea:	3301      	adds	r3, #1
    98ec:	fbb1 f2f3 	udiv	r2, r1, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    98f0:	b1cc      	cbz	r4, 9926 <SPIClass::beginTransaction(SPISettings)+0xca>

			if (d && clkhz/d > _clock) d++;
    98f2:	4294      	cmp	r4, r2
    98f4:	d827      	bhi.n	9946 <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    98f6:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    98fa:	fbb2 f2f3 	udiv	r2, r2, r3
    98fe:	4294      	cmp	r4, r2
    9900:	d32c      	bcc.n	995c <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    9902:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    9906:	d320      	bcc.n	994a <SPIClass::beginTransaction(SPISettings)+0xee>
    9908:	4c17      	ldr	r4, [pc, #92]	; (9968 <SPIClass::beginTransaction(SPISettings)+0x10c>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    990a:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    990c:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    990e:	2203      	movs	r2, #3
		port().CR = 0;
    9910:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    9912:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    9914:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    9916:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    9918:	2201      	movs	r2, #1
		port().CCR = _ccr;
    991a:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    991c:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    991e:	611a      	str	r2, [r3, #16]
	}
    9920:	b002      	add	sp, #8
    9922:	bc30      	pop	{r4, r5}
    9924:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    9926:	4299      	cmp	r1, r3
    9928:	d3ef      	bcc.n	990a <SPIClass::beginTransaction(SPISettings)+0xae>
    992a:	1c53      	adds	r3, r2, #1
    992c:	e7e9      	b.n	9902 <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    992e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    9932:	6a41      	ldr	r1, [r0, #36]	; 0x24
    9934:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    9938:	400b      	ands	r3, r1
    993a:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    993c:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    9940:	e7c5      	b.n	98ce <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    9942:	68c4      	ldr	r4, [r0, #12]
    9944:	e7e2      	b.n	990c <SPIClass::beginTransaction(SPISettings)+0xb0>
    9946:	2400      	movs	r4, #0
    9948:	e7df      	b.n	990a <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    994a:	2b02      	cmp	r3, #2
    994c:	d9fb      	bls.n	9946 <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    994e:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    9950:	085a      	lsrs	r2, r3, #1
    9952:	0214      	lsls	r4, r2, #8
    9954:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    9958:	431c      	orrs	r4, r3
    995a:	e7d6      	b.n	990a <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    995c:	461a      	mov	r2, r3
    995e:	e7e4      	b.n	992a <SPIClass::beginTransaction(SPISettings)+0xce>
    9960:	400fc000 	.word	0x400fc000
    9964:	200010f8 	.word	0x200010f8
    9968:	007f7fff 	.word	0x007f7fff

0000996c <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    996c:	b508      	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    996e:	4603      	mov	r3, r0
    9970:	f853 0b04 	ldr.w	r0, [r3], #4
    9974:	e893 0006 	ldmia.w	r3, {r1, r2}
    9978:	f7ff ff70 	bl	985c <SPIClass::beginTransaction(SPISettings)>
}
    997c:	bd08      	pop	{r3, pc}
    997e:	bf00      	nop

00009980 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    9980:	b084      	sub	sp, #16
    9982:	f10d 0c10 	add.w	ip, sp, #16
    9986:	e90c 000e 	stmdb	ip, {r1, r2, r3}
    998a:	4602      	mov	r2, r0
  if (spiConfig.spiPort) {
    998c:	b123      	cbz	r3, 9998 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x18>
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    998e:	4618      	mov	r0, r3
    9990:	6013      	str	r3, [r2, #0]
}
    9992:	b004      	add	sp, #16
  m_spi->begin();
    9994:	f000 bb08 	b.w	9fa8 <SPIClass::begin()>
    m_spi = &SPI;
    9998:	4b02      	ldr	r3, [pc, #8]	; (99a4 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x24>)
  m_spi->begin();
    999a:	4618      	mov	r0, r3
    999c:	6013      	str	r3, [r2, #0]
}
    999e:	b004      	add	sp, #16
  m_spi->begin();
    99a0:	f000 bb02 	b.w	9fa8 <SPIClass::begin()>
    99a4:	20001a20 	.word	0x20001a20

000099a8 <SdSpiArduinoDriver::deactivate()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    99a8:	6802      	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
    99aa:	7cd3      	ldrb	r3, [r2, #19]
    99ac:	b313      	cbz	r3, 99f4 <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    99ae:	07d8      	lsls	r0, r3, #31
    99b0:	d504      	bpl.n	99bc <SdSpiArduinoDriver::deactivate()+0x14>
    99b2:	6a90      	ldr	r0, [r2, #40]	; 0x28
    99b4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    99b8:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    99bc:	0799      	lsls	r1, r3, #30
    99be:	d504      	bpl.n	99ca <SdSpiArduinoDriver::deactivate()+0x22>
    99c0:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    99c2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    99c6:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    99ca:	0758      	lsls	r0, r3, #29
    99cc:	d504      	bpl.n	99d8 <SdSpiArduinoDriver::deactivate()+0x30>
    99ce:	6b10      	ldr	r0, [r2, #48]	; 0x30
    99d0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    99d4:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    99d8:	0719      	lsls	r1, r3, #28
    99da:	d504      	bpl.n	99e6 <SdSpiArduinoDriver::deactivate()+0x3e>
    99dc:	6b50      	ldr	r0, [r2, #52]	; 0x34
    99de:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    99e2:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    99e6:	06db      	lsls	r3, r3, #27
    99e8:	d504      	bpl.n	99f4 <SdSpiArduinoDriver::deactivate()+0x4c>
    99ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
    99ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    99f0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    99f4:	4770      	bx	lr
    99f6:	bf00      	nop

000099f8 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    99f8:	6800      	ldr	r0, [r0, #0]
    99fa:	f000 bbf3 	b.w	a1e4 <SPIClass::end()>
    99fe:	bf00      	nop

00009a00 <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    9a00:	6802      	ldr	r2, [r0, #0]
		port().TDR = data;
    9a02:	23ff      	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    9a04:	6812      	ldr	r2, [r2, #0]
		port().TDR = data;
    9a06:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    9a08:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    9a0a:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    9a0e:	d0fb      	beq.n	9a08 <SdSpiArduinoDriver::receive()+0x8>
    9a10:	6f50      	ldr	r0, [r2, #116]	; 0x74
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
}
    9a12:	b2c0      	uxtb	r0, r0
    9a14:	4770      	bx	lr
    9a16:	bf00      	nop

00009a18 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    9a18:	b530      	push	{r4, r5, lr}
    9a1a:	460c      	mov	r4, r1
    9a1c:	b083      	sub	sp, #12
    9a1e:	4605      	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    9a20:	21ff      	movs	r1, #255	; 0xff
    9a22:	4620      	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    9a24:	9201      	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    9a26:	f004 fa31 	bl	de8c <memset>
		transfer(buf, buf, count);
    9a2a:	6828      	ldr	r0, [r5, #0]
    9a2c:	9b01      	ldr	r3, [sp, #4]
    9a2e:	4622      	mov	r2, r4
    9a30:	4621      	mov	r1, r4
    9a32:	f000 fbd3 	bl	a1dc <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    9a36:	2000      	movs	r0, #0
    9a38:	b003      	add	sp, #12
    9a3a:	bd30      	pop	{r4, r5, pc}

00009a3c <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    9a3c:	6803      	ldr	r3, [r0, #0]
    9a3e:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    9a40:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    9a42:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    9a44:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    9a48:	d0fb      	beq.n	9a42 <SdSpiArduinoDriver::send(unsigned char)+0x6>
    9a4a:	6f53      	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
    9a4c:	4770      	bx	lr
    9a4e:	bf00      	nop

00009a50 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    9a50:	1e53      	subs	r3, r2, #1
    9a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    9a56:	b530      	push	{r4, r5, lr}
    9a58:	4614      	mov	r4, r2
    9a5a:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    9a5e:	4605      	mov	r5, r0
  if (0 < count && count <= 512) {
    9a60:	d311      	bcc.n	9a86 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    9a62:	b16a      	cbz	r2, 9a80 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    9a64:	6803      	ldr	r3, [r0, #0]
    9a66:	1e48      	subs	r0, r1, #1
    9a68:	6819      	ldr	r1, [r3, #0]
    9a6a:	1882      	adds	r2, r0, r2
		port().TDR = data;
    9a6c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    9a70:	664b      	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    9a72:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    9a74:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    9a78:	d0fb      	beq.n	9a72 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
    9a7a:	4290      	cmp	r0, r2
    9a7c:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    9a7e:	d1f5      	bne.n	9a6c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    9a80:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    9a84:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    9a86:	4668      	mov	r0, sp
    9a88:	f001 fe52 	bl	b730 <memcpy>
		transfer(buf, buf, count);
    9a8c:	466a      	mov	r2, sp
    9a8e:	4623      	mov	r3, r4
    9a90:	6828      	ldr	r0, [r5, #0]
    9a92:	4611      	mov	r1, r2
    9a94:	f000 fba2 	bl	a1dc <SPIClass::transfer(void const*, void*, unsigned int)>
}
    9a98:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    9a9c:	bd30      	pop	{r4, r5, pc}
    9a9e:	bf00      	nop

00009aa0 <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    9aa0:	b530      	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    9aa2:	7803      	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    9aa4:	b083      	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
    9aa6:	07dc      	lsls	r4, r3, #31
    9aa8:	d51d      	bpl.n	9ae6 <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    9aaa:	4604      	mov	r4, r0
    9aac:	6840      	ldr	r0, [r0, #4]
    9aae:	f104 0210 	add.w	r2, r4, #16
    9ab2:	6803      	ldr	r3, [r0, #0]
    9ab4:	68e1      	ldr	r1, [r4, #12]
    9ab6:	9201      	str	r2, [sp, #4]
    9ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9aba:	4798      	blx	r3
    9abc:	9a01      	ldr	r2, [sp, #4]
    9abe:	4605      	mov	r5, r0
    9ac0:	b1a8      	cbz	r0, 9aee <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    9ac2:	7823      	ldrb	r3, [r4, #0]
    9ac4:	0799      	lsls	r1, r3, #30
    9ac6:	d508      	bpl.n	9ada <FsCache::sync()+0x3a>
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    9ac8:	6860      	ldr	r0, [r4, #4]
      uint32_t sector = m_sector + m_mirrorOffset;
    9aca:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    9ace:	4419      	add	r1, r3
    9ad0:	6803      	ldr	r3, [r0, #0]
    9ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9ad4:	4798      	blx	r3
    9ad6:	b150      	cbz	r0, 9aee <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    9ad8:	7823      	ldrb	r3, [r4, #0]
    9ada:	f023 0301 	bic.w	r3, r3, #1
  }
  return true;

 fail:
  return false;
}
    9ade:	4628      	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
    9ae0:	7023      	strb	r3, [r4, #0]
}
    9ae2:	b003      	add	sp, #12
    9ae4:	bd30      	pop	{r4, r5, pc}
  return true;
    9ae6:	2501      	movs	r5, #1
}
    9ae8:	4628      	mov	r0, r5
    9aea:	b003      	add	sp, #12
    9aec:	bd30      	pop	{r4, r5, pc}
  return false;
    9aee:	2500      	movs	r5, #0
}
    9af0:	4628      	mov	r0, r5
    9af2:	b003      	add	sp, #12
    9af4:	bd30      	pop	{r4, r5, pc}
    9af6:	bf00      	nop

00009af8 <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    9af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    9afa:	6843      	ldr	r3, [r0, #4]
    9afc:	b30b      	cbz	r3, 9b42 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    9afe:	68c3      	ldr	r3, [r0, #12]
    9b00:	4604      	mov	r4, r0
    9b02:	460f      	mov	r7, r1
    9b04:	4615      	mov	r5, r2
    9b06:	428b      	cmp	r3, r1
    9b08:	d106      	bne.n	9b18 <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
    9b0a:	f810 3b10 	ldrb.w	r3, [r0], #16
    9b0e:	f005 0503 	and.w	r5, r5, #3
    9b12:	432b      	orrs	r3, r5
    9b14:	7023      	strb	r3, [r4, #0]
}
    9b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
    9b18:	f7ff ffc2 	bl	9aa0 <FsCache::sync()>
    9b1c:	b188      	cbz	r0, 9b42 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
    9b1e:	076b      	lsls	r3, r5, #29
    9b20:	d505      	bpl.n	9b2e <FsCache::prepare(unsigned long, unsigned char)+0x36>
    9b22:	f104 0610 	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
    9b26:	4630      	mov	r0, r6
    m_sector = sector;
    9b28:	2300      	movs	r3, #0
    9b2a:	60e7      	str	r7, [r4, #12]
    9b2c:	e7ef      	b.n	9b0e <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    9b2e:	6860      	ldr	r0, [r4, #4]
    9b30:	f104 0610 	add.w	r6, r4, #16
    9b34:	4639      	mov	r1, r7
    9b36:	6803      	ldr	r3, [r0, #0]
    9b38:	4632      	mov	r2, r6
    9b3a:	691b      	ldr	r3, [r3, #16]
    9b3c:	4798      	blx	r3
    9b3e:	2800      	cmp	r0, #0
    9b40:	d1f1      	bne.n	9b26 <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
    9b42:	2000      	movs	r0, #0
}
    9b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9b46:	bf00      	nop

00009b48 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)>:
  *ms10 = 0;
    9b48:	f04f 0c00 	mov.w	ip, #0
  FsDateTime::callback2(date, time);
    9b4c:	4b02      	ldr	r3, [pc, #8]	; (9b58 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)+0x10>)
  *ms10 = 0;
    9b4e:	f882 c000 	strb.w	ip, [r2]
  FsDateTime::callback2(date, time);
    9b52:	681b      	ldr	r3, [r3, #0]
    9b54:	4718      	bx	r3
    9b56:	bf00      	nop
    9b58:	200033fc 	.word	0x200033fc

00009b5c <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>:
    callback = dateTimeMs10;
    9b5c:	4a02      	ldr	r2, [pc, #8]	; (9b68 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0xc>)
    9b5e:	4903      	ldr	r1, [pc, #12]	; (9b6c <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x10>)
    callback2 = dateTime;
    9b60:	4b03      	ldr	r3, [pc, #12]	; (9b70 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x14>)
    callback = dateTimeMs10;
    9b62:	6011      	str	r1, [r2, #0]
    callback2 = dateTime;
    9b64:	6018      	str	r0, [r3, #0]
  }
    9b66:	4770      	bx	lr
    9b68:	200033f8 	.word	0x200033f8
    9b6c:	00009b49 	.word	0x00009b49
    9b70:	200033fc 	.word	0x200033fc

00009b74 <FsName::get16()>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
    9b74:	b510      	push	{r4, lr}
    9b76:	4604      	mov	r4, r0
  uint16_t rtn;
  if (ls) {
    9b78:	8980      	ldrh	r0, [r0, #12]
uint16_t FsName::get16() {
    9b7a:	b082      	sub	sp, #8
  if (ls) {
    9b7c:	b118      	cbz	r0, 9b86 <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    9b7e:	2300      	movs	r3, #0
    9b80:	81a3      	strh	r3, [r4, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    9b82:	b002      	add	sp, #8
    9b84:	bd10      	pop	{r4, pc}
  } else if (next >= end) {
    9b86:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    9b8a:	428b      	cmp	r3, r1
    9b8c:	d2f9      	bcs.n	9b82 <FsName::get16()+0xe>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    9b8e:	aa01      	add	r2, sp, #4
    9b90:	4618      	mov	r0, r3
    9b92:	f000 f8b7 	bl	9d04 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    9b96:	b180      	cbz	r0, 9bba <FsName::get16()+0x46>
    if (cp <= 0XFFFF) {
    9b98:	9b01      	ldr	r3, [sp, #4]
    next = ptr;
    9b9a:	6060      	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    9b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    9ba0:	d201      	bcs.n	9ba6 <FsName::get16()+0x32>
      rtn = cp;
    9ba2:	b298      	uxth	r0, r3
    9ba4:	e7ed      	b.n	9b82 <FsName::get16()+0xe>
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    9ba6:	0a98      	lsrs	r0, r3, #10
    return (cp & 0X3FF) + 0XDC00;
    9ba8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    9bac:	f5a0 5021 	sub.w	r0, r0, #10304	; 0x2840
    return (cp & 0X3FF) + 0XDC00;
    9bb0:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    9bb4:	b280      	uxth	r0, r0
      ls = FsUtf::lowSurrogate(cp);
    9bb6:	81a3      	strh	r3, [r4, #12]
    9bb8:	e7e3      	b.n	9b82 <FsName::get16()+0xe>
  return 0XFFFF;
    9bba:	f64f 70ff 	movw	r0, #65535	; 0xffff
    9bbe:	e7e0      	b.n	9b82 <FsName::get16()+0xe>

00009bc0 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>:
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    9bc0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    9bc4:	d821      	bhi.n	9c0a <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4a>
  if (capacityMB <= 16) {
    9bc6:	2910      	cmp	r1, #16
    9bc8:	d82e      	bhi.n	9c28 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x68>
    9bca:	2340      	movs	r3, #64	; 0x40
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    9bcc:	f04f 0c20 	mov.w	ip, #32
  } else if (capacityMB <= 4032) {
    numberOfHeads = 128;
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
    9bd0:	fbb2 f1f3 	udiv	r1, r2, r3
  if (c <= 1023) {
    9bd4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    9bd8:	d220      	bcs.n	9c1c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x5c>
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    9bda:	fb03 2311 	mls	r3, r3, r1, r2
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba) {
    9bde:	b500      	push	{lr}
    s = (lba % sectorsPerTrack) + 1;
    9be0:	fbb2 fefc 	udiv	lr, r2, ip
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    9be4:	fbb3 f3fc 	udiv	r3, r3, ip
    s = (lba % sectorsPerTrack) + 1;
    9be8:	fb0c 221e 	mls	r2, ip, lr, r2
    c = 1023;
    h = 254;
    s = 63;
  }
  chs[0] = h;
  chs[1] = ((c >> 2) & 0XC0) | s;
    9bec:	ea4f 0c91 	mov.w	ip, r1, lsr #2
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    9bf0:	b2db      	uxtb	r3, r3
    s = (lba % sectorsPerTrack) + 1;
    9bf2:	3201      	adds	r2, #1
  chs[1] = ((c >> 2) & 0XC0) | s;
    9bf4:	f02c 0c3f 	bic.w	ip, ip, #63	; 0x3f
  chs[2] = c;
    9bf8:	b2c9      	uxtb	r1, r1
  chs[0] = h;
    9bfa:	7003      	strb	r3, [r0, #0]
  chs[1] = ((c >> 2) & 0XC0) | s;
    9bfc:	ea42 020c 	orr.w	r2, r2, ip
  chs[2] = c;
    9c00:	7081      	strb	r1, [r0, #2]
  chs[1] = ((c >> 2) & 0XC0) | s;
    9c02:	b2d2      	uxtb	r2, r2
    9c04:	7042      	strb	r2, [r0, #1]
}
    9c06:	f85d fb04 	ldr.w	pc, [sp], #4
    9c0a:	233f      	movs	r3, #63	; 0x3f
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    9c0c:	469c      	mov	ip, r3
  } else if (capacityMB <= 128) {
    9c0e:	2980      	cmp	r1, #128	; 0x80
    9c10:	d910      	bls.n	9c34 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x74>
  } else if (capacityMB <= 504) {
    9c12:	f5b1 7ffc 	cmp.w	r1, #504	; 0x1f8
    9c16:	d80f      	bhi.n	9c38 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x78>
  c = lba / (numberOfHeads * sectorsPerTrack);
    9c18:	011b      	lsls	r3, r3, #4
    9c1a:	e7d9      	b.n	9bd0 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    9c1c:	21ff      	movs	r1, #255	; 0xff
    h = 254;
    9c1e:	23fe      	movs	r3, #254	; 0xfe
  chs[1] = ((c >> 2) & 0XC0) | s;
    9c20:	7041      	strb	r1, [r0, #1]
  chs[0] = h;
    9c22:	7003      	strb	r3, [r0, #0]
  chs[2] = c;
    9c24:	7081      	strb	r1, [r0, #2]
    9c26:	4770      	bx	lr
  } else if (capacityMB <= 32) {
    9c28:	2920      	cmp	r1, #32
    9c2a:	d816      	bhi.n	9c5a <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x9a>
    9c2c:	2380      	movs	r3, #128	; 0x80
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    9c2e:	f04f 0c20 	mov.w	ip, #32
    9c32:	e7cd      	b.n	9bd0 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  c = lba / (numberOfHeads * sectorsPerTrack);
    9c34:	00db      	lsls	r3, r3, #3
    9c36:	e7cb      	b.n	9bd0 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  } else if (capacityMB <= 1008) {
    9c38:	f5b1 7f7c 	cmp.w	r1, #1008	; 0x3f0
    9c3c:	d904      	bls.n	9c48 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x88>
  } else if (capacityMB <= 2016) {
    9c3e:	f5b1 6ffc 	cmp.w	r1, #2016	; 0x7e0
    9c42:	d803      	bhi.n	9c4c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x8c>
  c = lba / (numberOfHeads * sectorsPerTrack);
    9c44:	019b      	lsls	r3, r3, #6
    9c46:	e7c3      	b.n	9bd0 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    9c48:	015b      	lsls	r3, r3, #5
    9c4a:	e7c1      	b.n	9bd0 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  } else if (capacityMB <= 4032) {
    9c4c:	f5b1 6f7c 	cmp.w	r1, #4032	; 0xfc0
  c = lba / (numberOfHeads * sectorsPerTrack);
    9c50:	bf94      	ite	ls
    9c52:	01db      	lslls	r3, r3, #7
    9c54:	ebc3 2303 	rsbhi	r3, r3, r3, lsl #8
    9c58:	e7ba      	b.n	9bd0 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    9c5a:	2320      	movs	r3, #32
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    9c5c:	469c      	mov	ip, r3
    9c5e:	e7d6      	b.n	9c0e <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4e>

00009c60 <FsUtf::cpToMb(unsigned long, char*, char*)>:
    if (cp < 0X80) {
    9c60:	287f      	cmp	r0, #127	; 0x7f
    size_t n = end - str;
    9c62:	eba2 0201 	sub.w	r2, r2, r1
    if (cp < 0X80) {
    9c66:	d805      	bhi.n	9c74 <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    9c68:	b112      	cbz	r2, 9c70 <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>
      *(str++) = static_cast<uint8_t>(cp);
    9c6a:	460a      	mov	r2, r1
    9c6c:	f802 0b01 	strb.w	r0, [r2], #1
  }
    9c70:	4610      	mov	r0, r2
    9c72:	4770      	bx	lr
    } else if (cp < 0X800) {
    9c74:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    9c78:	d20f      	bcs.n	9c9a <FsUtf::cpToMb(unsigned long, char*, char*)+0x3a>
      if (n < 2) goto fail;
    9c7a:	2a01      	cmp	r2, #1
    9c7c:	d940      	bls.n	9d00 <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    9c7e:	ea4f 1c90 	mov.w	ip, r0, lsr #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    9c82:	f000 033f 	and.w	r3, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    9c86:	460a      	mov	r2, r1
    9c88:	f06c 003f 	orn	r0, ip, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    9c8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    9c90:	f802 0b02 	strb.w	r0, [r2], #2
  }
    9c94:	4610      	mov	r0, r2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    9c96:	704b      	strb	r3, [r1, #1]
  }
    9c98:	4770      	bx	lr
    } else if (cp < 0X10000) {
    9c9a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    9c9e:	d216      	bcs.n	9cce <FsUtf::cpToMb(unsigned long, char*, char*)+0x6e>
      if (n < 3) goto fail;
    9ca0:	2a02      	cmp	r2, #2
    9ca2:	d92d      	bls.n	9d00 <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    9ca4:	f3c0 1c85 	ubfx	ip, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    9ca8:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    9cac:	1cca      	adds	r2, r1, #3
    9cae:	f063 037f 	orn	r3, r3, #127	; 0x7f
  char* cpToMb(uint32_t cp, char* str, char* end) {
    9cb2:	b500      	push	{lr}
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    9cb4:	ea4f 3e10 	mov.w	lr, r0, lsr #12
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    9cb8:	f06c 007f 	orn	r0, ip, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    9cbc:	708b      	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    9cbe:	f06e 0e1f 	orn	lr, lr, #31
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    9cc2:	7048      	strb	r0, [r1, #1]
  }
    9cc4:	4610      	mov	r0, r2
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    9cc6:	f881 e000 	strb.w	lr, [r1]
  }
    9cca:	f85d fb04 	ldr.w	pc, [sp], #4
       if (n < 4) goto fail;
    9cce:	2a03      	cmp	r2, #3
    9cd0:	d916      	bls.n	9d00 <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    9cd2:	ea4f 4c90 	mov.w	ip, r0, lsr #18
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    9cd6:	f3c0 3205 	ubfx	r2, r0, #12, #6
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    9cda:	f3c0 1385 	ubfx	r3, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    9cde:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    9ce2:	f062 027f 	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    9ce6:	f06c 0c0f 	orn	ip, ip, #15
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    9cea:	f063 037f 	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    9cee:	f060 007f 	orn	r0, r0, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    9cf2:	704a      	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    9cf4:	1d0a      	adds	r2, r1, #4
    9cf6:	70c8      	strb	r0, [r1, #3]
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    9cf8:	f881 c000 	strb.w	ip, [r1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    9cfc:	708b      	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    9cfe:	e7b7      	b.n	9c70 <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>
    return nullptr;
    9d00:	2200      	movs	r2, #0
    9d02:	e7b5      	b.n	9c70 <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>

00009d04 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
    9d04:	4288      	cmp	r0, r1
    9d06:	d23d      	bcs.n	9d84 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>
    9d08:	4603      	mov	r3, r0
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    9d0a:	b410      	push	{r4}
    if ((ch & 0X80) == 0) {
    9d0c:	f990 0000 	ldrsb.w	r0, [r0]
    uint8_t ch = str[0];
    9d10:	781c      	ldrb	r4, [r3, #0]
    if ((ch & 0X80) == 0) {
    9d12:	2800      	cmp	r0, #0
    9d14:	da2d      	bge.n	9d72 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
    if ((ch & 0XE0) == 0XC0) {
    9d16:	f004 00e0 	and.w	r0, r4, #224	; 0xe0
    9d1a:	28c0      	cmp	r0, #192	; 0xc0
    9d1c:	d034      	beq.n	9d88 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>
    } else if ((ch & 0XF0) == 0XE0) {
    9d1e:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
    9d22:	28e0      	cmp	r0, #224	; 0xe0
    9d24:	d034      	beq.n	9d90 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8c>
    } else if ((ch & 0XF8) == 0XF0) {
    9d26:	f004 00f8 	and.w	r0, r4, #248	; 0xf8
    9d2a:	28f0      	cmp	r0, #240	; 0xf0
    9d2c:	d126      	bne.n	9d7c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
      cp = ch & 0X07;
    9d2e:	f004 0407 	and.w	r4, r4, #7
      n = 4;
    9d32:	2004      	movs	r0, #4
    if ((str + n) > end) {
    9d34:	4418      	add	r0, r3
    9d36:	4288      	cmp	r0, r1
    9d38:	d820      	bhi.n	9d7c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    9d3a:	3301      	adds	r3, #1
      ch = str[i];
    9d3c:	f813 1b01 	ldrb.w	r1, [r3], #1
      if ((ch & 0XC0) != 0X80) {
    9d40:	f001 0cc0 	and.w	ip, r1, #192	; 0xc0
      cp |= ch & 0X3F;
    9d44:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if ((ch & 0XC0) != 0X80) {
    9d48:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
      cp |= ch & 0X3F;
    9d4c:	ea41 1484 	orr.w	r4, r1, r4, lsl #6
      if ((ch & 0XC0) != 0X80) {
    9d50:	d114      	bne.n	9d7c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    for (size_t i = 1; i < n; i++) {
    9d52:	4283      	cmp	r3, r0
    9d54:	d1f2      	bne.n	9d3c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    if (cp < 0X80 || !isValidCp(cp)) {
    9d56:	f1a4 0180 	sub.w	r1, r4, #128	; 0x80
    9d5a:	4b0f      	ldr	r3, [pc, #60]	; (9d98 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x94>)
    9d5c:	4299      	cmp	r1, r3
    9d5e:	d80d      	bhi.n	9d7c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    9d60:	f5a4 4358 	sub.w	r3, r4, #55296	; 0xd800
    9d64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    9d68:	d308      	bcc.n	9d7c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    *rtn = cp;
    9d6a:	6014      	str	r4, [r2, #0]
  }
    9d6c:	f85d 4b04 	ldr.w	r4, [sp], #4
    9d70:	4770      	bx	lr
      return str + 1;
    9d72:	1c58      	adds	r0, r3, #1
      *rtn = ch;
    9d74:	6014      	str	r4, [r2, #0]
  }
    9d76:	f85d 4b04 	ldr.w	r4, [sp], #4
    9d7a:	4770      	bx	lr
      return nullptr;
    9d7c:	2000      	movs	r0, #0
  }
    9d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
    9d82:	4770      	bx	lr
      return nullptr;
    9d84:	2000      	movs	r0, #0
  }
    9d86:	4770      	bx	lr
      cp = ch & 0X1F;
    9d88:	f004 041f 	and.w	r4, r4, #31
      n = 2;
    9d8c:	2002      	movs	r0, #2
    9d8e:	e7d1      	b.n	9d34 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
      cp = ch & 0X0F;
    9d90:	f004 040f 	and.w	r4, r4, #15
      n = 3;
    9d94:	2003      	movs	r0, #3
    9d96:	e7cd      	b.n	9d34 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
    9d98:	0010ff7f 	.word	0x0010ff7f

00009d9c <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    9d9c:	287e      	cmp	r0, #126	; 0x7e
    9d9e:	d93e      	bls.n	9e1e <toUpcase(unsigned short)+0x82>
  size_t right = size;
    9da0:	f04f 0c35 	mov.w	ip, #53	; 0x35
  size_t left = 0;
    9da4:	2300      	movs	r3, #0
uint16_t toUpcase(uint16_t chr) {
    9da6:	b430      	push	{r4, r5}
    9da8:	4c28      	ldr	r4, [pc, #160]	; (9e4c <toUpcase(unsigned short)+0xb0>)
    9daa:	e004      	b.n	9db6 <toUpcase(unsigned short)+0x1a>
    if (readTable16(table[mid].key) <= key) {
    9dac:	f834 2021 	ldrh.w	r2, [r4, r1, lsl #2]
    9db0:	4282      	cmp	r2, r0
    9db2:	d820      	bhi.n	9df6 <toUpcase(unsigned short)+0x5a>
    mid = left + (right - left)/2;
    9db4:	460b      	mov	r3, r1
  while (right - left > 1) {
    9db6:	ebac 0203 	sub.w	r2, ip, r3
    9dba:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    9dbc:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    9dc0:	d8f4      	bhi.n	9dac <toUpcase(unsigned short)+0x10>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
    9dc2:	b29b      	uxth	r3, r3
    9dc4:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    9dc8:	4290      	cmp	r0, r2
    9dca:	d216      	bcs.n	9dfa <toUpcase(unsigned short)+0x5e>
    9dcc:	244b      	movs	r4, #75	; 0x4b
    9dce:	2300      	movs	r3, #0
    9dd0:	4d1f      	ldr	r5, [pc, #124]	; (9e50 <toUpcase(unsigned short)+0xb4>)
    9dd2:	e004      	b.n	9dde <toUpcase(unsigned short)+0x42>
    if (readTable16(table[mid].key) <= key) {
    9dd4:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
    9dd8:	4282      	cmp	r2, r0
    9dda:	d81e      	bhi.n	9e1a <toUpcase(unsigned short)+0x7e>
    mid = left + (right - left)/2;
    9ddc:	460b      	mov	r3, r1
  while (right - left > 1) {
    9dde:	1ae2      	subs	r2, r4, r3
    9de0:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    9de2:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    9de6:	d8f5      	bhi.n	9dd4 <toUpcase(unsigned short)+0x38>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
  }
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    9de8:	b29b      	uxth	r3, r3
    9dea:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
    9dee:	4282      	cmp	r2, r0
    9df0:	d01f      	beq.n	9e32 <toUpcase(unsigned short)+0x96>
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    9df2:	bc30      	pop	{r4, r5}
    9df4:	4770      	bx	lr
    mid = left + (right - left)/2;
    9df6:	468c      	mov	ip, r1
    9df8:	e7dd      	b.n	9db6 <toUpcase(unsigned short)+0x1a>
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    9dfa:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    9dfe:	1a82      	subs	r2, r0, r2
    9e00:	78e3      	ldrb	r3, [r4, #3]
    9e02:	429a      	cmp	r2, r3
    9e04:	dae2      	bge.n	9dcc <toUpcase(unsigned short)+0x30>
    int8_t off = readTable8(mapTable[i].off);
    9e06:	f994 3002 	ldrsb.w	r3, [r4, #2]
    if (off == 1) {
    9e0a:	2b01      	cmp	r3, #1
    9e0c:	d016      	beq.n	9e3c <toUpcase(unsigned short)+0xa0>
    return chr + (off ? off : -0x1C60);
    9e0e:	b1d3      	cbz	r3, 9e46 <toUpcase(unsigned short)+0xaa>
    9e10:	b29b      	uxth	r3, r3
    9e12:	4403      	add	r3, r0
}
    9e14:	bc30      	pop	{r4, r5}
    return chr + (off ? off : -0x1C60);
    9e16:	b298      	uxth	r0, r3
}
    9e18:	4770      	bx	lr
    mid = left + (right - left)/2;
    9e1a:	460c      	mov	r4, r1
    9e1c:	e7df      	b.n	9dde <toUpcase(unsigned short)+0x42>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    9e1e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    9e22:	2b19      	cmp	r3, #25
    9e24:	bf8c      	ite	hi
    9e26:	2300      	movhi	r3, #0
    9e28:	2301      	movls	r3, #1
    9e2a:	eba0 1343 	sub.w	r3, r0, r3, lsl #5
    9e2e:	b298      	uxth	r0, r3
}
    9e30:	4770      	bx	lr
    return readTable16(lookupTable[i].val);
    9e32:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    9e36:	8868      	ldrh	r0, [r5, #2]
}
    9e38:	bc30      	pop	{r4, r5}
    9e3a:	4770      	bx	lr
      return chr - ((chr - first) & 1);
    9e3c:	f002 0201 	and.w	r2, r2, #1
    9e40:	1a83      	subs	r3, r0, r2
    9e42:	b298      	uxth	r0, r3
    9e44:	e7d5      	b.n	9df2 <toUpcase(unsigned short)+0x56>
    return chr + (off ? off : -0x1C60);
    9e46:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
    9e4a:	e7e2      	b.n	9e12 <toUpcase(unsigned short)+0x76>
    9e4c:	2000051c 	.word	0x2000051c
    9e50:	20000390 	.word	0x20000390

00009e54 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    9e54:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    9e58:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    9e5a:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    9e5e:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    9e60:	d101      	bne.n	9e66 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    9e62:	6883      	ldr	r3, [r0, #8]
    9e64:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    9e66:	f001 b86d 	b.w	af44 <EventResponder::triggerEventNotImmediate()>
    9e6a:	bf00      	nop

00009e6c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    9e6c:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    9e6e:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    9e70:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    9e74:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    9e76:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    9e78:	b1a3      	cbz	r3, 9ea4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    9e7a:	b321      	cbz	r1, 9ec6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    9e7c:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    9e80:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    9e82:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    9e84:	6f25      	ldr	r5, [r4, #112]	; 0x70
    9e86:	07af      	lsls	r7, r5, #30
    9e88:	d407      	bmi.n	9e9a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    9e8a:	4615      	mov	r5, r2
				count_read--;
    9e8c:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    9e8e:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    9e90:	b11a      	cbz	r2, 9e9a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    9e92:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    9e96:	462a      	mov	r2, r5
    9e98:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    9e9a:	6965      	ldr	r5, [r4, #20]
    9e9c:	07ed      	lsls	r5, r5, #31
    9e9e:	d5f1      	bpl.n	9e84 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    9ea0:	2b00      	cmp	r3, #0
    9ea2:	d1ea      	bne.n	9e7a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    9ea4:	b16e      	cbz	r6, 9ec2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    9ea6:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    9ea8:	6f19      	ldr	r1, [r3, #112]	; 0x70
    9eaa:	0789      	lsls	r1, r1, #30
    9eac:	d4fa      	bmi.n	9ea4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    9eae:	4611      	mov	r1, r2
			count_read--;
    9eb0:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    9eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    9eb4:	2a00      	cmp	r2, #0
    9eb6:	d0f5      	beq.n	9ea4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    9eb8:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    9ebc:	460a      	mov	r2, r1
	while (count_read) {
    9ebe:	2e00      	cmp	r6, #0
    9ec0:	d1f1      	bne.n	9ea6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    9ec2:	bcf0      	pop	{r4, r5, r6, r7}
    9ec4:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    9ec6:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    9eca:	e7d9      	b.n	9e80 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

00009ecc <_spi_dma_rxISR0()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    9ecc:	4b32      	ldr	r3, [pc, #200]	; (9f98 <_spi_dma_rxISR0()+0xcc>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    9ece:	4933      	ldr	r1, [pc, #204]	; (9f9c <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    9ed0:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    9ed2:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    9ed6:	7920      	ldrb	r0, [r4, #4]
    9ed8:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    9eda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    9edc:	f895 c004 	ldrb.w	ip, [r5, #4]
    9ee0:	f881 c01c 	strb.w	ip, [r1, #28]
    9ee4:	7708      	strb	r0, [r1, #28]
    9ee6:	b152      	cbz	r2, 9efe <_spi_dma_rxISR0()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    9ee8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    9eec:	d323      	bcc.n	9f36 <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    9eee:	492c      	ldr	r1, [pc, #176]	; (9fa0 <_spi_dma_rxISR0()+0xd4>)
    9ef0:	4411      	add	r1, r2
		DMA_SERQ = channel;
    9ef2:	4a2a      	ldr	r2, [pc, #168]	; (9f9c <_spi_dma_rxISR0()+0xd0>)
    9ef4:	6419      	str	r1, [r3, #64]	; 0x40
    9ef6:	76d0      	strb	r0, [r2, #27]
    9ef8:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    9efc:	bd30      	pop	{r4, r5, pc}
    9efe:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    9f00:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    9f02:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    9f04:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    9f06:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    9f0a:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    9f0c:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    9f0e:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    9f12:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    9f14:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    9f16:	6804      	ldr	r4, [r0, #0]
    9f18:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    9f1a:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    9f1e:	4b21      	ldr	r3, [pc, #132]	; (9fa4 <_spi_dma_rxISR0()+0xd8>)
    9f20:	429c      	cmp	r4, r3
    9f22:	d126      	bne.n	9f72 <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    9f24:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    9f26:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    9f28:	2b02      	cmp	r3, #2
		_data = data;
    9f2a:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    9f2c:	d126      	bne.n	9f7c <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    9f2e:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    9f30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    9f34:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    9f36:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    9f38:	8be9      	ldrh	r1, [r5, #30]
    9f3a:	0409      	lsls	r1, r1, #16
    9f3c:	d422      	bmi.n	9f84 <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    9f3e:	b292      	uxth	r2, r2
    9f40:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    9f42:	6821      	ldr	r1, [r4, #0]
    9f44:	8bec      	ldrh	r4, [r5, #30]
    9f46:	b2a4      	uxth	r4, r4
    9f48:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    9f4a:	8bcc      	ldrh	r4, [r1, #30]
    9f4c:	0424      	lsls	r4, r4, #16
    9f4e:	d505      	bpl.n	9f5c <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    9f50:	8bcc      	ldrh	r4, [r1, #30]
    9f52:	f3c2 0208 	ubfx	r2, r2, #0, #9
    9f56:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    9f5a:	4322      	orrs	r2, r4
    9f5c:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    9f5e:	8bca      	ldrh	r2, [r1, #30]
    9f60:	b292      	uxth	r2, r2
    9f62:	82ca      	strh	r2, [r1, #22]
    9f64:	2100      	movs	r1, #0
    9f66:	4a0d      	ldr	r2, [pc, #52]	; (9f9c <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    9f68:	6419      	str	r1, [r3, #64]	; 0x40
    9f6a:	76d0      	strb	r0, [r2, #27]
    9f6c:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    9f70:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    9f72:	4623      	mov	r3, r4
    9f74:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    9f76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    9f7a:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    9f7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    9f80:	f000 bfe0 	b.w	af44 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    9f84:	8be9      	ldrh	r1, [r5, #30]
    9f86:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    9f8a:	b292      	uxth	r2, r2
    9f8c:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    9f90:	ea41 010e 	orr.w	r1, r1, lr
    9f94:	83e9      	strh	r1, [r5, #30]
    9f96:	e7d4      	b.n	9f42 <_spi_dma_rxISR0()+0x76>
    9f98:	20001a20 	.word	0x20001a20
    9f9c:	400e8000 	.word	0x400e8000
    9fa0:	ffff8001 	.word	0xffff8001
    9fa4:	00009e55 	.word	0x00009e55

00009fa8 <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    9fa8:	6843      	ldr	r3, [r0, #4]
{
    9faa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    9fae:	e9d3 4100 	ldrd	r4, r1, [r3]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    9fb2:	4d81      	ldr	r5, [pc, #516]	; (a1b8 <SPIClass::begin()+0x210>)
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    9fb4:	f04f 0ab8 	mov.w	sl, #184	; 0xb8
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    9fb8:	6822      	ldr	r2, [r4, #0]
	port().CR = LPSPI_CR_RST;
    9fba:	f04f 0802 	mov.w	r8, #2
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    9fbe:	ea22 0201 	bic.w	r2, r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    9fc2:	497e      	ldr	r1, [pc, #504]	; (a1bc <SPIClass::begin()+0x214>)
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    9fc4:	6022      	str	r2, [r4, #0]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    9fc6:	69aa      	ldr	r2, [r5, #24]
    9fc8:	4011      	ands	r1, r2
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    9fca:	4a7d      	ldr	r2, [pc, #500]	; (a1c0 <SPIClass::begin()+0x218>)
    9fcc:	430a      	orrs	r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    9fce:	61aa      	str	r2, [r5, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    9fd0:	f890 e010 	ldrb.w	lr, [r0, #16]
    9fd4:	4a7b      	ldr	r2, [pc, #492]	; (a1c4 <SPIClass::begin()+0x21c>)
    9fd6:	eb03 060e 	add.w	r6, r3, lr
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    9fda:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    9fde:	7c31      	ldrb	r1, [r6, #16]
    9fe0:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    9fe4:	6889      	ldr	r1, [r1, #8]
    9fe6:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    9fea:	f890 c011 	ldrb.w	ip, [r0, #17]
    9fee:	eb03 050c 	add.w	r5, r3, ip
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    9ff2:	f10c 0c0a 	add.w	ip, ip, #10
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    9ff6:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
    9ffa:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    9ffe:	6889      	ldr	r1, [r1, #8]
    a000:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    a004:	7c81      	ldrb	r1, [r0, #18]
    a006:	eb03 0901 	add.w	r9, r3, r1
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    a00a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    a00e:	f899 b038 	ldrb.w	fp, [r9, #56]	; 0x38
    a012:	eb02 1b0b 	add.w	fp, r2, fp, lsl #4
    a016:	f8db b008 	ldr.w	fp, [fp, #8]
    a01a:	f8cb a000 	str.w	sl, [fp]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    a01e:	f8d4 a000 	ldr.w	sl, [r4]
    a022:	685f      	ldr	r7, [r3, #4]
    a024:	ea4a 0a07 	orr.w	sl, sl, r7
    a028:	f8c4 a000 	str.w	sl, [r4]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    a02c:	7c34      	ldrb	r4, [r6, #16]
    a02e:	f8de e014 	ldr.w	lr, [lr, #20]
    a032:	eb02 1404 	add.w	r4, r2, r4, lsl #4
    a036:	6864      	ldr	r4, [r4, #4]
    a038:	f8c4 e000 	str.w	lr, [r4]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    a03c:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    a040:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
    a044:	eb02 1404 	add.w	r4, r2, r4, lsl #4
    a048:	6864      	ldr	r4, [r4, #4]
    a04a:	f8c4 c000 	str.w	ip, [r4]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    a04e:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    a050:	f899 4038 	ldrb.w	r4, [r9, #56]	; 0x38
    a054:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    a058:	6852      	ldr	r2, [r2, #4]
    a05a:	6011      	str	r1, [r2, #0]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    a05c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    a05e:	f899 1044 	ldrb.w	r1, [r9, #68]	; 0x44
    a062:	6011      	str	r1, [r2, #0]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    a064:	6a1a      	ldr	r2, [r3, #32]
    a066:	7f31      	ldrb	r1, [r6, #28]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    a068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    a06a:	6011      	str	r1, [r2, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    a06c:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    a070:	601a      	str	r2, [r3, #0]
	port().FCR = LPSPI_FCR_TXWATER(15);
    a072:	220f      	movs	r2, #15
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a074:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RST;
    a076:	f8c3 8010 	str.w	r8, [r3, #16]
	port().FCR = LPSPI_FCR_TXWATER(15);
    a07a:	659a      	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
    a07c:	7cc2      	ldrb	r2, [r0, #19]
    a07e:	2a00      	cmp	r2, #0
    a080:	d031      	beq.n	a0e6 <SPIClass::begin()+0x13e>
			__disable_irq();
    a082:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    a084:	7cc3      	ldrb	r3, [r0, #19]
    a086:	07dc      	lsls	r4, r3, #31
    a088:	d508      	bpl.n	a09c <SPIClass::begin()+0xf4>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    a08a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    a08e:	6944      	ldr	r4, [r0, #20]
    a090:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    a094:	4022      	ands	r2, r4
    a096:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    a098:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    a09c:	0799      	lsls	r1, r3, #30
    a09e:	d508      	bpl.n	a0b2 <SPIClass::begin()+0x10a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    a0a0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    a0a4:	6984      	ldr	r4, [r0, #24]
    a0a6:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    a0aa:	4022      	ands	r2, r4
    a0ac:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    a0ae:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    a0b2:	075a      	lsls	r2, r3, #29
    a0b4:	d508      	bpl.n	a0c8 <SPIClass::begin()+0x120>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    a0b6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    a0ba:	69c4      	ldr	r4, [r0, #28]
    a0bc:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    a0c0:	4022      	ands	r2, r4
    a0c2:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    a0c4:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    a0c8:	071f      	lsls	r7, r3, #28
    a0ca:	d508      	bpl.n	a0de <SPIClass::begin()+0x136>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    a0cc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    a0d0:	6a04      	ldr	r4, [r0, #32]
    a0d2:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    a0d6:	4022      	ands	r2, r4
    a0d8:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    a0da:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    a0de:	06de      	lsls	r6, r3, #27
    a0e0:	d455      	bmi.n	a18e <SPIClass::begin()+0x1e6>
			__enable_irq();
    a0e2:	b662      	cpsie	i
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a0e4:	6803      	ldr	r3, [r0, #0]
		if (settings.clock() != _clock) {
    a0e6:	4c38      	ldr	r4, [pc, #224]	; (a1c8 <SPIClass::begin()+0x220>)
    a0e8:	6882      	ldr	r2, [r0, #8]
    a0ea:	42a2      	cmp	r2, r4
    a0ec:	d059      	beq.n	a1a2 <SPIClass::begin()+0x1fa>
			uint32_t cbcmr = CCM_CBCMR;
    a0ee:	4a32      	ldr	r2, [pc, #200]	; (a1b8 <SPIClass::begin()+0x210>)
		    _clock = settings.clock();
    a0f0:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    a0f2:	6992      	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    a0f4:	4935      	ldr	r1, [pc, #212]	; (a1cc <SPIClass::begin()+0x224>)
    a0f6:	f3c2 1601 	ubfx	r6, r2, #4, #2
    a0fa:	f3c2 6282 	ubfx	r2, r2, #26, #3
			if (d && clkhz/d > _clock) d++;
    a0fe:	4d34      	ldr	r5, [pc, #208]	; (a1d0 <SPIClass::begin()+0x228>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    a100:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
    a104:	3201      	adds	r2, #1
    a106:	fbb1 f2f2 	udiv	r2, r1, r2
			if (d && clkhz/d > _clock) d++;
    a10a:	42aa      	cmp	r2, r5
    a10c:	d831      	bhi.n	a172 <SPIClass::begin()+0x1ca>
    a10e:	2200      	movs	r2, #0
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    a110:	60c2      	str	r2, [r0, #12]
		port().CR = 0;
    a112:	2400      	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    a114:	2103      	movs	r1, #3
		port().CR = 0;
    a116:	611c      	str	r4, [r3, #16]
		port().TCR = settings.tcr;
    a118:	2407      	movs	r4, #7
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    a11a:	6259      	str	r1, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    a11c:	2101      	movs	r1, #1
		port().CCR = _ccr;
    a11e:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    a120:	661c      	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    a122:	6119      	str	r1, [r3, #16]
		if (interruptMasksUsed) {
    a124:	7cc3      	ldrb	r3, [r0, #19]
    a126:	b313      	cbz	r3, a16e <SPIClass::begin()+0x1c6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    a128:	07dd      	lsls	r5, r3, #31
    a12a:	d504      	bpl.n	a136 <SPIClass::begin()+0x18e>
    a12c:	6a81      	ldr	r1, [r0, #40]	; 0x28
    a12e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    a132:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    a136:	079c      	lsls	r4, r3, #30
    a138:	d504      	bpl.n	a144 <SPIClass::begin()+0x19c>
    a13a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    a13c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    a140:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    a144:	0759      	lsls	r1, r3, #29
    a146:	d504      	bpl.n	a152 <SPIClass::begin()+0x1aa>
    a148:	6b01      	ldr	r1, [r0, #48]	; 0x30
    a14a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    a14e:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    a152:	071a      	lsls	r2, r3, #28
    a154:	d504      	bpl.n	a160 <SPIClass::begin()+0x1b8>
    a156:	6b41      	ldr	r1, [r0, #52]	; 0x34
    a158:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    a15c:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    a160:	06db      	lsls	r3, r3, #27
    a162:	d504      	bpl.n	a16e <SPIClass::begin()+0x1c6>
    a164:	6b82      	ldr	r2, [r0, #56]	; 0x38
    a166:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a16a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    a16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			d = _clock ? clkhz/_clock : clkhz;
    a172:	4918      	ldr	r1, [pc, #96]	; (a1d4 <SPIClass::begin()+0x22c>)
    a174:	fba1 5102 	umull	r5, r1, r1, r2
    a178:	0d09      	lsrs	r1, r1, #20
			if (d && clkhz/d > _clock) d++;
    a17a:	fbb2 f2f1 	udiv	r2, r2, r1
    a17e:	42a2      	cmp	r2, r4
    a180:	bf88      	it	hi
    a182:	3101      	addhi	r1, #1
			if (d > 257) d= 257;  // max div
    a184:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    a188:	d30d      	bcc.n	a1a6 <SPIClass::begin()+0x1fe>
    a18a:	4a13      	ldr	r2, [pc, #76]	; (a1d8 <SPIClass::begin()+0x230>)
				div = d-2;
    a18c:	e7c0      	b.n	a110 <SPIClass::begin()+0x168>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    a18e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    a192:	6a41      	ldr	r1, [r0, #36]	; 0x24
    a194:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    a198:	400b      	ands	r3, r1
    a19a:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    a19c:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    a1a0:	e79f      	b.n	a0e2 <SPIClass::begin()+0x13a>
		port().CCR = _ccr;
    a1a2:	68c2      	ldr	r2, [r0, #12]
    a1a4:	e7b5      	b.n	a112 <SPIClass::begin()+0x16a>
			if (d > 2) {
    a1a6:	2902      	cmp	r1, #2
    a1a8:	d9b1      	bls.n	a10e <SPIClass::begin()+0x166>
				div = d-2;
    a1aa:	3902      	subs	r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    a1ac:	084c      	lsrs	r4, r1, #1
    a1ae:	0222      	lsls	r2, r4, #8
    a1b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    a1b4:	430a      	orrs	r2, r1
    a1b6:	e7ab      	b.n	a110 <SPIClass::begin()+0x168>
    a1b8:	400fc000 	.word	0x400fc000
    a1bc:	e3ffffcf 	.word	0xe3ffffcf
    a1c0:	08000010 	.word	0x08000010
    a1c4:	2000138c 	.word	0x2000138c
    a1c8:	003d0900 	.word	0x003d0900
    a1cc:	200010f8 	.word	0x200010f8
    a1d0:	003d08ff 	.word	0x003d08ff
    a1d4:	431bde83 	.word	0x431bde83
    a1d8:	007f7fff 	.word	0x007f7fff

0000a1dc <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    a1dc:	b10b      	cbz	r3, a1e2 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    a1de:	f7ff be45 	b.w	9e6c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    a1e2:	4770      	bx	lr

0000a1e4 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    a1e4:	6843      	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    a1e6:	e9d3 1200 	ldrd	r1, r2, [r3]
    a1ea:	6809      	ldr	r1, [r1, #0]
    a1ec:	4211      	tst	r1, r2
    a1ee:	d100      	bne.n	a1f2 <SPIClass::end()+0xe>
    a1f0:	4770      	bx	lr
void SPIClass::end() {
    a1f2:	b510      	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a1f4:	6802      	ldr	r2, [r0, #0]
    a1f6:	4604      	mov	r4, r0
		port().CR = 0;  // turn off the enable
    a1f8:	2000      	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    a1fa:	2105      	movs	r1, #5
		port().CR = 0;  // turn off the enable
    a1fc:	6110      	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    a1fe:	7c22      	ldrb	r2, [r4, #16]
    a200:	4413      	add	r3, r2
    a202:	7c18      	ldrb	r0, [r3, #16]
    a204:	f001 fa54 	bl	b6b0 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    a208:	7c62      	ldrb	r2, [r4, #17]
    a20a:	6863      	ldr	r3, [r4, #4]
    a20c:	2105      	movs	r1, #5
    a20e:	4413      	add	r3, r2
    a210:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    a214:	f001 fa4c 	bl	b6b0 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    a218:	6863      	ldr	r3, [r4, #4]
    a21a:	7ca2      	ldrb	r2, [r4, #18]
    a21c:	2105      	movs	r1, #5
    a21e:	4413      	add	r3, r2
}
    a220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    a224:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    a228:	f001 ba42 	b.w	b6b0 <pinMode>

0000a22c <I2CDriverWire::available()>:
    size_t write(const uint8_t* data, size_t length) override;

    uint8_t requestFrom(int address, int quantity, int stop = true);

    inline int available() override {
        return (int)(rx_bytes_available - rx_next_byte_to_read);
    a22c:	e9d0 201b 	ldrd	r2, r0, [r0, #108]	; 0x6c
    }
    a230:	1a10      	subs	r0, r2, r0
    a232:	4770      	bx	lr

0000a234 <I2CDriverWire::write(unsigned char)>:
    finish();
    return toWireResult(master.error());
}

size_t I2CDriverWire::write(uint8_t data) {
    if (tx_next_byte_to_write < tx_buffer_length) {
    a234:	6c82      	ldr	r2, [r0, #72]	; 0x48
    a236:	2a1f      	cmp	r2, #31
    a238:	d901      	bls.n	a23e <I2CDriverWire::write(unsigned char)+0xa>
        tx_buffer[tx_next_byte_to_write++] = data;
        return 1;
    }
    return 0;
    a23a:	2000      	movs	r0, #0
}
    a23c:	4770      	bx	lr
size_t I2CDriverWire::write(uint8_t data) {
    a23e:	b410      	push	{r4}
    a240:	4603      	mov	r3, r0
        tx_buffer[tx_next_byte_to_write++] = data;
    a242:	1c54      	adds	r4, r2, #1
    a244:	4402      	add	r2, r0
        return 1;
    a246:	2001      	movs	r0, #1
        tx_buffer[tx_next_byte_to_write++] = data;
    a248:	649c      	str	r4, [r3, #72]	; 0x48
    a24a:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
}
    a24e:	f85d 4b04 	ldr.w	r4, [sp], #4
    a252:	4770      	bx	lr

0000a254 <I2CDriverWire::read()>:
    rx_bytes_available = master.get_bytes_transferred();
    return rx_bytes_available;
}

int I2CDriverWire::read() {
    if (rx_next_byte_to_read < rx_bytes_available) {
    a254:	e9d0 231b 	ldrd	r2, r3, [r0, #108]	; 0x6c
    a258:	4293      	cmp	r3, r2
    a25a:	d205      	bcs.n	a268 <I2CDriverWire::read()+0x14>
        return rxBuffer[rx_next_byte_to_read++];
    a25c:	1c5a      	adds	r2, r3, #1
    a25e:	4403      	add	r3, r0
    a260:	6702      	str	r2, [r0, #112]	; 0x70
    a262:	f893 004c 	ldrb.w	r0, [r3, #76]	; 0x4c
    a266:	4770      	bx	lr
    }
    return no_more_bytes;
    a268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    a26c:	4770      	bx	lr
    a26e:	bf00      	nop

0000a270 <I2CDriverWire::peek()>:

int I2CDriverWire::peek() {
    if (rx_next_byte_to_read < rx_bytes_available) {
    a270:	e9d0 231b 	ldrd	r2, r3, [r0, #108]	; 0x6c
    a274:	4293      	cmp	r3, r2
    a276:	d203      	bcs.n	a280 <I2CDriverWire::peek()+0x10>
        return rxBuffer[rx_next_byte_to_read];
    a278:	4418      	add	r0, r3
    a27a:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
    a27e:	4770      	bx	lr
    }
    return no_more_bytes;
    a280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    a284:	4770      	bx	lr
    a286:	bf00      	nop

0000a288 <I2CDriverWire::write(unsigned char const*, unsigned int)>:
size_t I2CDriverWire::write(const uint8_t* data, size_t length) {
    a288:	b538      	push	{r3, r4, r5, lr}
    size_t avail = tx_buffer_length - tx_next_byte_to_write;
    a28a:	6c83      	ldr	r3, [r0, #72]	; 0x48
size_t I2CDriverWire::write(const uint8_t* data, size_t length) {
    a28c:	4604      	mov	r4, r0
    size_t avail = tx_buffer_length - tx_next_byte_to_write;
    a28e:	f1c3 0020 	rsb	r0, r3, #32
    if (avail >= length) {
    a292:	4290      	cmp	r0, r2
    a294:	d201      	bcs.n	a29a <I2CDriverWire::write(unsigned char const*, unsigned int)+0x12>
    return 0;
    a296:	2000      	movs	r0, #0
}
    a298:	bd38      	pop	{r3, r4, r5, pc}
        uint8_t* dest = tx_buffer + tx_next_byte_to_write;
    a29a:	f104 0025 	add.w	r0, r4, #37	; 0x25
    a29e:	4615      	mov	r5, r2
        memcpy(dest, data, length);
    a2a0:	4418      	add	r0, r3
    a2a2:	f001 fa45 	bl	b730 <memcpy>
        tx_next_byte_to_write += length;
    a2a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        return length;
    a2a8:	4628      	mov	r0, r5
        tx_next_byte_to_write += length;
    a2aa:	442b      	add	r3, r5
    a2ac:	64a3      	str	r3, [r4, #72]	; 0x48
}
    a2ae:	bd38      	pop	{r3, r4, r5, pc}

0000a2b0 <I2CDriverWire::I2CDriverWire(I2CMaster&, I2CSlave&)>:
I2CDriverWire::I2CDriverWire(I2CMaster& master, I2CSlave& slave)
    a2b0:	b570      	push	{r4, r5, r6, lr}
    a2b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    a2b6:	2500      	movs	r5, #0
        : Stream(), master(master), slave(slave) {
    a2b8:	2620      	movs	r6, #32
    a2ba:	6101      	str	r1, [r0, #16]
    a2bc:	490f      	ldr	r1, [pc, #60]	; (a2fc <I2CDriverWire::I2CDriverWire(I2CMaster&, I2CSlave&)+0x4c>)
I2CDriverWire::I2CDriverWire(I2CMaster& master, I2CSlave& slave)
    a2be:	4604      	mov	r4, r0
    a2c0:	7305      	strb	r5, [r0, #12]
        : Stream(), master(master), slave(slave) {
    a2c2:	6181      	str	r1, [r0, #24]
    a2c4:	4629      	mov	r1, r5
    a2c6:	6142      	str	r2, [r0, #20]
    a2c8:	4632      	mov	r2, r6
    a2ca:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
    a2ce:	e9c0 5301 	strd	r5, r3, [r0, #4]
    a2d2:	4b0b      	ldr	r3, [pc, #44]	; (a300 <I2CDriverWire::I2CDriverWire(I2CMaster&, I2CSlave&)+0x50>)
    a2d4:	e9c0 5507 	strd	r5, r5, [r0, #28]
    a2d8:	6003      	str	r3, [r0, #0]
    a2da:	3025      	adds	r0, #37	; 0x25
    a2dc:	f003 fdd6 	bl	de8c <memset>
    a2e0:	4632      	mov	r2, r6
    a2e2:	4629      	mov	r1, r5
    a2e4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    a2e8:	64a5      	str	r5, [r4, #72]	; 0x48
    a2ea:	f003 fdcf 	bl	de8c <memset>
    a2ee:	23ff      	movs	r3, #255	; 0xff
}
    a2f0:	4620      	mov	r0, r4
        : Stream(), master(master), slave(slave) {
    a2f2:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
    a2f6:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
}
    a2fa:	bd70      	pop	{r4, r5, r6, pc}
    a2fc:	000186a0 	.word	0x000186a0
    a300:	20000e50 	.word	0x20000e50

0000a304 <_GLOBAL__sub_I__ZN13I2CDriverWireC2ER9I2CMasterR8I2CSlave>:
    }
}

I2CDriverWire Wire(Master, Slave);
I2CDriverWire Wire1(Master1, Slave1);
I2CDriverWire Wire2(Master2, Slave2);
    a304:	b508      	push	{r3, lr}
I2CDriverWire Wire(Master, Slave);
    a306:	4a08      	ldr	r2, [pc, #32]	; (a328 <_GLOBAL__sub_I__ZN13I2CDriverWireC2ER9I2CMasterR8I2CSlave+0x24>)
    a308:	4908      	ldr	r1, [pc, #32]	; (a32c <_GLOBAL__sub_I__ZN13I2CDriverWireC2ER9I2CMasterR8I2CSlave+0x28>)
    a30a:	4809      	ldr	r0, [pc, #36]	; (a330 <_GLOBAL__sub_I__ZN13I2CDriverWireC2ER9I2CMasterR8I2CSlave+0x2c>)
    a30c:	f7ff ffd0 	bl	a2b0 <I2CDriverWire::I2CDriverWire(I2CMaster&, I2CSlave&)>
I2CDriverWire Wire1(Master1, Slave1);
    a310:	4a08      	ldr	r2, [pc, #32]	; (a334 <_GLOBAL__sub_I__ZN13I2CDriverWireC2ER9I2CMasterR8I2CSlave+0x30>)
    a312:	4909      	ldr	r1, [pc, #36]	; (a338 <_GLOBAL__sub_I__ZN13I2CDriverWireC2ER9I2CMasterR8I2CSlave+0x34>)
    a314:	4809      	ldr	r0, [pc, #36]	; (a33c <_GLOBAL__sub_I__ZN13I2CDriverWireC2ER9I2CMasterR8I2CSlave+0x38>)
    a316:	f7ff ffcb 	bl	a2b0 <I2CDriverWire::I2CDriverWire(I2CMaster&, I2CSlave&)>
I2CDriverWire Wire2(Master2, Slave2);
    a31a:	4a09      	ldr	r2, [pc, #36]	; (a340 <_GLOBAL__sub_I__ZN13I2CDriverWireC2ER9I2CMasterR8I2CSlave+0x3c>)
    a31c:	4909      	ldr	r1, [pc, #36]	; (a344 <_GLOBAL__sub_I__ZN13I2CDriverWireC2ER9I2CMasterR8I2CSlave+0x40>)
    a31e:	480a      	ldr	r0, [pc, #40]	; (a348 <_GLOBAL__sub_I__ZN13I2CDriverWireC2ER9I2CMasterR8I2CSlave+0x44>)
    a320:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    a324:	f7ff bfc4 	b.w	a2b0 <I2CDriverWire::I2CDriverWire(I2CMaster&, I2CSlave&)>
    a328:	20003018 	.word	0x20003018
    a32c:	20002aa8 	.word	0x20002aa8
    a330:	20003168 	.word	0x20003168
    a334:	20003088 	.word	0x20003088
    a338:	20002adc 	.word	0x20002adc
    a33c:	200031e0 	.word	0x200031e0
    a340:	200030f8 	.word	0x200030f8
    a344:	20002b10 	.word	0x20002b10
    a348:	20003258 	.word	0x20003258

0000a34c <IMX_RT1060_I2CMaster::get_bytes_transferred()>:
            return true;
        }
    }

    inline size_t get_bytes_transferred() {
        return next_index;
    a34c:	6a00      	ldr	r0, [r0, #32]
        (state >= State::idle && !(port->MSR & LPI2C_MSR_MBF));
}

size_t IMX_RT1060_I2CMaster::get_bytes_transferred() {
    return buff.get_bytes_transferred();
}
    a34e:	4770      	bx	lr

0000a350 <IMX_RT1060_I2CSlave::set_transmit_buffer(unsigned char const*, unsigned int)>:
        next_index = 0;
    a350:	2300      	movs	r3, #0
        buffer = new_buffer;
    a352:	62c1      	str	r1, [r0, #44]	; 0x2c
        next_index = 0;
    a354:	6343      	str	r3, [r0, #52]	; 0x34
        size = new_size;
    a356:	6302      	str	r2, [r0, #48]	; 0x30
    after_transmit_callback = callback;
}

inline void IMX_RT1060_I2CSlave::set_transmit_buffer(const uint8_t* buffer, size_t size) {
    tx_buffer.initialise(const_cast<uint8_t*>(buffer), size);
}
    a358:	4770      	bx	lr
    a35a:	bf00      	nop

0000a35c <IMX_RT1060_I2CSlave::set_receive_buffer(unsigned char*, unsigned int)>:
        next_index = 0;
    a35c:	2300      	movs	r3, #0
        buffer = new_buffer;
    a35e:	6201      	str	r1, [r0, #32]
        next_index = 0;
    a360:	6283      	str	r3, [r0, #40]	; 0x28
        size = new_size;
    a362:	6242      	str	r2, [r0, #36]	; 0x24

inline void IMX_RT1060_I2CSlave::set_receive_buffer(uint8_t* buffer, size_t size) {
    rx_buffer.initialise(buffer, size);
}
    a364:	4770      	bx	lr
    a366:	bf00      	nop

0000a368 <IMX_RT1060_I2CMaster::finished()>:
    return state == State::transfer_complete ||
    a368:	6a43      	ldr	r3, [r0, #36]	; 0x24
    a36a:	2b65      	cmp	r3, #101	; 0x65
    a36c:	d00b      	beq.n	a386 <IMX_RT1060_I2CMaster::finished()+0x1e>
        (state >= State::idle && !(port->MSR & LPI2C_MSR_MBF));
    a36e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    return state == State::transfer_complete ||
    a370:	2b63      	cmp	r3, #99	; 0x63
    a372:	dd06      	ble.n	a382 <IMX_RT1060_I2CMaster::finished()+0x1a>
        (state >= State::idle && !(port->MSR & LPI2C_MSR_MBF));
    a374:	6903      	ldr	r3, [r0, #16]
    a376:	6958      	ldr	r0, [r3, #20]
    a378:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
    a37c:	f3c0 6000 	ubfx	r0, r0, #24, #1
    a380:	4770      	bx	lr
    return state == State::transfer_complete ||
    a382:	2000      	movs	r0, #0
}
    a384:	4770      	bx	lr
    return state == State::transfer_complete ||
    a386:	2001      	movs	r0, #1
    a388:	4770      	bx	lr
    a38a:	bf00      	nop

0000a38c <IMX_RT1060_I2CSlave::after_transmit(std::function<void (unsigned short)>)>:
inline void IMX_RT1060_I2CSlave::after_transmit(std::function<void(uint16_t address)> callback) {
    a38c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a38e:	b087      	sub	sp, #28
       *
       *  The newly-created %function contains a copy of the target of
       *  `__x` (if it has one).
       */
      function(const function& __x)
      : _Function_base()
    a390:	2300      	movs	r3, #0
    bool _M_empty() const { return !_M_manager; }
    a392:	688f      	ldr	r7, [r1, #8]
    a394:	4605      	mov	r5, r0
      : _Function_base()
    a396:	ac02      	add	r4, sp, #8
    a398:	9302      	str	r3, [sp, #8]
    a39a:	9305      	str	r3, [sp, #20]
    a39c:	e9c4 3301 	strd	r3, r3, [r4, #4]
      {
	if (static_cast<bool>(__x))
    a3a0:	b317      	cbz	r7, a3e8 <IMX_RT1060_I2CSlave::after_transmit(std::function<void (unsigned short)>)+0x5c>
    a3a2:	460e      	mov	r6, r1
	  {
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    a3a4:	2202      	movs	r2, #2
    a3a6:	4620      	mov	r0, r4
    a3a8:	47b8      	blx	r7
	    _M_invoker = __x._M_invoker;
	    _M_manager = __x._M_manager;
    a3aa:	e9d6 7c02 	ldrd	r7, ip, [r6, #8]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    a3ae:	e894 0003 	ldmia.w	r4, {r0, r1}
    a3b2:	466a      	mov	r2, sp
      __a = _GLIBCXX_MOVE(__b);
    a3b4:	f105 0360 	add.w	r3, r5, #96	; 0x60
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    a3b8:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    a3bc:	e893 0003 	ldmia.w	r3, {r0, r1}
    a3c0:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    a3c4:	e892 0003 	ldmia.w	r2, {r0, r1}
    a3c8:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    a3cc:	6eab      	ldr	r3, [r5, #104]	; 0x68
    a3ce:	6eea      	ldr	r2, [r5, #108]	; 0x6c
      __b = _GLIBCXX_MOVE(__tmp);
    a3d0:	66af      	str	r7, [r5, #104]	; 0x68
      __a = _GLIBCXX_MOVE(__b);
    a3d2:	9304      	str	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
    a3d4:	f8c5 c06c 	str.w	ip, [r5, #108]	; 0x6c
      __a = _GLIBCXX_MOVE(__b);
    a3d8:	9205      	str	r2, [sp, #20]
      if (_M_manager)
    a3da:	b11b      	cbz	r3, a3e4 <IMX_RT1060_I2CSlave::after_transmit(std::function<void (unsigned short)>)+0x58>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    a3dc:	2203      	movs	r2, #3
    a3de:	4621      	mov	r1, r4
    a3e0:	4620      	mov	r0, r4
    a3e2:	4798      	blx	r3
}
    a3e4:	b007      	add	sp, #28
    a3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a3e8:	46bc      	mov	ip, r7
    a3ea:	e7e0      	b.n	a3ae <IMX_RT1060_I2CSlave::after_transmit(std::function<void (unsigned short)>)+0x22>

0000a3ec <IMX_RT1060_I2CSlave::stop_listening()>:
    stop(port, config.irq);
    a3ec:	e9d0 1304 	ldrd	r1, r3, [r0, #16]
inline void IMX_RT1060_I2CSlave::stop_listening() {
    a3f0:	b430      	push	{r4, r5}
    stop(port, config.irq);
    a3f2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    port->MCR = 0;
    a3f6:	2400      	movs	r4, #0
    port->MCR = (LPI2C_MCR_RST | LPI2C_MCR_RRF | LPI2C_MCR_RTF);
    a3f8:	f240 3502 	movw	r5, #770	; 0x302
    NVIC_DISABLE_IRQ(irq);
    a3fc:	4a0b      	ldr	r2, [pc, #44]	; (a42c <IMX_RT1060_I2CSlave::stop_listening()+0x40>)
    a3fe:	f04f 0c01 	mov.w	ip, #1
    a402:	480b      	ldr	r0, [pc, #44]	; (a430 <IMX_RT1060_I2CSlave::stop_listening()+0x44>)
    port->MCR = (LPI2C_MCR_RST | LPI2C_MCR_RRF | LPI2C_MCR_RTF);
    a404:	610d      	str	r5, [r1, #16]
    NVIC_DISABLE_IRQ(irq);
    a406:	eb02 1253 	add.w	r2, r2, r3, lsr #5
    port->MCR = 0;
    a40a:	610c      	str	r4, [r1, #16]
    port->SCR = (LPI2C_SCR_RST | LPI2C_SCR_RRF | LPI2C_SCR_RTF);
    a40c:	f8c1 5110 	str.w	r5, [r1, #272]	; 0x110
    NVIC_DISABLE_IRQ(irq);
    a410:	0092      	lsls	r2, r2, #2
    port->SCR = 0;
    a412:	f8c1 4110 	str.w	r4, [r1, #272]	; 0x110
    NVIC_DISABLE_IRQ(irq);
    a416:	f003 011f 	and.w	r1, r3, #31
    a41a:	3310      	adds	r3, #16
    a41c:	fa0c f101 	lsl.w	r1, ip, r1
    a420:	6011      	str	r1, [r2, #0]
    a422:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
}
    a426:	bc30      	pop	{r4, r5}
    a428:	4770      	bx	lr
    a42a:	bf00      	nop
    a42c:	38003860 	.word	0x38003860
    a430:	20002400 	.word	0x20002400

0000a434 <IMX_RT1060_I2CMaster::end()>:
    stop(port, config.irq);
    a434:	e9d0 1304 	ldrd	r1, r3, [r0, #16]
void IMX_RT1060_I2CMaster::end() {
    a438:	b430      	push	{r4, r5}
    stop(port, config.irq);
    a43a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    port->MCR = 0;
    a43e:	2400      	movs	r4, #0
    port->MCR = (LPI2C_MCR_RST | LPI2C_MCR_RRF | LPI2C_MCR_RTF);
    a440:	f240 3502 	movw	r5, #770	; 0x302
    NVIC_DISABLE_IRQ(irq);
    a444:	4a0b      	ldr	r2, [pc, #44]	; (a474 <IMX_RT1060_I2CMaster::end()+0x40>)
    a446:	f04f 0c01 	mov.w	ip, #1
    a44a:	480b      	ldr	r0, [pc, #44]	; (a478 <IMX_RT1060_I2CMaster::end()+0x44>)
    port->MCR = (LPI2C_MCR_RST | LPI2C_MCR_RRF | LPI2C_MCR_RTF);
    a44c:	610d      	str	r5, [r1, #16]
    NVIC_DISABLE_IRQ(irq);
    a44e:	eb02 1253 	add.w	r2, r2, r3, lsr #5
    port->MCR = 0;
    a452:	610c      	str	r4, [r1, #16]
    port->SCR = (LPI2C_SCR_RST | LPI2C_SCR_RRF | LPI2C_SCR_RTF);
    a454:	f8c1 5110 	str.w	r5, [r1, #272]	; 0x110
    NVIC_DISABLE_IRQ(irq);
    a458:	0092      	lsls	r2, r2, #2
    port->SCR = 0;
    a45a:	f8c1 4110 	str.w	r4, [r1, #272]	; 0x110
    NVIC_DISABLE_IRQ(irq);
    a45e:	f003 011f 	and.w	r1, r3, #31
    a462:	3310      	adds	r3, #16
    a464:	fa0c f101 	lsl.w	r1, ip, r1
    a468:	6011      	str	r1, [r2, #0]
    a46a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
}
    a46e:	bc30      	pop	{r4, r5}
    a470:	4770      	bx	lr
    a472:	bf00      	nop
    a474:	38003860 	.word	0x38003860
    a478:	20002400 	.word	0x20002400

0000a47c <IMX_RT1060_I2CSlave::~IMX_RT1060_I2CSlave()>:

extern IMX_RT1060_I2CMaster Master;     // Pins 19 and 18; SCL0 and SDA0
extern IMX_RT1060_I2CMaster Master1;    // Pins 16 and 17; SCL1 and SDA1
extern IMX_RT1060_I2CMaster Master2;    // Pins 24 and 25; SCL2 and SDA2

class IMX_RT1060_I2CSlave : public I2CSlave {
    a47c:	4a0d      	ldr	r2, [pc, #52]	; (a4b4 <IMX_RT1060_I2CSlave::~IMX_RT1060_I2CSlave()+0x38>)
      if (_M_manager)
    a47e:	6e83      	ldr	r3, [r0, #104]	; 0x68
    a480:	b510      	push	{r4, lr}
    a482:	4604      	mov	r4, r0
    a484:	6002      	str	r2, [r0, #0]
    a486:	b123      	cbz	r3, a492 <IMX_RT1060_I2CSlave::~IMX_RT1060_I2CSlave()+0x16>
    class function<_Res(_ArgTypes...)>
    a488:	f100 0160 	add.w	r1, r0, #96	; 0x60
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    a48c:	2203      	movs	r2, #3
    a48e:	4608      	mov	r0, r1
    a490:	4798      	blx	r3
      if (_M_manager)
    a492:	6da3      	ldr	r3, [r4, #88]	; 0x58
    a494:	b123      	cbz	r3, a4a0 <IMX_RT1060_I2CSlave::~IMX_RT1060_I2CSlave()+0x24>
    class function<_Res(_ArgTypes...)>
    a496:	f104 0150 	add.w	r1, r4, #80	; 0x50
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    a49a:	2203      	movs	r2, #3
    a49c:	4608      	mov	r0, r1
    a49e:	4798      	blx	r3
      if (_M_manager)
    a4a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    a4a2:	b123      	cbz	r3, a4ae <IMX_RT1060_I2CSlave::~IMX_RT1060_I2CSlave()+0x32>
    class function<_Res(_ArgTypes...)>
    a4a4:	f104 0140 	add.w	r1, r4, #64	; 0x40
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    a4a8:	2203      	movs	r2, #3
    a4aa:	4608      	mov	r0, r1
    a4ac:	4798      	blx	r3
    a4ae:	4620      	mov	r0, r4
    a4b0:	bd10      	pop	{r4, pc}
    a4b2:	bf00      	nop
    a4b4:	20000f3c 	.word	0x20000f3c

0000a4b8 <IMX_RT1060_I2CSlave::before_transmit(std::function<void (unsigned short)>)>:
inline void IMX_RT1060_I2CSlave::before_transmit(std::function<void(uint16_t address)> callback) {
    a4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4ba:	b087      	sub	sp, #28
      : _Function_base()
    a4bc:	2300      	movs	r3, #0
    bool _M_empty() const { return !_M_manager; }
    a4be:	688f      	ldr	r7, [r1, #8]
    a4c0:	4605      	mov	r5, r0
      : _Function_base()
    a4c2:	ac02      	add	r4, sp, #8
    a4c4:	9302      	str	r3, [sp, #8]
    a4c6:	9305      	str	r3, [sp, #20]
    a4c8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	if (static_cast<bool>(__x))
    a4cc:	b317      	cbz	r7, a514 <IMX_RT1060_I2CSlave::before_transmit(std::function<void (unsigned short)>)+0x5c>
    a4ce:	460e      	mov	r6, r1
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    a4d0:	2202      	movs	r2, #2
    a4d2:	4620      	mov	r0, r4
    a4d4:	47b8      	blx	r7
	    _M_manager = __x._M_manager;
    a4d6:	e9d6 7c02 	ldrd	r7, ip, [r6, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    a4da:	e894 0003 	ldmia.w	r4, {r0, r1}
    a4de:	466a      	mov	r2, sp
      __a = _GLIBCXX_MOVE(__b);
    a4e0:	f105 0350 	add.w	r3, r5, #80	; 0x50
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    a4e4:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    a4e8:	e893 0003 	ldmia.w	r3, {r0, r1}
    a4ec:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    a4f0:	e892 0003 	ldmia.w	r2, {r0, r1}
    a4f4:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    a4f8:	6dab      	ldr	r3, [r5, #88]	; 0x58
    a4fa:	6dea      	ldr	r2, [r5, #92]	; 0x5c
      __b = _GLIBCXX_MOVE(__tmp);
    a4fc:	65af      	str	r7, [r5, #88]	; 0x58
      __a = _GLIBCXX_MOVE(__b);
    a4fe:	9304      	str	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
    a500:	f8c5 c05c 	str.w	ip, [r5, #92]	; 0x5c
      __a = _GLIBCXX_MOVE(__b);
    a504:	9205      	str	r2, [sp, #20]
      if (_M_manager)
    a506:	b11b      	cbz	r3, a510 <IMX_RT1060_I2CSlave::before_transmit(std::function<void (unsigned short)>)+0x58>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    a508:	2203      	movs	r2, #3
    a50a:	4621      	mov	r1, r4
    a50c:	4620      	mov	r0, r4
    a50e:	4798      	blx	r3
}
    a510:	b007      	add	sp, #28
    a512:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a514:	46bc      	mov	ip, r7
    a516:	e7e0      	b.n	a4da <IMX_RT1060_I2CSlave::before_transmit(std::function<void (unsigned short)>)+0x22>

0000a518 <IMX_RT1060_I2CSlave::after_receive(std::function<void (unsigned int, unsigned short)>)>:
inline void IMX_RT1060_I2CSlave::after_receive(std::function<void(size_t len, uint16_t address)> callback) {
    a518:	b5f0      	push	{r4, r5, r6, r7, lr}
    a51a:	b087      	sub	sp, #28
      : _Function_base()
    a51c:	2300      	movs	r3, #0
    bool _M_empty() const { return !_M_manager; }
    a51e:	688f      	ldr	r7, [r1, #8]
    a520:	4605      	mov	r5, r0
      : _Function_base()
    a522:	ac02      	add	r4, sp, #8
    a524:	9302      	str	r3, [sp, #8]
    a526:	9305      	str	r3, [sp, #20]
    a528:	e9c4 3301 	strd	r3, r3, [r4, #4]
	if (static_cast<bool>(__x))
    a52c:	b317      	cbz	r7, a574 <IMX_RT1060_I2CSlave::after_receive(std::function<void (unsigned int, unsigned short)>)+0x5c>
    a52e:	460e      	mov	r6, r1
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    a530:	2202      	movs	r2, #2
    a532:	4620      	mov	r0, r4
    a534:	47b8      	blx	r7
	    _M_manager = __x._M_manager;
    a536:	e9d6 7c02 	ldrd	r7, ip, [r6, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    a53a:	e894 0003 	ldmia.w	r4, {r0, r1}
    a53e:	466a      	mov	r2, sp
      __a = _GLIBCXX_MOVE(__b);
    a540:	f105 0340 	add.w	r3, r5, #64	; 0x40
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    a544:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    a548:	e893 0003 	ldmia.w	r3, {r0, r1}
    a54c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    a550:	e892 0003 	ldmia.w	r2, {r0, r1}
    a554:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    a558:	6cab      	ldr	r3, [r5, #72]	; 0x48
    a55a:	6cea      	ldr	r2, [r5, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
    a55c:	64af      	str	r7, [r5, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
    a55e:	9304      	str	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
    a560:	f8c5 c04c 	str.w	ip, [r5, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
    a564:	9205      	str	r2, [sp, #20]
      if (_M_manager)
    a566:	b11b      	cbz	r3, a570 <IMX_RT1060_I2CSlave::after_receive(std::function<void (unsigned int, unsigned short)>)+0x58>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    a568:	2203      	movs	r2, #3
    a56a:	4621      	mov	r1, r4
    a56c:	4620      	mov	r0, r4
    a56e:	4798      	blx	r3
}
    a570:	b007      	add	sp, #28
    a572:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a574:	46bc      	mov	ip, r7
    a576:	e7e0      	b.n	a53a <IMX_RT1060_I2CSlave::after_receive(std::function<void (unsigned int, unsigned short)>)+0x22>

0000a578 <IMX_RT1060_I2CSlave::IMX_RT1060_I2CSlave(IMXRT_LPI2C_Registers*, IMX_RT1060_I2CBase::Config&, void (*)())>:
public:
    IMX_RT1060_I2CSlave(IMXRT_LPI2C_Registers* port, IMX_RT1060_I2CBase::Config& config, void (* isr)())
    a578:	b510      	push	{r4, lr}
        : port(port), config(config), isr(isr) {
    a57a:	63c3      	str	r3, [r0, #60]	; 0x3c
    a57c:	2464      	movs	r4, #100	; 0x64
    : pad_control_config(PAD_CONTROL_CONFIG), pullup_config(InternalPullup::enabled_22k_ohm) {
    a57e:	2300      	movs	r3, #0
    a580:	6142      	str	r2, [r0, #20]
    a582:	4a11      	ldr	r2, [pc, #68]	; (a5c8 <IMX_RT1060_I2CSlave::IMX_RT1060_I2CSlave(IMXRT_LPI2C_Registers*, IMX_RT1060_I2CBase::Config&, void (*)())+0x50>)
      : _Function_base() { }
    a584:	f100 0e40 	add.w	lr, r0, #64	; 0x40
    a588:	6043      	str	r3, [r0, #4]
    a58a:	6184      	str	r4, [r0, #24]
    a58c:	2403      	movs	r4, #3
    a58e:	6101      	str	r1, [r0, #16]
I2CBuffer::I2CBuffer() : buffer(empty_buffer) {
    a590:	490e      	ldr	r1, [pc, #56]	; (a5cc <IMX_RT1060_I2CSlave::IMX_RT1060_I2CSlave(IMXRT_LPI2C_Registers*, IMX_RT1060_I2CBase::Config&, void (*)())+0x54>)
    a592:	8383      	strh	r3, [r0, #28]
    a594:	6201      	str	r1, [r0, #32]
    a596:	6243      	str	r3, [r0, #36]	; 0x24
    a598:	62c1      	str	r1, [r0, #44]	; 0x2c
    a59a:	6283      	str	r3, [r0, #40]	; 0x28
    a59c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    a5a0:	6303      	str	r3, [r0, #48]	; 0x30
    a5a2:	6403      	str	r3, [r0, #64]	; 0x40
    a5a4:	6343      	str	r3, [r0, #52]	; 0x34
    a5a6:	66c3      	str	r3, [r0, #108]	; 0x6c
    : pad_control_config(PAD_CONTROL_CONFIG), pullup_config(InternalPullup::enabled_22k_ohm) {
    a5a8:	e9c0 2402 	strd	r2, r4, [r0, #8]
    a5ac:	4c08      	ldr	r4, [pc, #32]	; (a5d0 <IMX_RT1060_I2CSlave::IMX_RT1060_I2CSlave(IMXRT_LPI2C_Registers*, IMX_RT1060_I2CBase::Config&, void (*)())+0x58>)
    a5ae:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
    a5b2:	6004      	str	r4, [r0, #0]
    a5b4:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
    a5b8:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    a5bc:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
    a5c0:	e9c0 3319 	strd	r3, r3, [r0, #100]	; 0x64
    }
    a5c4:	bd10      	pop	{r4, pc}
    a5c6:	bf00      	nop
    a5c8:	00010810 	.word	0x00010810
    a5cc:	200033c8 	.word	0x200033c8
    a5d0:	20000f3c 	.word	0x20000f3c

0000a5d4 <initialise_common(IMX_RT1060_I2CBase::Config, unsigned long, InternalPullup)>:
void initialise_common(IMX_RT1060_I2CBase::Config hardware, uint32_t pad_control_config, InternalPullup pullup) {
    a5d4:	b084      	sub	sp, #16
    a5d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a5da:	ac06      	add	r4, sp, #24
    a5dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63));
    a5e0:	491e      	ldr	r1, [pc, #120]	; (a65c <initialise_common(IMX_RT1060_I2CBase::Config, unsigned long, InternalPullup)+0x88>)
void initialise_common(IMX_RT1060_I2CBase::Config hardware, uint32_t pad_control_config, InternalPullup pullup) {
    a5e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63));
    a5e4:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    a5e6:	f89d c030 	ldrb.w	ip, [sp, #48]	; 0x30
    a5ea:	f422 0278 	bic.w	r2, r2, #16252928	; 0xf80000
    a5ee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    a5f0:	e9dd 470e 	ldrd	r4, r7, [sp, #56]	; 0x38
    a5f4:	638a      	str	r2, [r1, #56]	; 0x38
    hardware.clock_gate_register |= hardware.clock_gate_mask;
    a5f6:	9907      	ldr	r1, [sp, #28]
    a5f8:	6802      	ldr	r2, [r0, #0]
    a5fa:	f89d e020 	ldrb.w	lr, [sp, #32]
    a5fe:	430a      	orrs	r2, r1
    a600:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
    a604:	6002      	str	r2, [r0, #0]
static void initialise_pin(IMX_RT1060_I2CBase::PinInfo pin, uint32_t pad_control_config, InternalPullup pullup) {
    a606:	e9dd 0109 	ldrd	r0, r1, [sp, #36]	; 0x24
    if(pullup != InternalPullup::disabled) {
    a60a:	b303      	cbz	r3, a64e <initialise_common(IMX_RT1060_I2CBase::Config, unsigned long, InternalPullup)+0x7a>
        pullup_config = IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(static_cast<uint32_t>(pullup));
    a60c:	039b      	lsls	r3, r3, #14
    *(portControlRegister(pin.pin)) = (pad_control_config & pullup_mask) | pullup_config;
    a60e:	4a14      	ldr	r2, [pc, #80]	; (a660 <initialise_common(IMX_RT1060_I2CBase::Config, unsigned long, InternalPullup)+0x8c>)
    a610:	9e1a      	ldr	r6, [sp, #104]	; 0x68
        pullup_config = IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(static_cast<uint32_t>(pullup));
    a612:	b29b      	uxth	r3, r3
    *(portControlRegister(pin.pin)) = (pad_control_config & pullup_mask) | pullup_config;
    a614:	4032      	ands	r2, r6
    a616:	4313      	orrs	r3, r2
    a618:	4a12      	ldr	r2, [pc, #72]	; (a664 <initialise_common(IMX_RT1060_I2CBase::Config, unsigned long, InternalPullup)+0x90>)
    a61a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    a61e:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
    a622:	f8de 6008 	ldr.w	r6, [lr, #8]
    *(portConfigRegister(pin.pin)) = pin.mux_val;
    a626:	f8de e004 	ldr.w	lr, [lr, #4]
    *(portControlRegister(pin.pin)) = (pad_control_config & pullup_mask) | pullup_config;
    a62a:	6033      	str	r3, [r6, #0]
    *(portConfigRegister(pin.pin)) = pin.mux_val;
    a62c:	f8ce 0000 	str.w	r0, [lr]
    if (pin.select_input_register) {
    a630:	b109      	cbz	r1, a636 <initialise_common(IMX_RT1060_I2CBase::Config, unsigned long, InternalPullup)+0x62>
        *(pin.select_input_register) = pin.select_val;
    a632:	f8c1 8000 	str.w	r8, [r1]
    *(portControlRegister(pin.pin)) = (pad_control_config & pullup_mask) | pullup_config;
    a636:	eb02 120c 	add.w	r2, r2, ip, lsl #4
    a63a:	6891      	ldr	r1, [r2, #8]
    a63c:	600b      	str	r3, [r1, #0]
    *(portConfigRegister(pin.pin)) = pin.mux_val;
    a63e:	6853      	ldr	r3, [r2, #4]
    a640:	601d      	str	r5, [r3, #0]
    if (pin.select_input_register) {
    a642:	b104      	cbz	r4, a646 <initialise_common(IMX_RT1060_I2CBase::Config, unsigned long, InternalPullup)+0x72>
        *(pin.select_input_register) = pin.select_val;
    a644:	6027      	str	r7, [r4, #0]
}
    a646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a64a:	b004      	add	sp, #16
    a64c:	4770      	bx	lr
    *(portControlRegister(pin.pin)) = (pad_control_config & pullup_mask) | pullup_config;
    a64e:	4a05      	ldr	r2, [pc, #20]	; (a664 <initialise_common(IMX_RT1060_I2CBase::Config, unsigned long, InternalPullup)+0x90>)
    a650:	4b03      	ldr	r3, [pc, #12]	; (a660 <initialise_common(IMX_RT1060_I2CBase::Config, unsigned long, InternalPullup)+0x8c>)
    a652:	9e1a      	ldr	r6, [sp, #104]	; 0x68
    a654:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
    a658:	4033      	ands	r3, r6
    a65a:	e7e2      	b.n	a622 <initialise_common(IMX_RT1060_I2CBase::Config, unsigned long, InternalPullup)+0x4e>
    a65c:	400fc000 	.word	0x400fc000
    a660:	000108f9 	.word	0x000108f9
    a664:	2000138c 	.word	0x2000138c

0000a668 <IMX_RT1060_I2CMaster::_interrupt_service_routine()>:
    uint32_t msr = port->MSR;
    a668:	6903      	ldr	r3, [r0, #16]
    a66a:	695a      	ldr	r2, [r3, #20]
    if (msr & (LPI2C_MSR_NDF | LPI2C_MSR_ALF | LPI2C_MSR_FEF | LPI2C_MSR_PLTF)) {
    a66c:	f412 5f70 	tst.w	r2, #15360	; 0x3c00
void IMX_RT1060_I2CMaster::_interrupt_service_routine() {
    a670:	b430      	push	{r4, r5}
    if (msr & (LPI2C_MSR_NDF | LPI2C_MSR_ALF | LPI2C_MSR_FEF | LPI2C_MSR_PLTF)) {
    a672:	d02f      	beq.n	a6d4 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x6c>
        if (msr & LPI2C_MSR_NDF) {
    a674:	0555      	lsls	r5, r2, #21
    a676:	d458      	bmi.n	a72a <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0xc2>
        if (msr & LPI2C_MSR_ALF) {
    a678:	0514      	lsls	r4, r2, #20
    a67a:	d504      	bpl.n	a686 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x1e>
            port->MSR = LPI2C_MSR_ALF;
    a67c:	f44f 6400 	mov.w	r4, #2048	; 0x800
            _error = I2CError::arbitration_lost;
    a680:	2101      	movs	r1, #1
            port->MSR = LPI2C_MSR_ALF;
    a682:	615c      	str	r4, [r3, #20]
            _error = I2CError::arbitration_lost;
    a684:	6041      	str	r1, [r0, #4]
        if (msr & LPI2C_MSR_FEF) {
    a686:	04d1      	lsls	r1, r2, #19
    a688:	d505      	bpl.n	a696 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x2e>
            port->MSR = LPI2C_MSR_FEF;
    a68a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    a68e:	6159      	str	r1, [r3, #20]
        return _error;
    }

    // True if the last operation failed. i.e. if last_error returns anything other than ok.
    inline bool has_error() {
        return _error > I2CError::ok;
    a690:	6841      	ldr	r1, [r0, #4]
            if (!has_error()) {
    a692:	2900      	cmp	r1, #0
    a694:	dd7e      	ble.n	a794 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x12c>
        if (msr & LPI2C_MSR_PLTF) {
    a696:	0495      	lsls	r5, r2, #18
    a698:	d504      	bpl.n	a6a4 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x3c>
            port->MSR = LPI2C_MSR_PLTF;
    a69a:	f44f 5400 	mov.w	r4, #8192	; 0x2000
            _error = I2CError::master_pin_low_timeout;
    a69e:	2105      	movs	r1, #5
            port->MSR = LPI2C_MSR_PLTF;
    a6a0:	615c      	str	r4, [r3, #20]
            _error = I2CError::master_pin_low_timeout;
    a6a2:	6041      	str	r1, [r0, #4]
        if (state != State::stopping) {
    a6a4:	6a41      	ldr	r1, [r0, #36]	; 0x24
    a6a6:	2902      	cmp	r1, #2
    a6a8:	d014      	beq.n	a6d4 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x6c>
            state = State::stopping;
    a6aa:	2402      	movs	r4, #2
    if ((msr & LPI2C_MSR_MBF) && !(msr & LPI2C_MSR_SDF)) {
    a6ac:	495e      	ldr	r1, [pc, #376]	; (a828 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x1c0>)
            state = State::stopping;
    a6ae:	6244      	str	r4, [r0, #36]	; 0x24
    port->MIER &= ~LPI2C_MIER_TDIE;
    a6b0:	699c      	ldr	r4, [r3, #24]
    a6b2:	f024 0401 	bic.w	r4, r4, #1
    a6b6:	619c      	str	r4, [r3, #24]
    port->MCR |= LPI2C_MCR_RTF;
    a6b8:	691c      	ldr	r4, [r3, #16]
    a6ba:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    a6be:	611c      	str	r4, [r3, #16]
    port->MCR |= LPI2C_MCR_RRF;
    a6c0:	691c      	ldr	r4, [r3, #16]
    a6c2:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    a6c6:	611c      	str	r4, [r3, #16]
    uint32_t msr = port->MSR;
    a6c8:	695c      	ldr	r4, [r3, #20]
    if ((msr & LPI2C_MSR_MBF) && !(msr & LPI2C_MSR_SDF)) {
    a6ca:	4021      	ands	r1, r4
    a6cc:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
    a6d0:	f000 8095 	beq.w	a7fe <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x196>
    if (msr & LPI2C_MSR_SDF) {
    a6d4:	0594      	lsls	r4, r2, #22
    a6d6:	d508      	bpl.n	a6ea <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x82>
        port->MIER &= ~LPI2C_MIER_TDIE; // We don't want to handle TDF if we can avoid it.
    a6d8:	6999      	ldr	r1, [r3, #24]
        state = State::stopped;
    a6da:	2466      	movs	r4, #102	; 0x66
        port->MIER &= ~LPI2C_MIER_TDIE; // We don't want to handle TDF if we can avoid it.
    a6dc:	f021 0101 	bic.w	r1, r1, #1
    a6e0:	6199      	str	r1, [r3, #24]
        port->MSR = LPI2C_MSR_SDF;
    a6e2:	f44f 7100 	mov.w	r1, #512	; 0x200
        state = State::stopped;
    a6e6:	6244      	str	r4, [r0, #36]	; 0x24
        port->MSR = LPI2C_MSR_SDF;
    a6e8:	6159      	str	r1, [r3, #20]
    if (msr & LPI2C_MSR_RDF) {
    a6ea:	0791      	lsls	r1, r2, #30
    a6ec:	d50f      	bpl.n	a70e <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0xa6>
        if (ignore_tdf) {
    a6ee:	6a81      	ldr	r1, [r0, #40]	; 0x28
    a6f0:	b339      	cbz	r1, a742 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0xda>
        return next_index == 0;
    a6f2:	6a01      	ldr	r1, [r0, #32]
            if (buff.not_started_reading()) {
    a6f4:	b309      	cbz	r1, a73a <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0xd2>
            if (state == State::transferring) {
    a6f6:	6a41      	ldr	r1, [r0, #36]	; 0x24
    a6f8:	2901      	cmp	r1, #1
    a6fa:	f000 8084 	beq.w	a806 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x19e>
                port->MCR |= LPI2C_MCR_RRF;
    a6fe:	6919      	ldr	r1, [r3, #16]
    a700:	f441 7100 	orr.w	r1, r1, #512	; 0x200
    a704:	6119      	str	r1, [r3, #16]
        return next_index == size;
    a706:	6a01      	ldr	r1, [r0, #32]
    a708:	69c3      	ldr	r3, [r0, #28]
            if (buff.finished_reading()) {
    a70a:	4299      	cmp	r1, r3
    a70c:	d034      	beq.n	a778 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x110>
    if (!ignore_tdf && (msr & LPI2C_MSR_TDF)) {
    a70e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    a710:	b94b      	cbnz	r3, a726 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0xbe>
    a712:	07d2      	lsls	r2, r2, #31
    a714:	d507      	bpl.n	a726 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0xbe>
        return next_index == 0;
    a716:	6a03      	ldr	r3, [r0, #32]
        if (buff.not_started_writing()) {
    a718:	b913      	cbnz	r3, a720 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0xb8>
            state = State::transferring;
    a71a:	2201      	movs	r2, #1
            _error = I2CError::ok;
    a71c:	6043      	str	r3, [r0, #4]
            state = State::transferring;
    a71e:	6242      	str	r2, [r0, #36]	; 0x24
        if (state == State::transferring) {
    a720:	6a43      	ldr	r3, [r0, #36]	; 0x24
    a722:	2b01      	cmp	r3, #1
    a724:	d039      	beq.n	a79a <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x132>
}
    a726:	bc30      	pop	{r4, r5}
    a728:	4770      	bx	lr
            port->MSR = LPI2C_MSR_NDF;
    a72a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    a72e:	6159      	str	r1, [r3, #20]
            if (state == State::starting) {
    a730:	6a41      	ldr	r1, [r0, #36]	; 0x24
    a732:	b9f1      	cbnz	r1, a772 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x10a>
                _error = I2CError::address_nak;
    a734:	2109      	movs	r1, #9
    a736:	6041      	str	r1, [r0, #4]
    a738:	e79e      	b.n	a678 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x10>
                state = State::transferring;
    a73a:	2401      	movs	r4, #1
                _error = I2CError::ok;
    a73c:	6041      	str	r1, [r0, #4]
                state = State::transferring;
    a73e:	6244      	str	r4, [r0, #36]	; 0x24
    a740:	e7d9      	b.n	a6f6 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x8e>
            state = State::stopping;
    a742:	2402      	movs	r4, #2
    if ((msr & LPI2C_MSR_MBF) && !(msr & LPI2C_MSR_SDF)) {
    a744:	4938      	ldr	r1, [pc, #224]	; (a828 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x1c0>)
            state = State::stopping;
    a746:	6244      	str	r4, [r0, #36]	; 0x24
    port->MIER &= ~LPI2C_MIER_TDIE;
    a748:	699c      	ldr	r4, [r3, #24]
    a74a:	f024 0401 	bic.w	r4, r4, #1
    a74e:	619c      	str	r4, [r3, #24]
    port->MCR |= LPI2C_MCR_RTF;
    a750:	691c      	ldr	r4, [r3, #16]
    a752:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    a756:	611c      	str	r4, [r3, #16]
    port->MCR |= LPI2C_MCR_RRF;
    a758:	691c      	ldr	r4, [r3, #16]
    a75a:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    a75e:	611c      	str	r4, [r3, #16]
    uint32_t msr = port->MSR;
    a760:	695c      	ldr	r4, [r3, #20]
    if ((msr & LPI2C_MSR_MBF) && !(msr & LPI2C_MSR_SDF)) {
    a762:	4021      	ands	r1, r4
    a764:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
    a768:	d1d1      	bne.n	a70e <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0xa6>
        port->MTDR = LPI2C_MTDR_CMD_STOP;
    a76a:	f44f 7100 	mov.w	r1, #512	; 0x200
    a76e:	6619      	str	r1, [r3, #96]	; 0x60
    a770:	e7cd      	b.n	a70e <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0xa6>
                _error = I2CError::data_nak;
    a772:	210a      	movs	r1, #10
    a774:	6041      	str	r1, [r0, #4]
    a776:	e77f      	b.n	a678 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x10>
    return port->MFSR & 0x7;
    a778:	6903      	ldr	r3, [r0, #16]
    a77a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
                if (tx_fifo_count() == 1) {
    a77c:	f001 0107 	and.w	r1, r1, #7
    a780:	2901      	cmp	r1, #1
                    state = State::stopping;
    a782:	bf0c      	ite	eq
    a784:	2102      	moveq	r1, #2
                    state = State::transfer_complete;
    a786:	2165      	movne	r1, #101	; 0x65
    a788:	6241      	str	r1, [r0, #36]	; 0x24
                port->MCR &= ~LPI2C_MCR_MEN;    // Avoids triggering PLTF if we didn't send a STOP
    a78a:	6919      	ldr	r1, [r3, #16]
    a78c:	f021 0101 	bic.w	r1, r1, #1
    a790:	6119      	str	r1, [r3, #16]
    a792:	e7bc      	b.n	a70e <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0xa6>
                _error = I2CError::master_fifo_error;
    a794:	2107      	movs	r1, #7
    a796:	6041      	str	r1, [r0, #4]
    a798:	e77d      	b.n	a696 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x2e>
    return port->MFSR & 0x7;
    a79a:	6904      	ldr	r4, [r0, #16]
    a79c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        return next_index < size;
    a79e:	6a03      	ldr	r3, [r0, #32]
    a7a0:	69c1      	ldr	r1, [r0, #28]
            uint32_t fifo_space = NUM_FIFOS - tx_fifo_count();
    a7a2:	f002 0207 	and.w	r2, r2, #7
            while (buff.has_data_available() && fifo_space > 0) {
    a7a6:	4299      	cmp	r1, r3
            uint32_t fifo_space = NUM_FIFOS - tx_fifo_count();
    a7a8:	f1c2 0204 	rsb	r2, r2, #4
            while (buff.has_data_available() && fifo_space > 0) {
    a7ac:	d90f      	bls.n	a7ce <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x166>
    a7ae:	b172      	cbz	r2, a7ce <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x166>
        return buffer[next_index++];
    a7b0:	6985      	ldr	r5, [r0, #24]
    a7b2:	e001      	b.n	a7b8 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x150>
    a7b4:	4299      	cmp	r1, r3
    a7b6:	d20a      	bcs.n	a7ce <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x166>
    a7b8:	6a03      	ldr	r3, [r0, #32]
    a7ba:	3a01      	subs	r2, #1
    a7bc:	f103 0101 	add.w	r1, r3, #1
    a7c0:	6201      	str	r1, [r0, #32]
    a7c2:	5ceb      	ldrb	r3, [r5, r3]
    a7c4:	b2db      	uxtb	r3, r3
                port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | buff.read();
    a7c6:	6623      	str	r3, [r4, #96]	; 0x60
        return next_index < size;
    a7c8:	6a01      	ldr	r1, [r0, #32]
    a7ca:	69c3      	ldr	r3, [r0, #28]
            while (buff.has_data_available() && fifo_space > 0) {
    a7cc:	d1f2      	bne.n	a7b4 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x14c>
        return next_index == size;
    a7ce:	6a02      	ldr	r2, [r0, #32]
    a7d0:	69c3      	ldr	r3, [r0, #28]
            if (buff.finished_writing() && tx_fifo_count() == 0) {
    a7d2:	429a      	cmp	r2, r3
    a7d4:	d1a7      	bne.n	a726 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0xbe>
    return port->MFSR & 0x7;
    a7d6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
            if (buff.finished_writing() && tx_fifo_count() == 0) {
    a7d8:	075b      	lsls	r3, r3, #29
    a7da:	d1a4      	bne.n	a726 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0xbe>
                port->MIER &= ~LPI2C_MIER_TDIE;
    a7dc:	69a3      	ldr	r3, [r4, #24]
    a7de:	f023 0301 	bic.w	r3, r3, #1
    a7e2:	61a3      	str	r3, [r4, #24]
                if (stop_on_completion) {
    a7e4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    a7e8:	b1d3      	cbz	r3, a820 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x1b8>
                    state = State::stopping;
    a7ea:	2202      	movs	r2, #2
                    port->MTDR = LPI2C_MTDR_CMD_STOP;
    a7ec:	f44f 7300 	mov.w	r3, #512	; 0x200
                    state = State::stopping;
    a7f0:	6242      	str	r2, [r0, #36]	; 0x24
                    port->MTDR = LPI2C_MTDR_CMD_STOP;
    a7f2:	6623      	str	r3, [r4, #96]	; 0x60
                port->MCR &= ~LPI2C_MCR_MEN;    // Avoids triggering PLTF if we didn't send a STOP
    a7f4:	6923      	ldr	r3, [r4, #16]
    a7f6:	f023 0301 	bic.w	r3, r3, #1
    a7fa:	6123      	str	r3, [r4, #16]
}
    a7fc:	e793      	b.n	a726 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0xbe>
        port->MTDR = LPI2C_MTDR_CMD_STOP;
    a7fe:	f44f 7100 	mov.w	r1, #512	; 0x200
    a802:	6619      	str	r1, [r3, #96]	; 0x60
    a804:	e766      	b.n	a6d4 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x6c>
                buff.write(port->MRDR);
    a806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        if (next_index == size) {
    a808:	6a04      	ldr	r4, [r0, #32]
    a80a:	69c1      	ldr	r1, [r0, #28]
    a80c:	428c      	cmp	r4, r1
    a80e:	f43f af7a 	beq.w	a706 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x9e>
            buffer[next_index++] = data;
    a812:	6a01      	ldr	r1, [r0, #32]
    a814:	b2db      	uxtb	r3, r3
    a816:	6984      	ldr	r4, [r0, #24]
    a818:	1c4d      	adds	r5, r1, #1
    a81a:	6205      	str	r5, [r0, #32]
    a81c:	5463      	strb	r3, [r4, r1]
            return true;
    a81e:	e772      	b.n	a706 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x9e>
                    state = State::transfer_complete;
    a820:	2365      	movs	r3, #101	; 0x65
    a822:	6243      	str	r3, [r0, #36]	; 0x24
    a824:	e7e6      	b.n	a7f4 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x18c>
    a826:	bf00      	nop
    a828:	01000200 	.word	0x01000200

0000a82c <master2_isr()>:
static void master2_isr();

IMX_RT1060_I2CMaster Master2(&LPI2C4, i2c4_config, master2_isr);

static void master2_isr() {
    Master2._interrupt_service_routine();
    a82c:	4801      	ldr	r0, [pc, #4]	; (a834 <master2_isr()+0x8>)
    a82e:	f7ff bf1b 	b.w	a668 <IMX_RT1060_I2CMaster::_interrupt_service_routine()>
    a832:	bf00      	nop
    a834:	20002b10 	.word	0x20002b10

0000a838 <master1_isr()>:
    Master1._interrupt_service_routine();
    a838:	4801      	ldr	r0, [pc, #4]	; (a840 <master1_isr()+0x8>)
    a83a:	f7ff bf15 	b.w	a668 <IMX_RT1060_I2CMaster::_interrupt_service_routine()>
    a83e:	bf00      	nop
    a840:	20002adc 	.word	0x20002adc

0000a844 <master_isr()>:
    Master._interrupt_service_routine();
    a844:	4801      	ldr	r0, [pc, #4]	; (a84c <master_isr()+0x8>)
    a846:	f7ff bf0f 	b.w	a668 <IMX_RT1060_I2CMaster::_interrupt_service_routine()>
    a84a:	bf00      	nop
    a84c:	20002aa8 	.word	0x20002aa8

0000a850 <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)>:
bool IMX_RT1060_I2CMaster::start(uint8_t address, uint32_t direction) {
    a850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!finished()) {
    a852:	6803      	ldr	r3, [r0, #0]
bool IMX_RT1060_I2CMaster::start(uint8_t address, uint32_t direction) {
    a854:	4604      	mov	r4, r0
    a856:	4d34      	ldr	r5, [pc, #208]	; (a928 <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0xd8>)
    a858:	460e      	mov	r6, r1
    if (!finished()) {
    a85a:	689b      	ldr	r3, [r3, #8]
bool IMX_RT1060_I2CMaster::start(uint8_t address, uint32_t direction) {
    a85c:	4617      	mov	r7, r2
    a85e:	42ab      	cmp	r3, r5
    a860:	d125      	bne.n	a8ae <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0x5e>
    return state == State::transfer_complete ||
    a862:	6a43      	ldr	r3, [r0, #36]	; 0x24
    a864:	2b65      	cmp	r3, #101	; 0x65
    a866:	d054      	beq.n	a912 <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0xc2>
        (state >= State::idle && !(port->MSR & LPI2C_MSR_MBF));
    a868:	6a43      	ldr	r3, [r0, #36]	; 0x24
    return state == State::transfer_complete ||
    a86a:	2b63      	cmp	r3, #99	; 0x63
        (state >= State::idle && !(port->MSR & LPI2C_MSR_MBF));
    a86c:	6903      	ldr	r3, [r0, #16]
    return state == State::transfer_complete ||
    a86e:	dd22      	ble.n	a8b6 <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0x66>
        (state >= State::idle && !(port->MSR & LPI2C_MSR_MBF));
    a870:	695a      	ldr	r2, [r3, #20]
    a872:	01d1      	lsls	r1, r2, #7
    a874:	d41f      	bmi.n	a8b6 <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0x66>
    _error = I2CError::ok;
    a876:	2000      	movs	r0, #0
    ignore_tdf = direction;
    a878:	62a7      	str	r7, [r4, #40]	; 0x28
    _error = I2CError::ok;
    a87a:	6060      	str	r0, [r4, #4]
    state = State::starting;
    a87c:	6260      	str	r0, [r4, #36]	; 0x24
    return port->MFSR & 0x7;
    a87e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    if (tx_fifo_count() > 0 || rx_fifo_count() > 0) {
    a880:	0752      	lsls	r2, r2, #29
    a882:	d130      	bne.n	a8e6 <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0x96>
    return (port->MFSR >> 16) & 0x07;
    a884:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    if (tx_fifo_count() > 0 || rx_fifo_count() > 0) {
    a886:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
    a88a:	d12c      	bne.n	a8e6 <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0x96>
    port->MSR &= (LPI2C_MSR_DMF | LPI2C_MSR_PLTF | LPI2C_MSR_FEF |
    a88c:	695a      	ldr	r2, [r3, #20]
    a88e:	f647 7003 	movw	r0, #32515	; 0x7f03
    uint8_t i2c_address = (address & 0x7F) << 1;
    a892:	0071      	lsls	r1, r6, #1
    port->MSR &= (LPI2C_MSR_DMF | LPI2C_MSR_PLTF | LPI2C_MSR_FEF |
    a894:	4002      	ands	r2, r0
    return true;
    a896:	2001      	movs	r0, #1
    port->MTDR = LPI2C_MTDR_CMD_START | i2c_address | direction;
    a898:	b2c9      	uxtb	r1, r1
    port->MSR &= (LPI2C_MSR_DMF | LPI2C_MSR_PLTF | LPI2C_MSR_FEF |
    a89a:	615a      	str	r2, [r3, #20]
    port->MTDR = LPI2C_MTDR_CMD_START | i2c_address | direction;
    a89c:	ea41 0207 	orr.w	r2, r1, r7
    port->MCR |= LPI2C_MCR_MEN;
    a8a0:	691c      	ldr	r4, [r3, #16]
    port->MTDR = LPI2C_MTDR_CMD_START | i2c_address | direction;
    a8a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    port->MCR |= LPI2C_MCR_MEN;
    a8a6:	4304      	orrs	r4, r0
    a8a8:	611c      	str	r4, [r3, #16]
    port->MTDR = LPI2C_MTDR_CMD_START | i2c_address | direction;
    a8aa:	661a      	str	r2, [r3, #96]	; 0x60
}
    a8ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!finished()) {
    a8ae:	4798      	blx	r3
    return port->MFSR & 0x7;
    a8b0:	6923      	ldr	r3, [r4, #16]
    if (!finished()) {
    a8b2:	2800      	cmp	r0, #0
    a8b4:	d1df      	bne.n	a876 <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0x26>
    port->MIER &= ~LPI2C_MIER_TDIE;
    a8b6:	6999      	ldr	r1, [r3, #24]
    if ((msr & LPI2C_MSR_MBF) && !(msr & LPI2C_MSR_SDF)) {
    a8b8:	4a1c      	ldr	r2, [pc, #112]	; (a92c <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0xdc>)
    port->MIER &= ~LPI2C_MIER_TDIE;
    a8ba:	f021 0101 	bic.w	r1, r1, #1
    a8be:	6199      	str	r1, [r3, #24]
    port->MCR |= LPI2C_MCR_RTF;
    a8c0:	6919      	ldr	r1, [r3, #16]
    a8c2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
    a8c6:	6119      	str	r1, [r3, #16]
    port->MCR |= LPI2C_MCR_RRF;
    a8c8:	6919      	ldr	r1, [r3, #16]
    a8ca:	f441 7100 	orr.w	r1, r1, #512	; 0x200
    a8ce:	6119      	str	r1, [r3, #16]
    uint32_t msr = port->MSR;
    a8d0:	6959      	ldr	r1, [r3, #20]
    if ((msr & LPI2C_MSR_MBF) && !(msr & LPI2C_MSR_SDF)) {
    a8d2:	400a      	ands	r2, r1
    a8d4:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
    a8d8:	d01d      	beq.n	a916 <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0xc6>
        _error = I2CError::master_not_ready;
    a8da:	2206      	movs	r2, #6
        state = State::idle;
    a8dc:	2364      	movs	r3, #100	; 0x64
        return false;
    a8de:	2000      	movs	r0, #0
        _error = I2CError::master_not_ready;
    a8e0:	6062      	str	r2, [r4, #4]
        state = State::idle;
    a8e2:	6263      	str	r3, [r4, #36]	; 0x24
}
    a8e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _error = I2CError::master_fifos_not_empty;
    a8e6:	2108      	movs	r1, #8
    if ((msr & LPI2C_MSR_MBF) && !(msr & LPI2C_MSR_SDF)) {
    a8e8:	4a10      	ldr	r2, [pc, #64]	; (a92c <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0xdc>)
        _error = I2CError::master_fifos_not_empty;
    a8ea:	6061      	str	r1, [r4, #4]
    port->MIER &= ~LPI2C_MIER_TDIE;
    a8ec:	6999      	ldr	r1, [r3, #24]
    a8ee:	f021 0101 	bic.w	r1, r1, #1
    a8f2:	6199      	str	r1, [r3, #24]
    port->MCR |= LPI2C_MCR_RTF;
    a8f4:	6919      	ldr	r1, [r3, #16]
    a8f6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
    a8fa:	6119      	str	r1, [r3, #16]
    port->MCR |= LPI2C_MCR_RRF;
    a8fc:	6919      	ldr	r1, [r3, #16]
    a8fe:	f441 7100 	orr.w	r1, r1, #512	; 0x200
    a902:	6119      	str	r1, [r3, #16]
    uint32_t msr = port->MSR;
    a904:	6959      	ldr	r1, [r3, #20]
    if ((msr & LPI2C_MSR_MBF) && !(msr & LPI2C_MSR_SDF)) {
    a906:	400a      	ands	r2, r1
    a908:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
    a90c:	d007      	beq.n	a91e <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0xce>
        return false;
    a90e:	2000      	movs	r0, #0
}
    a910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        (state >= State::idle && !(port->MSR & LPI2C_MSR_MBF));
    a912:	6903      	ldr	r3, [r0, #16]
    a914:	e7af      	b.n	a876 <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0x26>
        port->MTDR = LPI2C_MTDR_CMD_STOP;
    a916:	f44f 7200 	mov.w	r2, #512	; 0x200
    a91a:	661a      	str	r2, [r3, #96]	; 0x60
    a91c:	e7dd      	b.n	a8da <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0x8a>
    a91e:	f44f 7200 	mov.w	r2, #512	; 0x200
        return false;
    a922:	2000      	movs	r0, #0
        port->MTDR = LPI2C_MTDR_CMD_STOP;
    a924:	661a      	str	r2, [r3, #96]	; 0x60
}
    a926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a928:	0000a369 	.word	0x0000a369
    a92c:	01000200 	.word	0x01000200

0000a930 <IMX_RT1060_I2CMaster::write_async(unsigned char, unsigned char const*, unsigned int, bool)>:
void IMX_RT1060_I2CMaster::write_async(uint8_t address, const uint8_t* buffer, size_t num_bytes, bool send_stop) {
    a930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a932:	4616      	mov	r6, r2
    if (!start(address, MASTER_WRITE)) {
    a934:	2200      	movs	r2, #0
void IMX_RT1060_I2CMaster::write_async(uint8_t address, const uint8_t* buffer, size_t num_bytes, bool send_stop) {
    a936:	4604      	mov	r4, r0
    a938:	461d      	mov	r5, r3
    a93a:	f89d 7018 	ldrb.w	r7, [sp, #24]
    if (!start(address, MASTER_WRITE)) {
    a93e:	f7ff ff87 	bl	a850 <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)>
    a942:	b158      	cbz	r0, a95c <IMX_RT1060_I2CMaster::write_async(unsigned char, unsigned char const*, unsigned int, bool)+0x2c>
    if (num_bytes == 0) {
    a944:	b15d      	cbz	r5, a95e <IMX_RT1060_I2CMaster::write_async(unsigned char, unsigned char const*, unsigned int, bool)+0x2e>
        next_index = 0;
    a946:	2300      	movs	r3, #0
    port->MIER |= LPI2C_MIER_TDIE;
    a948:	6922      	ldr	r2, [r4, #16]
        buffer = new_buffer;
    a94a:	61a6      	str	r6, [r4, #24]
        next_index = 0;
    a94c:	6223      	str	r3, [r4, #32]
        size = new_size;
    a94e:	61e5      	str	r5, [r4, #28]
    stop_on_completion = send_stop;
    a950:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    port->MIER |= LPI2C_MIER_TDIE;
    a954:	6993      	ldr	r3, [r2, #24]
    a956:	f043 0301 	orr.w	r3, r3, #1
    a95a:	6193      	str	r3, [r2, #24]
}
    a95c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ignore_tdf = true;
    a95e:	2101      	movs	r1, #1
        port->MTDR = LPI2C_MTDR_CMD_STOP;
    a960:	6923      	ldr	r3, [r4, #16]
    a962:	f44f 7200 	mov.w	r2, #512	; 0x200
        ignore_tdf = true;
    a966:	62a1      	str	r1, [r4, #40]	; 0x28
        port->MTDR = LPI2C_MTDR_CMD_STOP;
    a968:	661a      	str	r2, [r3, #96]	; 0x60
}
    a96a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a96c <IMX_RT1060_I2CMaster::read_async(unsigned char, unsigned char*, unsigned int, bool)>:
    if (num_bytes > MAX_MASTER_READ_LENGTH) {
    a96c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
void IMX_RT1060_I2CMaster::read_async(uint8_t address, uint8_t* buffer, size_t num_bytes, bool send_stop) {
    a970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a972:	4605      	mov	r5, r0
    a974:	f89d 7018 	ldrb.w	r7, [sp, #24]
    if (num_bytes > MAX_MASTER_READ_LENGTH) {
    a978:	d902      	bls.n	a980 <IMX_RT1060_I2CMaster::read_async(unsigned char, unsigned char*, unsigned int, bool)+0x14>
        _error = I2CError::invalid_request;
    a97a:	2304      	movs	r3, #4
    a97c:	6043      	str	r3, [r0, #4]
}
    a97e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!start(address, MASTER_READ)) {
    a980:	4616      	mov	r6, r2
    a982:	2201      	movs	r2, #1
    a984:	461c      	mov	r4, r3
    a986:	f7ff ff63 	bl	a850 <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)>
    a98a:	2800      	cmp	r0, #0
    a98c:	d0f7      	beq.n	a97e <IMX_RT1060_I2CMaster::read_async(unsigned char, unsigned char*, unsigned int, bool)+0x12>
    if (num_bytes == 0) {
    a98e:	b174      	cbz	r4, a9ae <IMX_RT1060_I2CMaster::read_async(unsigned char, unsigned char*, unsigned int, bool)+0x42>
        next_index = 0;
    a990:	2200      	movs	r2, #0
    port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (num_bytes - 1);
    a992:	692b      	ldr	r3, [r5, #16]
        buffer = new_buffer;
    a994:	61ae      	str	r6, [r5, #24]
        next_index = 0;
    a996:	622a      	str	r2, [r5, #32]
        size = new_size;
    a998:	61ec      	str	r4, [r5, #28]
    a99a:	3c01      	subs	r4, #1
    a99c:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    a9a0:	661c      	str	r4, [r3, #96]	; 0x60
    if (send_stop) {
    a9a2:	2f00      	cmp	r7, #0
    a9a4:	d0eb      	beq.n	a97e <IMX_RT1060_I2CMaster::read_async(unsigned char, unsigned char*, unsigned int, bool)+0x12>
        port->MTDR = LPI2C_MTDR_CMD_STOP;
    a9a6:	f44f 7200 	mov.w	r2, #512	; 0x200
    a9aa:	661a      	str	r2, [r3, #96]	; 0x60
}
    a9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        port->MTDR = LPI2C_MTDR_CMD_STOP;
    a9ae:	692b      	ldr	r3, [r5, #16]
    a9b0:	f44f 7200 	mov.w	r2, #512	; 0x200
    a9b4:	661a      	str	r2, [r3, #96]	; 0x60
}
    a9b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a9b8 <IMX_RT1060_I2CMaster::set_clock(unsigned long)>:
    if (frequency < 400'000) {
    a9b8:	4b11      	ldr	r3, [pc, #68]	; (aa00 <IMX_RT1060_I2CMaster::set_clock(unsigned long)+0x48>)
    a9ba:	4299      	cmp	r1, r3
void IMX_RT1060_I2CMaster::set_clock(uint32_t frequency) {
    a9bc:	b430      	push	{r4, r5}
    if (frequency < 400'000) {
    a9be:	d918      	bls.n	a9f2 <IMX_RT1060_I2CMaster::set_clock(unsigned long)+0x3a>
    } else if (frequency < 1'000'000) {
    a9c0:	4b10      	ldr	r3, [pc, #64]	; (aa04 <IMX_RT1060_I2CMaster::set_clock(unsigned long)+0x4c>)
    a9c2:	4c11      	ldr	r4, [pc, #68]	; (aa08 <IMX_RT1060_I2CMaster::set_clock(unsigned long)+0x50>)
    a9c4:	4299      	cmp	r1, r3
    a9c6:	4b11      	ldr	r3, [pc, #68]	; (aa0c <IMX_RT1060_I2CMaster::set_clock(unsigned long)+0x54>)
    a9c8:	4911      	ldr	r1, [pc, #68]	; (aa10 <IMX_RT1060_I2CMaster::set_clock(unsigned long)+0x58>)
    a9ca:	bf88      	it	hi
    a9cc:	4619      	movhi	r1, r3
    a9ce:	4b11      	ldr	r3, [pc, #68]	; (aa14 <IMX_RT1060_I2CMaster::set_clock(unsigned long)+0x5c>)
    a9d0:	4a11      	ldr	r2, [pc, #68]	; (aa18 <IMX_RT1060_I2CMaster::set_clock(unsigned long)+0x60>)
    a9d2:	bf92      	itee	ls
    a9d4:	2501      	movls	r5, #1
    a9d6:	4622      	movhi	r2, r4
    a9d8:	2500      	movhi	r5, #0
    a9da:	4c10      	ldr	r4, [pc, #64]	; (aa1c <IMX_RT1060_I2CMaster::set_clock(unsigned long)+0x64>)
    a9dc:	bf88      	it	hi
    a9de:	461c      	movhi	r4, r3
    port->MCCR0 = LPI2C_MCCR0_CLKHI(timings.CLKHI) | LPI2C_MCCR0_CLKLO(timings.CLKLO) |
    a9e0:	6903      	ldr	r3, [r0, #16]
    a9e2:	649c      	str	r4, [r3, #72]	; 0x48
    port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(timings.PRESCALE);
    a9e4:	625d      	str	r5, [r3, #36]	; 0x24
    port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(timings.FILTSDA) | LPI2C_MCFGR2_FILTSCL(timings.FILTSCL) |
    a9e6:	6299      	str	r1, [r3, #40]	; 0x28
    port->MCFGR3 = LPI2C_MCFGR3_PINLOW(timings.PINLOW);
    a9e8:	62da      	str	r2, [r3, #44]	; 0x2c
    port->MCCR1 = port->MCCR0;
    a9ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
}
    a9ec:	bc30      	pop	{r4, r5}
    port->MCCR1 = port->MCCR0;
    a9ee:	651a      	str	r2, [r3, #80]	; 0x50
}
    a9f0:	4770      	bx	lr
    a9f2:	f44f 32dc 	mov.w	r2, #112640	; 0x1b800
    a9f6:	490a      	ldr	r1, [pc, #40]	; (aa20 <IMX_RT1060_I2CMaster::set_clock(unsigned long)+0x68>)
    a9f8:	2503      	movs	r5, #3
    a9fa:	4c0a      	ldr	r4, [pc, #40]	; (aa24 <IMX_RT1060_I2CMaster::set_clock(unsigned long)+0x6c>)
    a9fc:	e7f0      	b.n	a9e0 <IMX_RT1060_I2CMaster::set_clock(unsigned long)+0x28>
    a9fe:	bf00      	nop
    aa00:	00061a7f 	.word	0x00061a7f
    aa04:	000f423f 	.word	0x000f423f
    aa08:	000dbc00 	.word	0x000dbc00
    aa0c:	06060001 	.word	0x06060001
    aa10:	0f0f0001 	.word	0x0f0f0001
    aa14:	0c130e24 	.word	0x0c130e24
    aa18:	0006de00 	.word	0x0006de00
    aa1c:	0b15172a 	.word	0x0b15172a
    aa20:	0f0f0009 	.word	0x0f0f0009
    aa24:	072c2225 	.word	0x072c2225

0000aa28 <IMX_RT1060_I2CMaster::begin(unsigned long)>:
void IMX_RT1060_I2CMaster::begin(uint32_t frequency) {
    aa28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    aa2c:	4604      	mov	r4, r0
    NVIC_DISABLE_IRQ(irq);
    aa2e:	4a2c      	ldr	r2, [pc, #176]	; (aae0 <IMX_RT1060_I2CMaster::begin(unsigned long)+0xb8>)
void IMX_RT1060_I2CMaster::begin(uint32_t frequency) {
    aa30:	4688      	mov	r8, r1
    NVIC_DISABLE_IRQ(irq);
    aa32:	2601      	movs	r6, #1
    port->MCR = 0;
    aa34:	2700      	movs	r7, #0
    port->MCR = (LPI2C_MCR_RST | LPI2C_MCR_RRF | LPI2C_MCR_RTF);
    aa36:	f240 3502 	movw	r5, #770	; 0x302
    aa3a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; aae8 <IMX_RT1060_I2CMaster::begin(unsigned long)+0xc0>
void IMX_RT1060_I2CMaster::begin(uint32_t frequency) {
    aa3e:	b093      	sub	sp, #76	; 0x4c
    stop(port, config.irq);
    aa40:	e9d0 0304 	ldrd	r0, r3, [r0, #16]
    aa44:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    port->MCR = (LPI2C_MCR_RST | LPI2C_MCR_RRF | LPI2C_MCR_RTF);
    aa48:	6105      	str	r5, [r0, #16]
    NVIC_DISABLE_IRQ(irq);
    aa4a:	eb02 1253 	add.w	r2, r2, r3, lsr #5
    aa4e:	f003 011f 	and.w	r1, r3, #31
    aa52:	3310      	adds	r3, #16
    port->MCR = 0;
    aa54:	6107      	str	r7, [r0, #16]
    NVIC_DISABLE_IRQ(irq);
    aa56:	0092      	lsls	r2, r2, #2
    aa58:	fa06 f101 	lsl.w	r1, r6, r1
    port->SCR = (LPI2C_SCR_RST | LPI2C_SCR_RRF | LPI2C_SCR_RTF);
    aa5c:	f8c0 5110 	str.w	r5, [r0, #272]	; 0x110
    port->SCR = 0;
    aa60:	f8c0 7110 	str.w	r7, [r0, #272]	; 0x110
    NVIC_DISABLE_IRQ(irq);
    aa64:	6011      	str	r1, [r2, #0]
    aa66:	f849 7023 	str.w	r7, [r9, r3, lsl #2]
    initialise_common(config, pad_control_config, pullup_config);
    aa6a:	6965      	ldr	r5, [r4, #20]
    aa6c:	46ec      	mov	ip, sp
    aa6e:	68e3      	ldr	r3, [r4, #12]
    aa70:	f105 0e10 	add.w	lr, r5, #16
    aa74:	9311      	str	r3, [sp, #68]	; 0x44
    aa76:	68a3      	ldr	r3, [r4, #8]
    aa78:	9310      	str	r3, [sp, #64]	; 0x40
    aa7a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    aa7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    aa82:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    aa86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    aa8a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    aa8e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    aa92:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
    aa96:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    aa9a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    aa9e:	f7ff fd99 	bl	a5d4 <initialise_common(IMX_RT1060_I2CBase::Config, unsigned long, InternalPullup)>
    port->MFCR = LPI2C_MFCR_RXWATER(0) | LPI2C_MFCR_TXWATER(0);
    aaa2:	6923      	ldr	r3, [r4, #16]
    set_clock(frequency);
    aaa4:	4641      	mov	r1, r8
    aaa6:	4620      	mov	r0, r4
    port->MFCR = LPI2C_MFCR_RXWATER(0) | LPI2C_MFCR_TXWATER(0);
    aaa8:	659f      	str	r7, [r3, #88]	; 0x58
    set_clock(frequency);
    aaaa:	f7ff ff85 	bl	a9b8 <IMX_RT1060_I2CMaster::set_clock(unsigned long)>
    aaae:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
    attachInterruptVector(config.irq, isr);
    aab2:	6b22      	ldr	r2, [r4, #48]	; 0x30
    aab4:	3310      	adds	r3, #16
    aab6:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
    NVIC_ENABLE_IRQ(config.irq);
    aaba:	6962      	ldr	r2, [r4, #20]
    port->MIER = LPI2C_MIER_RDIE | LPI2C_MIER_SDIE | LPI2C_MIER_NDIE | LPI2C_MIER_ALIE | LPI2C_MIER_FEIE | LPI2C_MIER_PLTIE;
    aabc:	f643 6002 	movw	r0, #15874	; 0x3e02
    NVIC_ENABLE_IRQ(config.irq);
    aac0:	4b08      	ldr	r3, [pc, #32]	; (aae4 <IMX_RT1060_I2CMaster::begin(unsigned long)+0xbc>)
    aac2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
    port->MIER = LPI2C_MIER_RDIE | LPI2C_MIER_SDIE | LPI2C_MIER_NDIE | LPI2C_MIER_ALIE | LPI2C_MIER_FEIE | LPI2C_MIER_PLTIE;
    aac6:	6921      	ldr	r1, [r4, #16]
    NVIC_ENABLE_IRQ(config.irq);
    aac8:	eb03 1352 	add.w	r3, r3, r2, lsr #5
    aacc:	f002 021f 	and.w	r2, r2, #31
    port->MIER = LPI2C_MIER_RDIE | LPI2C_MIER_SDIE | LPI2C_MIER_NDIE | LPI2C_MIER_ALIE | LPI2C_MIER_FEIE | LPI2C_MIER_PLTIE;
    aad0:	6188      	str	r0, [r1, #24]
    NVIC_ENABLE_IRQ(config.irq);
    aad2:	009b      	lsls	r3, r3, #2
    aad4:	4096      	lsls	r6, r2
    aad6:	601e      	str	r6, [r3, #0]
}
    aad8:	b013      	add	sp, #76	; 0x4c
    aada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    aade:	bf00      	nop
    aae0:	38003860 	.word	0x38003860
    aae4:	38003840 	.word	0x38003840
    aae8:	20002400 	.word	0x20002400

0000aaec <IMX_RT1060_I2CSlave::listen(unsigned long, unsigned long)>:
    stop_listening();
    aaec:	6803      	ldr	r3, [r0, #0]
void IMX_RT1060_I2CSlave::listen(uint32_t samr, uint32_t address_config) {
    aaee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    stop_listening();
    aaf2:	68db      	ldr	r3, [r3, #12]
void IMX_RT1060_I2CSlave::listen(uint32_t samr, uint32_t address_config) {
    aaf4:	4616      	mov	r6, r2
    aaf6:	4a3b      	ldr	r2, [pc, #236]	; (abe4 <IMX_RT1060_I2CSlave::listen(unsigned long, unsigned long)+0xf8>)
    aaf8:	b092      	sub	sp, #72	; 0x48
    aafa:	4604      	mov	r4, r0
    aafc:	460f      	mov	r7, r1
    aafe:	4293      	cmp	r3, r2
    ab00:	d16c      	bne.n	abdc <IMX_RT1060_I2CSlave::listen(unsigned long, unsigned long)+0xf0>
    NVIC_DISABLE_IRQ(irq);
    ab02:	4a39      	ldr	r2, [pc, #228]	; (abe8 <IMX_RT1060_I2CSlave::listen(unsigned long, unsigned long)+0xfc>)
    ab04:	2501      	movs	r5, #1
    port->MCR = (LPI2C_MCR_RST | LPI2C_MCR_RRF | LPI2C_MCR_RTF);
    ab06:	f240 3c02 	movw	ip, #770	; 0x302
    ab0a:	f8df 80e8 	ldr.w	r8, [pc, #232]	; abf4 <IMX_RT1060_I2CSlave::listen(unsigned long, unsigned long)+0x108>
    stop(port, config.irq);
    ab0e:	e9d0 1304 	ldrd	r1, r3, [r0, #16]
    ab12:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    port->MCR = (LPI2C_MCR_RST | LPI2C_MCR_RRF | LPI2C_MCR_RTF);
    ab16:	f8c1 c010 	str.w	ip, [r1, #16]
    NVIC_DISABLE_IRQ(irq);
    ab1a:	f003 001f 	and.w	r0, r3, #31
    ab1e:	eb02 1253 	add.w	r2, r2, r3, lsr #5
    ab22:	3310      	adds	r3, #16
    ab24:	4085      	lsls	r5, r0
    ab26:	0092      	lsls	r2, r2, #2
    port->MCR = 0;
    ab28:	2000      	movs	r0, #0
    ab2a:	6108      	str	r0, [r1, #16]
    port->SCR = (LPI2C_SCR_RST | LPI2C_SCR_RRF | LPI2C_SCR_RTF);
    ab2c:	f8c1 c110 	str.w	ip, [r1, #272]	; 0x110
    port->SCR = 0;
    ab30:	f8c1 0110 	str.w	r0, [r1, #272]	; 0x110
    NVIC_DISABLE_IRQ(irq);
    ab34:	6015      	str	r5, [r2, #0]
    ab36:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    initialise_common(config, pad_control_config, pullup_config);
    ab3a:	6965      	ldr	r5, [r4, #20]
    ab3c:	46ec      	mov	ip, sp
    ab3e:	68e3      	ldr	r3, [r4, #12]
    port->SCFGR1 = (address_config | LPI2C_SCFGR1_TXDSTALL | LPI2C_SCFGR1_RXSTALL);
    ab40:	f046 0606 	orr.w	r6, r6, #6
    initialise_common(config, pad_control_config, pullup_config);
    ab44:	f105 0e10 	add.w	lr, r5, #16
    ab48:	9311      	str	r3, [sp, #68]	; 0x44
    ab4a:	68a3      	ldr	r3, [r4, #8]
    ab4c:	9310      	str	r3, [sp, #64]	; 0x40
    ab4e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    ab52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    ab56:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    ab5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    ab5e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    ab62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    ab66:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
    ab6a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    ab6e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    ab72:	f7ff fd2f 	bl	a5d4 <initialise_common(IMX_RT1060_I2CBase::Config, unsigned long, InternalPullup)>
    _error = I2CError::ok;
    ab76:	2100      	movs	r1, #0
    ab78:	f895 204c 	ldrb.w	r2, [r5, #76]	; 0x4c
    port->SAMR = samr;
    ab7c:	6923      	ldr	r3, [r4, #16]
    _error = I2CError::ok;
    ab7e:	6061      	str	r1, [r4, #4]
    port->SCFGR2 = LPI2C_SCFGR2_DATAVD(timings.DATAVD);
    ab80:	f44f 7140 	mov.w	r1, #768	; 0x300
    port->SAMR = samr;
    ab84:	f8c3 7140 	str.w	r7, [r3, #320]	; 0x140
    ab88:	3210      	adds	r2, #16
    port->SCFGR2 = LPI2C_SCFGR2_DATAVD(timings.DATAVD);
    ab8a:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    port->SCFGR2 = port->SCFGR2 | LPI2C_SCFGR2_FILTSDA(timings.FILTSDA) | LPI2C_SCFGR2_FILTSCL(timings.FILTSCL);
    ab8e:	4917      	ldr	r1, [pc, #92]	; (abec <IMX_RT1060_I2CSlave::listen(unsigned long, unsigned long)+0x100>)
    ab90:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
    ab94:	4301      	orrs	r1, r0
    ab96:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    attachInterruptVector(config.irq, isr);
    ab9a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    port->SCFGR2 = port->SCFGR2 | LPI2C_SCFGR2_CLKHOLD(timings.CLKHOLD);
    ab9c:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
    aba0:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
    port->SCFGR1 = (address_config | LPI2C_SCFGR1_TXDSTALL | LPI2C_SCFGR1_RXSTALL);
    aba4:	f8c3 6124 	str.w	r6, [r3, #292]	; 0x124
    aba8:	f848 1022 	str.w	r1, [r8, r2, lsl #2]
    NVIC_ENABLE_IRQ(config.irq);
    abac:	6962      	ldr	r2, [r4, #20]
    abae:	2101      	movs	r1, #1
    abb0:	4b0f      	ldr	r3, [pc, #60]	; (abf0 <IMX_RT1060_I2CSlave::listen(unsigned long, unsigned long)+0x104>)
    abb2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
    port->SIER = (LPI2C_SIER_RSIE | LPI2C_SIER_SDIE | LPI2C_SIER_TDIE | LPI2C_SIER_RDIE);
    abb6:	6920      	ldr	r0, [r4, #16]
    abb8:	f240 3403 	movw	r4, #771	; 0x303
    NVIC_ENABLE_IRQ(config.irq);
    abbc:	eb03 1352 	add.w	r3, r3, r2, lsr #5
    abc0:	f002 021f 	and.w	r2, r2, #31
    port->SIER = (LPI2C_SIER_RSIE | LPI2C_SIER_SDIE | LPI2C_SIER_TDIE | LPI2C_SIER_RDIE);
    abc4:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
    NVIC_ENABLE_IRQ(config.irq);
    abc8:	fa01 f202 	lsl.w	r2, r1, r2
    abcc:	009b      	lsls	r3, r3, #2
    port->SCR = LPI2C_SCR_SEN | LPI2C_SCR_FILTEN;
    abce:	2111      	movs	r1, #17
    NVIC_ENABLE_IRQ(config.irq);
    abd0:	601a      	str	r2, [r3, #0]
    port->SCR = LPI2C_SCR_SEN | LPI2C_SCR_FILTEN;
    abd2:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
}
    abd6:	b012      	add	sp, #72	; 0x48
    abd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    abdc:	f8df 8014 	ldr.w	r8, [pc, #20]	; abf4 <IMX_RT1060_I2CSlave::listen(unsigned long, unsigned long)+0x108>
    stop_listening();
    abe0:	4798      	blx	r3
    abe2:	e7aa      	b.n	ab3a <IMX_RT1060_I2CSlave::listen(unsigned long, unsigned long)+0x4e>
    abe4:	0000a3ed 	.word	0x0000a3ed
    abe8:	38003860 	.word	0x38003860
    abec:	06060000 	.word	0x06060000
    abf0:	38003840 	.word	0x38003840
    abf4:	20002400 	.word	0x20002400

0000abf8 <IMX_RT1060_I2CSlave::listen(unsigned char)>:
    uint32_t samr = LPI2C_SAMR_ADDR0(address);
    abf8:	0049      	lsls	r1, r1, #1
    listen(samr, address_config);
    abfa:	2200      	movs	r2, #0
    abfc:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
    ac00:	f7ff bf74 	b.w	aaec <IMX_RT1060_I2CSlave::listen(unsigned long, unsigned long)>

0000ac04 <IMX_RT1060_I2CSlave::listen(unsigned char, unsigned char)>:
void IMX_RT1060_I2CSlave::listen(uint8_t first_address, uint8_t second_address) {
    ac04:	4613      	mov	r3, r2
    uint32_t samr = LPI2C_SAMR_ADDR0(first_address) | LPI2C_SAMR_ADDR1(second_address);
    ac06:	0049      	lsls	r1, r1, #1
    listen(samr, address_config);
    ac08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    uint32_t samr = LPI2C_SAMR_ADDR0(first_address) | LPI2C_SAMR_ADDR1(second_address);
    ac0c:	045b      	lsls	r3, r3, #17
    ac0e:	b2c9      	uxtb	r1, r1
    ac10:	f403 037e 	and.w	r3, r3, #16646144	; 0xfe0000
    listen(samr, address_config);
    ac14:	4319      	orrs	r1, r3
    ac16:	f7ff bf69 	b.w	aaec <IMX_RT1060_I2CSlave::listen(unsigned long, unsigned long)>
    ac1a:	bf00      	nop

0000ac1c <IMX_RT1060_I2CSlave::listen_range(unsigned char, unsigned char)>:
void IMX_RT1060_I2CSlave::listen_range(uint8_t first_address, uint8_t last_address) {
    ac1c:	4613      	mov	r3, r2
    uint32_t samr = LPI2C_SAMR_ADDR0(first_address) | LPI2C_SAMR_ADDR1(last_address);
    ac1e:	0049      	lsls	r1, r1, #1
    listen(samr, address_config);
    ac20:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
    uint32_t samr = LPI2C_SAMR_ADDR0(first_address) | LPI2C_SAMR_ADDR1(last_address);
    ac24:	045b      	lsls	r3, r3, #17
    ac26:	b2c9      	uxtb	r1, r1
    ac28:	f403 037e 	and.w	r3, r3, #16646144	; 0xfe0000
    listen(samr, address_config);
    ac2c:	4319      	orrs	r1, r3
    ac2e:	f7ff bf5d 	b.w	aaec <IMX_RT1060_I2CSlave::listen(unsigned long, unsigned long)>
    ac32:	bf00      	nop

0000ac34 <IMX_RT1060_I2CSlave::end_of_frame()>:
    if (state == State::receiving) {
    ac34:	6983      	ldr	r3, [r0, #24]
void IMX_RT1060_I2CSlave::end_of_frame() {
    ac36:	b510      	push	{r4, lr}
    ac38:	4604      	mov	r4, r0
    ac3a:	b082      	sub	sp, #8
    if (state == State::receiving) {
    ac3c:	b98b      	cbnz	r3, ac62 <IMX_RT1060_I2CSlave::end_of_frame()+0x2e>
        if (after_receive_callback) {
    ac3e:	6c83      	ldr	r3, [r0, #72]	; 0x48
    ac40:	b15b      	cbz	r3, ac5a <IMX_RT1060_I2CSlave::end_of_frame()+0x26>
        return next_index;
    ac42:	6a80      	ldr	r0, [r0, #40]	; 0x28
      _Res
      operator()(_ArgTypes... __args) const
      {
	if (_M_empty())
	  __throw_bad_function_call();
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    ac44:	f10d 0202 	add.w	r2, sp, #2
            after_receive_callback(rx_buffer.get_bytes_transferred(), address_called);
    ac48:	8ba1      	ldrh	r1, [r4, #28]
    ac4a:	9001      	str	r0, [sp, #4]
    ac4c:	f104 0040 	add.w	r0, r4, #64	; 0x40
    ac50:	f8ad 1002 	strh.w	r1, [sp, #2]
    ac54:	a901      	add	r1, sp, #4
    ac56:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    ac58:	4798      	blx	r3
    state = State::idle;
    ac5a:	2364      	movs	r3, #100	; 0x64
    ac5c:	61a3      	str	r3, [r4, #24]
}
    ac5e:	b002      	add	sp, #8
    ac60:	bd10      	pop	{r4, pc}
    } else if (state == State::transmitting) {
    ac62:	6983      	ldr	r3, [r0, #24]
    ac64:	2b01      	cmp	r3, #1
    ac66:	d1f8      	bne.n	ac5a <IMX_RT1060_I2CSlave::end_of_frame()+0x26>
        trailing_byte_sent = false;
    ac68:	2200      	movs	r2, #0
        if (after_transmit_callback) {
    ac6a:	6e83      	ldr	r3, [r0, #104]	; 0x68
        trailing_byte_sent = false;
    ac6c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
        if (after_transmit_callback) {
    ac70:	2b00      	cmp	r3, #0
    ac72:	d0f2      	beq.n	ac5a <IMX_RT1060_I2CSlave::end_of_frame()+0x26>
            after_transmit_callback(address_called);
    ac74:	8b82      	ldrh	r2, [r0, #28]
    ac76:	a901      	add	r1, sp, #4
    ac78:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    ac7a:	3060      	adds	r0, #96	; 0x60
    ac7c:	f8ad 2004 	strh.w	r2, [sp, #4]
    ac80:	4798      	blx	r3
    ac82:	e7ea      	b.n	ac5a <IMX_RT1060_I2CSlave::end_of_frame()+0x26>

0000ac84 <IMX_RT1060_I2CSlave::_interrupt_service_routine()>:
    uint32_t ssr = port->SSR;
    ac84:	6903      	ldr	r3, [r0, #16]
void IMX_RT1060_I2CSlave::_interrupt_service_routine() {
    ac86:	b530      	push	{r4, r5, lr}
    uint32_t ssr = port->SSR;
    ac88:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
void IMX_RT1060_I2CSlave::_interrupt_service_routine() {
    ac8c:	b083      	sub	sp, #12
    ac8e:	4604      	mov	r4, r0
    if (ssr & LPI2C_SSR_AVF) {
    ac90:	076a      	lsls	r2, r5, #29
    ac92:	d504      	bpl.n	ac9e <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0x1a>
        address_called = (port->SASR & LPI2C_SASR_RADDR(0x7FF)) >> 1;
    ac94:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
    ac98:	f3c2 0249 	ubfx	r2, r2, #1, #10
    ac9c:	8382      	strh	r2, [r0, #28]
    if (ssr & (LPI2C_SSR_RSF | LPI2C_SSR_SDF)) {
    ac9e:	f415 7f40 	tst.w	r5, #768	; 0x300
    aca2:	d16e      	bne.n	ad82 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0xfe>
    if (ssr & LPI2C_SSR_RDF) {
    aca4:	07ab      	lsls	r3, r5, #30
    aca6:	d517      	bpl.n	acd8 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0x54>
        uint32_t srdr = port->SRDR; // Read the Slave Received Data Register
    aca8:	6923      	ldr	r3, [r4, #16]
    acaa:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
        if (srdr & LPI2C_SRDR_SOF) {
    acae:	0418      	lsls	r0, r3, #16
    acb0:	d505      	bpl.n	acbe <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0x3a>
            _error = I2CError::ok;
    acb2:	2200      	movs	r2, #0
    acb4:	6062      	str	r2, [r4, #4]
        return size > 0;
    acb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
            if (rx_buffer.initialised()) {
    acb8:	b109      	cbz	r1, acbe <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0x3a>
        next_index = 0;
    acba:	62a2      	str	r2, [r4, #40]	; 0x28
                state = State::receiving;
    acbc:	61a2      	str	r2, [r4, #24]
        return size > 0;
    acbe:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if (rx_buffer.initialised()) {
    acc0:	2a00      	cmp	r2, #0
    acc2:	d059      	beq.n	ad78 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0xf4>
        if (next_index == size) {
    acc4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    acc6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    acc8:	4291      	cmp	r1, r2
    acca:	d06e      	beq.n	adaa <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0x126>
            buffer[next_index++] = data;
    accc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        uint8_t data = srdr & LPI2C_SRDR_DATA(0xFF);
    acce:	b2db      	uxtb	r3, r3
    acd0:	6a21      	ldr	r1, [r4, #32]
    acd2:	1c50      	adds	r0, r2, #1
    acd4:	62a0      	str	r0, [r4, #40]	; 0x28
    acd6:	548b      	strb	r3, [r1, r2]
    if (ssr & LPI2C_SSR_TDF) {
    acd8:	07e9      	lsls	r1, r5, #31
    acda:	d525      	bpl.n	ad28 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0xa4>
        bool start_of_frame = state >= State::idle;
    acdc:	69a3      	ldr	r3, [r4, #24]
        if (start_of_frame) {
    acde:	2b63      	cmp	r3, #99	; 0x63
    ace0:	dd3e      	ble.n	ad60 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0xdc>
            _error = I2CError::ok;
    ace2:	2100      	movs	r1, #0
            state = State::transmitting;
    ace4:	2201      	movs	r2, #1
            if (before_transmit_callback) {
    ace6:	6da3      	ldr	r3, [r4, #88]	; 0x58
            _error = I2CError::ok;
    ace8:	6061      	str	r1, [r4, #4]
            state = State::transmitting;
    acea:	61a2      	str	r2, [r4, #24]
            if (before_transmit_callback) {
    acec:	b143      	cbz	r3, ad00 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0x7c>
                before_transmit_callback(address_called);
    acee:	8ba2      	ldrh	r2, [r4, #28]
    acf0:	f10d 0106 	add.w	r1, sp, #6
    acf4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    acf6:	f104 0050 	add.w	r0, r4, #80	; 0x50
    acfa:	f8ad 2006 	strh.w	r2, [sp, #6]
    acfe:	4798      	blx	r3
        return size > 0;
    ad00:	6b23      	ldr	r3, [r4, #48]	; 0x30
        if (tx_buffer.initialised()) {
    ad02:	2b00      	cmp	r3, #0
    ad04:	d02f      	beq.n	ad66 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0xe2>
        next_index = 0;
    ad06:	2300      	movs	r3, #0
    ad08:	6363      	str	r3, [r4, #52]	; 0x34
        return next_index < size;
    ad0a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    ad0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
            if (tx_buffer.has_data_available()) {
    ad0e:	429a      	cmp	r2, r3
    ad10:	d33f      	bcc.n	ad92 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0x10e>
                port->STDR = DUMMY_BYTE;
    ad12:	6922      	ldr	r2, [r4, #16]
    ad14:	2100      	movs	r1, #0
                if (!trailing_byte_sent) {
    ad16:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                port->STDR = DUMMY_BYTE;
    ad1a:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
                if (!trailing_byte_sent) {
    ad1e:	2b00      	cmp	r3, #0
    ad20:	d146      	bne.n	adb0 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0x12c>
                    trailing_byte_sent = true;
    ad22:	2301      	movs	r3, #1
    ad24:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    if (ssr & LPI2C_SSR_FEF) {
    ad28:	052a      	lsls	r2, r5, #20
    ad2a:	d403      	bmi.n	ad34 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0xb0>
    if (ssr & LPI2C_SSR_BEF) {
    ad2c:	056b      	lsls	r3, r5, #21
    ad2e:	d408      	bmi.n	ad42 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0xbe>
}
    ad30:	b003      	add	sp, #12
    ad32:	bd30      	pop	{r4, r5, pc}
        port->SSR = LPI2C_SSR_FEF;
    ad34:	6923      	ldr	r3, [r4, #16]
    ad36:	f44f 6200 	mov.w	r2, #2048	; 0x800
    ad3a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    if (ssr & LPI2C_SSR_BEF) {
    ad3e:	056b      	lsls	r3, r5, #21
    ad40:	d5f6      	bpl.n	ad30 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0xac>
        port->SSR = LPI2C_SSR_BEF;
    ad42:	6921      	ldr	r1, [r4, #16]
    ad44:	f44f 6080 	mov.w	r0, #1024	; 0x400
        state = State::aborted;
    ad48:	2265      	movs	r2, #101	; 0x65
        _error = I2CError::bit_error;
    ad4a:	230b      	movs	r3, #11
        port->SSR = LPI2C_SSR_BEF;
    ad4c:	f8c1 0114 	str.w	r0, [r1, #276]	; 0x114
        end_of_frame();
    ad50:	4620      	mov	r0, r4
        state = State::aborted;
    ad52:	61a2      	str	r2, [r4, #24]
        _error = I2CError::bit_error;
    ad54:	6063      	str	r3, [r4, #4]
}
    ad56:	b003      	add	sp, #12
    ad58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        end_of_frame();
    ad5c:	f7ff bf6a 	b.w	ac34 <IMX_RT1060_I2CSlave::end_of_frame()>
        return size > 0;
    ad60:	6b23      	ldr	r3, [r4, #48]	; 0x30
        if (tx_buffer.initialised()) {
    ad62:	2b00      	cmp	r3, #0
    ad64:	d1d1      	bne.n	ad0a <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0x86>
            port->STDR = DUMMY_BYTE;
    ad66:	6922      	ldr	r2, [r4, #16]
    ad68:	2100      	movs	r1, #0
            _error = I2CError::buffer_underflow;
    ad6a:	2303      	movs	r3, #3
            port->STDR = DUMMY_BYTE;
    ad6c:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
    if (ssr & LPI2C_SSR_FEF) {
    ad70:	052a      	lsls	r2, r5, #20
            _error = I2CError::buffer_underflow;
    ad72:	6063      	str	r3, [r4, #4]
    if (ssr & LPI2C_SSR_FEF) {
    ad74:	d5da      	bpl.n	ad2c <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0xa8>
    ad76:	e7dd      	b.n	ad34 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0xb0>
            _error = I2CError::buffer_overflow;
    ad78:	2202      	movs	r2, #2
            state = State::idle;
    ad7a:	2364      	movs	r3, #100	; 0x64
            _error = I2CError::buffer_overflow;
    ad7c:	6062      	str	r2, [r4, #4]
            state = State::idle;
    ad7e:	61a3      	str	r3, [r4, #24]
    ad80:	e7aa      	b.n	acd8 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0x54>
        port->SSR = (LPI2C_SSR_RSF | LPI2C_SSR_SDF);
    ad82:	f44f 7240 	mov.w	r2, #768	; 0x300
        end_of_frame();
    ad86:	4620      	mov	r0, r4
        port->SSR = (LPI2C_SSR_RSF | LPI2C_SSR_SDF);
    ad88:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        end_of_frame();
    ad8c:	f7ff ff52 	bl	ac34 <IMX_RT1060_I2CSlave::end_of_frame()>
    ad90:	e788      	b.n	aca4 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0x20>
        return buffer[next_index++];
    ad92:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ad94:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    ad96:	1c59      	adds	r1, r3, #1
    ad98:	6361      	str	r1, [r4, #52]	; 0x34
    ad9a:	5cd3      	ldrb	r3, [r2, r3]
                port->STDR = tx_buffer.read();
    ad9c:	6922      	ldr	r2, [r4, #16]
    ad9e:	b2db      	uxtb	r3, r3
    ada0:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    if (ssr & LPI2C_SSR_FEF) {
    ada4:	052a      	lsls	r2, r5, #20
    ada6:	d5c1      	bpl.n	ad2c <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0xa8>
    ada8:	e7c4      	b.n	ad34 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0xb0>
                _error = I2CError::buffer_overflow;
    adaa:	2302      	movs	r3, #2
    adac:	6063      	str	r3, [r4, #4]
    adae:	e793      	b.n	acd8 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0x54>
                    _error = I2CError::buffer_underflow;
    adb0:	2303      	movs	r3, #3
    adb2:	6063      	str	r3, [r4, #4]
    adb4:	e7b8      	b.n	ad28 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0xa4>
    adb6:	bf00      	nop

0000adb8 <slave2_isr()>:
static void slave2_isr();

IMX_RT1060_I2CSlave Slave2(&LPI2C4, i2c4_config, slave2_isr);

static void slave2_isr() {
    Slave2._interrupt_service_routine();
    adb8:	4801      	ldr	r0, [pc, #4]	; (adc0 <slave2_isr()+0x8>)
    adba:	f7ff bf63 	b.w	ac84 <IMX_RT1060_I2CSlave::_interrupt_service_routine()>
    adbe:	bf00      	nop
    adc0:	200030f8 	.word	0x200030f8

0000adc4 <slave1_isr()>:
    Slave1._interrupt_service_routine();
    adc4:	4801      	ldr	r0, [pc, #4]	; (adcc <slave1_isr()+0x8>)
    adc6:	f7ff bf5d 	b.w	ac84 <IMX_RT1060_I2CSlave::_interrupt_service_routine()>
    adca:	bf00      	nop
    adcc:	20003088 	.word	0x20003088

0000add0 <slave_isr()>:
    Slave._interrupt_service_routine();
    add0:	4801      	ldr	r0, [pc, #4]	; (add8 <slave_isr()+0x8>)
    add2:	f7ff bf57 	b.w	ac84 <IMX_RT1060_I2CSlave::_interrupt_service_routine()>
    add6:	bf00      	nop
    add8:	20003018 	.word	0x20003018

0000addc <_GLOBAL__sub_I__ZN9I2CBufferC2Ev>:
}
    addc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    : pad_control_config(PAD_CONTROL_CONFIG), pullup_config(InternalPullup::enabled_22k_ohm) {
    ade0:	f8df c140 	ldr.w	ip, [pc, #320]	; af24 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x148>
    ade4:	2300      	movs	r3, #0
    ade6:	f8df e140 	ldr.w	lr, [pc, #320]	; af28 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x14c>
        : port(port), config(config), isr(isr) {
    adea:	f04f 0b64 	mov.w	fp, #100	; 0x64
    : pad_control_config(PAD_CONTROL_CONFIG), pullup_config(InternalPullup::enabled_22k_ohm) {
    adee:	483e      	ldr	r0, [pc, #248]	; (aee8 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x10c>)
    adf0:	4c3e      	ldr	r4, [pc, #248]	; (aeec <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x110>)
        : port(port), config(config), isr(isr) {
    adf2:	4f3f      	ldr	r7, [pc, #252]	; (aef0 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x114>)
    : pad_control_config(PAD_CONTROL_CONFIG), pullup_config(InternalPullup::enabled_22k_ohm) {
    adf4:	f8cc 4008 	str.w	r4, [ip, #8]
    adf8:	f8ce 4008 	str.w	r4, [lr, #8]
    adfc:	6084      	str	r4, [r0, #8]
    adfe:	2403      	movs	r4, #3
        : port(port), config(config), isr(isr) {
    ae00:	6107      	str	r7, [r0, #16]
    ae02:	4f3c      	ldr	r7, [pc, #240]	; (aef4 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x118>)
    : pad_control_config(PAD_CONTROL_CONFIG), pullup_config(InternalPullup::enabled_22k_ohm) {
    ae04:	f8cc 400c 	str.w	r4, [ip, #12]
I2CBuffer::I2CBuffer() : buffer(empty_buffer) {
    ae08:	4e3b      	ldr	r6, [pc, #236]	; (aef8 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x11c>)
        : port(port), config(config), isr(isr) {
    ae0a:	493c      	ldr	r1, [pc, #240]	; (aefc <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x120>)
    ae0c:	4a3c      	ldr	r2, [pc, #240]	; (af00 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x124>)
    : pad_control_config(PAD_CONTROL_CONFIG), pullup_config(InternalPullup::enabled_22k_ohm) {
    ae0e:	f8ce 400c 	str.w	r4, [lr, #12]
    ae12:	60c4      	str	r4, [r0, #12]
        : port(port), config(config), isr(isr) {
    ae14:	6147      	str	r7, [r0, #20]
    ae16:	4c3b      	ldr	r4, [pc, #236]	; (af04 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x128>)
    ae18:	4f3b      	ldr	r7, [pc, #236]	; (af08 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x12c>)
    : pad_control_config(PAD_CONTROL_CONFIG), pullup_config(InternalPullup::enabled_22k_ohm) {
    ae1a:	f8ce 3004 	str.w	r3, [lr, #4]
        : port(port), config(config), isr(isr) {
    ae1e:	f8ce 1010 	str.w	r1, [lr, #16]
I2CBuffer::I2CBuffer() : buffer(empty_buffer) {
    ae22:	f8ce 301c 	str.w	r3, [lr, #28]
        : port(port), config(config), isr(isr) {
    ae26:	f8ce 2014 	str.w	r2, [lr, #20]
I2CBuffer::I2CBuffer() : buffer(empty_buffer) {
    ae2a:	f8ce 3020 	str.w	r3, [lr, #32]
        : port(port), config(config), isr(isr) {
    ae2e:	f8df 80fc 	ldr.w	r8, [pc, #252]	; af2c <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x150>
    ae32:	f8ce b024 	str.w	fp, [lr, #36]	; 0x24
    ae36:	f8df 90f8 	ldr.w	r9, [pc, #248]	; af30 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x154>
    ae3a:	f8ce 3028 	str.w	r3, [lr, #40]	; 0x28
    ae3e:	f8ce 4000 	str.w	r4, [lr]
    ae42:	f88e 302c 	strb.w	r3, [lr, #44]	; 0x2c
I2CBuffer::I2CBuffer() : buffer(empty_buffer) {
    ae46:	f8ce 6018 	str.w	r6, [lr, #24]
        : port(port), config(config), isr(isr) {
    ae4a:	f8ce 7030 	str.w	r7, [lr, #48]	; 0x30
    ae4e:	f8df e0e4 	ldr.w	lr, [pc, #228]	; af34 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x158>
    : pad_control_config(PAD_CONTROL_CONFIG), pullup_config(InternalPullup::enabled_22k_ohm) {
    ae52:	f8cc 3004 	str.w	r3, [ip, #4]
        : port(port), config(config), isr(isr) {
    ae56:	f8cc 4000 	str.w	r4, [ip]
I2CBuffer::I2CBuffer() : buffer(empty_buffer) {
    ae5a:	f8cc 301c 	str.w	r3, [ip, #28]
    ae5e:	f8cc 6018 	str.w	r6, [ip, #24]
    ae62:	f8cc 3020 	str.w	r3, [ip, #32]
        : port(port), config(config), isr(isr) {
    ae66:	f8cc 8010 	str.w	r8, [ip, #16]
    ae6a:	f8cc b024 	str.w	fp, [ip, #36]	; 0x24
    ae6e:	f8cc 9014 	str.w	r9, [ip, #20]
    ae72:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
IMX_RT1060_I2CSlave Slave(&LPI2C1, i2c1_config, slave_isr);
    ae76:	f8df a0c0 	ldr.w	sl, [pc, #192]	; af38 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x15c>
        : port(port), config(config), isr(isr) {
    ae7a:	f88c 302c 	strb.w	r3, [ip, #44]	; 0x2c
    ae7e:	6004      	str	r4, [r0, #0]
    : pad_control_config(PAD_CONTROL_CONFIG), pullup_config(InternalPullup::enabled_22k_ohm) {
    ae80:	6043      	str	r3, [r0, #4]
        : port(port), config(config), isr(isr) {
    ae82:	f8cc e030 	str.w	lr, [ip, #48]	; 0x30
I2CBuffer::I2CBuffer() : buffer(empty_buffer) {
    ae86:	61c3      	str	r3, [r0, #28]
    ae88:	6203      	str	r3, [r0, #32]
        : port(port), config(config), isr(isr) {
    ae8a:	f8c0 b024 	str.w	fp, [r0, #36]	; 0x24
    ae8e:	6283      	str	r3, [r0, #40]	; 0x28
    ae90:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    ae94:	4b1d      	ldr	r3, [pc, #116]	; (af0c <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x130>)
IMX_RT1060_I2CSlave Slave(&LPI2C1, i2c1_config, slave_isr);
    ae96:	4d1e      	ldr	r5, [pc, #120]	; (af10 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x134>)
    ae98:	4c1e      	ldr	r4, [pc, #120]	; (af14 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x138>)
IMX_RT1060_I2CSlave Slave1(&LPI2C3, i2c3_config, slave1_isr);
    ae9a:	f8df b0a0 	ldr.w	fp, [pc, #160]	; af3c <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x160>
I2CBuffer::I2CBuffer() : buffer(empty_buffer) {
    ae9e:	6186      	str	r6, [r0, #24]
        : port(port), config(config), isr(isr) {
    aea0:	6303      	str	r3, [r0, #48]	; 0x30
IMX_RT1060_I2CSlave Slave(&LPI2C1, i2c1_config, slave_isr);
    aea2:	4650      	mov	r0, sl
    aea4:	4b1c      	ldr	r3, [pc, #112]	; (af18 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x13c>)
    aea6:	f7ff fb67 	bl	a578 <IMX_RT1060_I2CSlave::IMX_RT1060_I2CSlave(IMXRT_LPI2C_Registers*, IMX_RT1060_I2CBase::Config&, void (*)())>
    aeaa:	462a      	mov	r2, r5
    aeac:	4621      	mov	r1, r4
    aeae:	4650      	mov	r0, sl
    aeb0:	f002 fba8 	bl	d604 <__aeabi_atexit>
IMX_RT1060_I2CSlave Slave1(&LPI2C3, i2c3_config, slave1_isr);
    aeb4:	464a      	mov	r2, r9
    aeb6:	4641      	mov	r1, r8
    aeb8:	4b18      	ldr	r3, [pc, #96]	; (af1c <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x140>)
IMX_RT1060_I2CSlave Slave2(&LPI2C4, i2c4_config, slave2_isr);
    aeba:	f8df 8084 	ldr.w	r8, [pc, #132]	; af40 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x164>
IMX_RT1060_I2CSlave Slave1(&LPI2C3, i2c3_config, slave1_isr);
    aebe:	4658      	mov	r0, fp
    aec0:	f7ff fb5a 	bl	a578 <IMX_RT1060_I2CSlave::IMX_RT1060_I2CSlave(IMXRT_LPI2C_Registers*, IMX_RT1060_I2CBase::Config&, void (*)())>
    aec4:	462a      	mov	r2, r5
    aec6:	4621      	mov	r1, r4
    aec8:	4658      	mov	r0, fp
    aeca:	f002 fb9b 	bl	d604 <__aeabi_atexit>
IMX_RT1060_I2CSlave Slave2(&LPI2C4, i2c4_config, slave2_isr);
    aece:	4a09      	ldr	r2, [pc, #36]	; (aef4 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x118>)
    aed0:	4907      	ldr	r1, [pc, #28]	; (aef0 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x114>)
    aed2:	4640      	mov	r0, r8
    aed4:	4b12      	ldr	r3, [pc, #72]	; (af20 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x144>)
    aed6:	f7ff fb4f 	bl	a578 <IMX_RT1060_I2CSlave::IMX_RT1060_I2CSlave(IMXRT_LPI2C_Registers*, IMX_RT1060_I2CBase::Config&, void (*)())>
    aeda:	462a      	mov	r2, r5
    aedc:	4621      	mov	r1, r4
    aede:	4640      	mov	r0, r8
}
    aee0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
IMX_RT1060_I2CSlave Slave2(&LPI2C4, i2c4_config, slave2_isr);
    aee4:	f002 bb8e 	b.w	d604 <__aeabi_atexit>
    aee8:	20002b10 	.word	0x20002b10
    aeec:	00010810 	.word	0x00010810
    aef0:	403fc000 	.word	0x403fc000
    aef4:	20002204 	.word	0x20002204
    aef8:	200033c8 	.word	0x200033c8
    aefc:	403f0000 	.word	0x403f0000
    af00:	20002164 	.word	0x20002164
    af04:	20000f68 	.word	0x20000f68
    af08:	0000a845 	.word	0x0000a845
    af0c:	0000a82d 	.word	0x0000a82d
    af10:	20001bc0 	.word	0x20001bc0
    af14:	0000a47d 	.word	0x0000a47d
    af18:	0000add1 	.word	0x0000add1
    af1c:	0000adc5 	.word	0x0000adc5
    af20:	0000adb9 	.word	0x0000adb9
    af24:	20002adc 	.word	0x20002adc
    af28:	20002aa8 	.word	0x20002aa8
    af2c:	403f8000 	.word	0x403f8000
    af30:	200021b4 	.word	0x200021b4
    af34:	0000a839 	.word	0x0000a839
    af38:	20003018 	.word	0x20003018
    af3c:	20003088 	.word	0x20003088
    af40:	200030f8 	.word	0x200030f8

0000af44 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    af44:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    af48:	b672      	cpsid	i
// BUGBUG: See if file name order makes difference?

void EventResponder::triggerEventNotImmediate()
{
	bool irq = disableInterrupts();
	if (_triggered == false) {
    af4a:	7f43      	ldrb	r3, [r0, #29]
    af4c:	b95b      	cbnz	r3, af66 <EventResponder::triggerEventNotImmediate()+0x22>
		// not already triggered
		if (_type == EventTypeYield) {
    af4e:	7f01      	ldrb	r1, [r0, #28]
    af50:	2901      	cmp	r1, #1
{
    af52:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    af54:	d00b      	beq.n	af6e <EventResponder::triggerEventNotImmediate()+0x2a>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    af56:	2903      	cmp	r1, #3
    af58:	d013      	beq.n	af82 <EventResponder::triggerEventNotImmediate()+0x3e>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    af5a:	2301      	movs	r3, #1
    af5c:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    af5e:	b902      	cbnz	r2, af62 <EventResponder::triggerEventNotImmediate()+0x1e>
    af60:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    af62:	bc30      	pop	{r4, r5}
    af64:	4770      	bx	lr
    af66:	b90a      	cbnz	r2, af6c <EventResponder::triggerEventNotImmediate()+0x28>
    af68:	b662      	cpsie	i
    af6a:	4770      	bx	lr
    af6c:	4770      	bx	lr
			if (firstYield == nullptr) {
    af6e:	4c12      	ldr	r4, [pc, #72]	; (afb8 <EventResponder::triggerEventNotImmediate()+0x74>)
    af70:	6821      	ldr	r1, [r4, #0]
    af72:	b1b1      	cbz	r1, afa2 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    af74:	4911      	ldr	r1, [pc, #68]	; (afbc <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    af76:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    af78:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
    af7a:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
    af7c:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    af7e:	6158      	str	r0, [r3, #20]
				lastYield = this;
    af80:	e7eb      	b.n	af5a <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    af82:	4d0f      	ldr	r5, [pc, #60]	; (afc0 <EventResponder::triggerEventNotImmediate()+0x7c>)
    af84:	490f      	ldr	r1, [pc, #60]	; (afc4 <EventResponder::triggerEventNotImmediate()+0x80>)
    af86:	682c      	ldr	r4, [r5, #0]
    af88:	b18c      	cbz	r4, afae <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    af8a:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    af8c:	680b      	ldr	r3, [r1, #0]
    af8e:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    af90:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    af92:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    af96:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    af9a:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    af9c:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    afa0:	e7db      	b.n	af5a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    afa2:	4b06      	ldr	r3, [pc, #24]	; (afbc <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    afa4:	6020      	str	r0, [r4, #0]
				lastYield = this;
    afa6:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
    afa8:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
    afac:	e7d5      	b.n	af5a <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    afae:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    afb2:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    afb4:	e7ed      	b.n	af92 <EventResponder::triggerEventNotImmediate()+0x4e>
    afb6:	bf00      	nop
    afb8:	20003404 	.word	0x20003404
    afbc:	20003410 	.word	0x20003410
    afc0:	2000340c 	.word	0x2000340c
    afc4:	20003408 	.word	0x20003408

0000afc8 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    afc8:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    afca:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    afce:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    afd0:	4c0c      	ldr	r4, [pc, #48]	; (b004 <EventResponder::runFromInterrupt()+0x3c>)
    afd2:	6820      	ldr	r0, [r4, #0]
		if (first) {
    afd4:	b180      	cbz	r0, aff8 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    afd6:	4e0c      	ldr	r6, [pc, #48]	; (b008 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    afd8:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    afda:	6943      	ldr	r3, [r0, #20]
    afdc:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    afde:	b173      	cbz	r3, affe <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    afe0:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    afe2:	b902      	cbnz	r2, afe6 <EventResponder::runFromInterrupt()+0x1e>
    afe4:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    afe6:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    afe8:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    afea:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    afec:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    aff0:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    aff2:	6820      	ldr	r0, [r4, #0]
		if (first) {
    aff4:	2800      	cmp	r0, #0
    aff6:	d1f0      	bne.n	afda <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    aff8:	b902      	cbnz	r2, affc <EventResponder::runFromInterrupt()+0x34>
    affa:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    affc:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    affe:	6033      	str	r3, [r6, #0]
    b000:	e7ef      	b.n	afe2 <EventResponder::runFromInterrupt()+0x1a>
    b002:	bf00      	nop
    b004:	2000340c 	.word	0x2000340c
    b008:	20003408 	.word	0x20003408

0000b00c <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    b00c:	f7ff bfdc 	b.w	afc8 <EventResponder::runFromInterrupt()>

0000b010 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    b010:	4904      	ldr	r1, [pc, #16]	; (b024 <systick_isr+0x14>)
	systick_millis_count++;
    b012:	4a05      	ldr	r2, [pc, #20]	; (b028 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    b014:	6849      	ldr	r1, [r1, #4]
    b016:	4b05      	ldr	r3, [pc, #20]	; (b02c <systick_isr+0x1c>)
    b018:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    b01a:	6813      	ldr	r3, [r2, #0]
    b01c:	3301      	adds	r3, #1
    b01e:	6013      	str	r3, [r2, #0]
}
    b020:	4770      	bx	lr
    b022:	bf00      	nop
    b024:	e0001000 	.word	0xe0001000
    b028:	200038d8 	.word	0x200038d8
    b02c:	200038d4 	.word	0x200038d4

0000b030 <IRQHandler_Serial1>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial1()
{
	Serial1.IRQHandler();
    b030:	4801      	ldr	r0, [pc, #4]	; (b038 <IRQHandler_Serial1+0x8>)
    b032:	f002 b921 	b.w	d278 <HardwareSerialIMXRT::IRQHandler()>
    b036:	bf00      	nop
    b038:	20001a80 	.word	0x20001a80

0000b03c <IRQHandler_Serial2>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial2()
{
	Serial2.IRQHandler();
    b03c:	4801      	ldr	r0, [pc, #4]	; (b044 <IRQHandler_Serial2+0x8>)
    b03e:	f002 b91b 	b.w	d278 <HardwareSerialIMXRT::IRQHandler()>
    b042:	bf00      	nop
    b044:	20001ae0 	.word	0x20001ae0

0000b048 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b048:	4608      	mov	r0, r1
    b04a:	f001 bd47 	b.w	cadc <usb_serial_putchar>
    b04e:	bf00      	nop

0000b050 <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    b050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    b054:	460c      	mov	r4, r1
    b056:	b1d1      	cbz	r1, b08e <Print::write(unsigned char const*, unsigned int)+0x3e>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    b058:	b1ea      	cbz	r2, b096 <Print::write(unsigned char const*, unsigned int)+0x46>
    b05a:	4680      	mov	r8, r0
    b05c:	188e      	adds	r6, r1, r2
	size_t count = 0;
    b05e:	2500      	movs	r5, #0
    b060:	4f0e      	ldr	r7, [pc, #56]	; (b09c <Print::write(unsigned char const*, unsigned int)+0x4c>)
    b062:	e004      	b.n	b06e <Print::write(unsigned char const*, unsigned int)+0x1e>
    b064:	f001 fd3a 	bl	cadc <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    b068:	42b4      	cmp	r4, r6
    b06a:	4405      	add	r5, r0
    b06c:	d00c      	beq.n	b088 <Print::write(unsigned char const*, unsigned int)+0x38>
    b06e:	f8d8 3000 	ldr.w	r3, [r8]
    b072:	f814 0b01 	ldrb.w	r0, [r4], #1
    b076:	681b      	ldr	r3, [r3, #0]
    b078:	42bb      	cmp	r3, r7
    b07a:	d0f3      	beq.n	b064 <Print::write(unsigned char const*, unsigned int)+0x14>
    b07c:	4601      	mov	r1, r0
    b07e:	4640      	mov	r0, r8
    b080:	4798      	blx	r3
    b082:	42b4      	cmp	r4, r6
    b084:	4405      	add	r5, r0
    b086:	d1f2      	bne.n	b06e <Print::write(unsigned char const*, unsigned int)+0x1e>
	return count;
}
    b088:	4628      	mov	r0, r5
    b08a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    b08e:	460d      	mov	r5, r1
}
    b090:	4628      	mov	r0, r5
    b092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    b096:	4615      	mov	r5, r2
    b098:	e7f6      	b.n	b088 <Print::write(unsigned char const*, unsigned int)+0x38>
    b09a:	bf00      	nop
    b09c:	0000b049 	.word	0x0000b049

0000b0a0 <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    b0a0:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    b0a2:	6803      	ldr	r3, [r0, #0]
{
    b0a4:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    b0a6:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    b0aa:	2202      	movs	r2, #2
    b0ac:	a901      	add	r1, sp, #4
    b0ae:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    b0b0:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    b0b4:	4798      	blx	r3
}
    b0b6:	b003      	add	sp, #12
    b0b8:	f85d fb04 	ldr.w	pc, [sp], #4

0000b0bc <_write>:
extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	if (file >= 0 && file <= 2) file = (int)&Serial;
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    b0bc:	4b05      	ldr	r3, [pc, #20]	; (b0d4 <_write+0x18>)
    b0be:	2802      	cmp	r0, #2
    b0c0:	bf88      	it	hi
    b0c2:	4603      	movhi	r3, r0
{
    b0c4:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    b0c6:	681c      	ldr	r4, [r3, #0]
    b0c8:	4618      	mov	r0, r3
    b0ca:	6863      	ldr	r3, [r4, #4]
}
    b0cc:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    b0d0:	4718      	bx	r3
    b0d2:	bf00      	nop
    b0d4:	20001a70 	.word	0x20001a70

0000b0d8 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    b0d8:	b40e      	push	{r1, r2, r3}
    b0da:	b500      	push	{lr}
    b0dc:	b082      	sub	sp, #8
    b0de:	aa03      	add	r2, sp, #12
    b0e0:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    b0e4:	9201      	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    b0e6:	f002 fb37 	bl	d758 <vdprintf>
	va_end(ap);
	return retval;
#endif
}
    b0ea:	b002      	add	sp, #8
    b0ec:	f85d eb04 	ldr.w	lr, [sp], #4
    b0f0:	b003      	add	sp, #12
    b0f2:	4770      	bx	lr

0000b0f4 <breakTime(unsigned long, DateTimeFields&)>:
  tm.sec = time % 60;
    b0f4:	4a4d      	ldr	r2, [pc, #308]	; (b22c <breakTime(unsigned long, DateTimeFields&)+0x138>)
{
    b0f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tm.sec = time % 60;
    b0fa:	fba2 4300 	umull	r4, r3, r2, r0
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    b0fe:	f240 1a6d 	movw	sl, #365	; 0x16d
    b102:	4f4b      	ldr	r7, [pc, #300]	; (b230 <breakTime(unsigned long, DateTimeFields&)+0x13c>)
  tm.sec = time % 60;
    b104:	095b      	lsrs	r3, r3, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    b106:	f8df 8138 	ldr.w	r8, [pc, #312]	; b240 <breakTime(unsigned long, DateTimeFields&)+0x14c>
    b10a:	f8df 9138 	ldr.w	r9, [pc, #312]	; b244 <breakTime(unsigned long, DateTimeFields&)+0x150>
  tm.min = time % 60;
    b10e:	fba2 4203 	umull	r4, r2, r2, r3
  tm.sec = time % 60;
    b112:	ebc3 1403 	rsb	r4, r3, r3, lsl #4
  tm.min = time % 60;
    b116:	0952      	lsrs	r2, r2, #5
  tm.sec = time % 60;
    b118:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
  tm.hour = time % 24;
    b11c:	4c45      	ldr	r4, [pc, #276]	; (b234 <breakTime(unsigned long, DateTimeFields&)+0x140>)
  tm.min = time % 60;
    b11e:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
  tm.sec = time % 60;
    b122:	7008      	strb	r0, [r1, #0]
  tm.min = time % 60;
    b124:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
  tm.hour = time % 24;
    b128:	fba4 5402 	umull	r5, r4, r4, r2
    b12c:	0924      	lsrs	r4, r4, #4
  tm.min = time % 60;
    b12e:	704b      	strb	r3, [r1, #1]
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    b130:	4b41      	ldr	r3, [pc, #260]	; (b238 <breakTime(unsigned long, DateTimeFields&)+0x144>)
    b132:	1d25      	adds	r5, r4, #4
  tm.hour = time % 24;
    b134:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    b138:	eba2 02c0 	sub.w	r2, r2, r0, lsl #3
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    b13c:	fba3 0305 	umull	r0, r3, r3, r5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    b140:	2000      	movs	r0, #0
  tm.hour = time % 24;
    b142:	708a      	strb	r2, [r1, #2]
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    b144:	1aea      	subs	r2, r5, r3
    b146:	eb03 0352 	add.w	r3, r3, r2, lsr #1
  days = 0;
    b14a:	4602      	mov	r2, r0
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    b14c:	089b      	lsrs	r3, r3, #2
    b14e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    b152:	1aed      	subs	r5, r5, r3
    b154:	70cd      	strb	r5, [r1, #3]
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    b156:	fa5f fe80 	uxtb.w	lr, r0
    b15a:	f240 1c6d 	movw	ip, #365	; 0x16d
    b15e:	f20e 73b2 	addw	r3, lr, #1970	; 0x7b2
    b162:	f013 0503 	ands.w	r5, r3, #3
    b166:	fb07 f603 	mul.w	r6, r7, r3
    b16a:	d108      	bne.n	b17e <breakTime(unsigned long, DateTimeFields&)+0x8a>
    b16c:	ebb8 0fb6 	cmp.w	r8, r6, ror #2
    b170:	f44f 7cb7 	mov.w	ip, #366	; 0x16e
    b174:	d303      	bcc.n	b17e <breakTime(unsigned long, DateTimeFields&)+0x8a>
    b176:	ebb9 1f36 	cmp.w	r9, r6, ror #4
    b17a:	bf38      	it	cc
    b17c:	46d4      	movcc	ip, sl
    b17e:	4462      	add	r2, ip
    b180:	3001      	adds	r0, #1
    b182:	4294      	cmp	r4, r2
    b184:	d2e7      	bcs.n	b156 <breakTime(unsigned long, DateTimeFields&)+0x62>
  tm.year = year + 70; // year is offset from 1970
    b186:	f10e 0e46 	add.w	lr, lr, #70	; 0x46
  days -= LEAP_YEAR(year) ? 366 : 365;
    b18a:	4e2c      	ldr	r6, [pc, #176]	; (b23c <breakTime(unsigned long, DateTimeFields&)+0x148>)
  tm.year = year + 70; // year is offset from 1970
    b18c:	f881 e006 	strb.w	lr, [r1, #6]
  days -= LEAP_YEAR(year) ? 366 : 365;
    b190:	fba6 0603 	umull	r0, r6, r6, r3
    b194:	b385      	cbz	r5, b1f8 <breakTime(unsigned long, DateTimeFields&)+0x104>
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    b196:	0977      	lsrs	r7, r6, #5
    b198:	f04f 0c64 	mov.w	ip, #100	; 0x64
    b19c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    b1a0:	09f6      	lsrs	r6, r6, #7
    b1a2:	fb0c 3717 	mls	r7, ip, r7, r3
    b1a6:	fb00 3616 	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    b1aa:	f240 106d 	movw	r0, #365	; 0x16d
  time  -= days; // now it is days in this year, starting at 0
    b1ae:	1aa4      	subs	r4, r4, r2
    b1b0:	2300      	movs	r3, #0
    b1b2:	2201      	movs	r2, #1
      monthLength = monthDays[month];
    b1b4:	f8df e090 	ldr.w	lr, [pc, #144]	; b248 <breakTime(unsigned long, DateTimeFields&)+0x154>
  time  -= days; // now it is days in this year, starting at 0
    b1b8:	4420      	add	r0, r4
  for (month=0; month<12; month++) {
    b1ba:	e00a      	b.n	b1d2 <breakTime(unsigned long, DateTimeFields&)+0xde>
    if (time >= monthLength) {
    b1bc:	f813 400e 	ldrb.w	r4, [r3, lr]
    b1c0:	4284      	cmp	r4, r0
    b1c2:	d80e      	bhi.n	b1e2 <breakTime(unsigned long, DateTimeFields&)+0xee>
  for (month=0; month<12; month++) {
    b1c4:	2a0c      	cmp	r2, #12
      time -= monthLength;
    b1c6:	eba0 0004 	sub.w	r0, r0, r4
  for (month=0; month<12; month++) {
    b1ca:	d00b      	beq.n	b1e4 <breakTime(unsigned long, DateTimeFields&)+0xf0>
    b1cc:	3201      	adds	r2, #1
    b1ce:	3301      	adds	r3, #1
    b1d0:	b2d2      	uxtb	r2, r2
    if (month==1) { // february
    b1d2:	2b01      	cmp	r3, #1
    b1d4:	fa5f fc83 	uxtb.w	ip, r3
    b1d8:	d1f0      	bne.n	b1bc <breakTime(unsigned long, DateTimeFields&)+0xc8>
      if (LEAP_YEAR(year)) {
    b1da:	b945      	cbnz	r5, b1ee <breakTime(unsigned long, DateTimeFields&)+0xfa>
    b1dc:	b1cf      	cbz	r7, b212 <breakTime(unsigned long, DateTimeFields&)+0x11e>
    b1de:	241d      	movs	r4, #29
    b1e0:	e006      	b.n	b1f0 <breakTime(unsigned long, DateTimeFields&)+0xfc>
    b1e2:	4662      	mov	r2, ip
  tm.mday = time + 1;     // day of month
    b1e4:	3001      	adds	r0, #1
  tm.mon = month;  // jan is month 0
    b1e6:	714a      	strb	r2, [r1, #5]
  tm.mday = time + 1;     // day of month
    b1e8:	7108      	strb	r0, [r1, #4]
}
    b1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b1ee:	241c      	movs	r4, #28
    if (time >= monthLength) {
    b1f0:	42a0      	cmp	r0, r4
    b1f2:	d318      	bcc.n	b226 <breakTime(unsigned long, DateTimeFields&)+0x132>
      time -= monthLength;
    b1f4:	1b00      	subs	r0, r0, r4
  for (month=0; month<12; month++) {
    b1f6:	e7e9      	b.n	b1cc <breakTime(unsigned long, DateTimeFields&)+0xd8>
  days -= LEAP_YEAR(year) ? 366 : 365;
    b1f8:	2064      	movs	r0, #100	; 0x64
    b1fa:	0977      	lsrs	r7, r6, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    b1fc:	09f6      	lsrs	r6, r6, #7
  days -= LEAP_YEAR(year) ? 366 : 365;
    b1fe:	fb00 3717 	mls	r7, r0, r7, r3
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    b202:	f44f 70c8 	mov.w	r0, #400	; 0x190
    b206:	fb00 3616 	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    b20a:	b13f      	cbz	r7, b21c <breakTime(unsigned long, DateTimeFields&)+0x128>
    b20c:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    b210:	e7cd      	b.n	b1ae <breakTime(unsigned long, DateTimeFields&)+0xba>
      if (LEAP_YEAR(year)) {
    b212:	2e00      	cmp	r6, #0
    b214:	bf14      	ite	ne
    b216:	241c      	movne	r4, #28
    b218:	241d      	moveq	r4, #29
    b21a:	e7e9      	b.n	b1f0 <breakTime(unsigned long, DateTimeFields&)+0xfc>
  days -= LEAP_YEAR(year) ? 366 : 365;
    b21c:	2e00      	cmp	r6, #0
    b21e:	d1c4      	bne.n	b1aa <breakTime(unsigned long, DateTimeFields&)+0xb6>
    b220:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    b224:	e7c3      	b.n	b1ae <breakTime(unsigned long, DateTimeFields&)+0xba>
    if (time >= monthLength) {
    b226:	2201      	movs	r2, #1
    b228:	e7dc      	b.n	b1e4 <breakTime(unsigned long, DateTimeFields&)+0xf0>
    b22a:	bf00      	nop
    b22c:	88888889 	.word	0x88888889
    b230:	c28f5c29 	.word	0xc28f5c29
    b234:	aaaaaaab 	.word	0xaaaaaaab
    b238:	24924925 	.word	0x24924925
    b23c:	51eb851f 	.word	0x51eb851f
    b240:	028f5c28 	.word	0x028f5c28
    b244:	00a3d70a 	.word	0x00a3d70a
    b248:	200005f0 	.word	0x200005f0

0000b24c <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    b24c:	49a2      	ldr	r1, [pc, #648]	; (b4d8 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    b24e:	4ba3      	ldr	r3, [pc, #652]	; (b4dc <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    b250:	4288      	cmp	r0, r1
{
    b252:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    b256:	4ca2      	ldr	r4, [pc, #648]	; (b4e0 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    b258:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    b25a:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    b25c:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    b260:	d91b      	bls.n	b29a <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    b262:	4ba0      	ldr	r3, [pc, #640]	; (b4e4 <set_arm_clock+0x298>)
    b264:	4298      	cmp	r0, r3
    b266:	f240 8102 	bls.w	b46e <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    b26a:	1ac3      	subs	r3, r0, r3
    b26c:	499e      	ldr	r1, [pc, #632]	; (b4e8 <set_arm_clock+0x29c>)
    b26e:	0a1b      	lsrs	r3, r3, #8
    b270:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b274:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    b278:	09db      	lsrs	r3, r3, #7
    b27a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    b27e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    b282:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b286:	428b      	cmp	r3, r1
    b288:	bf28      	it	cs
    b28a:	460b      	movcs	r3, r1
    b28c:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    b290:	4b96      	ldr	r3, [pc, #600]	; (b4ec <set_arm_clock+0x2a0>)
    b292:	fba3 3707 	umull	r3, r7, r3, r7
    b296:	08ff      	lsrs	r7, r7, #3
    b298:	e004      	b.n	b2a4 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    b29a:	4f95      	ldr	r7, [pc, #596]	; (b4f0 <set_arm_clock+0x2a4>)
    b29c:	42b8      	cmp	r0, r7
    b29e:	bf8c      	ite	hi
    b2a0:	270e      	movhi	r7, #14
    b2a2:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    b2a4:	498d      	ldr	r1, [pc, #564]	; (b4dc <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b2a6:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    b2aa:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b2ae:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    b2b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    b2b4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b2b8:	d20c      	bcs.n	b2d4 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    b2ba:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    b2be:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    b2c2:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    b2c6:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    b2ca:	680b      	ldr	r3, [r1, #0]
    b2cc:	2b00      	cmp	r3, #0
    b2ce:	dafc      	bge.n	b2ca <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    b2d0:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    b2d4:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    b2d8:	d124      	bne.n	b324 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    b2da:	4986      	ldr	r1, [pc, #536]	; (b4f4 <set_arm_clock+0x2a8>)
    b2dc:	690c      	ldr	r4, [r1, #16]
    b2de:	4986      	ldr	r1, [pc, #536]	; (b4f8 <set_arm_clock+0x2ac>)
    b2e0:	43a1      	bics	r1, r4
    b2e2:	f000 80ea 	beq.w	b4ba <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    b2e6:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    b2ea:	4634      	mov	r4, r6
    b2ec:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    b2f0:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    b2f4:	d004      	beq.n	b300 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    b2f6:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    b2fa:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    b2fc:	4b77      	ldr	r3, [pc, #476]	; (b4dc <set_arm_clock+0x290>)
    b2fe:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    b300:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    b304:	d007      	beq.n	b316 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    b306:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    b30a:	4974      	ldr	r1, [pc, #464]	; (b4dc <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    b30c:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    b30e:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    b310:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    b312:	071a      	lsls	r2, r3, #28
    b314:	d4fc      	bmi.n	b310 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    b316:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    b31a:	4a70      	ldr	r2, [pc, #448]	; (b4dc <set_arm_clock+0x290>)
    b31c:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    b31e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    b320:	069b      	lsls	r3, r3, #26
    b322:	d4fc      	bmi.n	b31e <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    b324:	4c75      	ldr	r4, [pc, #468]	; (b4fc <set_arm_clock+0x2b0>)
    b326:	42a0      	cmp	r0, r4
    b328:	f200 80ce 	bhi.w	b4c8 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    b32c:	f04f 0c01 	mov.w	ip, #1
    b330:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    b332:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    b334:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    b338:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    b33c:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    b340:	42a2      	cmp	r2, r4
    b342:	d818      	bhi.n	b376 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    b344:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    b348:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    b34c:	f040 808d 	bne.w	b46a <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    b350:	f1bc 0f04 	cmp.w	ip, #4
    b354:	f200 8091 	bhi.w	b47a <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    b358:	180a      	adds	r2, r1, r0
    b35a:	42a2      	cmp	r2, r4
    b35c:	f200 80a4 	bhi.w	b4a8 <set_arm_clock+0x25c>
    b360:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    b364:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    b366:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    b36a:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    b36e:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    b372:	42a2      	cmp	r2, r4
    b374:	d9e6      	bls.n	b344 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b376:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    b37a:	028c      	lsls	r4, r1, #10
    b37c:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b380:	485f      	ldr	r0, [pc, #380]	; (b500 <set_arm_clock+0x2b4>)
    b382:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    b384:	4a5f      	ldr	r2, [pc, #380]	; (b504 <set_arm_clock+0x2b8>)
    b386:	4290      	cmp	r0, r2
    b388:	d97f      	bls.n	b48a <set_arm_clock+0x23e>
    b38a:	f8df a1a4 	ldr.w	sl, [pc, #420]	; b530 <set_arm_clock+0x2e4>
    b38e:	226c      	movs	r2, #108	; 0x6c
    b390:	485d      	ldr	r0, [pc, #372]	; (b508 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b392:	4d58      	ldr	r5, [pc, #352]	; (b4f4 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    b394:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b398:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    b39c:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b3a0:	f8df c190 	ldr.w	ip, [pc, #400]	; b534 <set_arm_clock+0x2e8>
    b3a4:	ea0e 0c0c 	and.w	ip, lr, ip
    b3a8:	45d4      	cmp	ip, sl
    b3aa:	d009      	beq.n	b3c0 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    b3ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    b3b0:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    b3b4:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    b3b8:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    b3ba:	682a      	ldr	r2, [r5, #0]
    b3bc:	2a00      	cmp	r2, #0
    b3be:	dafc      	bge.n	b3ba <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    b3c0:	4a46      	ldr	r2, [pc, #280]	; (b4dc <set_arm_clock+0x290>)
    b3c2:	6915      	ldr	r5, [r2, #16]
    b3c4:	f005 0507 	and.w	r5, r5, #7
    b3c8:	429d      	cmp	r5, r3
    b3ca:	d003      	beq.n	b3d4 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    b3cc:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    b3ce:	6c93      	ldr	r3, [r2, #72]	; 0x48
    b3d0:	03dd      	lsls	r5, r3, #15
    b3d2:	d4fc      	bmi.n	b3ce <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b3d4:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    b3d8:	d009      	beq.n	b3ee <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    b3da:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    b3de:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    b3e2:	4a3e      	ldr	r2, [pc, #248]	; (b4dc <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    b3e4:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    b3e6:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    b3e8:	6c93      	ldr	r3, [r2, #72]	; 0x48
    b3ea:	0799      	lsls	r1, r3, #30
    b3ec:	d4fc      	bmi.n	b3e8 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    b3ee:	4947      	ldr	r1, [pc, #284]	; (b50c <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    b3f0:	4a47      	ldr	r2, [pc, #284]	; (b510 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    b3f2:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    b3f4:	4291      	cmp	r1, r2
    b3f6:	d83c      	bhi.n	b472 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    b3f8:	4b46      	ldr	r3, [pc, #280]	; (b514 <set_arm_clock+0x2c8>)
    b3fa:	09c9      	lsrs	r1, r1, #7
    b3fc:	fba3 3101 	umull	r3, r1, r3, r1
    b400:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    b402:	1e4b      	subs	r3, r1, #1
    b404:	021b      	lsls	r3, r3, #8
    b406:	ea86 0203 	eor.w	r2, r6, r3
    b40a:	f412 7f40 	tst.w	r2, #768	; 0x300
    b40e:	d006      	beq.n	b41e <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    b410:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    b414:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    b418:	4a30      	ldr	r2, [pc, #192]	; (b4dc <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    b41a:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    b41c:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    b41e:	4a2f      	ldr	r2, [pc, #188]	; (b4dc <set_arm_clock+0x290>)
    b420:	6953      	ldr	r3, [r2, #20]
    b422:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    b426:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    b428:	6c93      	ldr	r3, [r2, #72]	; 0x48
    b42a:	069b      	lsls	r3, r3, #26
    b42c:	d4fc      	bmi.n	b428 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    b42e:	4b3a      	ldr	r3, [pc, #232]	; (b518 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    b430:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    b432:	fba3 2300 	umull	r2, r3, r3, r0
    b436:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b43a:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    b43e:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    b442:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    b446:	4a35      	ldr	r2, [pc, #212]	; (b51c <set_arm_clock+0x2d0>)
    b448:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    b44a:	4a35      	ldr	r2, [pc, #212]	; (b520 <set_arm_clock+0x2d4>)
    b44c:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    b44e:	4a35      	ldr	r2, [pc, #212]	; (b524 <set_arm_clock+0x2d8>)
    b450:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    b452:	d208      	bcs.n	b466 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    b454:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    b458:	4a21      	ldr	r2, [pc, #132]	; (b4e0 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    b45a:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    b45e:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    b460:	6813      	ldr	r3, [r2, #0]
    b462:	2b00      	cmp	r3, #0
    b464:	dafc      	bge.n	b460 <set_arm_clock+0x214>
	}

	return frequency;
}
    b466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b46a:	4673      	mov	r3, lr
    b46c:	e762      	b.n	b334 <set_arm_clock+0xe8>
    b46e:	2712      	movs	r7, #18
    b470:	e718      	b.n	b2a4 <set_arm_clock+0x58>
    b472:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    b476:	2104      	movs	r1, #4
    b478:	e7c5      	b.n	b406 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b47a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b47e:	4820      	ldr	r0, [pc, #128]	; (b500 <set_arm_clock+0x2b4>)
    b480:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b482:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b484:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b486:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b48a:	4a27      	ldr	r2, [pc, #156]	; (b528 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    b48c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; b538 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b490:	fba2 2000 	umull	r2, r0, r2, r0
    b494:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    b496:	4825      	ldr	r0, [pc, #148]	; (b52c <set_arm_clock+0x2e0>)
    b498:	2a36      	cmp	r2, #54	; 0x36
    b49a:	bf38      	it	cc
    b49c:	2236      	movcc	r2, #54	; 0x36
    b49e:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    b4a2:	ea42 0a0a 	orr.w	sl, r2, sl
    b4a6:	e774      	b.n	b392 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b4a8:	ea4f 248c 	mov.w	r4, ip, lsl #10
    b4ac:	2300      	movs	r3, #0
    b4ae:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    b4b2:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    b4b6:	46ac      	mov	ip, r5
    b4b8:	e762      	b.n	b380 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    b4ba:	461d      	mov	r5, r3
    b4bc:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    b4c0:	4611      	mov	r1, r2
    b4c2:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    b4c6:	e713      	b.n	b2f0 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    b4c8:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    b4ca:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    b4ce:	4602      	mov	r2, r0
    b4d0:	4631      	mov	r1, r6
    b4d2:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    b4d4:	46e6      	mov	lr, ip
    b4d6:	e753      	b.n	b380 <set_arm_clock+0x134>
    b4d8:	1f78a400 	.word	0x1f78a400
    b4dc:	400fc000 	.word	0x400fc000
    b4e0:	40080000 	.word	0x40080000
    b4e4:	23c34600 	.word	0x23c34600
    b4e8:	004cb223 	.word	0x004cb223
    b4ec:	51eb851f 	.word	0x51eb851f
    b4f0:	016e3600 	.word	0x016e3600
    b4f4:	400d8000 	.word	0x400d8000
    b4f8:	80003040 	.word	0x80003040
    b4fc:	269fb1ff 	.word	0x269fb1ff
    b500:	005b8d80 	.word	0x005b8d80
    b504:	4df67eff 	.word	0x4df67eff
    b508:	4d3f6400 	.word	0x4d3f6400
    b50c:	08f0d17f 	.word	0x08f0d17f
    b510:	2cb4177f 	.word	0x2cb4177f
    b514:	00e5109f 	.word	0x00e5109f
    b518:	431bde83 	.word	0x431bde83
    b51c:	20001a1c 	.word	0x20001a1c
    b520:	20001a18 	.word	0x20001a18
    b524:	200038c8 	.word	0x200038c8
    b528:	165e9f81 	.word	0x165e9f81
    b52c:	00b71b00 	.word	0x00b71b00
    b530:	8000206c 	.word	0x8000206c
    b534:	8001307f 	.word	0x8001307f
    b538:	80002000 	.word	0x80002000

0000b53c <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    b53c:	b900      	cbnz	r0, b540 <delay+0x4>
    b53e:	4770      	bx	lr
{
    b540:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b544:	2101      	movs	r1, #1
    b546:	4681      	mov	r9, r0
    b548:	4c21      	ldr	r4, [pc, #132]	; (b5d0 <delay+0x94>)
    b54a:	4d22      	ldr	r5, [pc, #136]	; (b5d4 <delay+0x98>)
    b54c:	4e22      	ldr	r6, [pc, #136]	; (b5d8 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b54e:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    b552:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    b554:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b556:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    b55a:	2b00      	cmp	r3, #0
    b55c:	d1f7      	bne.n	b54e <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    b55e:	491f      	ldr	r1, [pc, #124]	; (b5dc <delay+0xa0>)
    b560:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    b562:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b566:	f8df a078 	ldr.w	sl, [pc, #120]	; b5e0 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    b56a:	1a1b      	subs	r3, r3, r0
    b56c:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    b56e:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b572:	f8da 2000 	ldr.w	r2, [sl]
    b576:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    b57a:	455a      	cmp	r2, fp
    b57c:	bf94      	ite	ls
    b57e:	4490      	addls	r8, r2
    b580:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b582:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    b586:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    b588:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b58a:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    b58e:	2b00      	cmp	r3, #0
    b590:	d1f7      	bne.n	b582 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    b592:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b594:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    b598:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    b59a:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b59e:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    b5a2:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    b5a6:	bf94      	ite	ls
    b5a8:	4462      	addls	r2, ip
    b5aa:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    b5ae:	eba2 0208 	sub.w	r2, r2, r8
    b5b2:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    b5b6:	d306      	bcc.n	b5c6 <delay+0x8a>
			if (--msec == 0) return;
    b5b8:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    b5bc:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    b5c0:	d1df      	bne.n	b582 <delay+0x46>
}
    b5c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    b5c6:	f001 fb1d 	bl	cc04 <yield>
		while ((micros() - start) >= 1000) {
    b5ca:	4904      	ldr	r1, [pc, #16]	; (b5dc <delay+0xa0>)
    b5cc:	e7d9      	b.n	b582 <delay+0x46>
    b5ce:	bf00      	nop
    b5d0:	200038dc 	.word	0x200038dc
    b5d4:	200038d8 	.word	0x200038d8
    b5d8:	200038d4 	.word	0x200038d4
    b5dc:	e0001000 	.word	0xe0001000
    b5e0:	200038c8 	.word	0x200038c8

0000b5e4 <micros>:
{
    b5e4:	b430      	push	{r4, r5}
    b5e6:	4b0f      	ldr	r3, [pc, #60]	; (b624 <micros+0x40>)
    b5e8:	f04f 0c01 	mov.w	ip, #1
    b5ec:	4d0e      	ldr	r5, [pc, #56]	; (b628 <micros+0x44>)
    b5ee:	4c0f      	ldr	r4, [pc, #60]	; (b62c <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b5f0:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    b5f4:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    b5f6:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b5f8:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    b5fc:	2a00      	cmp	r2, #0
    b5fe:	d1f7      	bne.n	b5f0 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    b600:	4b0b      	ldr	r3, [pc, #44]	; (b630 <micros+0x4c>)
    b602:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b604:	4a0b      	ldr	r2, [pc, #44]	; (b634 <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    b606:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    b608:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b60c:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    b60e:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b612:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    b616:	bc30      	pop	{r4, r5}
    b618:	428a      	cmp	r2, r1
    b61a:	bf94      	ite	ls
    b61c:	1880      	addls	r0, r0, r2
    b61e:	1840      	addhi	r0, r0, r1
    b620:	4770      	bx	lr
    b622:	bf00      	nop
    b624:	200038dc 	.word	0x200038dc
    b628:	200038d8 	.word	0x200038d8
    b62c:	200038d4 	.word	0x200038d4
    b630:	e0001000 	.word	0xe0001000
    b634:	200038c8 	.word	0x200038c8

0000b638 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    b638:	2836      	cmp	r0, #54	; 0x36
    b63a:	d816      	bhi.n	b66a <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    b63c:	0102      	lsls	r2, r0, #4
    b63e:	4b10      	ldr	r3, [pc, #64]	; (b680 <digitalWrite+0x48>)
    b640:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    b644:	589b      	ldr	r3, [r3, r2]
{
    b646:	b410      	push	{r4}
	mask = p->mask;
    b648:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    b64a:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    b64c:	4214      	tst	r4, r2
    b64e:	d005      	beq.n	b65c <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
    b650:	b961      	cbnz	r1, b66c <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    b652:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    b656:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    b65a:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    b65c:	6883      	ldr	r3, [r0, #8]
		if (val) {
    b65e:	b151      	cbz	r1, b676 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    b660:	4a08      	ldr	r2, [pc, #32]	; (b684 <digitalWrite+0x4c>)
}
    b662:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    b666:	601a      	str	r2, [r3, #0]
}
    b668:	4770      	bx	lr
    b66a:	4770      	bx	lr
    b66c:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    b670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    b674:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    b676:	4a04      	ldr	r2, [pc, #16]	; (b688 <digitalWrite+0x50>)
}
    b678:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    b67c:	601a      	str	r2, [r3, #0]
}
    b67e:	4770      	bx	lr
    b680:	2000138c 	.word	0x2000138c
    b684:	0001f038 	.word	0x0001f038
    b688:	00013038 	.word	0x00013038

0000b68c <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    b68c:	2836      	cmp	r0, #54	; 0x36
    b68e:	d80b      	bhi.n	b6a8 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    b690:	4b06      	ldr	r3, [pc, #24]	; (b6ac <digitalRead+0x20>)
    b692:	0102      	lsls	r2, r0, #4
    b694:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    b698:	589a      	ldr	r2, [r3, r2]
    b69a:	68c3      	ldr	r3, [r0, #12]
    b69c:	6892      	ldr	r2, [r2, #8]
    b69e:	421a      	tst	r2, r3
    b6a0:	bf14      	ite	ne
    b6a2:	2001      	movne	r0, #1
    b6a4:	2000      	moveq	r0, #0
    b6a6:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    b6a8:	2000      	movs	r0, #0
}
    b6aa:	4770      	bx	lr
    b6ac:	2000138c 	.word	0x2000138c

0000b6b0 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    b6b0:	2836      	cmp	r0, #54	; 0x36
    b6b2:	d829      	bhi.n	b708 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    b6b4:	4b16      	ldr	r3, [pc, #88]	; (b710 <pinMode+0x60>)
    b6b6:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    b6b8:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    b6ba:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    b6be:	589a      	ldr	r2, [r3, r2]
{
    b6c0:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    b6c2:	6853      	ldr	r3, [r2, #4]
    b6c4:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    b6c6:	d00e      	beq.n	b6e6 <pinMode+0x36>
    b6c8:	2904      	cmp	r1, #4
    b6ca:	d00c      	beq.n	b6e6 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    b6cc:	ea23 0304 	bic.w	r3, r3, r4
    b6d0:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    b6d2:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    b6d4:	b1a9      	cbz	r1, b702 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    b6d6:	2902      	cmp	r1, #2
    b6d8:	d017      	beq.n	b70a <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    b6da:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    b6dc:	bf0c      	ite	eq
    b6de:	4a0d      	ldreq	r2, [pc, #52]	; (b714 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    b6e0:	4a0d      	ldrne	r2, [pc, #52]	; (b718 <pinMode+0x68>)
    b6e2:	601a      	str	r2, [r3, #0]
    b6e4:	e007      	b.n	b6f6 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    b6e6:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    b6e8:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    b6ea:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    b6ec:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    b6ee:	d008      	beq.n	b702 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    b6f0:	f640 0238 	movw	r2, #2104	; 0x838
    b6f4:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    b6f6:	6843      	ldr	r3, [r0, #4]
    b6f8:	2215      	movs	r2, #21
}
    b6fa:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    b6fe:	601a      	str	r2, [r3, #0]
}
    b700:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    b702:	2238      	movs	r2, #56	; 0x38
    b704:	601a      	str	r2, [r3, #0]
    b706:	e7f6      	b.n	b6f6 <pinMode+0x46>
    b708:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    b70a:	4a04      	ldr	r2, [pc, #16]	; (b71c <pinMode+0x6c>)
    b70c:	601a      	str	r2, [r3, #0]
    b70e:	e7f2      	b.n	b6f6 <pinMode+0x46>
    b710:	2000138c 	.word	0x2000138c
    b714:	00013038 	.word	0x00013038
    b718:	00010038 	.word	0x00010038
    b71c:	0001f038 	.word	0x0001f038

0000b720 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    b720:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    b722:	f7f6 fbad 	bl	1e80 <setup>
	while (1) {
		loop();
    b726:	f7f6 fe9f 	bl	2468 <loop>
		yield();
    b72a:	f001 fa6b 	bl	cc04 <yield>
	while (1) {
    b72e:	e7fa      	b.n	b726 <main+0x6>

0000b730 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    b730:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    b732:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    b736:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    b73a:	d16d      	bne.n	b818 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    b73c:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    b73e:	d341      	bcc.n	b7c4 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    b740:	f851 3b04 	ldr.w	r3, [r1], #4
    b744:	f840 3b04 	str.w	r3, [r0], #4
    b748:	f851 3b04 	ldr.w	r3, [r1], #4
    b74c:	f840 3b04 	str.w	r3, [r0], #4
    b750:	f851 3b04 	ldr.w	r3, [r1], #4
    b754:	f840 3b04 	str.w	r3, [r0], #4
    b758:	f851 3b04 	ldr.w	r3, [r1], #4
    b75c:	f840 3b04 	str.w	r3, [r0], #4
    b760:	f851 3b04 	ldr.w	r3, [r1], #4
    b764:	f840 3b04 	str.w	r3, [r0], #4
    b768:	f851 3b04 	ldr.w	r3, [r1], #4
    b76c:	f840 3b04 	str.w	r3, [r0], #4
    b770:	f851 3b04 	ldr.w	r3, [r1], #4
    b774:	f840 3b04 	str.w	r3, [r0], #4
    b778:	f851 3b04 	ldr.w	r3, [r1], #4
    b77c:	f840 3b04 	str.w	r3, [r0], #4
    b780:	f851 3b04 	ldr.w	r3, [r1], #4
    b784:	f840 3b04 	str.w	r3, [r0], #4
    b788:	f851 3b04 	ldr.w	r3, [r1], #4
    b78c:	f840 3b04 	str.w	r3, [r0], #4
    b790:	f851 3b04 	ldr.w	r3, [r1], #4
    b794:	f840 3b04 	str.w	r3, [r0], #4
    b798:	f851 3b04 	ldr.w	r3, [r1], #4
    b79c:	f840 3b04 	str.w	r3, [r0], #4
    b7a0:	f851 3b04 	ldr.w	r3, [r1], #4
    b7a4:	f840 3b04 	str.w	r3, [r0], #4
    b7a8:	f851 3b04 	ldr.w	r3, [r1], #4
    b7ac:	f840 3b04 	str.w	r3, [r0], #4
    b7b0:	f851 3b04 	ldr.w	r3, [r1], #4
    b7b4:	f840 3b04 	str.w	r3, [r0], #4
    b7b8:	f851 3b04 	ldr.w	r3, [r1], #4
    b7bc:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    b7c0:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    b7c2:	d2bd      	bcs.n	b740 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    b7c4:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    b7c6:	d311      	bcc.n	b7ec <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    b7c8:	f851 3b04 	ldr.w	r3, [r1], #4
    b7cc:	f840 3b04 	str.w	r3, [r0], #4
    b7d0:	f851 3b04 	ldr.w	r3, [r1], #4
    b7d4:	f840 3b04 	str.w	r3, [r0], #4
    b7d8:	f851 3b04 	ldr.w	r3, [r1], #4
    b7dc:	f840 3b04 	str.w	r3, [r0], #4
    b7e0:	f851 3b04 	ldr.w	r3, [r1], #4
    b7e4:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    b7e8:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    b7ea:	d2ed      	bcs.n	b7c8 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    b7ec:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    b7ee:	d305      	bcc.n	b7fc <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    b7f0:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    b7f4:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    b7f8:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    b7fa:	d2f9      	bcs.n	b7f0 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    b7fc:	3204      	adds	r2, #4
	beq	.Ldone
    b7fe:	d008      	beq.n	b812 <memcpy+0xe2>

	lsls	r2, r2, #31
    b800:	07d2      	lsls	r2, r2, #31
	itt ne
    b802:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    b804:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    b808:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    b80c:	d301      	bcc.n	b812 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    b80e:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    b810:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    b812:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    b814:	4770      	bx	lr
    b816:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    b818:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    b81a:	d313      	bcc.n	b844 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    b81c:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    b81e:	d08d      	beq.n	b73c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    b820:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    b824:	d08a      	beq.n	b73c <memcpy+0xc>

	rsb	r3, #4
    b826:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    b82a:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    b82c:	07db      	lsls	r3, r3, #31
	itt ne
    b82e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    b830:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    b834:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    b838:	d380      	bcc.n	b73c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    b83a:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    b83e:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    b842:	e77b      	b.n	b73c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    b844:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    b846:	d3d9      	bcc.n	b7fc <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    b848:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    b84a:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    b84e:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    b852:	d2f9      	bcs.n	b848 <memcpy+0x118>

	ldrb	r3, [r1]
    b854:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    b856:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    b858:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    b85a:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    b85c:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    b85e:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    b860:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    b862:	4770      	bx	lr

0000b864 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
    b864:	f001 bf86 	b.w	d774 <malloc>

0000b868 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    b868:	f001 bf8c 	b.w	d784 <free>

0000b86c <ultoa>:
	int i=0, j;
    b86c:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
{
    b870:	b570      	push	{r4, r5, r6, lr}
		digit = val % radix;
    b872:	4666      	mov	r6, ip
	int i=0, j;
    b874:	2400      	movs	r4, #0
    b876:	e000      	b.n	b87a <ultoa+0xe>
		i++;
    b878:	3401      	adds	r4, #1
		digit = val % radix;
    b87a:	fbb0 f5f2 	udiv	r5, r0, r2
    b87e:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b882:	2b09      	cmp	r3, #9
    b884:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    b888:	f103 0330 	add.w	r3, r3, #48	; 0x30
    b88c:	fa5f fe8e 	uxtb.w	lr, lr
    b890:	bf98      	it	ls
    b892:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    b896:	4290      	cmp	r0, r2
		val /= radix;
    b898:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b89a:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    b89e:	d2eb      	bcs.n	b878 <ultoa+0xc>
	buf[i + 1] = 0;
    b8a0:	1c63      	adds	r3, r4, #1
    b8a2:	2200      	movs	r2, #0
    b8a4:	18c8      	adds	r0, r1, r3
    b8a6:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    b8a8:	b17c      	cbz	r4, b8ca <ultoa+0x5e>
		t = buf[j];
    b8aa:	4662      	mov	r2, ip
    b8ac:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    b8b0:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    b8b4:	eba1 030c 	sub.w	r3, r1, ip
    b8b8:	3202      	adds	r2, #2
		buf[j] = buf[i];
    b8ba:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    b8be:	3b01      	subs	r3, #1
    b8c0:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    b8c2:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    b8c4:	4423      	add	r3, r4
    b8c6:	429a      	cmp	r2, r3
    b8c8:	dbef      	blt.n	b8aa <ultoa+0x3e>
}
    b8ca:	4608      	mov	r0, r1
    b8cc:	bd70      	pop	{r4, r5, r6, pc}
    b8ce:	bf00      	nop

0000b8d0 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    b8d0:	4a07      	ldr	r2, [pc, #28]	; (b8f0 <rtc_get+0x20>)
    b8d2:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    b8d4:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    b8d6:	4619      	mov	r1, r3
    b8d8:	4684      	mov	ip, r0
    b8da:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    b8dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    b8de:	4299      	cmp	r1, r3
    b8e0:	d1f9      	bne.n	b8d6 <rtc_get+0x6>
    b8e2:	4584      	cmp	ip, r0
    b8e4:	d1f7      	bne.n	b8d6 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    b8e6:	0bdb      	lsrs	r3, r3, #15
}
    b8e8:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    b8ec:	4770      	bx	lr
    b8ee:	bf00      	nop
    b8f0:	400d4000 	.word	0x400d4000

0000b8f4 <unused_interrupt_vector>:
	__disable_irq();
    b8f4:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    b8f6:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    b8fa:	4c52      	ldr	r4, [pc, #328]	; (ba44 <unused_interrupt_vector+0x150>)
    b8fc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    b900:	f01e 0f04 	tst.w	lr, #4
    b904:	bf0c      	ite	eq
    b906:	f3ef 8208 	mrseq	r2, MSP
    b90a:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    b90e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    b912:	4e4d      	ldr	r6, [pc, #308]	; (ba48 <unused_interrupt_vector+0x154>)
	while (p < end) {
    b914:	4d4d      	ldr	r5, [pc, #308]	; (ba4c <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    b916:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    b91a:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    b91e:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    b922:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    b926:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    b92a:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    b92e:	6993      	ldr	r3, [r2, #24]
    b930:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    b934:	69d3      	ldr	r3, [r2, #28]
    b936:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    b93a:	f000 f8d3 	bl	bae4 <tempmonGetTemp>
    b93e:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    b942:	f7ff ffc5 	bl	b8d0 <rtc_get>
	info->len = sizeof(*info) / 4;
    b946:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    b948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	info->time = rtc_get();
    b94c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    b950:	460b      	mov	r3, r1
    b952:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b956:	493e      	ldr	r1, [pc, #248]	; (ba50 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    b958:	1d30      	adds	r0, r6, #4
    b95a:	405a      	eors	r2, r3
    b95c:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b95e:	f002 0301 	and.w	r3, r2, #1
    b962:	3c01      	subs	r4, #1
    b964:	fb01 f303 	mul.w	r3, r1, r3
    b968:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    b96c:	d1f7      	bne.n	b95e <unused_interrupt_vector+0x6a>
	while (p < end) {
    b96e:	42a8      	cmp	r0, r5
    b970:	d002      	beq.n	b978 <unused_interrupt_vector+0x84>
		crc ^= *p++;
    b972:	6873      	ldr	r3, [r6, #4]
    b974:	4606      	mov	r6, r0
    b976:	e7ef      	b.n	b958 <unused_interrupt_vector+0x64>
	info->crc = crc;
    b978:	4b32      	ldr	r3, [pc, #200]	; (ba44 <unused_interrupt_vector+0x150>)
    b97a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    b97e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    b982:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b986:	4930      	ldr	r1, [pc, #192]	; (ba48 <unused_interrupt_vector+0x154>)
    b988:	4a32      	ldr	r2, [pc, #200]	; (ba54 <unused_interrupt_vector+0x160>)
    b98a:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    b98e:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    b992:	f3bf 8f4f 	dsb	sy
	asm("isb");
    b996:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b99a:	4a2f      	ldr	r2, [pc, #188]	; (ba58 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    b99c:	2502      	movs	r5, #2
    b99e:	482f      	ldr	r0, [pc, #188]	; (ba5c <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b9a0:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b9a2:	492f      	ldr	r1, [pc, #188]	; (ba60 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b9a4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    b9a8:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    b9aa:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    b9ac:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b9ae:	482d      	ldr	r0, [pc, #180]	; (ba64 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    b9b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    b9b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b9b8:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b9ba:	680b      	ldr	r3, [r1, #0]
    b9bc:	4283      	cmp	r3, r0
    b9be:	d83d      	bhi.n	ba3c <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    b9c0:	4d26      	ldr	r5, [pc, #152]	; (ba5c <unused_interrupt_vector+0x168>)
    b9c2:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    b9c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b9c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	PIT_MCR = 0;
    b9cc:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    b9ce:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    b9d0:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    b9d4:	4924      	ldr	r1, [pc, #144]	; (ba68 <unused_interrupt_vector+0x174>)
    b9d6:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    b9da:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    b9de:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    b9e2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    b9e6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    b9ea:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    b9ee:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    b9f2:	e001      	b.n	b9f8 <unused_interrupt_vector+0x104>
		usb_isr();
    b9f4:	f000 f968 	bl	bcc8 <usb_isr>
		if (PIT_TFLG0) {
    b9f8:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    b9fc:	2b00      	cmp	r3, #0
    b9fe:	d0f9      	beq.n	b9f4 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    ba00:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    ba02:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    ba06:	2c4f      	cmp	r4, #79	; 0x4f
    ba08:	d9f4      	bls.n	b9f4 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    ba0a:	4b18      	ldr	r3, [pc, #96]	; (ba6c <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    ba0c:	2002      	movs	r0, #2
    ba0e:	4918      	ldr	r1, [pc, #96]	; (ba70 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    ba10:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    ba14:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    ba18:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    ba1a:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    ba1e:	b93b      	cbnz	r3, ba30 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    ba20:	4814      	ldr	r0, [pc, #80]	; (ba74 <unused_interrupt_vector+0x180>)
    ba22:	4915      	ldr	r1, [pc, #84]	; (ba78 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    ba24:	4a0d      	ldr	r2, [pc, #52]	; (ba5c <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    ba26:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    ba28:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    ba2c:	2b00      	cmp	r3, #0
    ba2e:	d0fa      	beq.n	ba26 <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    ba30:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    ba34:	4a11      	ldr	r2, [pc, #68]	; (ba7c <unused_interrupt_vector+0x188>)
    ba36:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    ba3a:	e7fe      	b.n	ba3a <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    ba3c:	f7ff fc06 	bl	b24c <set_arm_clock>
    ba40:	e7be      	b.n	b9c0 <unused_interrupt_vector+0xcc>
    ba42:	bf00      	nop
    ba44:	2027ff00 	.word	0x2027ff00
    ba48:	2027ff80 	.word	0x2027ff80
    ba4c:	2027ffa8 	.word	0x2027ffa8
    ba50:	edb88320 	.word	0xedb88320
    ba54:	2027ffa0 	.word	0x2027ffa0
    ba58:	400fc000 	.word	0x400fc000
    ba5c:	40084000 	.word	0x40084000
    ba60:	20001a1c 	.word	0x20001a1c
    ba64:	0bcd3d80 	.word	0x0bcd3d80
    ba68:	00249f00 	.word	0x00249f00
    ba6c:	400d9000 	.word	0x400d9000
    ba70:	402e0000 	.word	0x402e0000
    ba74:	400f8000 	.word	0x400f8000
    ba78:	0bad00f1 	.word	0x0bad00f1
    ba7c:	05fa0004 	.word	0x05fa0004

0000ba80 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    ba80:	490a      	ldr	r1, [pc, #40]	; (baac <_sbrk+0x2c>)
    ba82:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    ba84:	b138      	cbz	r0, ba96 <_sbrk+0x16>
{
    ba86:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    ba88:	1813      	adds	r3, r2, r0
    ba8a:	4809      	ldr	r0, [pc, #36]	; (bab0 <_sbrk+0x30>)
    ba8c:	4283      	cmp	r3, r0
    ba8e:	d804      	bhi.n	ba9a <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    ba90:	4610      	mov	r0, r2
                __brkval = prev + incr;
    ba92:	600b      	str	r3, [r1, #0]
}
    ba94:	bd08      	pop	{r3, pc}
    ba96:	4610      	mov	r0, r2
    ba98:	4770      	bx	lr
                        errno = ENOMEM;
    ba9a:	f001 fe31 	bl	d700 <__errno>
    ba9e:	230c      	movs	r3, #12
                        return (void *)-1;
    baa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
                        errno = ENOMEM;
    baa4:	6003      	str	r3, [r0, #0]
}
    baa6:	4610      	mov	r0, r2
    baa8:	bd08      	pop	{r3, pc}
    baaa:	bf00      	nop
    baac:	20001bbc 	.word	0x20001bbc
    bab0:	20280000 	.word	0x20280000

0000bab4 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    bab4:	2000      	movs	r0, #0
    bab6:	4770      	bx	lr

0000bab8 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    bab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    babc:	4770      	bx	lr
    babe:	bf00      	nop

0000bac0 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    bac0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    bac4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    bac6:	604b      	str	r3, [r1, #4]
}
    bac8:	4770      	bx	lr
    baca:	bf00      	nop

0000bacc <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    bacc:	2001      	movs	r0, #1
    bace:	4770      	bx	lr

0000bad0 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    bad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bad4:	4770      	bx	lr
    bad6:	bf00      	nop

0000bad8 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    bad8:	bf30      	wfi
    bada:	e7fd      	b.n	bad8 <__cxa_pure_virtual>

0000badc <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    badc:	bf30      	wfi
    bade:	e7fd      	b.n	badc <abort>

0000bae0 <Panic_Temp_isr>:
  unused_interrupt_vector();
    bae0:	f7ff bf08 	b.w	b8f4 <unused_interrupt_vector>

0000bae4 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    bae4:	4a12      	ldr	r2, [pc, #72]	; (bb30 <tempmonGetTemp+0x4c>)
    bae6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    baea:	075b      	lsls	r3, r3, #29
    baec:	d5fb      	bpl.n	bae6 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    baee:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    baf2:	4810      	ldr	r0, [pc, #64]	; (bb34 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    baf4:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    baf8:	490f      	ldr	r1, [pc, #60]	; (bb38 <tempmonGetTemp+0x54>)
    bafa:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    bafe:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    bb02:	ed91 6a00 	vldr	s12, [r1]
    bb06:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    bb0a:	4a0c      	ldr	r2, [pc, #48]	; (bb3c <tempmonGetTemp+0x58>)
    bb0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    bb10:	4b0b      	ldr	r3, [pc, #44]	; (bb40 <tempmonGetTemp+0x5c>)
    bb12:	edd2 6a00 	vldr	s13, [r2]
    bb16:	ee77 7ac7 	vsub.f32	s15, s15, s14
    bb1a:	ed93 7a00 	vldr	s14, [r3]
    bb1e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    bb22:	ee67 7a86 	vmul.f32	s15, s15, s12
    bb26:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    bb2a:	ee37 0a40 	vsub.f32	s0, s14, s0
    bb2e:	4770      	bx	lr
    bb30:	400d8100 	.word	0x400d8100
    bb34:	200038b8 	.word	0x200038b8
    bb38:	200038c0 	.word	0x200038c0
    bb3c:	200038c4 	.word	0x200038c4
    bb40:	200038bc 	.word	0x200038bc

0000bb44 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    bb44:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    bb46:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    bb48:	b11b      	cbz	r3, bb52 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    bb4a:	6853      	ldr	r3, [r2, #4]
    bb4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    bb50:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    bb52:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    bb54:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    bb56:	b33c      	cbz	r4, bba8 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    bb58:	4b1a      	ldr	r3, [pc, #104]	; (bbc4 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    bb5a:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    bb5c:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    bb60:	420c      	tst	r4, r1
    bb62:	d11d      	bne.n	bba0 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    bb64:	4e18      	ldr	r6, [pc, #96]	; (bbc8 <schedule_transfer+0x84>)
    bb66:	6877      	ldr	r7, [r6, #4]
    bb68:	e004      	b.n	bb74 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    bb6a:	6874      	ldr	r4, [r6, #4]
    bb6c:	1be4      	subs	r4, r4, r7
    bb6e:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    bb72:	d20b      	bcs.n	bb8c <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    bb74:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    bb78:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    bb7c:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    bb80:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    bb84:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    bb88:	0464      	lsls	r4, r4, #17
    bb8a:	d5ee      	bpl.n	bb6a <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    bb8c:	400d      	ands	r5, r1
    bb8e:	d107      	bne.n	bba0 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    bb90:	4c0c      	ldr	r4, [pc, #48]	; (bbc4 <schedule_transfer+0x80>)
		endpoint->status = 0;
    bb92:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    bb96:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    bb9a:	430b      	orrs	r3, r1
    bb9c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    bba0:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    bba2:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    bba4:	bcf0      	pop	{r4, r5, r6, r7}
    bba6:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    bba8:	4d06      	ldr	r5, [pc, #24]	; (bbc4 <schedule_transfer+0x80>)
	endpoint->status = 0;
    bbaa:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    bbae:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    bbb2:	430b      	orrs	r3, r1
    bbb4:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    bbb8:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    bbba:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    bbbc:	b662      	cpsie	i
}
    bbbe:	bcf0      	pop	{r4, r5, r6, r7}
    bbc0:	4770      	bx	lr
    bbc2:	bf00      	nop
    bbc4:	402e0000 	.word	0x402e0000
    bbc8:	e0001000 	.word	0xe0001000

0000bbcc <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    bbcc:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    bbce:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    bbd0:	b19d      	cbz	r5, bbfa <run_callbacks+0x2e>
    bbd2:	4606      	mov	r6, r0
    bbd4:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    bbd6:	2400      	movs	r4, #0
    bbd8:	e003      	b.n	bbe2 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    bbda:	6812      	ldr	r2, [r2, #0]
		count++;
    bbdc:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    bbde:	2a01      	cmp	r2, #1
    bbe0:	d00c      	beq.n	bbfc <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    bbe2:	6853      	ldr	r3, [r2, #4]
    bbe4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    bbe8:	d0f7      	beq.n	bbda <run_callbacks+0xe>
			ep->first_transfer = t;
    bbea:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    bbec:	b12c      	cbz	r4, bbfa <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    bbee:	4628      	mov	r0, r5
		ep->callback_function(first);
    bbf0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    bbf2:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    bbf4:	4798      	blx	r3
	while (count) {
    bbf6:	3c01      	subs	r4, #1
    bbf8:	d1f9      	bne.n	bbee <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    bbfa:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    bbfc:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    bc00:	e7f4      	b.n	bbec <run_callbacks+0x20>
    bc02:	bf00      	nop

0000bc04 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    bc04:	b430      	push	{r4, r5}
	if (len > 0) {
    bc06:	b9d9      	cbnz	r1, bc40 <endpoint0_transmit.constprop.0+0x3c>
    bc08:	4c1f      	ldr	r4, [pc, #124]	; (bc88 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    bc0a:	4b20      	ldr	r3, [pc, #128]	; (bc8c <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    bc0c:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    bc0e:	4a20      	ldr	r2, [pc, #128]	; (bc90 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    bc10:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    bc12:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    bc16:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    bc18:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    bc1a:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    bc1e:	2480      	movs	r4, #128	; 0x80
    bc20:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    bc22:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    bc26:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    bc2a:	481a      	ldr	r0, [pc, #104]	; (bc94 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    bc2c:	432b      	orrs	r3, r5
    bc2e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    bc32:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    bc34:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    bc38:	2b00      	cmp	r3, #0
    bc3a:	d1fb      	bne.n	bc34 <endpoint0_transmit.constprop.0+0x30>
}
    bc3c:	bc30      	pop	{r4, r5}
    bc3e:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    bc40:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    bc42:	4b15      	ldr	r3, [pc, #84]	; (bc98 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    bc44:	4c10      	ldr	r4, [pc, #64]	; (bc88 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    bc46:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    bc48:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    bc4c:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    bc4e:	4a10      	ldr	r2, [pc, #64]	; (bc90 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    bc50:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    bc52:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    bc56:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    bc58:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    bc5a:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    bc5e:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    bc60:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    bc62:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    bc66:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    bc6a:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    bc6c:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    bc6e:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    bc70:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    bc72:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    bc76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    bc7a:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    bc7e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    bc82:	2b00      	cmp	r3, #0
    bc84:	d1fb      	bne.n	bc7e <endpoint0_transmit.constprop.0+0x7a>
    bc86:	e7c0      	b.n	bc0a <endpoint0_transmit.constprop.0+0x6>
    bc88:	20000000 	.word	0x20000000
    bc8c:	200026c0 	.word	0x200026c0
    bc90:	402e0000 	.word	0x402e0000
    bc94:	20003848 	.word	0x20003848
    bc98:	200026e0 	.word	0x200026e0

0000bc9c <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    bc9c:	4908      	ldr	r1, [pc, #32]	; (bcc0 <usb_stop_sof_interrupts+0x24>)
    bc9e:	2201      	movs	r2, #1
    bca0:	780b      	ldrb	r3, [r1, #0]
    bca2:	fa02 f000 	lsl.w	r0, r2, r0
    bca6:	ea23 0000 	bic.w	r0, r3, r0
    bcaa:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    bcac:	b930      	cbnz	r0, bcbc <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    bcae:	4a05      	ldr	r2, [pc, #20]	; (bcc4 <usb_stop_sof_interrupts+0x28>)
    bcb0:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    bcb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    bcb8:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    bcbc:	4770      	bx	lr
    bcbe:	bf00      	nop
    bcc0:	20003907 	.word	0x20003907
    bcc4:	402e0000 	.word	0x402e0000

0000bcc8 <usb_isr>:
{
    bcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    bccc:	4c97      	ldr	r4, [pc, #604]	; (bf2c <usb_isr+0x264>)
{
    bcce:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    bcd0:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    bcd4:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    bcd6:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    bcda:	d553      	bpl.n	bd84 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    bcdc:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    bce0:	2a00      	cmp	r2, #0
    bce2:	d04a      	beq.n	bd7a <usb_isr+0xb2>
    bce4:	4e92      	ldr	r6, [pc, #584]	; (bf30 <usb_isr+0x268>)
    bce6:	f8df a260 	ldr.w	sl, [pc, #608]	; bf48 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    bcea:	f8df 9274 	ldr.w	r9, [pc, #628]	; bf60 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    bcee:	f8df b274 	ldr.w	fp, [pc, #628]	; bf64 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    bcf2:	f8df 8274 	ldr.w	r8, [pc, #628]	; bf68 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    bcf6:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    bcfa:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    bcfe:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    bd02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    bd06:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    bd0a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    bd0e:	049d      	lsls	r5, r3, #18
    bd10:	d5f5      	bpl.n	bcfe <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    bd12:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    bd16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    bd1a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    bd1e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    bd22:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    bd26:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    bd2a:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    bd2e:	d1fa      	bne.n	bd26 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    bd30:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    bd32:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    bd34:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    bd38:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    bd3c:	f000 81cf 	beq.w	c0de <usb_isr+0x416>
    bd40:	f200 80db 	bhi.w	befa <usb_isr+0x232>
    bd44:	f240 3102 	movw	r1, #770	; 0x302
    bd48:	428b      	cmp	r3, r1
    bd4a:	f000 81e7 	beq.w	c11c <usb_isr+0x454>
    bd4e:	f200 809a 	bhi.w	be86 <usb_isr+0x1be>
    bd52:	2b82      	cmp	r3, #130	; 0x82
    bd54:	f000 81cb 	beq.w	c0ee <usb_isr+0x426>
    bd58:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    bd5c:	f040 808a 	bne.w	be74 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    bd60:	f010 0f78 	tst.w	r0, #120	; 0x78
    bd64:	b283      	uxth	r3, r0
    bd66:	f000 8203 	beq.w	c170 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    bd6a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    bd6e:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    bd72:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    bd76:	2a00      	cmp	r2, #0
    bd78:	d1bd      	bne.n	bcf6 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    bd7a:	4a6c      	ldr	r2, [pc, #432]	; (bf2c <usb_isr+0x264>)
    bd7c:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    bd80:	2b00      	cmp	r3, #0
    bd82:	d142      	bne.n	be0a <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    bd84:	067e      	lsls	r6, r7, #25
    bd86:	d516      	bpl.n	bdb6 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    bd88:	4b68      	ldr	r3, [pc, #416]	; (bf2c <usb_isr+0x264>)
    bd8a:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    bd8e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    bd92:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    bd96:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    bd9a:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    bd9e:	2c00      	cmp	r4, #0
    bda0:	d1fb      	bne.n	bd9a <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    bda2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bda6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    bdaa:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    bdae:	f000 fd2d 	bl	c80c <usb_serial_reset>
		endpointN_notify_mask = 0;
    bdb2:	4b60      	ldr	r3, [pc, #384]	; (bf34 <usb_isr+0x26c>)
    bdb4:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    bdb6:	01fc      	lsls	r4, r7, #7
    bdb8:	d503      	bpl.n	bdc2 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    bdba:	4b5f      	ldr	r3, [pc, #380]	; (bf38 <usb_isr+0x270>)
    bdbc:	681b      	ldr	r3, [r3, #0]
    bdbe:	b103      	cbz	r3, bdc2 <usb_isr+0xfa>
    bdc0:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    bdc2:	01b8      	lsls	r0, r7, #6
    bdc4:	d503      	bpl.n	bdce <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    bdc6:	4b5d      	ldr	r3, [pc, #372]	; (bf3c <usb_isr+0x274>)
    bdc8:	681b      	ldr	r3, [r3, #0]
    bdca:	b103      	cbz	r3, bdce <usb_isr+0x106>
    bdcc:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    bdce:	0779      	lsls	r1, r7, #29
    bdd0:	d508      	bpl.n	bde4 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    bdd2:	4b56      	ldr	r3, [pc, #344]	; (bf2c <usb_isr+0x264>)
    bdd4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    bdd8:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    bddc:	d047      	beq.n	be6e <usb_isr+0x1a6>
			usb_high_speed = 1;
    bdde:	4b58      	ldr	r3, [pc, #352]	; (bf40 <usb_isr+0x278>)
    bde0:	2201      	movs	r2, #1
    bde2:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    bde4:	4b51      	ldr	r3, [pc, #324]	; (bf2c <usb_isr+0x264>)
    bde6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    bdea:	061a      	lsls	r2, r3, #24
    bdec:	d50a      	bpl.n	be04 <usb_isr+0x13c>
    bdee:	063b      	lsls	r3, r7, #24
    bdf0:	d508      	bpl.n	be04 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    bdf2:	4a54      	ldr	r2, [pc, #336]	; (bf44 <usb_isr+0x27c>)
    bdf4:	7813      	ldrb	r3, [r2, #0]
    bdf6:	b12b      	cbz	r3, be04 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    bdf8:	3b01      	subs	r3, #1
    bdfa:	b2db      	uxtb	r3, r3
    bdfc:	7013      	strb	r3, [r2, #0]
    bdfe:	2b00      	cmp	r3, #0
    be00:	f000 8272 	beq.w	c2e8 <usb_isr+0x620>
}
    be04:	b003      	add	sp, #12
    be06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    be0a:	494f      	ldr	r1, [pc, #316]	; (bf48 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    be0c:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    be10:	6808      	ldr	r0, [r1, #0]
    be12:	4203      	tst	r3, r0
    be14:	f040 81d1 	bne.w	c1ba <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    be18:	4a46      	ldr	r2, [pc, #280]	; (bf34 <usb_isr+0x26c>)
    be1a:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    be1c:	401c      	ands	r4, r3
    be1e:	d0b1      	beq.n	bd84 <usb_isr+0xbc>
				while (tx) {
    be20:	ea5f 4814 	movs.w	r8, r4, lsr #16
    be24:	d010      	beq.n	be48 <usb_isr+0x180>
    be26:	4e42      	ldr	r6, [pc, #264]	; (bf30 <usb_isr+0x268>)
					tx &= ~(1<<p);
    be28:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    be2c:	fa98 f5a8 	rbit	r5, r8
    be30:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    be34:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    be38:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    be3c:	3040      	adds	r0, #64	; 0x40
    be3e:	f7ff fec5 	bl	bbcc <run_callbacks>
				while (tx) {
    be42:	ea38 0805 	bics.w	r8, r8, r5
    be46:	d1f1      	bne.n	be2c <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    be48:	b2a4      	uxth	r4, r4
				while(rx) {
    be4a:	2c00      	cmp	r4, #0
    be4c:	d09a      	beq.n	bd84 <usb_isr+0xbc>
    be4e:	4e38      	ldr	r6, [pc, #224]	; (bf30 <usb_isr+0x268>)
					rx &= ~(1<<p);
    be50:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    be54:	fa94 f5a4 	rbit	r5, r4
    be58:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    be5c:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    be60:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    be64:	f7ff feb2 	bl	bbcc <run_callbacks>
				while(rx) {
    be68:	43ac      	bics	r4, r5
    be6a:	d1f3      	bne.n	be54 <usb_isr+0x18c>
    be6c:	e78a      	b.n	bd84 <usb_isr+0xbc>
			usb_high_speed = 0;
    be6e:	4a34      	ldr	r2, [pc, #208]	; (bf40 <usb_isr+0x278>)
    be70:	7013      	strb	r3, [r2, #0]
    be72:	e7b7      	b.n	bde4 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    be74:	2b80      	cmp	r3, #128	; 0x80
    be76:	f47f af78 	bne.w	bd6a <usb_isr+0xa2>
		reply_buffer[0] = 0;
    be7a:	4834      	ldr	r0, [pc, #208]	; (bf4c <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    be7c:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    be7e:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    be80:	f7ff fec0 	bl	bc04 <endpoint0_transmit.constprop.0>
		return;
    be84:	e775      	b.n	bd72 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    be86:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    be8a:	f000 810b 	beq.w	c0a4 <usb_isr+0x3dc>
    be8e:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    be92:	2b01      	cmp	r3, #1
    be94:	f63f af69 	bhi.w	bd6a <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    be98:	4b2d      	ldr	r3, [pc, #180]	; (bf50 <usb_isr+0x288>)
    be9a:	685d      	ldr	r5, [r3, #4]
    be9c:	2d00      	cmp	r5, #0
    be9e:	f43f af64 	beq.w	bd6a <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    bea2:	fa1f fc8c 	uxth.w	ip, ip
    bea6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    beaa:	e004      	b.n	beb6 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    beac:	691d      	ldr	r5, [r3, #16]
    beae:	330c      	adds	r3, #12
    beb0:	2d00      	cmp	r5, #0
    beb2:	f43f af5a 	beq.w	bd6a <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    beb6:	881a      	ldrh	r2, [r3, #0]
    beb8:	4572      	cmp	r2, lr
    beba:	d1f7      	bne.n	beac <usb_isr+0x1e4>
    bebc:	885a      	ldrh	r2, [r3, #2]
    bebe:	4562      	cmp	r2, ip
    bec0:	d1f4      	bne.n	beac <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    bec2:	ea4f 221e 	mov.w	r2, lr, lsr #8
    bec6:	2a03      	cmp	r2, #3
    bec8:	f000 81a5 	beq.w	c216 <usb_isr+0x54e>
					datalen = list->length;
    becc:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    bece:	0c00      	lsrs	r0, r0, #16
    bed0:	4282      	cmp	r2, r0
    bed2:	bf28      	it	cs
    bed4:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    bed6:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    beda:	f040 81a1 	bne.w	c220 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    bede:	4b18      	ldr	r3, [pc, #96]	; (bf40 <usb_isr+0x278>)
    bee0:	491c      	ldr	r1, [pc, #112]	; (bf54 <usb_isr+0x28c>)
    bee2:	7818      	ldrb	r0, [r3, #0]
    bee4:	4b1c      	ldr	r3, [pc, #112]	; (bf58 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    bee6:	9201      	str	r2, [sp, #4]
    bee8:	2800      	cmp	r0, #0
    beea:	bf18      	it	ne
    beec:	4619      	movne	r1, r3
    beee:	481b      	ldr	r0, [pc, #108]	; (bf5c <usb_isr+0x294>)
    bef0:	f7ff fc1e 	bl	b730 <memcpy>
    bef4:	4d19      	ldr	r5, [pc, #100]	; (bf5c <usb_isr+0x294>)
    bef6:	9a01      	ldr	r2, [sp, #4]
    bef8:	e1e1      	b.n	c2be <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    befa:	f242 2121 	movw	r1, #8737	; 0x2221
    befe:	428b      	cmp	r3, r1
    bf00:	d07c      	beq.n	bffc <usb_isr+0x334>
    bf02:	d933      	bls.n	bf6c <usb_isr+0x2a4>
    bf04:	f242 3121 	movw	r1, #8993	; 0x2321
    bf08:	428b      	cmp	r3, r1
    bf0a:	f000 8081 	beq.w	c010 <usb_isr+0x348>
    bf0e:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    bf12:	428b      	cmp	r3, r1
    bf14:	f47f af29 	bne.w	bd6a <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    bf18:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    bf1c:	b283      	uxth	r3, r0
    bf1e:	f47f af24 	bne.w	bd6a <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    bf22:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    bf26:	f363 0c0f 	bfi	ip, r3, #0, #16
    bf2a:	e7b5      	b.n	be98 <usb_isr+0x1d0>
    bf2c:	402e0000 	.word	0x402e0000
    bf30:	20000000 	.word	0x20000000
    bf34:	2000384c 	.word	0x2000384c
    bf38:	200038ec 	.word	0x200038ec
    bf3c:	200038f0 	.word	0x200038f0
    bf40:	2000390d 	.word	0x2000390d
    bf44:	2000390e 	.word	0x2000390e
    bf48:	20003848 	.word	0x20003848
    bf4c:	20003880 	.word	0x20003880
    bf50:	20001854 	.word	0x20001854
    bf54:	60001ec8 	.word	0x60001ec8
    bf58:	60001f2c 	.word	0x60001f2c
    bf5c:	20200000 	.word	0x20200000
    bf60:	20003840 	.word	0x20003840
    bf64:	b8c6cf5d 	.word	0xb8c6cf5d
    bf68:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    bf6c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    bf70:	d066      	beq.n	c040 <usb_isr+0x378>
    bf72:	f242 0121 	movw	r1, #8225	; 0x2021
    bf76:	428b      	cmp	r3, r1
    bf78:	f47f aef7 	bne.w	bd6a <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    bf7c:	0c03      	lsrs	r3, r0, #16
    bf7e:	2b07      	cmp	r3, #7
    bf80:	f47f aef3 	bne.w	bd6a <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    bf84:	4bb2      	ldr	r3, [pc, #712]	; (c250 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    bf86:	49b3      	ldr	r1, [pc, #716]	; (c254 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    bf88:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    bf8a:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    bf8c:	49b2      	ldr	r1, [pc, #712]	; (c258 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    bf8e:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    bf90:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    bf94:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    bf98:	2201      	movs	r2, #1
    bf9a:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    bf9c:	4aaf      	ldr	r2, [pc, #700]	; (c25c <usb_isr+0x594>)
    bf9e:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    bfa0:	4aaf      	ldr	r2, [pc, #700]	; (c260 <usb_isr+0x598>)
    bfa2:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    bfa4:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    bfa8:	f041 0101 	orr.w	r1, r1, #1
    bfac:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    bfb0:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    bfb4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    bfb8:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    bfba:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    bfbc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    bfc0:	2b00      	cmp	r3, #0
    bfc2:	d1fb      	bne.n	bfbc <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    bfc4:	4aa7      	ldr	r2, [pc, #668]	; (c264 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    bfc6:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    bfc8:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    bfca:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    bfcc:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    bfce:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    bfd0:	f248 0380 	movw	r3, #32896	; 0x8080
    bfd4:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    bfd6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    bfda:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    bfde:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    bfe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    bfe6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    bfea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    bfee:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    bff2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    bff6:	2b00      	cmp	r3, #0
    bff8:	d1fb      	bne.n	bff2 <usb_isr+0x32a>
    bffa:	e6ba      	b.n	bd72 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    bffc:	b280      	uxth	r0, r0
    bffe:	b938      	cbnz	r0, c010 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    c000:	4b99      	ldr	r3, [pc, #612]	; (c268 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    c002:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    c006:	6819      	ldr	r1, [r3, #0]
    c008:	4b98      	ldr	r3, [pc, #608]	; (c26c <usb_isr+0x5a4>)
    c00a:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    c00c:	4b98      	ldr	r3, [pc, #608]	; (c270 <usb_isr+0x5a8>)
    c00e:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    c010:	4b94      	ldr	r3, [pc, #592]	; (c264 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    c012:	2200      	movs	r2, #0
    c014:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    c016:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    c018:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c01a:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    c01c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c01e:	2280      	movs	r2, #128	; 0x80
    c020:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c022:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    c026:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    c02a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    c02e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    c032:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    c036:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    c03a:	2b00      	cmp	r3, #0
    c03c:	d1fb      	bne.n	c036 <usb_isr+0x36e>
    c03e:	e698      	b.n	bd72 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    c040:	f3c2 4207 	ubfx	r2, r2, #16, #8
    c044:	4b8b      	ldr	r3, [pc, #556]	; (c274 <usb_isr+0x5ac>)
    c046:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    c048:	4b8b      	ldr	r3, [pc, #556]	; (c278 <usb_isr+0x5b0>)
    c04a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    c04e:	4b8b      	ldr	r3, [pc, #556]	; (c27c <usb_isr+0x5b4>)
    c050:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    c054:	4b8a      	ldr	r3, [pc, #552]	; (c280 <usb_isr+0x5b8>)
    c056:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    c05a:	f000 fbd9 	bl	c810 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    c05e:	2280      	movs	r2, #128	; 0x80
    c060:	4629      	mov	r1, r5
    c062:	4888      	ldr	r0, [pc, #544]	; (c284 <usb_isr+0x5bc>)
    c064:	f001 ff12 	bl	de8c <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    c068:	4b87      	ldr	r3, [pc, #540]	; (c288 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c06a:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    c06c:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    c070:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    c074:	4b7b      	ldr	r3, [pc, #492]	; (c264 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    c076:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c078:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    c07a:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c07c:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    c07e:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    c080:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c082:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    c086:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    c08a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    c08e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    c092:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    c096:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    c09a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    c09e:	2b00      	cmp	r3, #0
    c0a0:	d1fb      	bne.n	c09a <usb_isr+0x3d2>
    c0a2:	e666      	b.n	bd72 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    c0a4:	4b6f      	ldr	r3, [pc, #444]	; (c264 <usb_isr+0x59c>)
    c0a6:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    c0a8:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    c0aa:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c0ac:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    c0ae:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c0b0:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c0b2:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c0b4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    c0b8:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    c0bc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    c0c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    c0c4:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    c0c8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    c0cc:	2b00      	cmp	r3, #0
    c0ce:	d1fb      	bne.n	c0c8 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    c0d0:	0c13      	lsrs	r3, r2, #16
    c0d2:	065b      	lsls	r3, r3, #25
    c0d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    c0d8:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    c0dc:	e649      	b.n	bd72 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    c0de:	4b65      	ldr	r3, [pc, #404]	; (c274 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    c0e0:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    c0e2:	486a      	ldr	r0, [pc, #424]	; (c28c <usb_isr+0x5c4>)
    c0e4:	781b      	ldrb	r3, [r3, #0]
    c0e6:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    c0e8:	f7ff fd8c 	bl	bc04 <endpoint0_transmit.constprop.0>
		return;
    c0ec:	e641      	b.n	bd72 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    c0ee:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    c0f0:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    c0f4:	f47f ae39 	bne.w	bd6a <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    c0f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    c0fc:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    c100:	4a62      	ldr	r2, [pc, #392]	; (c28c <usb_isr+0x5c4>)
    c102:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    c104:	0618      	lsls	r0, r3, #24
    c106:	f100 809e 	bmi.w	c246 <usb_isr+0x57e>
    c10a:	07cb      	lsls	r3, r1, #31
    c10c:	d501      	bpl.n	c112 <usb_isr+0x44a>
			reply_buffer[0] = 1;
    c10e:	2301      	movs	r3, #1
    c110:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    c112:	2102      	movs	r1, #2
    c114:	485d      	ldr	r0, [pc, #372]	; (c28c <usb_isr+0x5c4>)
    c116:	f7ff fd75 	bl	bc04 <endpoint0_transmit.constprop.0>
		return;
    c11a:	e62a      	b.n	bd72 <usb_isr+0xaa>
		if (endpoint > 7) break;
    c11c:	f010 0f78 	tst.w	r0, #120	; 0x78
    c120:	b283      	uxth	r3, r0
    c122:	f47f ae22 	bne.w	bd6a <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    c126:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    c12a:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    c12e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    c132:	bf14      	ite	ne
    c134:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    c138:	f043 0301 	orreq.w	r3, r3, #1
    c13c:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    c140:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    c142:	4b48      	ldr	r3, [pc, #288]	; (c264 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    c144:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    c146:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    c148:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c14a:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    c14c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c14e:	2280      	movs	r2, #128	; 0x80
    c150:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c152:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    c156:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    c15a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    c15e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    c162:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    c166:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    c16a:	2b00      	cmp	r3, #0
    c16c:	d1fb      	bne.n	c166 <usb_isr+0x49e>
    c16e:	e600      	b.n	bd72 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    c170:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    c174:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    c178:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    c17c:	bf14      	ite	ne
    c17e:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    c182:	f023 0301 	biceq.w	r3, r3, #1
    c186:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    c18a:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    c18c:	4b35      	ldr	r3, [pc, #212]	; (c264 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    c18e:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    c190:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    c192:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c194:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    c196:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c198:	2280      	movs	r2, #128	; 0x80
    c19a:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c19c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    c1a0:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    c1a4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    c1a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    c1ac:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    c1b0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    c1b4:	2b00      	cmp	r3, #0
    c1b6:	d1fb      	bne.n	c1b0 <usb_isr+0x4e8>
    c1b8:	e5db      	b.n	bd72 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    c1ba:	2000      	movs	r0, #0
    c1bc:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    c1be:	4926      	ldr	r1, [pc, #152]	; (c258 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    c1c0:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    c1c2:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    c1c4:	f242 0121 	movw	r1, #8225	; 0x2021
    c1c8:	428c      	cmp	r4, r1
    c1ca:	f47f ae25 	bne.w	be18 <usb_isr+0x150>
    c1ce:	b280      	uxth	r0, r0
    c1d0:	2800      	cmp	r0, #0
    c1d2:	f47f ae21 	bne.w	be18 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    c1d6:	492e      	ldr	r1, [pc, #184]	; (c290 <usb_isr+0x5c8>)
    c1d8:	4c2e      	ldr	r4, [pc, #184]	; (c294 <usb_isr+0x5cc>)
    c1da:	c903      	ldmia	r1, {r0, r1}
    c1dc:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    c1de:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    c1e0:	ea4f 4111 	mov.w	r1, r1, lsr #16
    c1e4:	6020      	str	r0, [r4, #0]
    c1e6:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    c1e8:	f47f ae16 	bne.w	be18 <usb_isr+0x150>
	__disable_irq();
    c1ec:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    c1ee:	482a      	ldr	r0, [pc, #168]	; (c298 <usb_isr+0x5d0>)
    c1f0:	7801      	ldrb	r1, [r0, #0]
    c1f2:	f041 0108 	orr.w	r1, r1, #8
    c1f6:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    c1f8:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    c1fc:	060d      	lsls	r5, r1, #24
    c1fe:	d405      	bmi.n	c20c <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    c200:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    c202:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    c204:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    c208:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    c20c:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    c20e:	4a23      	ldr	r2, [pc, #140]	; (c29c <usb_isr+0x5d4>)
    c210:	2150      	movs	r1, #80	; 0x50
    c212:	7011      	strb	r1, [r2, #0]
    c214:	e600      	b.n	be18 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    c216:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    c218:	782a      	ldrb	r2, [r5, #0]
    c21a:	4282      	cmp	r2, r0
    c21c:	bf28      	it	cs
    c21e:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    c220:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    c224:	d144      	bne.n	c2b0 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    c226:	4b1e      	ldr	r3, [pc, #120]	; (c2a0 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    c228:	4d1e      	ldr	r5, [pc, #120]	; (c2a4 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    c22a:	7818      	ldrb	r0, [r3, #0]
    c22c:	491e      	ldr	r1, [pc, #120]	; (c2a8 <usb_isr+0x5e0>)
    c22e:	4b1f      	ldr	r3, [pc, #124]	; (c2ac <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    c230:	9201      	str	r2, [sp, #4]
    c232:	2800      	cmp	r0, #0
    c234:	bf18      	it	ne
    c236:	4619      	movne	r1, r3
    c238:	4628      	mov	r0, r5
    c23a:	f7ff fa79 	bl	b730 <memcpy>
					usb_descriptor_buffer[1] = 7;
    c23e:	2307      	movs	r3, #7
    c240:	706b      	strb	r3, [r5, #1]
    c242:	9a01      	ldr	r2, [sp, #4]
    c244:	e03b      	b.n	c2be <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    c246:	03c9      	lsls	r1, r1, #15
    c248:	f53f af61 	bmi.w	c10e <usb_isr+0x446>
    c24c:	e761      	b.n	c112 <usb_isr+0x44a>
    c24e:	bf00      	nop
    c250:	200026e0 	.word	0x200026e0
    c254:	20004840 	.word	0x20004840
    c258:	20002880 	.word	0x20002880
    c25c:	00070080 	.word	0x00070080
    c260:	20005840 	.word	0x20005840
    c264:	200026c0 	.word	0x200026c0
    c268:	200038d8 	.word	0x200038d8
    c26c:	200038e8 	.word	0x200038e8
    c270:	2000390b 	.word	0x2000390b
    c274:	2000390c 	.word	0x2000390c
    c278:	00cc0002 	.word	0x00cc0002
    c27c:	000200c8 	.word	0x000200c8
    c280:	00c80002 	.word	0x00c80002
    c284:	20000080 	.word	0x20000080
    c288:	74d59319 	.word	0x74d59319
    c28c:	20003880 	.word	0x20003880
    c290:	20003840 	.word	0x20003840
    c294:	200038e0 	.word	0x200038e0
    c298:	20003907 	.word	0x20003907
    c29c:	2000390e 	.word	0x2000390e
    c2a0:	2000390d 	.word	0x2000390d
    c2a4:	20200000 	.word	0x20200000
    c2a8:	60001f2c 	.word	0x60001f2c
    c2ac:	60001ec8 	.word	0x60001ec8
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    c2b0:	4629      	mov	r1, r5
    c2b2:	4d10      	ldr	r5, [pc, #64]	; (c2f4 <usb_isr+0x62c>)
    c2b4:	9201      	str	r2, [sp, #4]
    c2b6:	4628      	mov	r0, r5
    c2b8:	f7ff fa3a 	bl	b730 <memcpy>
    c2bc:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    c2be:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    c2c2:	4415      	add	r5, r2
	asm("dsb");
    c2c4:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    c2c8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c2cc:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    c2d0:	3320      	adds	r3, #32
	} while (location < end_addr);
    c2d2:	429d      	cmp	r5, r3
    c2d4:	d8fa      	bhi.n	c2cc <usb_isr+0x604>
	asm("dsb");
    c2d6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    c2da:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    c2de:	4805      	ldr	r0, [pc, #20]	; (c2f4 <usb_isr+0x62c>)
    c2e0:	4611      	mov	r1, r2
    c2e2:	f7ff fc8f 	bl	bc04 <endpoint0_transmit.constprop.0>
				return;
    c2e6:	e544      	b.n	bd72 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    c2e8:	2003      	movs	r0, #3
    c2ea:	f7ff fcd7 	bl	bc9c <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    c2ee:	f007 fb9f 	bl	13a30 <___reboot_Teensyduino__veneer>
    c2f2:	bf00      	nop
    c2f4:	20200000 	.word	0x20200000

0000c2f8 <usb_config_rx>:
{
    c2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c2fc:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    c2fe:	1e83      	subs	r3, r0, #2
    c300:	2b02      	cmp	r3, #2
    c302:	d901      	bls.n	c308 <usb_config_rx+0x10>
}
    c304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    c308:	f8df 904c 	ldr.w	r9, [pc, #76]	; c358 <usb_config_rx+0x60>
    c30c:	4615      	mov	r5, r2
    c30e:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    c310:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    c312:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    c316:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    c318:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    c31c:	2100      	movs	r1, #0
    c31e:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    c322:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    c324:	f001 fdb2 	bl	de8c <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    c328:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    c32c:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    c32e:	0952      	lsrs	r2, r2, #5
    c330:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    c334:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    c338:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    c33c:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    c340:	2f00      	cmp	r7, #0
    c342:	d0df      	beq.n	c304 <usb_config_rx+0xc>
    c344:	4a03      	ldr	r2, [pc, #12]	; (c354 <usb_config_rx+0x5c>)
    c346:	40b3      	lsls	r3, r6
    c348:	6811      	ldr	r1, [r2, #0]
    c34a:	430b      	orrs	r3, r1
    c34c:	6013      	str	r3, [r2, #0]
}
    c34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c352:	bf00      	nop
    c354:	2000384c 	.word	0x2000384c
    c358:	20000000 	.word	0x20000000

0000c35c <usb_config_tx>:
{
    c35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c360:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    c362:	1e81      	subs	r1, r0, #2
    c364:	2902      	cmp	r1, #2
    c366:	d901      	bls.n	c36c <usb_config_tx+0x10>
}
    c368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    c36c:	01c7      	lsls	r7, r0, #7
    c36e:	f8df 904c 	ldr.w	r9, [pc, #76]	; c3bc <usb_config_tx+0x60>
    c372:	4692      	mov	sl, r2
    c374:	4604      	mov	r4, r0
    c376:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    c378:	223c      	movs	r2, #60	; 0x3c
    c37a:	2100      	movs	r1, #0
    c37c:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    c37e:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    c382:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    c384:	f108 0004 	add.w	r0, r8, #4
    c388:	f001 fd80 	bl	de8c <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    c38c:	faba f28a 	clz	r2, sl
    c390:	0952      	lsrs	r2, r2, #5
    c392:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    c396:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    c39a:	2201      	movs	r2, #1
	qh->callback_function = callback;
    c39c:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    c3a0:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    c3a4:	2e00      	cmp	r6, #0
    c3a6:	d0df      	beq.n	c368 <usb_config_tx+0xc>
    c3a8:	4b03      	ldr	r3, [pc, #12]	; (c3b8 <usb_config_tx+0x5c>)
    c3aa:	3410      	adds	r4, #16
    c3ac:	6819      	ldr	r1, [r3, #0]
    c3ae:	40a2      	lsls	r2, r4
    c3b0:	430a      	orrs	r2, r1
    c3b2:	601a      	str	r2, [r3, #0]
}
    c3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c3b8:	2000384c 	.word	0x2000384c
    c3bc:	20000000 	.word	0x20000000

0000c3c0 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    c3c0:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    c3c2:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    c3c4:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    c3c6:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    c3ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    c3ce:	b410      	push	{r4}
	transfer->next = 1;
    c3d0:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    c3d2:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    c3d4:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    c3d8:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    c3da:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    c3de:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    c3e2:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    c3e4:	6181      	str	r1, [r0, #24]
}
    c3e6:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    c3ea:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    c3ee:	4770      	bx	lr

0000c3f0 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    c3f0:	1e83      	subs	r3, r0, #2
{
    c3f2:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    c3f4:	2b02      	cmp	r3, #2
    c3f6:	d900      	bls.n	c3fa <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    c3f8:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    c3fa:	4b06      	ldr	r3, [pc, #24]	; (c414 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    c3fc:	f100 0110 	add.w	r1, r0, #16
    c400:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    c404:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    c408:	fa0c f101 	lsl.w	r1, ip, r1
    c40c:	3040      	adds	r0, #64	; 0x40
    c40e:	f7ff bb99 	b.w	bb44 <schedule_transfer>
    c412:	bf00      	nop
    c414:	20000000 	.word	0x20000000

0000c418 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    c418:	1e83      	subs	r3, r0, #2
{
    c41a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    c41c:	2b02      	cmp	r3, #2
    c41e:	d900      	bls.n	c422 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    c420:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    c422:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    c424:	4b02      	ldr	r3, [pc, #8]	; (c430 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    c426:	4081      	lsls	r1, r0
    c428:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    c42c:	f7ff bb8a 	b.w	bb44 <schedule_transfer>
    c430:	20000000 	.word	0x20000000

0000c434 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    c434:	6840      	ldr	r0, [r0, #4]
#endif
}
    c436:	4770      	bx	lr

0000c438 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c438:	4a12      	ldr	r2, [pc, #72]	; (c484 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    c43a:	4b13      	ldr	r3, [pc, #76]	; (c488 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c43c:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    c440:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    c444:	4298      	cmp	r0, r3
{
    c446:	b510      	push	{r4, lr}
    c448:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    c44a:	d202      	bcs.n	c452 <usb_init_serialnumber+0x1a>
    c44c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    c450:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    c452:	4c0e      	ldr	r4, [pc, #56]	; (c48c <usb_init_serialnumber+0x54>)
    c454:	a901      	add	r1, sp, #4
    c456:	220a      	movs	r2, #10
    c458:	f7ff fa08 	bl	b86c <ultoa>
	for (i=0; i<10; i++) {
    c45c:	a901      	add	r1, sp, #4
    c45e:	2300      	movs	r3, #0
    c460:	4620      	mov	r0, r4
		char c = buf[i];
    c462:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    c466:	3301      	adds	r3, #1
		if (!c) break;
    c468:	b13a      	cbz	r2, c47a <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    c46a:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    c46c:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    c470:	d1f7      	bne.n	c462 <usb_init_serialnumber+0x2a>
    c472:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c474:	7023      	strb	r3, [r4, #0]
}
    c476:	b004      	add	sp, #16
    c478:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c47a:	005b      	lsls	r3, r3, #1
    c47c:	b2db      	uxtb	r3, r3
    c47e:	7023      	strb	r3, [r4, #0]
}
    c480:	b004      	add	sp, #16
    c482:	bd10      	pop	{r4, pc}
    c484:	401f4400 	.word	0x401f4400
    c488:	00989680 	.word	0x00989680
    c48c:	20002290 	.word	0x20002290

0000c490 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    c490:	f000 badc 	b.w	ca4c <usb_serial_flush_input>

0000c494 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    c494:	f000 baac 	b.w	c9f0 <usb_serial_peekchar>

0000c498 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    c498:	f000 bb10 	b.w	cabc <usb_serial_getchar>

0000c49c <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    c49c:	f000 baca 	b.w	ca34 <usb_serial_available>

0000c4a0 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    c4a0:	f000 bb66 	b.w	cb70 <usb_serial_flush_output>

0000c4a4 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    c4a4:	f000 bb3c 	b.w	cb20 <usb_serial_write_buffer_free>

0000c4a8 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c4a8:	4608      	mov	r0, r1
    c4aa:	4611      	mov	r1, r2
    c4ac:	f000 bb2c 	b.w	cb08 <usb_serial_write>

0000c4b0 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    c4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    c4b2:	4c14      	ldr	r4, [pc, #80]	; (c504 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    c4b4:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    c4b8:	4e13      	ldr	r6, [pc, #76]	; (c508 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    c4ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    c4be:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    c4c2:	4f12      	ldr	r7, [pc, #72]	; (c50c <rx_queue_transfer+0x5c>)
    c4c4:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    c4c8:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    c4ca:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    c4ce:	4621      	mov	r1, r4
    c4d0:	883a      	ldrh	r2, [r7, #0]
    c4d2:	4630      	mov	r0, r6
    c4d4:	f7ff ff74 	bl	c3c0 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    c4d8:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    c4da:	4423      	add	r3, r4
	asm("dsb");
    c4dc:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    c4e0:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    c4e4:	3420      	adds	r4, #32
	} while (location < end_addr);
    c4e6:	42a3      	cmp	r3, r4
    c4e8:	d8fa      	bhi.n	c4e0 <rx_queue_transfer+0x30>
	asm("dsb");
    c4ea:	f3bf 8f4f 	dsb	sy
	asm("isb");
    c4ee:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    c4f2:	2003      	movs	r0, #3
    c4f4:	4631      	mov	r1, r6
    c4f6:	f7ff ff8f 	bl	c418 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    c4fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    c4fe:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    c502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c504:	20200080 	.word	0x20200080
    c508:	20002700 	.word	0x20002700
    c50c:	200038f4 	.word	0x200038f4

0000c510 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    c510:	4b24      	ldr	r3, [pc, #144]	; (c5a4 <rx_event+0x94>)
{
    c512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    c516:	881c      	ldrh	r4, [r3, #0]
    c518:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    c51a:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    c51c:	f3c3 430e 	ubfx	r3, r3, #16, #15
    c520:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    c522:	2c00      	cmp	r4, #0
    c524:	dd24      	ble.n	c570 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    c526:	4920      	ldr	r1, [pc, #128]	; (c5a8 <rx_event+0x98>)
		if (head != rx_tail) {
    c528:	4820      	ldr	r0, [pc, #128]	; (c5ac <rx_event+0x9c>)
		uint32_t head = rx_head;
    c52a:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    c52c:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    c52e:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    c530:	4e1f      	ldr	r6, [pc, #124]	; (c5b0 <rx_event+0xa0>)
		if (head != rx_tail) {
    c532:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    c534:	481f      	ldr	r0, [pc, #124]	; (c5b4 <rx_event+0xa4>)
		if (head != rx_tail) {
    c536:	d007      	beq.n	c548 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    c538:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    c53c:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    c540:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    c544:	4294      	cmp	r4, r2
    c546:	d918      	bls.n	c57a <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    c548:	3301      	adds	r3, #1
		rx_index[i] = 0;
    c54a:	2200      	movs	r2, #0
		rx_count[i] = len;
    c54c:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    c550:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    c552:	4e19      	ldr	r6, [pc, #100]	; (c5b8 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    c554:	bf88      	it	hi
    c556:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    c558:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    c55c:	bf98      	it	ls
    c55e:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    c560:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    c562:	4b16      	ldr	r3, [pc, #88]	; (c5bc <rx_event+0xac>)
		rx_head = head;
    c564:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    c566:	681a      	ldr	r2, [r3, #0]
    c568:	4414      	add	r4, r2
    c56a:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    c56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    c570:	4628      	mov	r0, r5
}
    c572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    c576:	f7ff bf9b 	b.w	c4b0 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    c57a:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    c57e:	4910      	ldr	r1, [pc, #64]	; (c5c0 <rx_event+0xb0>)
    c580:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    c582:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    c584:	4408      	add	r0, r1
    c586:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    c58a:	f7ff f8d1 	bl	b730 <memcpy>
				rx_available += len;
    c58e:	4a0b      	ldr	r2, [pc, #44]	; (c5bc <rx_event+0xac>)
				rx_queue_transfer(i);
    c590:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    c592:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    c596:	6813      	ldr	r3, [r2, #0]
    c598:	4423      	add	r3, r4
}
    c59a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    c59e:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    c5a0:	f7ff bf86 	b.w	c4b0 <rx_queue_transfer>
    c5a4:	200038f4 	.word	0x200038f4
    c5a8:	20003905 	.word	0x20003905
    c5ac:	20003906 	.word	0x20003906
    c5b0:	2000388c 	.word	0x2000388c
    c5b4:	200038ac 	.word	0x200038ac
    c5b8:	2000389c 	.word	0x2000389c
    c5bc:	20003888 	.word	0x20003888
    c5c0:	20200080 	.word	0x20200080

0000c5c4 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    c5c4:	4b1d      	ldr	r3, [pc, #116]	; (c63c <usb_serial_flush_callback+0x78>)
    c5c6:	781a      	ldrb	r2, [r3, #0]
    c5c8:	2a00      	cmp	r2, #0
    c5ca:	d136      	bne.n	c63a <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    c5cc:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    c5d0:	4a1b      	ldr	r2, [pc, #108]	; (c640 <usb_serial_flush_callback+0x7c>)
    c5d2:	7812      	ldrb	r2, [r2, #0]
    c5d4:	b38a      	cbz	r2, c63a <usb_serial_flush_callback+0x76>
{
    c5d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    c5da:	4d1a      	ldr	r5, [pc, #104]	; (c644 <usb_serial_flush_callback+0x80>)
    c5dc:	882a      	ldrh	r2, [r5, #0]
    c5de:	b352      	cbz	r2, c636 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    c5e0:	4e19      	ldr	r6, [pc, #100]	; (c648 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    c5e2:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    c5e6:	4f19      	ldr	r7, [pc, #100]	; (c64c <usb_serial_flush_callback+0x88>)
    c5e8:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    c5ea:	4c19      	ldr	r4, [pc, #100]	; (c650 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    c5ec:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    c5f0:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    c5f4:	4642      	mov	r2, r8
    c5f6:	4638      	mov	r0, r7
    c5f8:	4621      	mov	r1, r4
    c5fa:	f7ff fee1 	bl	c3c0 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    c5fe:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    c602:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    c606:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c60a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    c60e:	3420      	adds	r4, #32
	} while (location < end_addr);
    c610:	42a2      	cmp	r2, r4
    c612:	d8fa      	bhi.n	c60a <usb_serial_flush_callback+0x46>
	asm("dsb");
    c614:	f3bf 8f4f 	dsb	sy
	asm("isb");
    c618:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    c61c:	2004      	movs	r0, #4
    c61e:	4639      	mov	r1, r7
    c620:	f7ff fee6 	bl	c3f0 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    c624:	7833      	ldrb	r3, [r6, #0]
    c626:	3301      	adds	r3, #1
    c628:	b2db      	uxtb	r3, r3
    c62a:	2b03      	cmp	r3, #3
    c62c:	bf88      	it	hi
    c62e:	2300      	movhi	r3, #0
    c630:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    c632:	2300      	movs	r3, #0
    c634:	802b      	strh	r3, [r5, #0]
}
    c636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c63a:	4770      	bx	lr
    c63c:	2000390a 	.word	0x2000390a
    c640:	2000390c 	.word	0x2000390c
    c644:	200038f6 	.word	0x200038f6
    c648:	20003909 	.word	0x20003909
    c64c:	20002800 	.word	0x20002800
    c650:	20201080 	.word	0x20201080

0000c654 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    c654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c658:	b085      	sub	sp, #20
	while (size > 0) {
    c65a:	e9cd 1001 	strd	r1, r0, [sp, #4]
    c65e:	2900      	cmp	r1, #0
    c660:	f000 80bf 	beq.w	c7e2 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    c664:	2300      	movs	r3, #0
    c666:	4c60      	ldr	r4, [pc, #384]	; (c7e8 <usb_serial_write.part.0+0x194>)
    c668:	f8df 8198 	ldr.w	r8, [pc, #408]	; c804 <usb_serial_write.part.0+0x1b0>
    c66c:	f8df a198 	ldr.w	sl, [pc, #408]	; c808 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    c670:	4f5e      	ldr	r7, [pc, #376]	; (c7ec <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    c672:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    c674:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    c676:	4a5e      	ldr	r2, [pc, #376]	; (c7f0 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    c678:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    c67a:	4b5e      	ldr	r3, [pc, #376]	; (c7f4 <usb_serial_write.part.0+0x1a0>)
    c67c:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    c67e:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    c682:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    c686:	2b00      	cmp	r3, #0
    c688:	f040 80a7 	bne.w	c7da <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    c68c:	461e      	mov	r6, r3
		int waiting=0;
    c68e:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    c690:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    c692:	4648      	mov	r0, r9
    c694:	f7ff fece 	bl	c434 <usb_transfer_status>
			if (!(status & 0x80)) {
    c698:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    c69c:	f000 808c 	beq.w	c7b8 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    c6a0:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    c6a4:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    c6a8:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    c6ac:	b905      	cbnz	r5, c6b0 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    c6ae:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    c6b0:	2b00      	cmp	r3, #0
    c6b2:	d17d      	bne.n	c7b0 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    c6b4:	683b      	ldr	r3, [r7, #0]
    c6b6:	1b9b      	subs	r3, r3, r6
    c6b8:	2b78      	cmp	r3, #120	; 0x78
    c6ba:	f200 8087 	bhi.w	c7cc <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    c6be:	4b4e      	ldr	r3, [pc, #312]	; (c7f8 <usb_serial_write.part.0+0x1a4>)
    c6c0:	781b      	ldrb	r3, [r3, #0]
    c6c2:	2b00      	cmp	r3, #0
    c6c4:	d074      	beq.n	c7b0 <usb_serial_write.part.0+0x15c>
			yield();
    c6c6:	f000 fa9d 	bl	cc04 <yield>
			tx_noautoflush = 1;
    c6ca:	2201      	movs	r2, #1
		while (!tx_available) {
    c6cc:	f8b8 3000 	ldrh.w	r3, [r8]
    c6d0:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    c6d2:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    c6d4:	2b00      	cmp	r3, #0
    c6d6:	d0dc      	beq.n	c692 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    c6d8:	4a46      	ldr	r2, [pc, #280]	; (c7f4 <usb_serial_write.part.0+0x1a0>)
    c6da:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    c6de:	7811      	ldrb	r1, [r2, #0]
    c6e0:	461a      	mov	r2, r3
    c6e2:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    c6e6:	4d45      	ldr	r5, [pc, #276]	; (c7fc <usb_serial_write.part.0+0x1a8>)
    c6e8:	02c9      	lsls	r1, r1, #11
    c6ea:	4428      	add	r0, r5
		if (size >= tx_available) {
    c6ec:	9d01      	ldr	r5, [sp, #4]
    c6ee:	4295      	cmp	r5, r2
    c6f0:	d217      	bcs.n	c722 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    c6f2:	9303      	str	r3, [sp, #12]
    c6f4:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    c6f8:	462a      	mov	r2, r5
    c6fa:	f7ff f819 	bl	b730 <memcpy>
			tx_available -= size;
    c6fe:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    c700:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    c704:	1b5b      	subs	r3, r3, r5
    c706:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    c70a:	4b3d      	ldr	r3, [pc, #244]	; (c800 <usb_serial_write.part.0+0x1ac>)
    c70c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    c710:	f3bf 8f4f 	dsb	sy
			sent += size;
    c714:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    c716:	2300      	movs	r3, #0
			sent += size;
    c718:	4428      	add	r0, r5
		tx_noautoflush = 0;
    c71a:	7023      	strb	r3, [r4, #0]
}
    c71c:	b005      	add	sp, #20
    c71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    c722:	4b36      	ldr	r3, [pc, #216]	; (c7fc <usb_serial_write.part.0+0x1a8>)
    c724:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    c726:	9902      	ldr	r1, [sp, #8]
    c728:	f7ff f802 	bl	b730 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    c72c:	2300      	movs	r3, #0
    c72e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    c732:	4629      	mov	r1, r5
    c734:	4648      	mov	r0, r9
    c736:	f7ff fe43 	bl	c3c0 <usb_prepare_transfer>
	asm("dsb");
    c73a:	f3bf 8f4f 	dsb	sy
    c73e:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    c742:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    c746:	4293      	cmp	r3, r2
    c748:	bf34      	ite	cc
    c74a:	2301      	movcc	r3, #1
    c74c:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    c74e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c752:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    c756:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    c75a:	3520      	adds	r5, #32
	} while (location < end_addr);
    c75c:	42ab      	cmp	r3, r5
    c75e:	d1fa      	bne.n	c756 <usb_serial_write.part.0+0x102>
	asm("dsb");
    c760:	f3bf 8f4f 	dsb	sy
	asm("isb");
    c764:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    c768:	2004      	movs	r0, #4
    c76a:	4649      	mov	r1, r9
    c76c:	f7ff fe40 	bl	c3f0 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    c770:	4a20      	ldr	r2, [pc, #128]	; (c7f4 <usb_serial_write.part.0+0x1a0>)
    c772:	7813      	ldrb	r3, [r2, #0]
    c774:	3301      	adds	r3, #1
    c776:	b2db      	uxtb	r3, r3
    c778:	2b03      	cmp	r3, #3
    c77a:	bf84      	itt	hi
    c77c:	2300      	movhi	r3, #0
    c77e:	4a1d      	ldrhi	r2, [pc, #116]	; (c7f4 <usb_serial_write.part.0+0x1a0>)
    c780:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    c782:	f8b8 3000 	ldrh.w	r3, [r8]
    c786:	9a01      	ldr	r2, [sp, #4]
    c788:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    c78a:	9a00      	ldr	r2, [sp, #0]
    c78c:	441a      	add	r2, r3
			size -= tx_available;
    c78e:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    c790:	9200      	str	r2, [sp, #0]
			data += tx_available;
    c792:	9a02      	ldr	r2, [sp, #8]
    c794:	441a      	add	r2, r3
			tx_available = 0;
    c796:	2300      	movs	r3, #0
			data += tx_available;
    c798:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    c79a:	4a19      	ldr	r2, [pc, #100]	; (c800 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    c79c:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    c7a0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    c7a4:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    c7a8:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    c7aa:	2900      	cmp	r1, #0
    c7ac:	f47f af62 	bne.w	c674 <usb_serial_write.part.0+0x20>
	return sent;
    c7b0:	9800      	ldr	r0, [sp, #0]
}
    c7b2:	b005      	add	sp, #20
    c7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    c7b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    c7bc:	4b0d      	ldr	r3, [pc, #52]	; (c7f4 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    c7be:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    c7c2:	7819      	ldrb	r1, [r3, #0]
				break;
    c7c4:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    c7c6:	f8a8 2000 	strh.w	r2, [r8]
				break;
    c7ca:	e78a      	b.n	c6e2 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    c7cc:	2301      	movs	r3, #1
				return sent;
    c7ce:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    c7d0:	f88a 3000 	strb.w	r3, [sl]
}
    c7d4:	b005      	add	sp, #20
    c7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    c7da:	461a      	mov	r2, r3
    c7dc:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    c7e0:	e77f      	b.n	c6e2 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    c7e2:	9801      	ldr	r0, [sp, #4]
	return sent;
    c7e4:	e7e5      	b.n	c7b2 <usb_serial_write.part.0+0x15e>
    c7e6:	bf00      	nop
    c7e8:	2000390a 	.word	0x2000390a
    c7ec:	200038d8 	.word	0x200038d8
    c7f0:	20002800 	.word	0x20002800
    c7f4:	20003909 	.word	0x20003909
    c7f8:	2000390c 	.word	0x2000390c
    c7fc:	20201080 	.word	0x20201080
    c800:	402e0000 	.word	0x402e0000
    c804:	200038f6 	.word	0x200038f6
    c808:	20003908 	.word	0x20003908

0000c80c <usb_serial_reset>:
}
    c80c:	4770      	bx	lr
    c80e:	bf00      	nop

0000c810 <usb_serial_configure>:
	if (usb_high_speed) {
    c810:	4b2d      	ldr	r3, [pc, #180]	; (c8c8 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    c812:	2100      	movs	r1, #0
    c814:	2280      	movs	r2, #128	; 0x80
    c816:	482d      	ldr	r0, [pc, #180]	; (c8cc <usb_serial_configure+0xbc>)
{
    c818:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    c81a:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    c81c:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    c81e:	4d2c      	ldr	r5, [pc, #176]	; (c8d0 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    c820:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    c822:	4e2c      	ldr	r6, [pc, #176]	; (c8d4 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    c824:	bf0c      	ite	eq
    c826:	2340      	moveq	r3, #64	; 0x40
    c828:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    c82c:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    c82e:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    c830:	f001 fb2c 	bl	de8c <memset>
	tx_head = 0;
    c834:	4a28      	ldr	r2, [pc, #160]	; (c8d8 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    c836:	4621      	mov	r1, r4
	tx_available = 0;
    c838:	4b28      	ldr	r3, [pc, #160]	; (c8dc <usb_serial_configure+0xcc>)
	tx_head = 0;
    c83a:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    c83c:	f44f 7280 	mov.w	r2, #256	; 0x100
    c840:	4827      	ldr	r0, [pc, #156]	; (c8e0 <usb_serial_configure+0xd0>)
	tx_available = 0;
    c842:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    c844:	f001 fb22 	bl	de8c <memset>
	memset(rx_count, 0, sizeof(rx_count));
    c848:	4a26      	ldr	r2, [pc, #152]	; (c8e4 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    c84a:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    c84c:	4b26      	ldr	r3, [pc, #152]	; (c8e8 <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    c84e:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    c850:	e9c2 4400 	strd	r4, r4, [r2]
    c854:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    c858:	4a24      	ldr	r2, [pc, #144]	; (c8ec <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    c85a:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    c85e:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    c860:	4a23      	ldr	r2, [pc, #140]	; (c8f0 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    c862:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    c866:	4b23      	ldr	r3, [pc, #140]	; (c8f4 <usb_serial_configure+0xe4>)
    c868:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    c86a:	4623      	mov	r3, r4
	rx_available = 0;
    c86c:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    c86e:	4622      	mov	r2, r4
    c870:	f7ff fd74 	bl	c35c <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    c874:	4622      	mov	r2, r4
    c876:	8831      	ldrh	r1, [r6, #0]
    c878:	2003      	movs	r0, #3
    c87a:	4b1f      	ldr	r3, [pc, #124]	; (c8f8 <usb_serial_configure+0xe8>)
    c87c:	f7ff fd3c 	bl	c2f8 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    c880:	4623      	mov	r3, r4
    c882:	2201      	movs	r2, #1
    c884:	8829      	ldrh	r1, [r5, #0]
    c886:	2004      	movs	r0, #4
    c888:	f7ff fd68 	bl	c35c <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    c88c:	4620      	mov	r0, r4
    c88e:	3401      	adds	r4, #1
    c890:	f7ff fe0e 	bl	c4b0 <rx_queue_transfer>
    c894:	2c08      	cmp	r4, #8
    c896:	d1f9      	bne.n	c88c <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    c898:	4b18      	ldr	r3, [pc, #96]	; (c8fc <usb_serial_configure+0xec>)
    c89a:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    c89c:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    c89e:	4818      	ldr	r0, [pc, #96]	; (c900 <usb_serial_configure+0xf0>)
    c8a0:	4c18      	ldr	r4, [pc, #96]	; (c904 <usb_serial_configure+0xf4>)
    c8a2:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    c8a4:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    c8a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    c8ac:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    c8b0:	4915      	ldr	r1, [pc, #84]	; (c908 <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    c8b2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    c8b6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    c8ba:	b121      	cbz	r1, c8c6 <usb_serial_configure+0xb6>
    c8bc:	4a13      	ldr	r2, [pc, #76]	; (c90c <usb_serial_configure+0xfc>)
    c8be:	7813      	ldrb	r3, [r2, #0]
    c8c0:	f043 0301 	orr.w	r3, r3, #1
    c8c4:	7013      	strb	r3, [r2, #0]
}
    c8c6:	bd70      	pop	{r4, r5, r6, pc}
    c8c8:	2000390d 	.word	0x2000390d
    c8cc:	20002800 	.word	0x20002800
    c8d0:	200038f8 	.word	0x200038f8
    c8d4:	200038f4 	.word	0x200038f4
    c8d8:	20003909 	.word	0x20003909
    c8dc:	200038f6 	.word	0x200038f6
    c8e0:	20002700 	.word	0x20002700
    c8e4:	2000388c 	.word	0x2000388c
    c8e8:	2000389c 	.word	0x2000389c
    c8ec:	20003905 	.word	0x20003905
    c8f0:	20003888 	.word	0x20003888
    c8f4:	20003906 	.word	0x20003906
    c8f8:	0000c511 	.word	0x0000c511
    c8fc:	402e0000 	.word	0x402e0000
    c900:	200038ec 	.word	0x200038ec
    c904:	0000c5c5 	.word	0x0000c5c5
    c908:	00000000 	.word	0x00000000
    c90c:	2000390f 	.word	0x2000390f

0000c910 <usb_serial_read>:
{
    c910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    c914:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c918:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    c91c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; c9e8 <usb_serial_read+0xd8>
{
    c920:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    c922:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    c926:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    c928:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    c92c:	2900      	cmp	r1, #0
    c92e:	d04f      	beq.n	c9d0 <usb_serial_read+0xc0>
    c930:	4680      	mov	r8, r0
    c932:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    c934:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    c936:	f8df 90b4 	ldr.w	r9, [pc, #180]	; c9ec <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    c93a:	4b26      	ldr	r3, [pc, #152]	; (c9d4 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    c93c:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    c940:	4925      	ldr	r1, [pc, #148]	; (c9d8 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    c942:	781b      	ldrb	r3, [r3, #0]
    c944:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    c946:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    c94a:	d03f      	beq.n	c9cc <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    c94c:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    c94e:	4b23      	ldr	r3, [pc, #140]	; (c9dc <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    c950:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    c952:	bf28      	it	cs
    c954:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    c956:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    c958:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    c95c:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    c960:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    c962:	4b1f      	ldr	r3, [pc, #124]	; (c9e0 <usb_serial_read+0xd0>)
    c964:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    c968:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    c96c:	42aa      	cmp	r2, r5
    c96e:	d21c      	bcs.n	c9aa <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    c970:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    c974:	4918      	ldr	r1, [pc, #96]	; (c9d8 <usb_serial_read+0xc8>)
			rx_available -= len;
    c976:	4c1b      	ldr	r4, [pc, #108]	; (c9e4 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    c978:	4461      	add	r1, ip
    c97a:	9201      	str	r2, [sp, #4]
    c97c:	f7fe fed8 	bl	b730 <memcpy>
			rx_available -= len;
    c980:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    c982:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    c986:	4658      	mov	r0, fp
			rx_index[i] += len;
    c988:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    c98a:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    c98e:	442a      	add	r2, r5
			rx_available -= len;
    c990:	4439      	add	r1, r7
			rx_index[i] += len;
    c992:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    c996:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    c998:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c99c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    c9a0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    c9a4:	b003      	add	sp, #12
    c9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    c9aa:	462a      	mov	r2, r5
			count += avail;
    c9ac:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    c9ae:	f7fe febf 	bl	b730 <memcpy>
			rx_available -= avail;
    c9b2:	490c      	ldr	r1, [pc, #48]	; (c9e4 <usb_serial_read+0xd4>)
			rx_tail = tail;
    c9b4:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    c9b6:	4630      	mov	r0, r6
			rx_available -= avail;
    c9b8:	680a      	ldr	r2, [r1, #0]
			p += avail;
    c9ba:	44a8      	add	r8, r5
			rx_available -= avail;
    c9bc:	1b52      	subs	r2, r2, r5
    c9be:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    c9c0:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    c9c4:	f7ff fd74 	bl	c4b0 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    c9c8:	45bb      	cmp	fp, r7
    c9ca:	d8b6      	bhi.n	c93a <usb_serial_read+0x2a>
	return count;
    c9cc:	4638      	mov	r0, r7
    c9ce:	e7e3      	b.n	c998 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    c9d0:	4608      	mov	r0, r1
    c9d2:	e7e1      	b.n	c998 <usb_serial_read+0x88>
    c9d4:	20003905 	.word	0x20003905
    c9d8:	20200080 	.word	0x20200080
    c9dc:	200038ac 	.word	0x200038ac
    c9e0:	2000388c 	.word	0x2000388c
    c9e4:	20003888 	.word	0x20003888
    c9e8:	20003906 	.word	0x20003906
    c9ec:	2000389c 	.word	0x2000389c

0000c9f0 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    c9f0:	4b0b      	ldr	r3, [pc, #44]	; (ca20 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    c9f2:	4a0c      	ldr	r2, [pc, #48]	; (ca24 <usb_serial_peekchar+0x34>)
    c9f4:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    c9f6:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    c9f8:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    c9fa:	428a      	cmp	r2, r1
    c9fc:	d00d      	beq.n	ca1a <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    c9fe:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    ca00:	4809      	ldr	r0, [pc, #36]	; (ca28 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    ca02:	4a0a      	ldr	r2, [pc, #40]	; (ca2c <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    ca04:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    ca06:	490a      	ldr	r1, [pc, #40]	; (ca30 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    ca08:	bf28      	it	cs
    ca0a:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    ca0c:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    ca0e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    ca12:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    ca16:	5c58      	ldrb	r0, [r3, r1]
    ca18:	4770      	bx	lr
	if (tail == rx_head) return -1;
    ca1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    ca1e:	4770      	bx	lr
    ca20:	20003905 	.word	0x20003905
    ca24:	20003906 	.word	0x20003906
    ca28:	200038ac 	.word	0x200038ac
    ca2c:	20200080 	.word	0x20200080
    ca30:	2000389c 	.word	0x2000389c

0000ca34 <usb_serial_available>:
	uint32_t n = rx_available;
    ca34:	4b04      	ldr	r3, [pc, #16]	; (ca48 <usb_serial_available+0x14>)
{
    ca36:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    ca38:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    ca3a:	b10c      	cbz	r4, ca40 <usb_serial_available+0xc>
}
    ca3c:	4620      	mov	r0, r4
    ca3e:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    ca40:	f000 f8e0 	bl	cc04 <yield>
}
    ca44:	4620      	mov	r0, r4
    ca46:	bd10      	pop	{r4, pc}
    ca48:	20003888 	.word	0x20003888

0000ca4c <usb_serial_flush_input>:
{
    ca4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    ca50:	4e14      	ldr	r6, [pc, #80]	; (caa4 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    ca52:	4d15      	ldr	r5, [pc, #84]	; (caa8 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    ca54:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    ca56:	782a      	ldrb	r2, [r5, #0]
    ca58:	4293      	cmp	r3, r2
    ca5a:	d021      	beq.n	caa0 <usb_serial_flush_input+0x54>
    ca5c:	b2dc      	uxtb	r4, r3
    ca5e:	f8df 9050 	ldr.w	r9, [pc, #80]	; cab0 <usb_serial_flush_input+0x64>
    ca62:	f8df b050 	ldr.w	fp, [pc, #80]	; cab4 <usb_serial_flush_input+0x68>
    ca66:	f8df 8050 	ldr.w	r8, [pc, #80]	; cab8 <usb_serial_flush_input+0x6c>
    ca6a:	4f10      	ldr	r7, [pc, #64]	; (caac <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    ca6c:	3401      	adds	r4, #1
    ca6e:	2c08      	cmp	r4, #8
		rx_tail = tail;
    ca70:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    ca74:	d901      	bls.n	ca7a <usb_serial_flush_input+0x2e>
    ca76:	2400      	movs	r4, #0
    ca78:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    ca7a:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    ca7e:	f8db 3000 	ldr.w	r3, [fp]
    ca82:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    ca86:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    ca8a:	1a52      	subs	r2, r2, r1
    ca8c:	1a9b      	subs	r3, r3, r2
    ca8e:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    ca92:	f7ff fd0d 	bl	c4b0 <rx_queue_transfer>
		rx_tail = tail;
    ca96:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    ca9a:	782b      	ldrb	r3, [r5, #0]
    ca9c:	42a3      	cmp	r3, r4
    ca9e:	d1e5      	bne.n	ca6c <usb_serial_flush_input+0x20>
}
    caa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    caa4:	20003906 	.word	0x20003906
    caa8:	20003905 	.word	0x20003905
    caac:	2000389c 	.word	0x2000389c
    cab0:	200038ac 	.word	0x200038ac
    cab4:	20003888 	.word	0x20003888
    cab8:	2000388c 	.word	0x2000388c

0000cabc <usb_serial_getchar>:
{
    cabc:	b500      	push	{lr}
    cabe:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    cac0:	2101      	movs	r1, #1
    cac2:	f10d 0007 	add.w	r0, sp, #7
    cac6:	f7ff ff23 	bl	c910 <usb_serial_read>
    caca:	b120      	cbz	r0, cad6 <usb_serial_getchar+0x1a>
    cacc:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    cad0:	b003      	add	sp, #12
    cad2:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    cad6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    cada:	e7f9      	b.n	cad0 <usb_serial_getchar+0x14>

0000cadc <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    cadc:	4b09      	ldr	r3, [pc, #36]	; (cb04 <usb_serial_putchar+0x28>)
{
    cade:	b500      	push	{lr}
    cae0:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    cae2:	781b      	ldrb	r3, [r3, #0]
{
    cae4:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    cae8:	b13b      	cbz	r3, cafa <usb_serial_putchar+0x1e>
    caea:	2101      	movs	r1, #1
    caec:	f10d 0007 	add.w	r0, sp, #7
    caf0:	f7ff fdb0 	bl	c654 <usb_serial_write.part.0>
}
    caf4:	b003      	add	sp, #12
    caf6:	f85d fb04 	ldr.w	pc, [sp], #4
    cafa:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    cafe:	b003      	add	sp, #12
    cb00:	f85d fb04 	ldr.w	pc, [sp], #4
    cb04:	2000390c 	.word	0x2000390c

0000cb08 <usb_serial_write>:
	if (!usb_configuration) return 0;
    cb08:	4b04      	ldr	r3, [pc, #16]	; (cb1c <usb_serial_write+0x14>)
    cb0a:	781b      	ldrb	r3, [r3, #0]
    cb0c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    cb10:	b10b      	cbz	r3, cb16 <usb_serial_write+0xe>
    cb12:	f7ff bd9f 	b.w	c654 <usb_serial_write.part.0>
}
    cb16:	4610      	mov	r0, r2
    cb18:	4770      	bx	lr
    cb1a:	bf00      	nop
    cb1c:	2000390c 	.word	0x2000390c

0000cb20 <usb_serial_write_buffer_free>:
{
    cb20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    cb24:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    cb26:	f8df 8044 	ldr.w	r8, [pc, #68]	; cb6c <usb_serial_write_buffer_free+0x4c>
    cb2a:	2301      	movs	r3, #1
    cb2c:	4d0d      	ldr	r5, [pc, #52]	; (cb64 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    cb2e:	4627      	mov	r7, r4
    cb30:	4e0d      	ldr	r6, [pc, #52]	; (cb68 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    cb32:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    cb36:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    cb38:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    cb3a:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    cb3c:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    cb3e:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    cb42:	d005      	beq.n	cb50 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    cb44:	f7ff fc76 	bl	c434 <usb_transfer_status>
    cb48:	0603      	lsls	r3, r0, #24
    cb4a:	bf58      	it	pl
    cb4c:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    cb50:	2c04      	cmp	r4, #4
    cb52:	d1f0      	bne.n	cb36 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    cb54:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    cb58:	2300      	movs	r3, #0
}
    cb5a:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    cb5c:	f888 3000 	strb.w	r3, [r8]
}
    cb60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cb64:	20002800 	.word	0x20002800
    cb68:	20003909 	.word	0x20003909
    cb6c:	2000390a 	.word	0x2000390a

0000cb70 <usb_serial_flush_output>:
{
    cb70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    cb74:	4b1d      	ldr	r3, [pc, #116]	; (cbec <usb_serial_flush_output+0x7c>)
    cb76:	781b      	ldrb	r3, [r3, #0]
    cb78:	b113      	cbz	r3, cb80 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    cb7a:	4d1d      	ldr	r5, [pc, #116]	; (cbf0 <usb_serial_flush_output+0x80>)
    cb7c:	882a      	ldrh	r2, [r5, #0]
    cb7e:	b90a      	cbnz	r2, cb84 <usb_serial_flush_output+0x14>
}
    cb80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    cb84:	4e1b      	ldr	r6, [pc, #108]	; (cbf4 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    cb86:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    cb8a:	491b      	ldr	r1, [pc, #108]	; (cbf8 <usb_serial_flush_output+0x88>)
    cb8c:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    cb8e:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    cb90:	4c1a      	ldr	r4, [pc, #104]	; (cbfc <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    cb92:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    cb96:	4f1a      	ldr	r7, [pc, #104]	; (cc00 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    cb98:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    cb9c:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    cb9e:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    cba0:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    cba2:	4621      	mov	r1, r4
    cba4:	2300      	movs	r3, #0
    cba6:	f7ff fc0b 	bl	c3c0 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    cbaa:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    cbae:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    cbb2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    cbb6:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    cbba:	3420      	adds	r4, #32
	} while (location < end_addr);
    cbbc:	42a2      	cmp	r2, r4
    cbbe:	d8fa      	bhi.n	cbb6 <usb_serial_flush_output+0x46>
	asm("dsb");
    cbc0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    cbc4:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    cbc8:	2004      	movs	r0, #4
    cbca:	4641      	mov	r1, r8
    cbcc:	f7ff fc10 	bl	c3f0 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    cbd0:	7833      	ldrb	r3, [r6, #0]
    cbd2:	3301      	adds	r3, #1
    cbd4:	b2db      	uxtb	r3, r3
    cbd6:	2b03      	cmp	r3, #3
    cbd8:	bf88      	it	hi
    cbda:	2300      	movhi	r3, #0
    cbdc:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    cbde:	2300      	movs	r3, #0
    cbe0:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    cbe2:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    cbe6:	703b      	strb	r3, [r7, #0]
}
    cbe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cbec:	2000390c 	.word	0x2000390c
    cbf0:	200038f6 	.word	0x200038f6
    cbf4:	20003909 	.word	0x20003909
    cbf8:	20002800 	.word	0x20002800
    cbfc:	20201080 	.word	0x20201080
    cc00:	2000390a 	.word	0x2000390a

0000cc04 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    cc04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    cc08:	4b2d      	ldr	r3, [pc, #180]	; (ccc0 <yield+0xbc>)
    cc0a:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    cc0c:	b166      	cbz	r6, cc28 <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    cc0e:	4f2d      	ldr	r7, [pc, #180]	; (ccc4 <yield+0xc0>)
    cc10:	783b      	ldrb	r3, [r7, #0]
    cc12:	b94b      	cbnz	r3, cc28 <yield+0x24>
	running = 1;
    cc14:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    cc16:	07f1      	lsls	r1, r6, #31
	running = 1;
    cc18:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    cc1a:	d443      	bmi.n	cca4 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    cc1c:	07b2      	lsls	r2, r6, #30
    cc1e:	d426      	bmi.n	cc6e <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    cc20:	2300      	movs	r3, #0
    cc22:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    cc24:	0773      	lsls	r3, r6, #29
    cc26:	d401      	bmi.n	cc2c <yield+0x28>
		EventResponder::runFromYield();
	}
};
    cc28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    cc2c:	4b26      	ldr	r3, [pc, #152]	; (ccc8 <yield+0xc4>)
    cc2e:	681a      	ldr	r2, [r3, #0]
    cc30:	2a00      	cmp	r2, #0
    cc32:	d0f9      	beq.n	cc28 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    cc34:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    cc38:	2a00      	cmp	r2, #0
    cc3a:	d1f5      	bne.n	cc28 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    cc3c:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    cc40:	b672      	cpsid	i
		EventResponder *first = firstYield;
    cc42:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    cc44:	2800      	cmp	r0, #0
    cc46:	d034      	beq.n	ccb2 <yield+0xae>
		if (runningFromYield) {
    cc48:	4c20      	ldr	r4, [pc, #128]	; (cccc <yield+0xc8>)
    cc4a:	7821      	ldrb	r1, [r4, #0]
    cc4c:	2900      	cmp	r1, #0
    cc4e:	d130      	bne.n	ccb2 <yield+0xae>
		runningFromYield = true;
    cc50:	2201      	movs	r2, #1
    cc52:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    cc54:	6942      	ldr	r2, [r0, #20]
    cc56:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    cc58:	2a00      	cmp	r2, #0
    cc5a:	d02e      	beq.n	ccba <yield+0xb6>
			firstYield->_prev = nullptr;
    cc5c:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    cc5e:	b905      	cbnz	r5, cc62 <yield+0x5e>
    cc60:	b662      	cpsie	i
		first->_triggered = false;
    cc62:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    cc64:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    cc66:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    cc68:	4798      	blx	r3
		runningFromYield = false;
    cc6a:	7025      	strb	r5, [r4, #0]
    cc6c:	e7dc      	b.n	cc28 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    cc6e:	f8df 8064 	ldr.w	r8, [pc, #100]	; ccd4 <yield+0xd0>
    cc72:	f898 3000 	ldrb.w	r3, [r8]
    cc76:	2b00      	cmp	r3, #0
    cc78:	d0d2      	beq.n	cc20 <yield+0x1c>
    cc7a:	2500      	movs	r5, #0
    cc7c:	f8df 9058 	ldr.w	r9, [pc, #88]	; ccd8 <yield+0xd4>
    cc80:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    cc82:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    cc86:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    cc88:	6823      	ldr	r3, [r4, #0]
    cc8a:	4620      	mov	r0, r4
    cc8c:	691b      	ldr	r3, [r3, #16]
    cc8e:	4798      	blx	r3
    cc90:	b110      	cbz	r0, cc98 <yield+0x94>
    cc92:	6963      	ldr	r3, [r4, #20]
    cc94:	689b      	ldr	r3, [r3, #8]
    cc96:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    cc98:	f898 2000 	ldrb.w	r2, [r8]
    cc9c:	b2eb      	uxtb	r3, r5
    cc9e:	429a      	cmp	r2, r3
    cca0:	d8ef      	bhi.n	cc82 <yield+0x7e>
    cca2:	e7bd      	b.n	cc20 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    cca4:	f7ff fec6 	bl	ca34 <usb_serial_available>
		if (Serial.available()) serialEvent();
    cca8:	2800      	cmp	r0, #0
    ccaa:	d0b7      	beq.n	cc1c <yield+0x18>
    ccac:	f3af 8000 	nop.w
    ccb0:	e7b4      	b.n	cc1c <yield+0x18>
		if (doit) __enable_irq();
    ccb2:	2d00      	cmp	r5, #0
    ccb4:	d1b8      	bne.n	cc28 <yield+0x24>
    ccb6:	b662      	cpsie	i
    ccb8:	e7b6      	b.n	cc28 <yield+0x24>
			lastYield = nullptr;
    ccba:	4b05      	ldr	r3, [pc, #20]	; (ccd0 <yield+0xcc>)
    ccbc:	601a      	str	r2, [r3, #0]
    ccbe:	e7ce      	b.n	cc5e <yield+0x5a>
    ccc0:	2000390f 	.word	0x2000390f
    ccc4:	20003901 	.word	0x20003901
    ccc8:	20003404 	.word	0x20003404
    cccc:	200038ff 	.word	0x200038ff
    ccd0:	20003410 	.word	0x20003410
    ccd4:	20003900 	.word	0x20003900
    ccd8:	20003414 	.word	0x20003414

0000ccdc <HardwareSerialIMXRT::operator bool()>:
	operator bool()			{ return true; }
    ccdc:	2001      	movs	r0, #1
    ccde:	4770      	bx	lr

0000cce0 <HardwareSerialIMXRT::availableForWrite()>:

int HardwareSerialIMXRT::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    cce0:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
    cce4:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
	head = tx_buffer_head_;
    cce8:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
    ccea:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    ccec:	4293      	cmp	r3, r2
    ccee:	d202      	bcs.n	ccf6 <HardwareSerialIMXRT::availableForWrite()+0x16>
	return tail - head - 1;
    ccf0:	3a01      	subs	r2, #1
    ccf2:	1ad0      	subs	r0, r2, r3
}
    ccf4:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    ccf6:	6b41      	ldr	r1, [r0, #52]	; 0x34
    ccf8:	3901      	subs	r1, #1
    ccfa:	440a      	add	r2, r1
    ccfc:	1ad0      	subs	r0, r2, r3
    ccfe:	4770      	bx	lr

0000cd00 <HardwareSerialIMXRT::available()>:



int HardwareSerialIMXRT::available(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    cd00:	6901      	ldr	r1, [r0, #16]
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
    cd02:	b672      	cpsid	i
	head = rx_buffer_head_;
    cd04:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    cd08:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    cd0c:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
    cd0e:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
    cd10:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
    cd12:	bf3c      	itt	cc
    cd14:	6b80      	ldrcc	r0, [r0, #56]	; 0x38
    cd16:	1812      	addcc	r2, r2, r0
	avail += (port->WATER >> 24) & 0x7;
    cd18:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
	else avail = rx_buffer_total_size_ + head - tail;	
    cd1a:	1ad3      	subs	r3, r2, r3
	__enable_irq();
    cd1c:	b662      	cpsie	i
	avail += (port->WATER >> 24) & 0x7;
    cd1e:	f3c0 6002 	ubfx	r0, r0, #24, #3
	return avail;
}
    cd22:	4418      	add	r0, r3
    cd24:	4770      	bx	lr
    cd26:	bf00      	nop

0000cd28 <HardwareSerialIMXRT::peek()>:
int HardwareSerialIMXRT::peek(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;

	head = rx_buffer_head_;
    cd28:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    cd2c:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    cd2e:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    cd32:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    cd34:	b29b      	uxth	r3, r3
	if (head == tail) {
    cd36:	4299      	cmp	r1, r3
{
    cd38:	b410      	push	{r4}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    cd3a:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
    cd3c:	d014      	beq.n	cd68 <HardwareSerialIMXRT::peek()+0x40>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
    cd3e:	3301      	adds	r3, #1
    cd40:	6b90      	ldr	r0, [r2, #56]	; 0x38
	if (tail < rx_buffer_size_) {
    cd42:	6b11      	ldr	r1, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    cd44:	4298      	cmp	r0, r3
    cd46:	bf98      	it	ls
    cd48:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    cd4a:	4299      	cmp	r1, r3
    cd4c:	d806      	bhi.n	cd5c <HardwareSerialIMXRT::peek()+0x34>
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    cd4e:	1a5b      	subs	r3, r3, r1
    cd50:	6a52      	ldr	r2, [r2, #36]	; 0x24
    cd52:	5cd0      	ldrb	r0, [r2, r3]
    cd54:	b2c0      	uxtb	r0, r0
	}
}
    cd56:	f85d 4b04 	ldr.w	r4, [sp], #4
    cd5a:	4770      	bx	lr
		return rx_buffer_[tail];
    cd5c:	6a12      	ldr	r2, [r2, #32]
}
    cd5e:	f85d 4b04 	ldr.w	r4, [sp], #4
		return rx_buffer_[tail];
    cd62:	5cd0      	ldrb	r0, [r2, r3]
    cd64:	b2c0      	uxtb	r0, r0
}
    cd66:	4770      	bx	lr
		__disable_irq();
    cd68:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    cd6a:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    cd6e:	b280      	uxth	r0, r0
		if (head == tail) {
    cd70:	4281      	cmp	r1, r0
    cd72:	d001      	beq.n	cd78 <HardwareSerialIMXRT::peek()+0x50>
		__enable_irq();
    cd74:	b662      	cpsie	i
    cd76:	e7e2      	b.n	cd3e <HardwareSerialIMXRT::peek()+0x16>
			if (port->WATER & 0x7000000) {
    cd78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    cd7a:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
    cd7e:	d103      	bne.n	cd88 <HardwareSerialIMXRT::peek()+0x60>
			int c = -1;	// assume nothing to return
    cd80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			__enable_irq();
    cd84:	b662      	cpsie	i
			return c;
    cd86:	e7e6      	b.n	cd56 <HardwareSerialIMXRT::peek()+0x2e>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    cd88:	69e3      	ldr	r3, [r4, #28]
				rx_buffer_head_ = 1;
    cd8a:	2001      	movs	r0, #1
				rx_buffer_tail_ = 0; 
    cd8c:	2400      	movs	r4, #0
				rx_buffer_[1] = c;
    cd8e:	6a11      	ldr	r1, [r2, #32]
				rx_buffer_head_ = 1;
    cd90:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    cd94:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_[1] = c;
    cd98:	b2db      	uxtb	r3, r3
				rx_buffer_tail_ = 0; 
    cd9a:	f8a2 404c 	strh.w	r4, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
    cd9e:	704b      	strb	r3, [r1, #1]
    cda0:	e7f0      	b.n	cd84 <HardwareSerialIMXRT::peek()+0x5c>
    cda2:	bf00      	nop

0000cda4 <HardwareSerialIMXRT::read()>:
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    cda4:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    cda8:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    cdaa:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    cdae:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    cdb0:	b29b      	uxth	r3, r3
	if (head == tail) {
    cdb2:	4299      	cmp	r1, r3
{
    cdb4:	b430      	push	{r4, r5}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    cdb6:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
    cdb8:	d025      	beq.n	ce06 <HardwareSerialIMXRT::read()+0x62>
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    cdba:	3301      	adds	r3, #1
    cdbc:	6b94      	ldr	r4, [r2, #56]	; 0x38
    cdbe:	429c      	cmp	r4, r3
    cdc0:	d916      	bls.n	cdf0 <HardwareSerialIMXRT::read()+0x4c>
	if (tail < rx_buffer_size_) {
    cdc2:	6b10      	ldr	r0, [r2, #48]	; 0x30
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    cdc4:	fa1f fc83 	uxth.w	ip, r3
	if (tail < rx_buffer_size_) {
    cdc8:	4298      	cmp	r0, r3
    cdca:	d917      	bls.n	cdfc <HardwareSerialIMXRT::read()+0x58>
		c = rx_buffer_[tail];
    cdcc:	6a10      	ldr	r0, [r2, #32]
    cdce:	5cc0      	ldrb	r0, [r0, r3]
    cdd0:	b2c0      	uxtb	r0, r0
	if (rts_pin_baseReg_) {
    cdd2:	6d95      	ldr	r5, [r2, #88]	; 0x58
	rx_buffer_tail_ = tail;
    cdd4:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    cdd8:	b145      	cbz	r5, cdec <HardwareSerialIMXRT::read()+0x48>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    cdda:	4299      	cmp	r1, r3
    cddc:	d31c      	bcc.n	ce18 <HardwareSerialIMXRT::read()+0x74>
    cdde:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
    cde0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    cde2:	4299      	cmp	r1, r3
    cde4:	d302      	bcc.n	cdec <HardwareSerialIMXRT::read()+0x48>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    cde6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    cde8:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
    cdec:	bc30      	pop	{r4, r5}
    cdee:	4770      	bx	lr
    cdf0:	f04f 0c00 	mov.w	ip, #0
	if (tail < rx_buffer_size_) {
    cdf4:	6b10      	ldr	r0, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    cdf6:	4663      	mov	r3, ip
	if (tail < rx_buffer_size_) {
    cdf8:	4298      	cmp	r0, r3
    cdfa:	d8e7      	bhi.n	cdcc <HardwareSerialIMXRT::read()+0x28>
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    cdfc:	1a18      	subs	r0, r3, r0
    cdfe:	6a55      	ldr	r5, [r2, #36]	; 0x24
    ce00:	5c28      	ldrb	r0, [r5, r0]
    ce02:	b2c0      	uxtb	r0, r0
    ce04:	e7e5      	b.n	cdd2 <HardwareSerialIMXRT::read()+0x2e>
    ce06:	4608      	mov	r0, r1
		__disable_irq();
    ce08:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    ce0a:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
    ce0e:	b289      	uxth	r1, r1
		if (head == tail) {
    ce10:	4288      	cmp	r0, r1
    ce12:	d004      	beq.n	ce1e <HardwareSerialIMXRT::read()+0x7a>
		__enable_irq();
    ce14:	b662      	cpsie	i
    ce16:	e7d0      	b.n	cdba <HardwareSerialIMXRT::read()+0x16>
		else avail = rx_buffer_total_size_ + head - tail;
    ce18:	440c      	add	r4, r1
    ce1a:	1ae3      	subs	r3, r4, r3
    ce1c:	e7e0      	b.n	cde0 <HardwareSerialIMXRT::read()+0x3c>
			if (port->WATER & 0x7000000) {
    ce1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ce20:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
    ce24:	d103      	bne.n	ce2e <HardwareSerialIMXRT::read()+0x8a>
			c = -1;	// assume nothing to return
    ce26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			__enable_irq();
    ce2a:	b662      	cpsie	i
			return c;
    ce2c:	e7de      	b.n	cdec <HardwareSerialIMXRT::read()+0x48>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    ce2e:	69e0      	ldr	r0, [r4, #28]
    ce30:	f3c0 0009 	ubfx	r0, r0, #0, #10
    ce34:	e7f9      	b.n	ce2a <HardwareSerialIMXRT::read()+0x86>
    ce36:	bf00      	nop

0000ce38 <HardwareSerialIMXRT::flush()>:

void HardwareSerialIMXRT::flush(void)
{
	while (transmitting_) yield(); // wait
    ce38:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    ce3c:	b143      	cbz	r3, ce50 <HardwareSerialIMXRT::flush()+0x18>
{
    ce3e:	b510      	push	{r4, lr}
    ce40:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
    ce42:	f7ff fedf 	bl	cc04 <yield>
    ce46:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    ce4a:	2b00      	cmp	r3, #0
    ce4c:	d1f9      	bne.n	ce42 <HardwareSerialIMXRT::flush()+0xa>
}
    ce4e:	bd10      	pop	{r4, pc}
    ce50:	4770      	bx	lr
    ce52:	bf00      	nop

0000ce54 <HardwareSerialIMXRT::end()>:
{
    ce54:	b538      	push	{r3, r4, r5, lr}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    ce56:	e9d0 5304 	ldrd	r5, r3, [r0, #16]
	if (!(hardware->ccm_register & hardware->ccm_value)) return;
    ce5a:	e9d3 1203 	ldrd	r1, r2, [r3, #12]
    ce5e:	6809      	ldr	r1, [r1, #0]
    ce60:	4211      	tst	r1, r2
    ce62:	d028      	beq.n	ceb6 <HardwareSerialIMXRT::end()+0x62>
	while (transmitting_) yield();  // wait for buffered data to send
    ce64:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
    ce68:	4604      	mov	r4, r0
    ce6a:	b132      	cbz	r2, ce7a <HardwareSerialIMXRT::end()+0x26>
    ce6c:	f7ff feca 	bl	cc04 <yield>
    ce70:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    ce74:	2b00      	cmp	r3, #0
    ce76:	d1f9      	bne.n	ce6c <HardwareSerialIMXRT::end()+0x18>
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    ce78:	6963      	ldr	r3, [r4, #20]
	port->CTRL = 0;	// disable the TX and RX ...
    ce7a:	2100      	movs	r1, #0
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    ce7c:	4a0e      	ldr	r2, [pc, #56]	; (ceb8 <HardwareSerialIMXRT::end()+0x64>)
	port->CTRL = 0;	// disable the TX and RX ...
    ce7e:	61a9      	str	r1, [r5, #24]
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    ce80:	7e20      	ldrb	r0, [r4, #24]
    ce82:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    ce86:	7d00      	ldrb	r0, [r0, #20]
    ce88:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    ce8c:	6845      	ldr	r5, [r0, #4]
    ce8e:	2005      	movs	r0, #5
    ce90:	6028      	str	r0, [r5, #0]
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
    ce92:	7e65      	ldrb	r5, [r4, #25]
    ce94:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    ce98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    ce9c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
	if (rts_pin_baseReg_) rts_deassert();
    cea0:	6da3      	ldr	r3, [r4, #88]	; 0x58
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
    cea2:	6852      	ldr	r2, [r2, #4]
    cea4:	6010      	str	r0, [r2, #0]
	rx_buffer_head_ = 0;
    cea6:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
	rx_buffer_tail_ = 0;
    ceaa:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
	if (rts_pin_baseReg_) rts_deassert();
    ceae:	b113      	cbz	r3, ceb6 <HardwareSerialIMXRT::end()+0x62>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    ceb0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    ceb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    ceb6:	bd38      	pop	{r3, r4, r5, pc}
    ceb8:	2000138c 	.word	0x2000138c

0000cebc <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>:
	float base = (float)UART_CLOCK / (float)baud;
    cebc:	ee07 1a90 	vmov	s15, r1
    cec0:	ed9f 7a9a 	vldr	s14, [pc, #616]	; d12c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x270>
	for (int osr=4; osr <= 32; osr++) {
    cec4:	2104      	movs	r1, #4
		int divint = (int)(div + 0.5f);
    cec6:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
	float base = (float)UART_CLOCK / (float)baud;
    ceca:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
    cece:	ed9f 6a98 	vldr	s12, [pc, #608]	; d130 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x274>
    ced2:	f641 7cff 	movw	ip, #8191	; 0x1fff
	float base = (float)UART_CLOCK / (float)baud;
    ced6:	eec7 5a27 	vdiv.f32	s11, s14, s15
{
    ceda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int bestosr = 4;
    cede:	468e      	mov	lr, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    cee0:	6905      	ldr	r5, [r0, #16]
	int bestdiv = 1;
    cee2:	2401      	movs	r4, #1
		float div = base / (float)osr;
    cee4:	ee07 1a90 	vmov	s15, r1
    cee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    ceec:	ee85 7aa7 	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
    cef0:	ee77 7a05 	vadd.f32	s15, s14, s10
    cef4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    cef8:	ee17 3a90 	vmov	r3, s15
    cefc:	4563      	cmp	r3, ip
    cefe:	bfa8      	it	ge
    cf00:	4663      	movge	r3, ip
    cf02:	2b01      	cmp	r3, #1
    cf04:	bfb8      	it	lt
    cf06:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
    cf08:	ee07 3a90 	vmov	s15, r3
    cf0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    cf10:	ee76 6ac7 	vsub.f32	s13, s13, s14
    cf14:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    cf18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    cf1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cf20:	bf48      	it	mi
    cf22:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
    cf26:	eef4 7ac6 	vcmpe.f32	s15, s12
    cf2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cf2e:	d803      	bhi.n	cf38 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x7c>
			besterr = err;
    cf30:	eeb0 6a67 	vmov.f32	s12, s15
		if (err <= besterr) {
    cf34:	468e      	mov	lr, r1
			bestdiv = divint;
    cf36:	461c      	mov	r4, r3
	for (int osr=4; osr <= 32; osr++) {
    cf38:	3101      	adds	r1, #1
    cf3a:	2921      	cmp	r1, #33	; 0x21
    cf3c:	d1d2      	bne.n	cee4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28>
	rx_buffer_head_ = 0;
    cf3e:	2100      	movs	r1, #0
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    cf40:	6943      	ldr	r3, [r0, #20]
    cf42:	f402 7600 	and.w	r6, r2, #512	; 0x200
	rx_buffer_head_ = 0;
    cf46:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    cf4a:	f8b3 c05a 	ldrh.w	ip, [r3, #90]	; 0x5a
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    cf4e:	428e      	cmp	r6, r1
	rx_buffer_tail_ = 0;
    cf50:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    cf54:	f8b3 6058 	ldrh.w	r6, [r3, #88]	; 0x58
	tx_buffer_head_ = 0;
    cf58:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    cf5c:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	transmitting_ = 0;
    cf60:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    cf64:	6b81      	ldr	r1, [r0, #56]	; 0x38
	hardware->ccm_register |= hardware->ccm_value;
    cf66:	68df      	ldr	r7, [r3, #12]
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    cf68:	eba1 0606 	sub.w	r6, r1, r6
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    cf6c:	eba1 010c 	sub.w	r1, r1, ip
    cf70:	e9c0 610f 	strd	r6, r1, [r0, #60]	; 0x3c
	hardware->ccm_register |= hardware->ccm_value;
    cf74:	6839      	ldr	r1, [r7, #0]
    cf76:	691e      	ldr	r6, [r3, #16]
    cf78:	ea41 0106 	orr.w	r1, r1, r6
    cf7c:	6039      	str	r1, [r7, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    cf7e:	bf14      	ite	ne
    cf80:	2101      	movne	r1, #1
    cf82:	2100      	moveq	r1, #0
    cf84:	7681      	strb	r1, [r0, #26]
	if (!half_duplex_mode_)  {
    cf86:	f040 80ac 	bne.w	d0e2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x226>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    cf8a:	7e01      	ldrb	r1, [r0, #24]
    cf8c:	4e69      	ldr	r6, [pc, #420]	; (d134 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
    cf8e:	eb03 1801 	add.w	r8, r3, r1, lsl #4
    cf92:	f8df 91c0 	ldr.w	r9, [pc, #448]	; d154 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x298>
    cf96:	f898 7014 	ldrb.w	r7, [r8, #20]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    cf9a:	f8d8 a01c 	ldr.w	sl, [r8, #28]
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    cf9e:	eb06 1707 	add.w	r7, r6, r7, lsl #4
    cfa2:	68b9      	ldr	r1, [r7, #8]
    cfa4:	f8c1 9000 	str.w	r9, [r1]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    cfa8:	6879      	ldr	r1, [r7, #4]
    cfaa:	f8d8 7018 	ldr.w	r7, [r8, #24]
    cfae:	600f      	str	r7, [r1, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    cfb0:	f1ba 0f00 	cmp.w	sl, #0
    cfb4:	d003      	beq.n	cfbe <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x102>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    cfb6:	f8d8 1020 	ldr.w	r1, [r8, #32]
    cfba:	f8ca 1000 	str.w	r1, [sl]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    cfbe:	7e47      	ldrb	r7, [r0, #25]
    cfc0:	21d9      	movs	r1, #217	; 0xd9
    cfc2:	eb03 1807 	add.w	r8, r3, r7, lsl #4
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    cfc6:	f898 c034 	ldrb.w	ip, [r8, #52]	; 0x34
    cfca:	eb06 1c0c 	add.w	ip, r6, ip, lsl #4
    cfce:	f8dc 7008 	ldr.w	r7, [ip, #8]
    cfd2:	6039      	str	r1, [r7, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    cfd4:	f8dc 1004 	ldr.w	r1, [ip, #4]
    cfd8:	f8d8 7038 	ldr.w	r7, [r8, #56]	; 0x38
    cfdc:	600f      	str	r7, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
    cfde:	7e41      	ldrb	r1, [r0, #25]
    cfe0:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    cfe4:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
    cfe6:	b10f      	cbz	r7, cfec <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x130>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
    cfe8:	6c09      	ldr	r1, [r1, #64]	; 0x40
    cfea:	6039      	str	r1, [r7, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    cfec:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    cff0:	f1be 0f08 	cmp.w	lr, #8
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    cff4:	ea4f 6101 	mov.w	r1, r1, lsl #24
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    cff8:	bfcc      	ite	gt
    cffa:	f04f 0e00 	movgt.w	lr, #0
    cffe:	f04f 0e01 	movle.w	lr, #1
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    d002:	f001 51f8 	and.w	r1, r1, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    d006:	ea44 444e 	orr.w	r4, r4, lr, lsl #17
    d00a:	4321      	orrs	r1, r4
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    d00c:	685c      	ldr	r4, [r3, #4]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    d00e:	6129      	str	r1, [r5, #16]
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    d010:	7859      	ldrb	r1, [r3, #1]
    d012:	f101 0310 	add.w	r3, r1, #16
	port->PINCFG = 0;
    d016:	2100      	movs	r1, #0
    d018:	60e9      	str	r1, [r5, #12]
    d01a:	4947      	ldr	r1, [pc, #284]	; (d138 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x27c>)
    d01c:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    d020:	6941      	ldr	r1, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
    d022:	f04f 0e01 	mov.w	lr, #1
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    d026:	4c45      	ldr	r4, [pc, #276]	; (d13c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x280>)
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    d028:	f002 0c03 	and.w	ip, r2, #3
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    d02c:	784f      	ldrb	r7, [r1, #1]
    d02e:	f891 1056 	ldrb.w	r1, [r1, #86]	; 0x56
	NVIC_ENABLE_IRQ(hardware->irq);
    d032:	4b43      	ldr	r3, [pc, #268]	; (d140 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x284>)
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    d034:	5539      	strb	r1, [r7, r4]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    d036:	f04f 1702 	mov.w	r7, #131074	; 0x20002
	NVIC_ENABLE_IRQ(hardware->irq);
    d03a:	6944      	ldr	r4, [r0, #20]
    d03c:	7861      	ldrb	r1, [r4, #1]
    d03e:	eb03 1351 	add.w	r3, r3, r1, lsr #5
    d042:	f001 011f 	and.w	r1, r1, #31
    d046:	009b      	lsls	r3, r3, #2
    d048:	fa0e f101 	lsl.w	r1, lr, r1
    d04c:	6019      	str	r1, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    d04e:	62ef      	str	r7, [r5, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    d050:	6aab      	ldr	r3, [r5, #40]	; 0x28
    d052:	f043 0388 	orr.w	r3, r3, #136	; 0x88
    d056:	62ab      	str	r3, [r5, #40]	; 0x28
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    d058:	0753      	lsls	r3, r2, #29
    d05a:	d43e      	bmi.n	d0da <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x21e>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    d05c:	f44c 1370 	orr.w	r3, ip, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    d060:	f002 010f 	and.w	r1, r2, #15
    d064:	2904      	cmp	r1, #4
    d066:	bf08      	it	eq
    d068:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
	if (format & 0x20) {
    d06c:	0697      	lsls	r7, r2, #26
    d06e:	d52e      	bpl.n	d0ce <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x212>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    d070:	7e81      	ldrb	r1, [r0, #26]
		ctrl |= LPUART_CTRL_TXINV;		// tx invert
    d072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    d076:	2900      	cmp	r1, #0
    d078:	d13a      	bne.n	d0f0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x234>
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    d07a:	0716      	lsls	r6, r2, #28
	port->CTRL = ctrl;
    d07c:	61ab      	str	r3, [r5, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    d07e:	d503      	bpl.n	d088 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1cc>
    d080:	692b      	ldr	r3, [r5, #16]
    d082:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    d086:	612b      	str	r3, [r5, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    d088:	696b      	ldr	r3, [r5, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    d08a:	06d1      	lsls	r1, r2, #27
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    d08c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    d090:	bf48      	it	mi
    d092:	f043 5380 	orrmi.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
    d096:	616b      	str	r3, [r5, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    d098:	05d3      	lsls	r3, r2, #23
    d09a:	d503      	bpl.n	d0a4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1e8>
    d09c:	692b      	ldr	r3, [r5, #16]
    d09e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    d0a2:	612b      	str	r3, [r5, #16]
	if (hardware->_serialEvent) addToSerialEventsList();
    d0a4:	68a3      	ldr	r3, [r4, #8]
    d0a6:	b183      	cbz	r3, d0ca <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x20e>
	//digitalWrite(4, LOW);
}


void HardwareSerialIMXRT::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    d0a8:	4e26      	ldr	r6, [pc, #152]	; (d144 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x288>)
    d0aa:	7834      	ldrb	r4, [r6, #0]
    d0ac:	2c00      	cmp	r4, #0
    d0ae:	d03a      	beq.n	d126 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x26a>
    d0b0:	1e61      	subs	r1, r4, #1
    d0b2:	4d25      	ldr	r5, [pc, #148]	; (d148 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    d0b4:	b2c9      	uxtb	r1, r1
    d0b6:	1f2b      	subs	r3, r5, #4
    d0b8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    d0bc:	e001      	b.n	d0c2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x206>
    d0be:	4299      	cmp	r1, r3
    d0c0:	d025      	beq.n	d10e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x252>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    d0c2:	f853 2f04 	ldr.w	r2, [r3, #4]!
    d0c6:	4290      	cmp	r0, r2
    d0c8:	d1f9      	bne.n	d0be <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x202>
};
    d0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    d0ce:	7e81      	ldrb	r1, [r0, #26]
    d0d0:	2900      	cmp	r1, #0
    d0d2:	d0d2      	beq.n	d07a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
    d0d4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    d0d8:	e7cf      	b.n	d07a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    d0da:	4b1c      	ldr	r3, [pc, #112]	; (d14c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x290>)
    d0dc:	ea4c 0303 	orr.w	r3, ip, r3
    d0e0:	e7be      	b.n	d060 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1a4>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    d0e2:	7e47      	ldrb	r7, [r0, #25]
    d0e4:	f24f 01d9 	movw	r1, #61657	; 0xf0d9
    d0e8:	4e12      	ldr	r6, [pc, #72]	; (d134 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
    d0ea:	eb03 1807 	add.w	r8, r3, r7, lsl #4
    d0ee:	e76a      	b.n	cfc6 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x10a>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    d0f0:	7e41      	ldrb	r1, [r0, #25]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    d0f2:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    d0f6:	eb04 1101 	add.w	r1, r4, r1, lsl #4
    d0fa:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    d0fe:	eb06 1601 	add.w	r6, r6, r1, lsl #4
    d102:	68b6      	ldr	r6, [r6, #8]
    d104:	6831      	ldr	r1, [r6, #0]
    d106:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
    d10a:	6031      	str	r1, [r6, #0]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    d10c:	e7b5      	b.n	d07a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    d10e:	1c63      	adds	r3, r4, #1
    d110:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    d112:	4a0f      	ldr	r2, [pc, #60]	; (d150 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x294>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    d114:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    d116:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    d118:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    d11c:	f043 0302 	orr.w	r3, r3, #2
    d120:	7013      	strb	r3, [r2, #0]
};
    d122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    d126:	2301      	movs	r3, #1
    d128:	4d07      	ldr	r5, [pc, #28]	; (d148 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    d12a:	e7f2      	b.n	d112 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x256>
    d12c:	4bb71b00 	.word	0x4bb71b00
    d130:	60ad78ec 	.word	0x60ad78ec
    d134:	2000138c 	.word	0x2000138c
    d138:	20002400 	.word	0x20002400
    d13c:	e000e400 	.word	0xe000e400
    d140:	38003840 	.word	0x38003840
    d144:	20003900 	.word	0x20003900
    d148:	20003414 	.word	0x20003414
    d14c:	003c0010 	.word	0x003c0010
    d150:	2000390f 	.word	0x2000390f
    d154:	0001f038 	.word	0x0001f038

0000d158 <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    d158:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    d15c:	b9b8      	cbnz	r0, d18e <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    d15e:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    d162:	b94b      	cbnz	r3, d178 <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    d164:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
    d168:	b93a      	cbnz	r2, d17a <nvic_execution_priority()+0x22>
	uint32_t priority=256;
    d16a:	f44f 7380 	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    d16e:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    d172:	b150      	cbz	r0, d18a <nvic_execution_priority()+0x32>
    d174:	4298      	cmp	r0, r3
    d176:	d208      	bcs.n	d18a <nvic_execution_priority()+0x32>
}
    d178:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    d17a:	2a0f      	cmp	r2, #15
    d17c:	d9f7      	bls.n	d16e <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    d17e:	4b05      	ldr	r3, [pc, #20]	; (d194 <nvic_execution_priority()+0x3c>)
    d180:	5c9b      	ldrb	r3, [r3, r2]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    d182:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    d186:	2800      	cmp	r0, #0
    d188:	d1f4      	bne.n	d174 <nvic_execution_priority()+0x1c>
    d18a:	4618      	mov	r0, r3
	return priority;
    d18c:	4770      	bx	lr
	if (faultmask) return -1;
    d18e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d192:	e7f1      	b.n	d178 <nvic_execution_priority()+0x20>
    d194:	e000e3f0 	.word	0xe000e3f0

0000d198 <HardwareSerialIMXRT::write9bit(unsigned long)>:
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    d198:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    d19a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d19e:	4604      	mov	r4, r0
    d1a0:	460f      	mov	r7, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    d1a2:	6906      	ldr	r6, [r0, #16]
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    d1a4:	b113      	cbz	r3, d1ac <HardwareSerialIMXRT::write9bit(unsigned long)+0x14>
    d1a6:	6d42      	ldr	r2, [r0, #84]	; 0x54
    d1a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
    d1ac:	7ea3      	ldrb	r3, [r4, #26]
    d1ae:	b12b      	cbz	r3, d1bc <HardwareSerialIMXRT::write9bit(unsigned long)+0x24>
		__disable_irq();
    d1b0:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
    d1b2:	69b3      	ldr	r3, [r6, #24]
    d1b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    d1b8:	61b3      	str	r3, [r6, #24]
		__enable_irq();
    d1ba:	b662      	cpsie	i
	head = tx_buffer_head_;
    d1bc:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    d1c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
	head = tx_buffer_head_;
    d1c2:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    d1c4:	3501      	adds	r5, #1
    d1c6:	42ab      	cmp	r3, r5
    d1c8:	d84c      	bhi.n	d264 <HardwareSerialIMXRT::write9bit(unsigned long)+0xcc>
    d1ca:	f04f 0800 	mov.w	r8, #0
    d1ce:	4645      	mov	r5, r8
	while (tx_buffer_tail_ == head) {
    d1d0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    d1d4:	b29b      	uxth	r3, r3
    d1d6:	429d      	cmp	r5, r3
    d1d8:	d019      	beq.n	d20e <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
    d1da:	e028      	b.n	d22e <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    d1dc:	6973      	ldr	r3, [r6, #20]
    d1de:	021b      	lsls	r3, r3, #8
    d1e0:	d510      	bpl.n	d204 <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
				uint32_t tail = tx_buffer_tail_;
    d1e2:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    d1e6:	6b62      	ldr	r2, [r4, #52]	; 0x34
				uint32_t tail = tx_buffer_tail_;
    d1e8:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    d1ea:	3301      	adds	r3, #1
    d1ec:	429a      	cmp	r2, r3
    d1ee:	d936      	bls.n	d25e <HardwareSerialIMXRT::write9bit(unsigned long)+0xc6>
				tx_buffer_tail_ = tail;
    d1f0:	b29a      	uxth	r2, r3
				if (tail < tx_buffer_size_) {
    d1f2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    d1f4:	4299      	cmp	r1, r3
    d1f6:	d92d      	bls.n	d254 <HardwareSerialIMXRT::write9bit(unsigned long)+0xbc>
					n = tx_buffer_[tail];
    d1f8:	69e1      	ldr	r1, [r4, #28]
    d1fa:	5ccb      	ldrb	r3, [r1, r3]
    d1fc:	b2db      	uxtb	r3, r3
				port->DATA  = n;
    d1fe:	61f3      	str	r3, [r6, #28]
				tx_buffer_tail_ = tail;
    d200:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	while (tx_buffer_tail_ == head) {
    d204:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    d208:	b29b      	uxth	r3, r3
    d20a:	42ab      	cmp	r3, r5
    d20c:	d10f      	bne.n	d22e <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
		int priority = nvic_execution_priority();
    d20e:	f7ff ffa3 	bl	d158 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    d212:	6963      	ldr	r3, [r4, #20]
    d214:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
    d218:	4283      	cmp	r3, r0
    d21a:	dadf      	bge.n	d1dc <HardwareSerialIMXRT::write9bit(unsigned long)+0x44>
		} else if (priority >= 256) 
    d21c:	28ff      	cmp	r0, #255	; 0xff
    d21e:	ddf1      	ble.n	d204 <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
			yield(); // wait
    d220:	f7ff fcf0 	bl	cc04 <yield>
	while (tx_buffer_tail_ == head) {
    d224:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    d228:	b29b      	uxth	r3, r3
    d22a:	42ab      	cmp	r3, r5
    d22c:	d0ef      	beq.n	d20e <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
	if (head < tx_buffer_size_) {
    d22e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    d230:	42ab      	cmp	r3, r5
    d232:	d91a      	bls.n	d26a <HardwareSerialIMXRT::write9bit(unsigned long)+0xd2>
		tx_buffer_[head] = c;
    d234:	b2ff      	uxtb	r7, r7
    d236:	69e3      	ldr	r3, [r4, #28]
    d238:	555f      	strb	r7, [r3, r5]
	__disable_irq();
    d23a:	b672      	cpsid	i
	transmitting_ = 1;
    d23c:	2001      	movs	r0, #1
    d23e:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    d242:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    d246:	69b3      	ldr	r3, [r6, #24]
    d248:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    d24c:	61b3      	str	r3, [r6, #24]
	__enable_irq();
    d24e:	b662      	cpsie	i
}
    d250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    d254:	1a5b      	subs	r3, r3, r1
    d256:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    d258:	5ccb      	ldrb	r3, [r1, r3]
    d25a:	b2db      	uxtb	r3, r3
    d25c:	e7cf      	b.n	d1fe <HardwareSerialIMXRT::write9bit(unsigned long)+0x66>
    d25e:	2200      	movs	r2, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    d260:	4613      	mov	r3, r2
    d262:	e7c6      	b.n	d1f2 <HardwareSerialIMXRT::write9bit(unsigned long)+0x5a>
	tx_buffer_head_ = head;
    d264:	fa1f f885 	uxth.w	r8, r5
    d268:	e7b2      	b.n	d1d0 <HardwareSerialIMXRT::write9bit(unsigned long)+0x38>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    d26a:	1aed      	subs	r5, r5, r3
    d26c:	b2ff      	uxtb	r7, r7
    d26e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d270:	555f      	strb	r7, [r3, r5]
    d272:	e7e2      	b.n	d23a <HardwareSerialIMXRT::write9bit(unsigned long)+0xa2>

0000d274 <HardwareSerialIMXRT::write(unsigned char)>:
	return write9bit(c);
    d274:	f7ff bf90 	b.w	d198 <HardwareSerialIMXRT::write9bit(unsigned long)>

0000d278 <HardwareSerialIMXRT::IRQHandler()>:
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    d278:	6902      	ldr	r2, [r0, #16]
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    d27a:	6953      	ldr	r3, [r2, #20]
    d27c:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
{
    d280:	b570      	push	{r4, r5, r6, lr}
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    d282:	d043      	beq.n	d30c <HardwareSerialIMXRT::IRQHandler()+0x94>
		uint8_t avail = (port->WATER >> 24) & 0x7;
    d284:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		if (avail) {
    d286:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
		uint8_t avail = (port->WATER >> 24) & 0x7;
    d28a:	f3c3 6e02 	ubfx	lr, r3, #24, #3
		if (avail) {
    d28e:	d03a      	beq.n	d306 <HardwareSerialIMXRT::IRQHandler()+0x8e>
			head = rx_buffer_head_;
    d290:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    d294:	f8b0 604c 	ldrh.w	r6, [r0, #76]	; 0x4c
			head = rx_buffer_head_;
    d298:	b2ad      	uxth	r5, r5
			tail = rx_buffer_tail_;
    d29a:	b2b6      	uxth	r6, r6
    d29c:	e007      	b.n	d2ae <HardwareSerialIMXRT::IRQHandler()+0x36>
						rx_buffer_[head] = n;
    d29e:	6a01      	ldr	r1, [r0, #32]
    d2a0:	f801 c003 	strb.w	ip, [r1, r3]
			} while (--avail > 0) ;
    d2a4:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
    d2a8:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    d2ac:	d01d      	beq.n	d2ea <HardwareSerialIMXRT::IRQHandler()+0x72>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    d2ae:	69d1      	ldr	r1, [r2, #28]
				newhead = head + 1;
    d2b0:	1c6b      	adds	r3, r5, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    d2b2:	6b84      	ldr	r4, [r0, #56]	; 0x38
				if (newhead != rx_buffer_tail_) {
    d2b4:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    d2b8:	f3c1 0109 	ubfx	r1, r1, #0, #10
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    d2bc:	429c      	cmp	r4, r3
    d2be:	bf98      	it	ls
    d2c0:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    d2c2:	fa1f fc8c 	uxth.w	ip, ip
    d2c6:	459c      	cmp	ip, r3
    d2c8:	d0ec      	beq.n	d2a4 <HardwareSerialIMXRT::IRQHandler()+0x2c>
					if (newhead < rx_buffer_size_) {
    d2ca:	6b04      	ldr	r4, [r0, #48]	; 0x30
						rx_buffer_[head] = n;
    d2cc:	fa5f fc81 	uxtb.w	ip, r1
    d2d0:	461d      	mov	r5, r3
					if (newhead < rx_buffer_size_) {
    d2d2:	429c      	cmp	r4, r3
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    d2d4:	eba3 0404 	sub.w	r4, r3, r4
					if (newhead < rx_buffer_size_) {
    d2d8:	d8e1      	bhi.n	d29e <HardwareSerialIMXRT::IRQHandler()+0x26>
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    d2da:	6a43      	ldr	r3, [r0, #36]	; 0x24
    d2dc:	f803 c004 	strb.w	ip, [r3, r4]
			} while (--avail > 0) ;
    d2e0:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
    d2e4:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    d2e8:	d1e1      	bne.n	d2ae <HardwareSerialIMXRT::IRQHandler()+0x36>
			rx_buffer_head_ = head;
    d2ea:	b2ab      	uxth	r3, r5
    d2ec:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    d2f0:	6d83      	ldr	r3, [r0, #88]	; 0x58
    d2f2:	b143      	cbz	r3, d306 <HardwareSerialIMXRT::IRQHandler()+0x8e>
				if (head >= tail) avail = head - tail;
    d2f4:	42b5      	cmp	r5, r6
    d2f6:	d354      	bcc.n	d3a2 <HardwareSerialIMXRT::IRQHandler()+0x12a>
    d2f8:	1bad      	subs	r5, r5, r6
				if (avail >= rts_high_watermark_) rts_deassert();
    d2fa:	6c01      	ldr	r1, [r0, #64]	; 0x40
    d2fc:	42a9      	cmp	r1, r5
    d2fe:	d802      	bhi.n	d306 <HardwareSerialIMXRT::IRQHandler()+0x8e>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    d300:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    d302:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		if (port->STAT & LPUART_STAT_IDLE) {
    d306:	6953      	ldr	r3, [r2, #20]
    d308:	02d9      	lsls	r1, r3, #11
    d30a:	d445      	bmi.n	d398 <HardwareSerialIMXRT::IRQHandler()+0x120>
	ctrl = port->CTRL;
    d30c:	6996      	ldr	r6, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    d30e:	0233      	lsls	r3, r6, #8
    d310:	d528      	bpl.n	d364 <HardwareSerialIMXRT::IRQHandler()+0xec>
    d312:	6953      	ldr	r3, [r2, #20]
    d314:	021d      	lsls	r5, r3, #8
    d316:	d525      	bpl.n	d364 <HardwareSerialIMXRT::IRQHandler()+0xec>
		head = tx_buffer_head_;
    d318:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    d31c:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
		head = tx_buffer_head_;
    d320:	b2ad      	uxth	r5, r5
		tail = tx_buffer_tail_;
    d322:	b29b      	uxth	r3, r3
    d324:	e006      	b.n	d334 <HardwareSerialIMXRT::IRQHandler()+0xbc>
				n = tx_buffer_[tail];
    d326:	69c1      	ldr	r1, [r0, #28]
    d328:	5cc9      	ldrb	r1, [r1, r3]
    d32a:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    d32c:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    d32e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    d330:	054c      	lsls	r4, r1, #21
    d332:	d412      	bmi.n	d35a <HardwareSerialIMXRT::IRQHandler()+0xe2>
			if (head == tail) break;
    d334:	42ab      	cmp	r3, r5
    d336:	d038      	beq.n	d3aa <HardwareSerialIMXRT::IRQHandler()+0x132>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    d338:	6b44      	ldr	r4, [r0, #52]	; 0x34
    d33a:	3301      	adds	r3, #1
			if (tail < tx_buffer_size_) {
    d33c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			if (++tail >= tx_buffer_total_size_) tail = 0;
    d33e:	429c      	cmp	r4, r3
    d340:	bf98      	it	ls
    d342:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    d344:	4299      	cmp	r1, r3
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    d346:	eba3 0401 	sub.w	r4, r3, r1
			if (tail < tx_buffer_size_) {
    d34a:	d8ec      	bhi.n	d326 <HardwareSerialIMXRT::IRQHandler()+0xae>
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    d34c:	6a81      	ldr	r1, [r0, #40]	; 0x28
    d34e:	5d09      	ldrb	r1, [r1, r4]
    d350:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    d352:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    d354:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    d356:	054c      	lsls	r4, r1, #21
    d358:	d5ec      	bpl.n	d334 <HardwareSerialIMXRT::IRQHandler()+0xbc>
		tx_buffer_tail_ = tail;
    d35a:	b299      	uxth	r1, r3
		if (head == tail) {
    d35c:	42ab      	cmp	r3, r5
		tx_buffer_tail_ = tail;
    d35e:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    d362:	d025      	beq.n	d3b0 <HardwareSerialIMXRT::IRQHandler()+0x138>
	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    d364:	0271      	lsls	r1, r6, #9
    d366:	d516      	bpl.n	d396 <HardwareSerialIMXRT::IRQHandler()+0x11e>
    d368:	6953      	ldr	r3, [r2, #20]
    d36a:	025b      	lsls	r3, r3, #9
    d36c:	d513      	bpl.n	d396 <HardwareSerialIMXRT::IRQHandler()+0x11e>
		transmitting_ = 0;
    d36e:	2100      	movs	r1, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    d370:	6d03      	ldr	r3, [r0, #80]	; 0x50
		transmitting_ = 0;
    d372:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    d376:	b113      	cbz	r3, d37e <HardwareSerialIMXRT::IRQHandler()+0x106>
    d378:	6d41      	ldr	r1, [r0, #84]	; 0x54
    d37a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    d37e:	7e83      	ldrb	r3, [r0, #26]
    d380:	b12b      	cbz	r3, d38e <HardwareSerialIMXRT::IRQHandler()+0x116>
			__disable_irq();
    d382:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    d384:	6993      	ldr	r3, [r2, #24]
    d386:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    d38a:	6193      	str	r3, [r2, #24]
			__enable_irq();
    d38c:	b662      	cpsie	i
		port->CTRL &= ~LPUART_CTRL_TCIE;
    d38e:	6993      	ldr	r3, [r2, #24]
    d390:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    d394:	6193      	str	r3, [r2, #24]
}
    d396:	bd70      	pop	{r4, r5, r6, pc}
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    d398:	6953      	ldr	r3, [r2, #20]
    d39a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d39e:	6153      	str	r3, [r2, #20]
    d3a0:	e7b4      	b.n	d30c <HardwareSerialIMXRT::IRQHandler()+0x94>
				else avail = rx_buffer_total_size_ + head - tail;
    d3a2:	6b81      	ldr	r1, [r0, #56]	; 0x38
    d3a4:	1b89      	subs	r1, r1, r6
    d3a6:	440d      	add	r5, r1
    d3a8:	e7a7      	b.n	d2fa <HardwareSerialIMXRT::IRQHandler()+0x82>
		tx_buffer_tail_ = tail;
    d3aa:	b29b      	uxth	r3, r3
    d3ac:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    d3b0:	6993      	ldr	r3, [r2, #24]
    d3b2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    d3b6:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    d3b8:	6993      	ldr	r3, [r2, #24]
    d3ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    d3be:	6193      	str	r3, [r2, #24]
    d3c0:	e7d0      	b.n	d364 <HardwareSerialIMXRT::IRQHandler()+0xec>
    d3c2:	bf00      	nop

0000d3c4 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    d3c4:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    d3c6:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    d3c8:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    d3cc:	4619      	mov	r1, r3
{
    d3ce:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    d3d0:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d3d4:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    d3d8:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d3dc:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    d3e0:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    d3e4:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    d3e6:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    d3ea:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    d3ee:	b29b      	uxth	r3, r3
    d3f0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    d3f4:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d3f8:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    d3fc:	3101      	adds	r1, #1
    d3fe:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    d402:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d404:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d406:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    d40a:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    d40c:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    d40e:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    d410:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    d412:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    d416:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    d418:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    d41a:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    d41c:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    d41e:	d1eb      	bne.n	d3f8 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    d420:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    d424:	b29b      	uxth	r3, r3
    d426:	f043 030f 	orr.w	r3, r3, #15
    d42a:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    d42e:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    d432:	b29b      	uxth	r3, r3
    d434:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    d438:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    d43c:	bd10      	pop	{r4, pc}
    d43e:	bf00      	nop

0000d440 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    d440:	4b37      	ldr	r3, [pc, #220]	; (d520 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    d442:	4a38      	ldr	r2, [pc, #224]	; (d524 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    d444:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    d446:	4838      	ldr	r0, [pc, #224]	; (d528 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    d448:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    d44c:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    d44e:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d450:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    d454:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d458:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d45c:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    d460:	430a      	orrs	r2, r1
    d462:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    d466:	f7ff ffad 	bl	d3c4 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    d46a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    d46e:	f7ff ffa9 	bl	d3c4 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    d472:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    d476:	f7ff ffa5 	bl	d3c4 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    d47a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    d47e:	f7ff ffa1 	bl	d3c4 <flexpwm_init>
	for (i=0; i < 4; i++) {
    d482:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    d484:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d488:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    d48c:	4611      	mov	r1, r2
    d48e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    d492:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    d496:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    d498:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    d49a:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    d49c:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d49e:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d4a2:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d4a4:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    d4a6:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    d4aa:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d4ac:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    d4ae:	d1ee      	bne.n	d48e <pwm_init+0x4e>
    d4b0:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    d4b2:	481e      	ldr	r0, [pc, #120]	; (d52c <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d4b4:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d4b8:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    d4bc:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d4be:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d4c2:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    d4c6:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    d4ca:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    d4ce:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    d4d0:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    d4d2:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    d4d4:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d4d6:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d4da:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d4dc:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    d4de:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    d4e2:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d4e4:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    d4e6:	d1ee      	bne.n	d4c6 <pwm_init+0x86>
    d4e8:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    d4ea:	4811      	ldr	r0, [pc, #68]	; (d530 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d4ec:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d4ee:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    d4f2:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d4f4:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d4f8:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    d4fc:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    d500:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    d504:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    d506:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    d508:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    d50a:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d50c:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d50e:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d510:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    d512:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    d516:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d518:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    d51c:	d1ee      	bne.n	d4fc <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    d51e:	bd70      	pop	{r4, r5, r6, pc}
    d520:	400fc000 	.word	0x400fc000
    d524:	fc030000 	.word	0xfc030000
    d528:	403dc000 	.word	0x403dc000
    d52c:	401e0000 	.word	0x401e0000
    d530:	401e4000 	.word	0x401e4000

0000d534 <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
    d534:	b508      	push	{r3, lr}
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    d536:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    d53a:	b15b      	cbz	r3, d554 <sm_align_pool+0x20>
    d53c:	b1ba      	cbz	r2, d56e <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    d53e:	4b0f      	ldr	r3, [pc, #60]	; (d57c <sm_align_pool+0x48>)
    d540:	fba3 1302 	umull	r1, r3, r3, r2
    d544:	08db      	lsrs	r3, r3, #3
    d546:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d54a:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    d54e:	d10a      	bne.n	d566 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    d550:	2001      	movs	r0, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    d552:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    d554:	4b09      	ldr	r3, [pc, #36]	; (d57c <sm_align_pool+0x48>)
    d556:	fba3 1302 	umull	r1, r3, r3, r2
    d55a:	08db      	lsrs	r3, r3, #3
    d55c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    d560:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    d564:	d001      	beq.n	d56a <sm_align_pool+0x36>
    d566:	1ad2      	subs	r2, r2, r3
    d568:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    d56a:	2af0      	cmp	r2, #240	; 0xf0
    d56c:	d8f0      	bhi.n	d550 <sm_align_pool+0x1c>
		errno = ENOSPC;
    d56e:	f000 f8c7 	bl	d700 <__errno>
    d572:	221c      	movs	r2, #28
    d574:	4603      	mov	r3, r0
    d576:	2000      	movs	r0, #0
    d578:	601a      	str	r2, [r3, #0]
}
    d57a:	bd08      	pop	{r3, pc}
    d57c:	aaaaaaab 	.word	0xaaaaaaab

0000d580 <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    d580:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    d582:	4604      	mov	r4, r0
    d584:	b338      	cbz	r0, d5d6 <sm_set_pool+0x56>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    d586:	b119      	cbz	r1, d590 <sm_set_pool+0x10>
    d588:	fab2 f682 	clz	r6, r2
    d58c:	0976      	lsrs	r6, r6, #5
    d58e:	b9a2      	cbnz	r2, d5ba <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    d590:	6820      	ldr	r0, [r4, #0]
    d592:	b300      	cbz	r0, d5d6 <sm_set_pool+0x56>
    d594:	6862      	ldr	r2, [r4, #4]
    d596:	b1f2      	cbz	r2, d5d6 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    d598:	4b18      	ldr	r3, [pc, #96]	; (d5fc <sm_set_pool+0x7c>)
    d59a:	4919      	ldr	r1, [pc, #100]	; (d600 <sm_set_pool+0x80>)
    d59c:	fb02 f303 	mul.w	r3, r2, r3
    d5a0:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    d5a4:	d317      	bcc.n	d5d6 <sm_set_pool+0x56>
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    d5a6:	68a3      	ldr	r3, [r4, #8]
    d5a8:	b9e3      	cbnz	r3, d5e4 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    d5aa:	2200      	movs	r2, #0
			return 1;
    d5ac:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    d5ae:	6022      	str	r2, [r4, #0]
    d5b0:	6062      	str	r2, [r4, #4]
    d5b2:	60a2      	str	r2, [r4, #8]
    d5b4:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    d5b6:	4618      	mov	r0, r3
    d5b8:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    d5ba:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    d5bc:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    d5be:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    d5c2:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    d5c4:	f7ff ffb6 	bl	d534 <sm_align_pool>
    d5c8:	4603      	mov	r3, r0
    d5ca:	2800      	cmp	r0, #0
    d5cc:	d0f3      	beq.n	d5b6 <sm_set_pool+0x36>
	if (do_zero) {
    d5ce:	b96d      	cbnz	r5, d5ec <sm_set_pool+0x6c>
	return 1;
    d5d0:	2301      	movs	r3, #1
}
    d5d2:	4618      	mov	r0, r3
    d5d4:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    d5d6:	f000 f893 	bl	d700 <__errno>
    d5da:	2216      	movs	r2, #22
		return 0;
    d5dc:	2300      	movs	r3, #0
		errno = EINVAL;
    d5de:	6002      	str	r2, [r0, #0]
}
    d5e0:	4618      	mov	r0, r3
    d5e2:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    d5e4:	2100      	movs	r1, #0
    d5e6:	f000 fc51 	bl	de8c <memset>
    d5ea:	e7de      	b.n	d5aa <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    d5ec:	6862      	ldr	r2, [r4, #4]
    d5ee:	4631      	mov	r1, r6
    d5f0:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    d5f2:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    d5f4:	f000 fc4a 	bl	de8c <memset>
	return 1;
    d5f8:	2301      	movs	r3, #1
    d5fa:	e7dc      	b.n	d5b6 <sm_set_pool+0x36>
    d5fc:	aaaaaaab 	.word	0xaaaaaaab
    d600:	15555555 	.word	0x15555555

0000d604 <__aeabi_atexit>:
    d604:	4603      	mov	r3, r0
    d606:	4608      	mov	r0, r1
    d608:	4619      	mov	r1, r3
    d60a:	f000 bc91 	b.w	df30 <__cxa_atexit>
    d60e:	bf00      	nop

0000d610 <strncmp>:
    d610:	2a00      	cmp	r2, #0
    d612:	d03e      	beq.n	d692 <strncmp+0x82>
    d614:	ea40 0301 	orr.w	r3, r0, r1
    d618:	079b      	lsls	r3, r3, #30
    d61a:	b530      	push	{r4, r5, lr}
    d61c:	4684      	mov	ip, r0
    d61e:	d12f      	bne.n	d680 <strncmp+0x70>
    d620:	2a03      	cmp	r2, #3
    d622:	d92d      	bls.n	d680 <strncmp+0x70>
    d624:	460b      	mov	r3, r1
    d626:	e008      	b.n	d63a <strncmp+0x2a>
    d628:	3a04      	subs	r2, #4
    d62a:	4684      	mov	ip, r0
    d62c:	4619      	mov	r1, r3
    d62e:	d025      	beq.n	d67c <strncmp+0x6c>
    d630:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
    d634:	d122      	bne.n	d67c <strncmp+0x6c>
    d636:	2a03      	cmp	r2, #3
    d638:	d922      	bls.n	d680 <strncmp+0x70>
    d63a:	6804      	ldr	r4, [r0, #0]
    d63c:	4619      	mov	r1, r3
    d63e:	f853 5b04 	ldr.w	r5, [r3], #4
    d642:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
    d646:	42ac      	cmp	r4, r5
    d648:	4684      	mov	ip, r0
    d64a:	ea2e 0e04 	bic.w	lr, lr, r4
    d64e:	f100 0004 	add.w	r0, r0, #4
    d652:	d0e9      	beq.n	d628 <strncmp+0x18>
    d654:	f89c 0000 	ldrb.w	r0, [ip]
    d658:	780c      	ldrb	r4, [r1, #0]
    d65a:	42a0      	cmp	r0, r4
    d65c:	d11b      	bne.n	d696 <strncmp+0x86>
    d65e:	46e6      	mov	lr, ip
    d660:	b168      	cbz	r0, d67e <strncmp+0x6e>
    d662:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    d666:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    d66a:	eba2 030e 	sub.w	r3, r2, lr
    d66e:	42a0      	cmp	r0, r4
    d670:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    d674:	d10f      	bne.n	d696 <strncmp+0x86>
    d676:	eb1c 0303 	adds.w	r3, ip, r3
    d67a:	d1f1      	bne.n	d660 <strncmp+0x50>
    d67c:	2000      	movs	r0, #0
    d67e:	bd30      	pop	{r4, r5, pc}
    d680:	f89c 0000 	ldrb.w	r0, [ip]
    d684:	780c      	ldrb	r4, [r1, #0]
    d686:	4284      	cmp	r4, r0
    d688:	d105      	bne.n	d696 <strncmp+0x86>
    d68a:	2a01      	cmp	r2, #1
    d68c:	d0f6      	beq.n	d67c <strncmp+0x6c>
    d68e:	46e6      	mov	lr, ip
    d690:	e7e6      	b.n	d660 <strncmp+0x50>
    d692:	4610      	mov	r0, r2
    d694:	4770      	bx	lr
    d696:	1b00      	subs	r0, r0, r4
    d698:	bd30      	pop	{r4, r5, pc}
    d69a:	bf00      	nop

0000d69c <strncpy>:
    d69c:	ea40 0301 	orr.w	r3, r0, r1
    d6a0:	079b      	lsls	r3, r3, #30
    d6a2:	b530      	push	{r4, r5, lr}
    d6a4:	d101      	bne.n	d6aa <strncpy+0xe>
    d6a6:	2a03      	cmp	r2, #3
    d6a8:	d80f      	bhi.n	d6ca <strncpy+0x2e>
    d6aa:	4684      	mov	ip, r0
    d6ac:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    d6b0:	e007      	b.n	d6c2 <strncpy+0x26>
    d6b2:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    d6b6:	f803 1b01 	strb.w	r1, [r3], #1
    d6ba:	1e54      	subs	r4, r2, #1
    d6bc:	b1c1      	cbz	r1, d6f0 <strncpy+0x54>
    d6be:	469c      	mov	ip, r3
    d6c0:	4622      	mov	r2, r4
    d6c2:	4663      	mov	r3, ip
    d6c4:	2a00      	cmp	r2, #0
    d6c6:	d1f4      	bne.n	d6b2 <strncpy+0x16>
    d6c8:	bd30      	pop	{r4, r5, pc}
    d6ca:	460b      	mov	r3, r1
    d6cc:	4684      	mov	ip, r0
    d6ce:	4619      	mov	r1, r3
    d6d0:	f853 5b04 	ldr.w	r5, [r3], #4
    d6d4:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    d6d8:	ea24 0405 	bic.w	r4, r4, r5
    d6dc:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    d6e0:	d1e4      	bne.n	d6ac <strncpy+0x10>
    d6e2:	3a04      	subs	r2, #4
    d6e4:	2a03      	cmp	r2, #3
    d6e6:	f84c 5b04 	str.w	r5, [ip], #4
    d6ea:	4619      	mov	r1, r3
    d6ec:	d8ef      	bhi.n	d6ce <strncpy+0x32>
    d6ee:	e7dd      	b.n	d6ac <strncpy+0x10>
    d6f0:	4494      	add	ip, r2
    d6f2:	2c00      	cmp	r4, #0
    d6f4:	d0e8      	beq.n	d6c8 <strncpy+0x2c>
    d6f6:	f803 1b01 	strb.w	r1, [r3], #1
    d6fa:	4563      	cmp	r3, ip
    d6fc:	d1fb      	bne.n	d6f6 <strncpy+0x5a>
    d6fe:	bd30      	pop	{r4, r5, pc}

0000d700 <__errno>:
    d700:	4b01      	ldr	r3, [pc, #4]	; (d708 <__errno+0x8>)
    d702:	6818      	ldr	r0, [r3, #0]
    d704:	4770      	bx	lr
    d706:	bf00      	nop
    d708:	2000214c 	.word	0x2000214c

0000d70c <_vdprintf_r>:
    d70c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d70e:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    d712:	af04      	add	r7, sp, #16
    d714:	9300      	str	r3, [sp, #0]
    d716:	4613      	mov	r3, r2
    d718:	f44f 7200 	mov.w	r2, #512	; 0x200
    d71c:	460e      	mov	r6, r1
    d71e:	9203      	str	r2, [sp, #12]
    d720:	4639      	mov	r1, r7
    d722:	aa03      	add	r2, sp, #12
    d724:	4605      	mov	r5, r0
    d726:	f001 f953 	bl	e9d0 <_vasnprintf_r>
    d72a:	b188      	cbz	r0, d750 <_vdprintf_r+0x44>
    d72c:	4604      	mov	r4, r0
    d72e:	4602      	mov	r2, r0
    d730:	9b03      	ldr	r3, [sp, #12]
    d732:	4631      	mov	r1, r6
    d734:	4628      	mov	r0, r5
    d736:	f001 fdd1 	bl	f2dc <_write_r>
    d73a:	42bc      	cmp	r4, r7
    d73c:	9003      	str	r0, [sp, #12]
    d73e:	d004      	beq.n	d74a <_vdprintf_r+0x3e>
    d740:	4628      	mov	r0, r5
    d742:	4621      	mov	r1, r4
    d744:	f001 fc26 	bl	ef94 <_free_r>
    d748:	9803      	ldr	r0, [sp, #12]
    d74a:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    d74e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d754:	e7f9      	b.n	d74a <_vdprintf_r+0x3e>
    d756:	bf00      	nop

0000d758 <vdprintf>:
    d758:	b410      	push	{r4}
    d75a:	4c05      	ldr	r4, [pc, #20]	; (d770 <vdprintf+0x18>)
    d75c:	4684      	mov	ip, r0
    d75e:	4613      	mov	r3, r2
    d760:	6820      	ldr	r0, [r4, #0]
    d762:	f85d 4b04 	ldr.w	r4, [sp], #4
    d766:	460a      	mov	r2, r1
    d768:	4661      	mov	r1, ip
    d76a:	f7ff bfcf 	b.w	d70c <_vdprintf_r>
    d76e:	bf00      	nop
    d770:	2000214c 	.word	0x2000214c

0000d774 <malloc>:
    d774:	4b02      	ldr	r3, [pc, #8]	; (d780 <malloc+0xc>)
    d776:	4601      	mov	r1, r0
    d778:	6818      	ldr	r0, [r3, #0]
    d77a:	f000 b80b 	b.w	d794 <_malloc_r>
    d77e:	bf00      	nop
    d780:	2000214c 	.word	0x2000214c

0000d784 <free>:
    d784:	4b02      	ldr	r3, [pc, #8]	; (d790 <free+0xc>)
    d786:	4601      	mov	r1, r0
    d788:	6818      	ldr	r0, [r3, #0]
    d78a:	f001 bc03 	b.w	ef94 <_free_r>
    d78e:	bf00      	nop
    d790:	2000214c 	.word	0x2000214c

0000d794 <_malloc_r>:
    d794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d798:	f101 060b 	add.w	r6, r1, #11
    d79c:	2e16      	cmp	r6, #22
    d79e:	b083      	sub	sp, #12
    d7a0:	4604      	mov	r4, r0
    d7a2:	d824      	bhi.n	d7ee <_malloc_r+0x5a>
    d7a4:	2910      	cmp	r1, #16
    d7a6:	f200 80ba 	bhi.w	d91e <_malloc_r+0x18a>
    d7aa:	f000 fbf9 	bl	dfa0 <__malloc_lock>
    d7ae:	2610      	movs	r6, #16
    d7b0:	2218      	movs	r2, #24
    d7b2:	2002      	movs	r0, #2
    d7b4:	4fb5      	ldr	r7, [pc, #724]	; (da8c <_malloc_r+0x2f8>)
    d7b6:	443a      	add	r2, r7
    d7b8:	f1a2 0108 	sub.w	r1, r2, #8
    d7bc:	6853      	ldr	r3, [r2, #4]
    d7be:	428b      	cmp	r3, r1
    d7c0:	f000 80ba 	beq.w	d938 <_malloc_r+0x1a4>
    d7c4:	685a      	ldr	r2, [r3, #4]
    d7c6:	68d9      	ldr	r1, [r3, #12]
    d7c8:	f022 0203 	bic.w	r2, r2, #3
    d7cc:	441a      	add	r2, r3
    d7ce:	689d      	ldr	r5, [r3, #8]
    d7d0:	60e9      	str	r1, [r5, #12]
    d7d2:	608d      	str	r5, [r1, #8]
    d7d4:	6851      	ldr	r1, [r2, #4]
    d7d6:	f041 0101 	orr.w	r1, r1, #1
    d7da:	4620      	mov	r0, r4
    d7dc:	6051      	str	r1, [r2, #4]
    d7de:	f103 0508 	add.w	r5, r3, #8
    d7e2:	f000 fbe3 	bl	dfac <__malloc_unlock>
    d7e6:	4628      	mov	r0, r5
    d7e8:	b003      	add	sp, #12
    d7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d7ee:	f036 0607 	bics.w	r6, r6, #7
    d7f2:	f100 8094 	bmi.w	d91e <_malloc_r+0x18a>
    d7f6:	42b1      	cmp	r1, r6
    d7f8:	f200 8091 	bhi.w	d91e <_malloc_r+0x18a>
    d7fc:	f000 fbd0 	bl	dfa0 <__malloc_lock>
    d800:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    d804:	f0c0 819a 	bcc.w	db3c <_malloc_r+0x3a8>
    d808:	0a73      	lsrs	r3, r6, #9
    d80a:	f000 808f 	beq.w	d92c <_malloc_r+0x198>
    d80e:	2b04      	cmp	r3, #4
    d810:	f200 816f 	bhi.w	daf2 <_malloc_r+0x35e>
    d814:	09b3      	lsrs	r3, r6, #6
    d816:	f103 0039 	add.w	r0, r3, #57	; 0x39
    d81a:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    d81e:	00c3      	lsls	r3, r0, #3
    d820:	4f9a      	ldr	r7, [pc, #616]	; (da8c <_malloc_r+0x2f8>)
    d822:	443b      	add	r3, r7
    d824:	f1a3 0508 	sub.w	r5, r3, #8
    d828:	685b      	ldr	r3, [r3, #4]
    d82a:	429d      	cmp	r5, r3
    d82c:	d106      	bne.n	d83c <_malloc_r+0xa8>
    d82e:	e00c      	b.n	d84a <_malloc_r+0xb6>
    d830:	2900      	cmp	r1, #0
    d832:	f280 8127 	bge.w	da84 <_malloc_r+0x2f0>
    d836:	68db      	ldr	r3, [r3, #12]
    d838:	429d      	cmp	r5, r3
    d83a:	d006      	beq.n	d84a <_malloc_r+0xb6>
    d83c:	685a      	ldr	r2, [r3, #4]
    d83e:	f022 0203 	bic.w	r2, r2, #3
    d842:	1b91      	subs	r1, r2, r6
    d844:	290f      	cmp	r1, #15
    d846:	ddf3      	ble.n	d830 <_malloc_r+0x9c>
    d848:	4660      	mov	r0, ip
    d84a:	693d      	ldr	r5, [r7, #16]
    d84c:	f8df c250 	ldr.w	ip, [pc, #592]	; daa0 <_malloc_r+0x30c>
    d850:	4565      	cmp	r5, ip
    d852:	d07c      	beq.n	d94e <_malloc_r+0x1ba>
    d854:	686a      	ldr	r2, [r5, #4]
    d856:	f022 0203 	bic.w	r2, r2, #3
    d85a:	1b93      	subs	r3, r2, r6
    d85c:	2b0f      	cmp	r3, #15
    d85e:	f300 817b 	bgt.w	db58 <_malloc_r+0x3c4>
    d862:	2b00      	cmp	r3, #0
    d864:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    d868:	f280 816c 	bge.w	db44 <_malloc_r+0x3b0>
    d86c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    d870:	f080 811a 	bcs.w	daa8 <_malloc_r+0x314>
    d874:	08d3      	lsrs	r3, r2, #3
    d876:	6879      	ldr	r1, [r7, #4]
    d878:	3301      	adds	r3, #1
    d87a:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    d87e:	2201      	movs	r2, #1
    d880:	fa02 f20e 	lsl.w	r2, r2, lr
    d884:	430a      	orrs	r2, r1
    d886:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    d88a:	f8c5 e008 	str.w	lr, [r5, #8]
    d88e:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    d892:	3908      	subs	r1, #8
    d894:	60e9      	str	r1, [r5, #12]
    d896:	607a      	str	r2, [r7, #4]
    d898:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    d89c:	f8ce 500c 	str.w	r5, [lr, #12]
    d8a0:	1083      	asrs	r3, r0, #2
    d8a2:	2101      	movs	r1, #1
    d8a4:	4099      	lsls	r1, r3
    d8a6:	4291      	cmp	r1, r2
    d8a8:	d857      	bhi.n	d95a <_malloc_r+0x1c6>
    d8aa:	4211      	tst	r1, r2
    d8ac:	d106      	bne.n	d8bc <_malloc_r+0x128>
    d8ae:	f020 0003 	bic.w	r0, r0, #3
    d8b2:	0049      	lsls	r1, r1, #1
    d8b4:	4211      	tst	r1, r2
    d8b6:	f100 0004 	add.w	r0, r0, #4
    d8ba:	d0fa      	beq.n	d8b2 <_malloc_r+0x11e>
    d8bc:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    d8c0:	464d      	mov	r5, r9
    d8c2:	4686      	mov	lr, r0
    d8c4:	f8d5 800c 	ldr.w	r8, [r5, #12]
    d8c8:	4545      	cmp	r5, r8
    d8ca:	d108      	bne.n	d8de <_malloc_r+0x14a>
    d8cc:	e11d      	b.n	db0a <_malloc_r+0x376>
    d8ce:	2b00      	cmp	r3, #0
    d8d0:	f280 8124 	bge.w	db1c <_malloc_r+0x388>
    d8d4:	f8d8 800c 	ldr.w	r8, [r8, #12]
    d8d8:	4545      	cmp	r5, r8
    d8da:	f000 8116 	beq.w	db0a <_malloc_r+0x376>
    d8de:	f8d8 2004 	ldr.w	r2, [r8, #4]
    d8e2:	f022 0203 	bic.w	r2, r2, #3
    d8e6:	1b93      	subs	r3, r2, r6
    d8e8:	2b0f      	cmp	r3, #15
    d8ea:	ddf0      	ble.n	d8ce <_malloc_r+0x13a>
    d8ec:	4620      	mov	r0, r4
    d8ee:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    d8f2:	eb08 0106 	add.w	r1, r8, r6
    d8f6:	f046 0601 	orr.w	r6, r6, #1
    d8fa:	f8c8 6004 	str.w	r6, [r8, #4]
    d8fe:	60ec      	str	r4, [r5, #12]
    d900:	60a5      	str	r5, [r4, #8]
    d902:	f043 0401 	orr.w	r4, r3, #1
    d906:	e9c7 1104 	strd	r1, r1, [r7, #16]
    d90a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    d90e:	604c      	str	r4, [r1, #4]
    d910:	f848 3002 	str.w	r3, [r8, r2]
    d914:	f000 fb4a 	bl	dfac <__malloc_unlock>
    d918:	f108 0508 	add.w	r5, r8, #8
    d91c:	e002      	b.n	d924 <_malloc_r+0x190>
    d91e:	230c      	movs	r3, #12
    d920:	6023      	str	r3, [r4, #0]
    d922:	2500      	movs	r5, #0
    d924:	4628      	mov	r0, r5
    d926:	b003      	add	sp, #12
    d928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d92c:	f44f 7300 	mov.w	r3, #512	; 0x200
    d930:	2040      	movs	r0, #64	; 0x40
    d932:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    d936:	e773      	b.n	d820 <_malloc_r+0x8c>
    d938:	68d3      	ldr	r3, [r2, #12]
    d93a:	429a      	cmp	r2, r3
    d93c:	bf08      	it	eq
    d93e:	3002      	addeq	r0, #2
    d940:	f47f af40 	bne.w	d7c4 <_malloc_r+0x30>
    d944:	693d      	ldr	r5, [r7, #16]
    d946:	f8df c158 	ldr.w	ip, [pc, #344]	; daa0 <_malloc_r+0x30c>
    d94a:	4565      	cmp	r5, ip
    d94c:	d182      	bne.n	d854 <_malloc_r+0xc0>
    d94e:	687a      	ldr	r2, [r7, #4]
    d950:	1083      	asrs	r3, r0, #2
    d952:	2101      	movs	r1, #1
    d954:	4099      	lsls	r1, r3
    d956:	4291      	cmp	r1, r2
    d958:	d9a7      	bls.n	d8aa <_malloc_r+0x116>
    d95a:	68bd      	ldr	r5, [r7, #8]
    d95c:	686b      	ldr	r3, [r5, #4]
    d95e:	f023 0903 	bic.w	r9, r3, #3
    d962:	454e      	cmp	r6, r9
    d964:	d803      	bhi.n	d96e <_malloc_r+0x1da>
    d966:	eba9 0306 	sub.w	r3, r9, r6
    d96a:	2b0f      	cmp	r3, #15
    d96c:	dc7a      	bgt.n	da64 <_malloc_r+0x2d0>
    d96e:	f8df b134 	ldr.w	fp, [pc, #308]	; daa4 <_malloc_r+0x310>
    d972:	4b47      	ldr	r3, [pc, #284]	; (da90 <_malloc_r+0x2fc>)
    d974:	f8db 2000 	ldr.w	r2, [fp]
    d978:	681b      	ldr	r3, [r3, #0]
    d97a:	3201      	adds	r2, #1
    d97c:	4433      	add	r3, r6
    d97e:	eb05 0a09 	add.w	sl, r5, r9
    d982:	f000 8133 	beq.w	dbec <_malloc_r+0x458>
    d986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    d98a:	330f      	adds	r3, #15
    d98c:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    d990:	f028 080f 	bic.w	r8, r8, #15
    d994:	4641      	mov	r1, r8
    d996:	4620      	mov	r0, r4
    d998:	f001 fc6a 	bl	f270 <_sbrk_r>
    d99c:	1c41      	adds	r1, r0, #1
    d99e:	4602      	mov	r2, r0
    d9a0:	f000 80f3 	beq.w	db8a <_malloc_r+0x3f6>
    d9a4:	4582      	cmp	sl, r0
    d9a6:	f200 80ee 	bhi.w	db86 <_malloc_r+0x3f2>
    d9aa:	4b3a      	ldr	r3, [pc, #232]	; (da94 <_malloc_r+0x300>)
    d9ac:	6819      	ldr	r1, [r3, #0]
    d9ae:	4441      	add	r1, r8
    d9b0:	6019      	str	r1, [r3, #0]
    d9b2:	4608      	mov	r0, r1
    d9b4:	f000 814e 	beq.w	dc54 <_malloc_r+0x4c0>
    d9b8:	f8db 1000 	ldr.w	r1, [fp]
    d9bc:	9301      	str	r3, [sp, #4]
    d9be:	3101      	adds	r1, #1
    d9c0:	bf1b      	ittet	ne
    d9c2:	eba2 010a 	subne.w	r1, r2, sl
    d9c6:	1809      	addne	r1, r1, r0
    d9c8:	f8cb 2000 	streq.w	r2, [fp]
    d9cc:	6019      	strne	r1, [r3, #0]
    d9ce:	f012 0b07 	ands.w	fp, r2, #7
    d9d2:	f000 8117 	beq.w	dc04 <_malloc_r+0x470>
    d9d6:	f1cb 0108 	rsb	r1, fp, #8
    d9da:	440a      	add	r2, r1
    d9dc:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    d9e0:	4490      	add	r8, r2
    d9e2:	3108      	adds	r1, #8
    d9e4:	eba1 0108 	sub.w	r1, r1, r8
    d9e8:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    d9ec:	4651      	mov	r1, sl
    d9ee:	4620      	mov	r0, r4
    d9f0:	9200      	str	r2, [sp, #0]
    d9f2:	f001 fc3d 	bl	f270 <_sbrk_r>
    d9f6:	1c42      	adds	r2, r0, #1
    d9f8:	e9dd 2300 	ldrd	r2, r3, [sp]
    d9fc:	f000 814f 	beq.w	dc9e <_malloc_r+0x50a>
    da00:	1a80      	subs	r0, r0, r2
    da02:	eb00 080a 	add.w	r8, r0, sl
    da06:	6819      	ldr	r1, [r3, #0]
    da08:	60ba      	str	r2, [r7, #8]
    da0a:	f048 0001 	orr.w	r0, r8, #1
    da0e:	4451      	add	r1, sl
    da10:	42bd      	cmp	r5, r7
    da12:	6050      	str	r0, [r2, #4]
    da14:	6019      	str	r1, [r3, #0]
    da16:	f000 8129 	beq.w	dc6c <_malloc_r+0x4d8>
    da1a:	f1b9 0f0f 	cmp.w	r9, #15
    da1e:	f240 8127 	bls.w	dc70 <_malloc_r+0x4dc>
    da22:	6868      	ldr	r0, [r5, #4]
    da24:	f1a9 0c0c 	sub.w	ip, r9, #12
    da28:	f02c 0c07 	bic.w	ip, ip, #7
    da2c:	f000 0001 	and.w	r0, r0, #1
    da30:	ea40 000c 	orr.w	r0, r0, ip
    da34:	6068      	str	r0, [r5, #4]
    da36:	f04f 0e05 	mov.w	lr, #5
    da3a:	eb05 000c 	add.w	r0, r5, ip
    da3e:	f1bc 0f0f 	cmp.w	ip, #15
    da42:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    da46:	f200 8132 	bhi.w	dcae <_malloc_r+0x51a>
    da4a:	6850      	ldr	r0, [r2, #4]
    da4c:	4615      	mov	r5, r2
    da4e:	4b12      	ldr	r3, [pc, #72]	; (da98 <_malloc_r+0x304>)
    da50:	681a      	ldr	r2, [r3, #0]
    da52:	428a      	cmp	r2, r1
    da54:	bf38      	it	cc
    da56:	6019      	strcc	r1, [r3, #0]
    da58:	4b10      	ldr	r3, [pc, #64]	; (da9c <_malloc_r+0x308>)
    da5a:	681a      	ldr	r2, [r3, #0]
    da5c:	428a      	cmp	r2, r1
    da5e:	bf38      	it	cc
    da60:	6019      	strcc	r1, [r3, #0]
    da62:	e094      	b.n	db8e <_malloc_r+0x3fa>
    da64:	19aa      	adds	r2, r5, r6
    da66:	f043 0301 	orr.w	r3, r3, #1
    da6a:	f046 0601 	orr.w	r6, r6, #1
    da6e:	606e      	str	r6, [r5, #4]
    da70:	4620      	mov	r0, r4
    da72:	60ba      	str	r2, [r7, #8]
    da74:	6053      	str	r3, [r2, #4]
    da76:	f000 fa99 	bl	dfac <__malloc_unlock>
    da7a:	3508      	adds	r5, #8
    da7c:	4628      	mov	r0, r5
    da7e:	b003      	add	sp, #12
    da80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da84:	68d9      	ldr	r1, [r3, #12]
    da86:	441a      	add	r2, r3
    da88:	e6a1      	b.n	d7ce <_malloc_r+0x3a>
    da8a:	bf00      	nop
    da8c:	20001d30 	.word	0x20001d30
    da90:	200036f0 	.word	0x200036f0
    da94:	200036c0 	.word	0x200036c0
    da98:	200036e8 	.word	0x200036e8
    da9c:	200036ec 	.word	0x200036ec
    daa0:	20001d38 	.word	0x20001d38
    daa4:	20002138 	.word	0x20002138
    daa8:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    daac:	ea4f 2352 	mov.w	r3, r2, lsr #9
    dab0:	d363      	bcc.n	db7a <_malloc_r+0x3e6>
    dab2:	2b14      	cmp	r3, #20
    dab4:	f200 80b7 	bhi.w	dc26 <_malloc_r+0x492>
    dab8:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    dabc:	00c9      	lsls	r1, r1, #3
    dabe:	335b      	adds	r3, #91	; 0x5b
    dac0:	eb07 0e01 	add.w	lr, r7, r1
    dac4:	5879      	ldr	r1, [r7, r1]
    dac6:	f1ae 0e08 	sub.w	lr, lr, #8
    daca:	458e      	cmp	lr, r1
    dacc:	f000 8091 	beq.w	dbf2 <_malloc_r+0x45e>
    dad0:	684b      	ldr	r3, [r1, #4]
    dad2:	f023 0303 	bic.w	r3, r3, #3
    dad6:	4293      	cmp	r3, r2
    dad8:	d902      	bls.n	dae0 <_malloc_r+0x34c>
    dada:	6889      	ldr	r1, [r1, #8]
    dadc:	458e      	cmp	lr, r1
    dade:	d1f7      	bne.n	dad0 <_malloc_r+0x33c>
    dae0:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    dae4:	687a      	ldr	r2, [r7, #4]
    dae6:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    daea:	f8ce 5008 	str.w	r5, [lr, #8]
    daee:	60cd      	str	r5, [r1, #12]
    daf0:	e6d6      	b.n	d8a0 <_malloc_r+0x10c>
    daf2:	2b14      	cmp	r3, #20
    daf4:	d959      	bls.n	dbaa <_malloc_r+0x416>
    daf6:	2b54      	cmp	r3, #84	; 0x54
    daf8:	f200 809d 	bhi.w	dc36 <_malloc_r+0x4a2>
    dafc:	0b33      	lsrs	r3, r6, #12
    dafe:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    db02:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    db06:	00c3      	lsls	r3, r0, #3
    db08:	e68a      	b.n	d820 <_malloc_r+0x8c>
    db0a:	f10e 0e01 	add.w	lr, lr, #1
    db0e:	f01e 0f03 	tst.w	lr, #3
    db12:	f105 0508 	add.w	r5, r5, #8
    db16:	f47f aed5 	bne.w	d8c4 <_malloc_r+0x130>
    db1a:	e051      	b.n	dbc0 <_malloc_r+0x42c>
    db1c:	4442      	add	r2, r8
    db1e:	4645      	mov	r5, r8
    db20:	6853      	ldr	r3, [r2, #4]
    db22:	f8d8 100c 	ldr.w	r1, [r8, #12]
    db26:	f043 0301 	orr.w	r3, r3, #1
    db2a:	6053      	str	r3, [r2, #4]
    db2c:	f855 3f08 	ldr.w	r3, [r5, #8]!
    db30:	4620      	mov	r0, r4
    db32:	60d9      	str	r1, [r3, #12]
    db34:	608b      	str	r3, [r1, #8]
    db36:	f000 fa39 	bl	dfac <__malloc_unlock>
    db3a:	e6f3      	b.n	d924 <_malloc_r+0x190>
    db3c:	08f0      	lsrs	r0, r6, #3
    db3e:	f106 0208 	add.w	r2, r6, #8
    db42:	e637      	b.n	d7b4 <_malloc_r+0x20>
    db44:	442a      	add	r2, r5
    db46:	4620      	mov	r0, r4
    db48:	6853      	ldr	r3, [r2, #4]
    db4a:	f043 0301 	orr.w	r3, r3, #1
    db4e:	6053      	str	r3, [r2, #4]
    db50:	3508      	adds	r5, #8
    db52:	f000 fa2b 	bl	dfac <__malloc_unlock>
    db56:	e6e5      	b.n	d924 <_malloc_r+0x190>
    db58:	19a9      	adds	r1, r5, r6
    db5a:	4620      	mov	r0, r4
    db5c:	f046 0601 	orr.w	r6, r6, #1
    db60:	f043 0401 	orr.w	r4, r3, #1
    db64:	606e      	str	r6, [r5, #4]
    db66:	e9c7 1104 	strd	r1, r1, [r7, #16]
    db6a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    db6e:	604c      	str	r4, [r1, #4]
    db70:	50ab      	str	r3, [r5, r2]
    db72:	f000 fa1b 	bl	dfac <__malloc_unlock>
    db76:	3508      	adds	r5, #8
    db78:	e6d4      	b.n	d924 <_malloc_r+0x190>
    db7a:	0993      	lsrs	r3, r2, #6
    db7c:	f103 0139 	add.w	r1, r3, #57	; 0x39
    db80:	00c9      	lsls	r1, r1, #3
    db82:	3338      	adds	r3, #56	; 0x38
    db84:	e79c      	b.n	dac0 <_malloc_r+0x32c>
    db86:	42bd      	cmp	r5, r7
    db88:	d05f      	beq.n	dc4a <_malloc_r+0x4b6>
    db8a:	68bd      	ldr	r5, [r7, #8]
    db8c:	6868      	ldr	r0, [r5, #4]
    db8e:	f020 0803 	bic.w	r8, r0, #3
    db92:	4546      	cmp	r6, r8
    db94:	eba8 0306 	sub.w	r3, r8, r6
    db98:	d802      	bhi.n	dba0 <_malloc_r+0x40c>
    db9a:	2b0f      	cmp	r3, #15
    db9c:	f73f af62 	bgt.w	da64 <_malloc_r+0x2d0>
    dba0:	4620      	mov	r0, r4
    dba2:	f000 fa03 	bl	dfac <__malloc_unlock>
    dba6:	2500      	movs	r5, #0
    dba8:	e6bc      	b.n	d924 <_malloc_r+0x190>
    dbaa:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    dbae:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    dbb2:	00c3      	lsls	r3, r0, #3
    dbb4:	e634      	b.n	d820 <_malloc_r+0x8c>
    dbb6:	f859 3908 	ldr.w	r3, [r9], #-8
    dbba:	454b      	cmp	r3, r9
    dbbc:	f040 8096 	bne.w	dcec <_malloc_r+0x558>
    dbc0:	f010 0f03 	tst.w	r0, #3
    dbc4:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    dbc8:	d1f5      	bne.n	dbb6 <_malloc_r+0x422>
    dbca:	687b      	ldr	r3, [r7, #4]
    dbcc:	ea23 0301 	bic.w	r3, r3, r1
    dbd0:	607b      	str	r3, [r7, #4]
    dbd2:	0049      	lsls	r1, r1, #1
    dbd4:	4299      	cmp	r1, r3
    dbd6:	f63f aec0 	bhi.w	d95a <_malloc_r+0x1c6>
    dbda:	b919      	cbnz	r1, dbe4 <_malloc_r+0x450>
    dbdc:	e6bd      	b.n	d95a <_malloc_r+0x1c6>
    dbde:	0049      	lsls	r1, r1, #1
    dbe0:	f10e 0e04 	add.w	lr, lr, #4
    dbe4:	4219      	tst	r1, r3
    dbe6:	d0fa      	beq.n	dbde <_malloc_r+0x44a>
    dbe8:	4670      	mov	r0, lr
    dbea:	e667      	b.n	d8bc <_malloc_r+0x128>
    dbec:	f103 0810 	add.w	r8, r3, #16
    dbf0:	e6d0      	b.n	d994 <_malloc_r+0x200>
    dbf2:	109a      	asrs	r2, r3, #2
    dbf4:	f04f 0801 	mov.w	r8, #1
    dbf8:	687b      	ldr	r3, [r7, #4]
    dbfa:	fa08 f202 	lsl.w	r2, r8, r2
    dbfe:	431a      	orrs	r2, r3
    dc00:	607a      	str	r2, [r7, #4]
    dc02:	e770      	b.n	dae6 <_malloc_r+0x352>
    dc04:	eb02 0108 	add.w	r1, r2, r8
    dc08:	4249      	negs	r1, r1
    dc0a:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    dc0e:	4651      	mov	r1, sl
    dc10:	4620      	mov	r0, r4
    dc12:	9200      	str	r2, [sp, #0]
    dc14:	f001 fb2c 	bl	f270 <_sbrk_r>
    dc18:	1c43      	adds	r3, r0, #1
    dc1a:	e9dd 2300 	ldrd	r2, r3, [sp]
    dc1e:	f47f aeef 	bne.w	da00 <_malloc_r+0x26c>
    dc22:	46da      	mov	sl, fp
    dc24:	e6ef      	b.n	da06 <_malloc_r+0x272>
    dc26:	2b54      	cmp	r3, #84	; 0x54
    dc28:	d825      	bhi.n	dc76 <_malloc_r+0x4e2>
    dc2a:	0b13      	lsrs	r3, r2, #12
    dc2c:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    dc30:	00c9      	lsls	r1, r1, #3
    dc32:	336e      	adds	r3, #110	; 0x6e
    dc34:	e744      	b.n	dac0 <_malloc_r+0x32c>
    dc36:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    dc3a:	d825      	bhi.n	dc88 <_malloc_r+0x4f4>
    dc3c:	0bf3      	lsrs	r3, r6, #15
    dc3e:	f103 0078 	add.w	r0, r3, #120	; 0x78
    dc42:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    dc46:	00c3      	lsls	r3, r0, #3
    dc48:	e5ea      	b.n	d820 <_malloc_r+0x8c>
    dc4a:	4b29      	ldr	r3, [pc, #164]	; (dcf0 <_malloc_r+0x55c>)
    dc4c:	6818      	ldr	r0, [r3, #0]
    dc4e:	4440      	add	r0, r8
    dc50:	6018      	str	r0, [r3, #0]
    dc52:	e6b1      	b.n	d9b8 <_malloc_r+0x224>
    dc54:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    dc58:	f1bc 0f00 	cmp.w	ip, #0
    dc5c:	f47f aeac 	bne.w	d9b8 <_malloc_r+0x224>
    dc60:	68bd      	ldr	r5, [r7, #8]
    dc62:	44c8      	add	r8, r9
    dc64:	f048 0001 	orr.w	r0, r8, #1
    dc68:	6068      	str	r0, [r5, #4]
    dc6a:	e6f0      	b.n	da4e <_malloc_r+0x2ba>
    dc6c:	4615      	mov	r5, r2
    dc6e:	e6ee      	b.n	da4e <_malloc_r+0x2ba>
    dc70:	2301      	movs	r3, #1
    dc72:	6053      	str	r3, [r2, #4]
    dc74:	e794      	b.n	dba0 <_malloc_r+0x40c>
    dc76:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    dc7a:	d823      	bhi.n	dcc4 <_malloc_r+0x530>
    dc7c:	0bd3      	lsrs	r3, r2, #15
    dc7e:	f103 0178 	add.w	r1, r3, #120	; 0x78
    dc82:	00c9      	lsls	r1, r1, #3
    dc84:	3377      	adds	r3, #119	; 0x77
    dc86:	e71b      	b.n	dac0 <_malloc_r+0x32c>
    dc88:	f240 5254 	movw	r2, #1364	; 0x554
    dc8c:	4293      	cmp	r3, r2
    dc8e:	d823      	bhi.n	dcd8 <_malloc_r+0x544>
    dc90:	0cb3      	lsrs	r3, r6, #18
    dc92:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    dc96:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    dc9a:	00c3      	lsls	r3, r0, #3
    dc9c:	e5c0      	b.n	d820 <_malloc_r+0x8c>
    dc9e:	f1ab 0b08 	sub.w	fp, fp, #8
    dca2:	44d8      	add	r8, fp
    dca4:	eba8 0802 	sub.w	r8, r8, r2
    dca8:	f04f 0a00 	mov.w	sl, #0
    dcac:	e6ab      	b.n	da06 <_malloc_r+0x272>
    dcae:	f105 0108 	add.w	r1, r5, #8
    dcb2:	4620      	mov	r0, r4
    dcb4:	9300      	str	r3, [sp, #0]
    dcb6:	f001 f96d 	bl	ef94 <_free_r>
    dcba:	68bd      	ldr	r5, [r7, #8]
    dcbc:	9b00      	ldr	r3, [sp, #0]
    dcbe:	6868      	ldr	r0, [r5, #4]
    dcc0:	6819      	ldr	r1, [r3, #0]
    dcc2:	e6c4      	b.n	da4e <_malloc_r+0x2ba>
    dcc4:	f240 5154 	movw	r1, #1364	; 0x554
    dcc8:	428b      	cmp	r3, r1
    dcca:	d80b      	bhi.n	dce4 <_malloc_r+0x550>
    dccc:	0c93      	lsrs	r3, r2, #18
    dcce:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    dcd2:	00c9      	lsls	r1, r1, #3
    dcd4:	337c      	adds	r3, #124	; 0x7c
    dcd6:	e6f3      	b.n	dac0 <_malloc_r+0x32c>
    dcd8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    dcdc:	207f      	movs	r0, #127	; 0x7f
    dcde:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    dce2:	e59d      	b.n	d820 <_malloc_r+0x8c>
    dce4:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    dce8:	237e      	movs	r3, #126	; 0x7e
    dcea:	e6e9      	b.n	dac0 <_malloc_r+0x32c>
    dcec:	687b      	ldr	r3, [r7, #4]
    dcee:	e770      	b.n	dbd2 <_malloc_r+0x43e>
    dcf0:	200036c0 	.word	0x200036c0

0000dcf4 <memcmp>:
    dcf4:	2a03      	cmp	r2, #3
    dcf6:	b570      	push	{r4, r5, r6, lr}
    dcf8:	d914      	bls.n	dd24 <memcmp+0x30>
    dcfa:	ea40 0301 	orr.w	r3, r0, r1
    dcfe:	079b      	lsls	r3, r3, #30
    dd00:	d122      	bne.n	dd48 <memcmp+0x54>
    dd02:	4604      	mov	r4, r0
    dd04:	460b      	mov	r3, r1
    dd06:	4619      	mov	r1, r3
    dd08:	4620      	mov	r0, r4
    dd0a:	680e      	ldr	r6, [r1, #0]
    dd0c:	6805      	ldr	r5, [r0, #0]
    dd0e:	42b5      	cmp	r5, r6
    dd10:	f104 0404 	add.w	r4, r4, #4
    dd14:	f103 0304 	add.w	r3, r3, #4
    dd18:	d116      	bne.n	dd48 <memcmp+0x54>
    dd1a:	3a04      	subs	r2, #4
    dd1c:	2a03      	cmp	r2, #3
    dd1e:	4620      	mov	r0, r4
    dd20:	4619      	mov	r1, r3
    dd22:	d8f0      	bhi.n	dd06 <memcmp+0x12>
    dd24:	1e54      	subs	r4, r2, #1
    dd26:	b19a      	cbz	r2, dd50 <memcmp+0x5c>
    dd28:	1e42      	subs	r2, r0, #1
    dd2a:	3901      	subs	r1, #1
    dd2c:	e001      	b.n	dd32 <memcmp+0x3e>
    dd2e:	18c3      	adds	r3, r0, r3
    dd30:	d00c      	beq.n	dd4c <memcmp+0x58>
    dd32:	f812 ef01 	ldrb.w	lr, [r2, #1]!
    dd36:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    dd3a:	45e6      	cmp	lr, ip
    dd3c:	eba4 0302 	sub.w	r3, r4, r2
    dd40:	d0f5      	beq.n	dd2e <memcmp+0x3a>
    dd42:	ebae 000c 	sub.w	r0, lr, ip
    dd46:	bd70      	pop	{r4, r5, r6, pc}
    dd48:	1e54      	subs	r4, r2, #1
    dd4a:	e7ed      	b.n	dd28 <memcmp+0x34>
    dd4c:	4618      	mov	r0, r3
    dd4e:	bd70      	pop	{r4, r5, r6, pc}
    dd50:	4610      	mov	r0, r2
    dd52:	bd70      	pop	{r4, r5, r6, pc}

0000dd54 <memmove>:
    dd54:	4288      	cmp	r0, r1
    dd56:	d90d      	bls.n	dd74 <memmove+0x20>
    dd58:	188b      	adds	r3, r1, r2
    dd5a:	4283      	cmp	r3, r0
    dd5c:	d90a      	bls.n	dd74 <memmove+0x20>
    dd5e:	eb00 0c02 	add.w	ip, r0, r2
    dd62:	b1ba      	cbz	r2, dd94 <memmove+0x40>
    dd64:	4662      	mov	r2, ip
    dd66:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    dd6a:	f802 cd01 	strb.w	ip, [r2, #-1]!
    dd6e:	4299      	cmp	r1, r3
    dd70:	d1f9      	bne.n	dd66 <memmove+0x12>
    dd72:	4770      	bx	lr
    dd74:	2a0f      	cmp	r2, #15
    dd76:	d80e      	bhi.n	dd96 <memmove+0x42>
    dd78:	4603      	mov	r3, r0
    dd7a:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    dd7e:	b14a      	cbz	r2, dd94 <memmove+0x40>
    dd80:	f10c 0c01 	add.w	ip, ip, #1
    dd84:	3b01      	subs	r3, #1
    dd86:	448c      	add	ip, r1
    dd88:	f811 2b01 	ldrb.w	r2, [r1], #1
    dd8c:	f803 2f01 	strb.w	r2, [r3, #1]!
    dd90:	4561      	cmp	r1, ip
    dd92:	d1f9      	bne.n	dd88 <memmove+0x34>
    dd94:	4770      	bx	lr
    dd96:	ea40 0301 	orr.w	r3, r0, r1
    dd9a:	079b      	lsls	r3, r3, #30
    dd9c:	d150      	bne.n	de40 <memmove+0xec>
    dd9e:	f1a2 0310 	sub.w	r3, r2, #16
    dda2:	b570      	push	{r4, r5, r6, lr}
    dda4:	f101 0c20 	add.w	ip, r1, #32
    dda8:	f023 050f 	bic.w	r5, r3, #15
    ddac:	f101 0e10 	add.w	lr, r1, #16
    ddb0:	f100 0410 	add.w	r4, r0, #16
    ddb4:	44ac      	add	ip, r5
    ddb6:	091b      	lsrs	r3, r3, #4
    ddb8:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    ddbc:	f844 5c10 	str.w	r5, [r4, #-16]
    ddc0:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    ddc4:	f844 5c0c 	str.w	r5, [r4, #-12]
    ddc8:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    ddcc:	f844 5c08 	str.w	r5, [r4, #-8]
    ddd0:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    ddd4:	f844 5c04 	str.w	r5, [r4, #-4]
    ddd8:	f10e 0e10 	add.w	lr, lr, #16
    dddc:	45e6      	cmp	lr, ip
    ddde:	f104 0410 	add.w	r4, r4, #16
    dde2:	d1e9      	bne.n	ddb8 <memmove+0x64>
    dde4:	3301      	adds	r3, #1
    dde6:	f012 0f0c 	tst.w	r2, #12
    ddea:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    ddee:	f002 040f 	and.w	r4, r2, #15
    ddf2:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    ddf6:	d027      	beq.n	de48 <memmove+0xf4>
    ddf8:	3c04      	subs	r4, #4
    ddfa:	f024 0603 	bic.w	r6, r4, #3
    ddfe:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    de02:	441e      	add	r6, r3
    de04:	1f1c      	subs	r4, r3, #4
    de06:	468e      	mov	lr, r1
    de08:	f85e 5b04 	ldr.w	r5, [lr], #4
    de0c:	f844 5f04 	str.w	r5, [r4, #4]!
    de10:	42b4      	cmp	r4, r6
    de12:	d1f9      	bne.n	de08 <memmove+0xb4>
    de14:	f10c 0401 	add.w	r4, ip, #1
    de18:	f002 0203 	and.w	r2, r2, #3
    de1c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    de20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    de24:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    de28:	b14a      	cbz	r2, de3e <memmove+0xea>
    de2a:	f10c 0c01 	add.w	ip, ip, #1
    de2e:	3b01      	subs	r3, #1
    de30:	448c      	add	ip, r1
    de32:	f811 2b01 	ldrb.w	r2, [r1], #1
    de36:	f803 2f01 	strb.w	r2, [r3, #1]!
    de3a:	4561      	cmp	r1, ip
    de3c:	d1f9      	bne.n	de32 <memmove+0xde>
    de3e:	bd70      	pop	{r4, r5, r6, pc}
    de40:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    de44:	4603      	mov	r3, r0
    de46:	e79b      	b.n	dd80 <memmove+0x2c>
    de48:	4622      	mov	r2, r4
    de4a:	e7eb      	b.n	de24 <memmove+0xd0>

0000de4c <__assert_func>:
    de4c:	b500      	push	{lr}
    de4e:	4c0b      	ldr	r4, [pc, #44]	; (de7c <__assert_func+0x30>)
    de50:	6825      	ldr	r5, [r4, #0]
    de52:	4614      	mov	r4, r2
    de54:	68ee      	ldr	r6, [r5, #12]
    de56:	461a      	mov	r2, r3
    de58:	b085      	sub	sp, #20
    de5a:	4603      	mov	r3, r0
    de5c:	460d      	mov	r5, r1
    de5e:	b14c      	cbz	r4, de74 <__assert_func+0x28>
    de60:	4907      	ldr	r1, [pc, #28]	; (de80 <__assert_func+0x34>)
    de62:	9500      	str	r5, [sp, #0]
    de64:	e9cd 1401 	strd	r1, r4, [sp, #4]
    de68:	4630      	mov	r0, r6
    de6a:	4906      	ldr	r1, [pc, #24]	; (de84 <__assert_func+0x38>)
    de6c:	f001 f998 	bl	f1a0 <fiprintf>
    de70:	f7fd fe34 	bl	badc <abort>
    de74:	4904      	ldr	r1, [pc, #16]	; (de88 <__assert_func+0x3c>)
    de76:	460c      	mov	r4, r1
    de78:	e7f3      	b.n	de62 <__assert_func+0x16>
    de7a:	bf00      	nop
    de7c:	2000214c 	.word	0x2000214c
    de80:	20001108 	.word	0x20001108
    de84:	20001118 	.word	0x20001118
    de88:	20000610 	.word	0x20000610

0000de8c <memset>:
    de8c:	0783      	lsls	r3, r0, #30
    de8e:	b530      	push	{r4, r5, lr}
    de90:	d048      	beq.n	df24 <memset+0x98>
    de92:	1e54      	subs	r4, r2, #1
    de94:	2a00      	cmp	r2, #0
    de96:	d03f      	beq.n	df18 <memset+0x8c>
    de98:	b2ca      	uxtb	r2, r1
    de9a:	4603      	mov	r3, r0
    de9c:	e001      	b.n	dea2 <memset+0x16>
    de9e:	3c01      	subs	r4, #1
    dea0:	d33a      	bcc.n	df18 <memset+0x8c>
    dea2:	f803 2b01 	strb.w	r2, [r3], #1
    dea6:	079d      	lsls	r5, r3, #30
    dea8:	d1f9      	bne.n	de9e <memset+0x12>
    deaa:	2c03      	cmp	r4, #3
    deac:	d92d      	bls.n	df0a <memset+0x7e>
    deae:	b2cd      	uxtb	r5, r1
    deb0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    deb4:	2c0f      	cmp	r4, #15
    deb6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    deba:	d936      	bls.n	df2a <memset+0x9e>
    debc:	f1a4 0210 	sub.w	r2, r4, #16
    dec0:	f022 0c0f 	bic.w	ip, r2, #15
    dec4:	f103 0e20 	add.w	lr, r3, #32
    dec8:	44e6      	add	lr, ip
    deca:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    dece:	f103 0210 	add.w	r2, r3, #16
    ded2:	e942 5504 	strd	r5, r5, [r2, #-16]
    ded6:	e942 5502 	strd	r5, r5, [r2, #-8]
    deda:	3210      	adds	r2, #16
    dedc:	4572      	cmp	r2, lr
    dede:	d1f8      	bne.n	ded2 <memset+0x46>
    dee0:	f10c 0201 	add.w	r2, ip, #1
    dee4:	f014 0f0c 	tst.w	r4, #12
    dee8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    deec:	f004 0c0f 	and.w	ip, r4, #15
    def0:	d013      	beq.n	df1a <memset+0x8e>
    def2:	f1ac 0304 	sub.w	r3, ip, #4
    def6:	f023 0303 	bic.w	r3, r3, #3
    defa:	3304      	adds	r3, #4
    defc:	4413      	add	r3, r2
    defe:	f842 5b04 	str.w	r5, [r2], #4
    df02:	4293      	cmp	r3, r2
    df04:	d1fb      	bne.n	defe <memset+0x72>
    df06:	f00c 0403 	and.w	r4, ip, #3
    df0a:	b12c      	cbz	r4, df18 <memset+0x8c>
    df0c:	b2c9      	uxtb	r1, r1
    df0e:	441c      	add	r4, r3
    df10:	f803 1b01 	strb.w	r1, [r3], #1
    df14:	429c      	cmp	r4, r3
    df16:	d1fb      	bne.n	df10 <memset+0x84>
    df18:	bd30      	pop	{r4, r5, pc}
    df1a:	4664      	mov	r4, ip
    df1c:	4613      	mov	r3, r2
    df1e:	2c00      	cmp	r4, #0
    df20:	d1f4      	bne.n	df0c <memset+0x80>
    df22:	e7f9      	b.n	df18 <memset+0x8c>
    df24:	4603      	mov	r3, r0
    df26:	4614      	mov	r4, r2
    df28:	e7bf      	b.n	deaa <memset+0x1e>
    df2a:	461a      	mov	r2, r3
    df2c:	46a4      	mov	ip, r4
    df2e:	e7e0      	b.n	def2 <memset+0x66>

0000df30 <__cxa_atexit>:
    df30:	4613      	mov	r3, r2
    df32:	460a      	mov	r2, r1
    df34:	4601      	mov	r1, r0
    df36:	2002      	movs	r0, #2
    df38:	f003 bfca 	b.w	11ed0 <__register_exitproc>

0000df3c <__libc_init_array>:
    df3c:	b570      	push	{r4, r5, r6, lr}
    df3e:	4e0d      	ldr	r6, [pc, #52]	; (df74 <__libc_init_array+0x38>)
    df40:	4d0d      	ldr	r5, [pc, #52]	; (df78 <__libc_init_array+0x3c>)
    df42:	1b76      	subs	r6, r6, r5
    df44:	10b6      	asrs	r6, r6, #2
    df46:	d006      	beq.n	df56 <__libc_init_array+0x1a>
    df48:	2400      	movs	r4, #0
    df4a:	f855 3b04 	ldr.w	r3, [r5], #4
    df4e:	3401      	adds	r4, #1
    df50:	4798      	blx	r3
    df52:	42a6      	cmp	r6, r4
    df54:	d1f9      	bne.n	df4a <__libc_init_array+0xe>
    df56:	4e09      	ldr	r6, [pc, #36]	; (df7c <__libc_init_array+0x40>)
    df58:	4d09      	ldr	r5, [pc, #36]	; (df80 <__libc_init_array+0x44>)
    df5a:	1b76      	subs	r6, r6, r5
    df5c:	f005 fd64 	bl	13a28 <___init_veneer>
    df60:	10b6      	asrs	r6, r6, #2
    df62:	d006      	beq.n	df72 <__libc_init_array+0x36>
    df64:	2400      	movs	r4, #0
    df66:	f855 3b04 	ldr.w	r3, [r5], #4
    df6a:	3401      	adds	r4, #1
    df6c:	4798      	blx	r3
    df6e:	42a6      	cmp	r6, r4
    df70:	d1f9      	bne.n	df66 <__libc_init_array+0x2a>
    df72:	bd70      	pop	{r4, r5, r6, pc}
    df74:	60001e80 	.word	0x60001e80
    df78:	60001e80 	.word	0x60001e80
    df7c:	60001e94 	.word	0x60001e94
    df80:	60001e80 	.word	0x60001e80

0000df84 <__retarget_lock_init_recursive>:
    df84:	4770      	bx	lr
    df86:	bf00      	nop

0000df88 <__retarget_lock_close_recursive>:
    df88:	4770      	bx	lr
    df8a:	bf00      	nop

0000df8c <__retarget_lock_acquire_recursive>:
    df8c:	4770      	bx	lr
    df8e:	bf00      	nop

0000df90 <__retarget_lock_release_recursive>:
    df90:	4770      	bx	lr
    df92:	bf00      	nop

0000df94 <__locale_mb_cur_max>:
    df94:	4b01      	ldr	r3, [pc, #4]	; (df9c <__locale_mb_cur_max+0x8>)
    df96:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    df9a:	4770      	bx	lr
    df9c:	20001bc4 	.word	0x20001bc4

0000dfa0 <__malloc_lock>:
    dfa0:	4801      	ldr	r0, [pc, #4]	; (dfa8 <__malloc_lock+0x8>)
    dfa2:	f7ff bff3 	b.w	df8c <__retarget_lock_acquire_recursive>
    dfa6:	bf00      	nop
    dfa8:	200036b8 	.word	0x200036b8

0000dfac <__malloc_unlock>:
    dfac:	4801      	ldr	r0, [pc, #4]	; (dfb4 <__malloc_unlock+0x8>)
    dfae:	f7ff bfef 	b.w	df90 <__retarget_lock_release_recursive>
    dfb2:	bf00      	nop
    dfb4:	200036b8 	.word	0x200036b8

0000dfb8 <_Balloc>:
    dfb8:	6c43      	ldr	r3, [r0, #68]	; 0x44
    dfba:	b570      	push	{r4, r5, r6, lr}
    dfbc:	4605      	mov	r5, r0
    dfbe:	460c      	mov	r4, r1
    dfc0:	b14b      	cbz	r3, dfd6 <_Balloc+0x1e>
    dfc2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    dfc6:	b180      	cbz	r0, dfea <_Balloc+0x32>
    dfc8:	6802      	ldr	r2, [r0, #0]
    dfca:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    dfce:	2300      	movs	r3, #0
    dfd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
    dfd4:	bd70      	pop	{r4, r5, r6, pc}
    dfd6:	2221      	movs	r2, #33	; 0x21
    dfd8:	2104      	movs	r1, #4
    dfda:	f000 fba9 	bl	e730 <_calloc_r>
    dfde:	4603      	mov	r3, r0
    dfe0:	6468      	str	r0, [r5, #68]	; 0x44
    dfe2:	2800      	cmp	r0, #0
    dfe4:	d1ed      	bne.n	dfc2 <_Balloc+0xa>
    dfe6:	2000      	movs	r0, #0
    dfe8:	bd70      	pop	{r4, r5, r6, pc}
    dfea:	2101      	movs	r1, #1
    dfec:	fa01 f604 	lsl.w	r6, r1, r4
    dff0:	1d72      	adds	r2, r6, #5
    dff2:	0092      	lsls	r2, r2, #2
    dff4:	4628      	mov	r0, r5
    dff6:	f000 fb9b 	bl	e730 <_calloc_r>
    dffa:	2800      	cmp	r0, #0
    dffc:	d0f3      	beq.n	dfe6 <_Balloc+0x2e>
    dffe:	e9c0 4601 	strd	r4, r6, [r0, #4]
    e002:	e7e4      	b.n	dfce <_Balloc+0x16>

0000e004 <_Bfree>:
    e004:	b131      	cbz	r1, e014 <_Bfree+0x10>
    e006:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e008:	684a      	ldr	r2, [r1, #4]
    e00a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    e00e:	6008      	str	r0, [r1, #0]
    e010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    e014:	4770      	bx	lr
    e016:	bf00      	nop

0000e018 <__multadd>:
    e018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e01c:	690e      	ldr	r6, [r1, #16]
    e01e:	4680      	mov	r8, r0
    e020:	460f      	mov	r7, r1
    e022:	461d      	mov	r5, r3
    e024:	f101 0e14 	add.w	lr, r1, #20
    e028:	2000      	movs	r0, #0
    e02a:	f8de 1000 	ldr.w	r1, [lr]
    e02e:	b28c      	uxth	r4, r1
    e030:	fb02 5304 	mla	r3, r2, r4, r5
    e034:	0c09      	lsrs	r1, r1, #16
    e036:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    e03a:	fb02 cc01 	mla	ip, r2, r1, ip
    e03e:	3001      	adds	r0, #1
    e040:	b29c      	uxth	r4, r3
    e042:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    e046:	4286      	cmp	r6, r0
    e048:	f84e 4b04 	str.w	r4, [lr], #4
    e04c:	ea4f 451c 	mov.w	r5, ip, lsr #16
    e050:	dceb      	bgt.n	e02a <__multadd+0x12>
    e052:	b13d      	cbz	r5, e064 <__multadd+0x4c>
    e054:	68bb      	ldr	r3, [r7, #8]
    e056:	42b3      	cmp	r3, r6
    e058:	dd07      	ble.n	e06a <__multadd+0x52>
    e05a:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    e05e:	3601      	adds	r6, #1
    e060:	615d      	str	r5, [r3, #20]
    e062:	613e      	str	r6, [r7, #16]
    e064:	4638      	mov	r0, r7
    e066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e06a:	6879      	ldr	r1, [r7, #4]
    e06c:	4640      	mov	r0, r8
    e06e:	3101      	adds	r1, #1
    e070:	f7ff ffa2 	bl	dfb8 <_Balloc>
    e074:	4604      	mov	r4, r0
    e076:	b1b0      	cbz	r0, e0a6 <__multadd+0x8e>
    e078:	693a      	ldr	r2, [r7, #16]
    e07a:	3202      	adds	r2, #2
    e07c:	f107 010c 	add.w	r1, r7, #12
    e080:	0092      	lsls	r2, r2, #2
    e082:	300c      	adds	r0, #12
    e084:	f7fd fb54 	bl	b730 <memcpy>
    e088:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    e08c:	687a      	ldr	r2, [r7, #4]
    e08e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    e092:	6039      	str	r1, [r7, #0]
    e094:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    e098:	4627      	mov	r7, r4
    e09a:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    e09e:	3601      	adds	r6, #1
    e0a0:	615d      	str	r5, [r3, #20]
    e0a2:	613e      	str	r6, [r7, #16]
    e0a4:	e7de      	b.n	e064 <__multadd+0x4c>
    e0a6:	4b03      	ldr	r3, [pc, #12]	; (e0b4 <__multadd+0x9c>)
    e0a8:	4803      	ldr	r0, [pc, #12]	; (e0b8 <__multadd+0xa0>)
    e0aa:	4622      	mov	r2, r4
    e0ac:	21ba      	movs	r1, #186	; 0xba
    e0ae:	f7ff fecd 	bl	de4c <__assert_func>
    e0b2:	bf00      	nop
    e0b4:	20001148 	.word	0x20001148
    e0b8:	2000115c 	.word	0x2000115c

0000e0bc <__hi0bits>:
    e0bc:	0c03      	lsrs	r3, r0, #16
    e0be:	041b      	lsls	r3, r3, #16
    e0c0:	b9d3      	cbnz	r3, e0f8 <__hi0bits+0x3c>
    e0c2:	0400      	lsls	r0, r0, #16
    e0c4:	2310      	movs	r3, #16
    e0c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    e0ca:	bf04      	itt	eq
    e0cc:	0200      	lsleq	r0, r0, #8
    e0ce:	3308      	addeq	r3, #8
    e0d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    e0d4:	bf04      	itt	eq
    e0d6:	0100      	lsleq	r0, r0, #4
    e0d8:	3304      	addeq	r3, #4
    e0da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    e0de:	bf04      	itt	eq
    e0e0:	0080      	lsleq	r0, r0, #2
    e0e2:	3302      	addeq	r3, #2
    e0e4:	2800      	cmp	r0, #0
    e0e6:	db05      	blt.n	e0f4 <__hi0bits+0x38>
    e0e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    e0ec:	f103 0301 	add.w	r3, r3, #1
    e0f0:	bf08      	it	eq
    e0f2:	2320      	moveq	r3, #32
    e0f4:	4618      	mov	r0, r3
    e0f6:	4770      	bx	lr
    e0f8:	2300      	movs	r3, #0
    e0fa:	e7e4      	b.n	e0c6 <__hi0bits+0xa>

0000e0fc <__lo0bits>:
    e0fc:	6803      	ldr	r3, [r0, #0]
    e0fe:	f013 0207 	ands.w	r2, r3, #7
    e102:	d008      	beq.n	e116 <__lo0bits+0x1a>
    e104:	07d9      	lsls	r1, r3, #31
    e106:	d41f      	bmi.n	e148 <__lo0bits+0x4c>
    e108:	079a      	lsls	r2, r3, #30
    e10a:	d522      	bpl.n	e152 <__lo0bits+0x56>
    e10c:	085b      	lsrs	r3, r3, #1
    e10e:	6003      	str	r3, [r0, #0]
    e110:	2201      	movs	r2, #1
    e112:	4610      	mov	r0, r2
    e114:	4770      	bx	lr
    e116:	b299      	uxth	r1, r3
    e118:	b909      	cbnz	r1, e11e <__lo0bits+0x22>
    e11a:	0c1b      	lsrs	r3, r3, #16
    e11c:	2210      	movs	r2, #16
    e11e:	b2d9      	uxtb	r1, r3
    e120:	b909      	cbnz	r1, e126 <__lo0bits+0x2a>
    e122:	3208      	adds	r2, #8
    e124:	0a1b      	lsrs	r3, r3, #8
    e126:	0719      	lsls	r1, r3, #28
    e128:	bf04      	itt	eq
    e12a:	091b      	lsreq	r3, r3, #4
    e12c:	3204      	addeq	r2, #4
    e12e:	0799      	lsls	r1, r3, #30
    e130:	bf04      	itt	eq
    e132:	089b      	lsreq	r3, r3, #2
    e134:	3202      	addeq	r2, #2
    e136:	07d9      	lsls	r1, r3, #31
    e138:	d403      	bmi.n	e142 <__lo0bits+0x46>
    e13a:	085b      	lsrs	r3, r3, #1
    e13c:	f102 0201 	add.w	r2, r2, #1
    e140:	d005      	beq.n	e14e <__lo0bits+0x52>
    e142:	6003      	str	r3, [r0, #0]
    e144:	4610      	mov	r0, r2
    e146:	4770      	bx	lr
    e148:	2200      	movs	r2, #0
    e14a:	4610      	mov	r0, r2
    e14c:	4770      	bx	lr
    e14e:	2220      	movs	r2, #32
    e150:	e7df      	b.n	e112 <__lo0bits+0x16>
    e152:	089b      	lsrs	r3, r3, #2
    e154:	2202      	movs	r2, #2
    e156:	6003      	str	r3, [r0, #0]
    e158:	4610      	mov	r0, r2
    e15a:	4770      	bx	lr

0000e15c <__i2b>:
    e15c:	b538      	push	{r3, r4, r5, lr}
    e15e:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e160:	4604      	mov	r4, r0
    e162:	460d      	mov	r5, r1
    e164:	b14b      	cbz	r3, e17a <__i2b+0x1e>
    e166:	6858      	ldr	r0, [r3, #4]
    e168:	b1b0      	cbz	r0, e198 <__i2b+0x3c>
    e16a:	6802      	ldr	r2, [r0, #0]
    e16c:	605a      	str	r2, [r3, #4]
    e16e:	2200      	movs	r2, #0
    e170:	2301      	movs	r3, #1
    e172:	e9c0 3504 	strd	r3, r5, [r0, #16]
    e176:	60c2      	str	r2, [r0, #12]
    e178:	bd38      	pop	{r3, r4, r5, pc}
    e17a:	2221      	movs	r2, #33	; 0x21
    e17c:	2104      	movs	r1, #4
    e17e:	f000 fad7 	bl	e730 <_calloc_r>
    e182:	4603      	mov	r3, r0
    e184:	6460      	str	r0, [r4, #68]	; 0x44
    e186:	2800      	cmp	r0, #0
    e188:	d1ed      	bne.n	e166 <__i2b+0xa>
    e18a:	4b09      	ldr	r3, [pc, #36]	; (e1b0 <__i2b+0x54>)
    e18c:	4809      	ldr	r0, [pc, #36]	; (e1b4 <__i2b+0x58>)
    e18e:	2200      	movs	r2, #0
    e190:	f240 1145 	movw	r1, #325	; 0x145
    e194:	f7ff fe5a 	bl	de4c <__assert_func>
    e198:	221c      	movs	r2, #28
    e19a:	2101      	movs	r1, #1
    e19c:	4620      	mov	r0, r4
    e19e:	f000 fac7 	bl	e730 <_calloc_r>
    e1a2:	2800      	cmp	r0, #0
    e1a4:	d0f1      	beq.n	e18a <__i2b+0x2e>
    e1a6:	2201      	movs	r2, #1
    e1a8:	2302      	movs	r3, #2
    e1aa:	e9c0 2301 	strd	r2, r3, [r0, #4]
    e1ae:	e7de      	b.n	e16e <__i2b+0x12>
    e1b0:	20001148 	.word	0x20001148
    e1b4:	2000115c 	.word	0x2000115c

0000e1b8 <__multiply>:
    e1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e1bc:	690e      	ldr	r6, [r1, #16]
    e1be:	6915      	ldr	r5, [r2, #16]
    e1c0:	42ae      	cmp	r6, r5
    e1c2:	b085      	sub	sp, #20
    e1c4:	4688      	mov	r8, r1
    e1c6:	4614      	mov	r4, r2
    e1c8:	db05      	blt.n	e1d6 <__multiply+0x1e>
    e1ca:	462a      	mov	r2, r5
    e1cc:	4623      	mov	r3, r4
    e1ce:	4635      	mov	r5, r6
    e1d0:	460c      	mov	r4, r1
    e1d2:	4616      	mov	r6, r2
    e1d4:	4698      	mov	r8, r3
    e1d6:	68a3      	ldr	r3, [r4, #8]
    e1d8:	6861      	ldr	r1, [r4, #4]
    e1da:	19af      	adds	r7, r5, r6
    e1dc:	42bb      	cmp	r3, r7
    e1de:	bfb8      	it	lt
    e1e0:	3101      	addlt	r1, #1
    e1e2:	f7ff fee9 	bl	dfb8 <_Balloc>
    e1e6:	9001      	str	r0, [sp, #4]
    e1e8:	2800      	cmp	r0, #0
    e1ea:	f000 8087 	beq.w	e2fc <__multiply+0x144>
    e1ee:	9b01      	ldr	r3, [sp, #4]
    e1f0:	f103 0914 	add.w	r9, r3, #20
    e1f4:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    e1f8:	45d1      	cmp	r9, sl
    e1fa:	d205      	bcs.n	e208 <__multiply+0x50>
    e1fc:	464b      	mov	r3, r9
    e1fe:	2200      	movs	r2, #0
    e200:	f843 2b04 	str.w	r2, [r3], #4
    e204:	459a      	cmp	sl, r3
    e206:	d8fb      	bhi.n	e200 <__multiply+0x48>
    e208:	f108 0814 	add.w	r8, r8, #20
    e20c:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    e210:	f104 0314 	add.w	r3, r4, #20
    e214:	45d8      	cmp	r8, fp
    e216:	461a      	mov	r2, r3
    e218:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    e21c:	d25f      	bcs.n	e2de <__multiply+0x126>
    e21e:	1b2b      	subs	r3, r5, r4
    e220:	3b15      	subs	r3, #21
    e222:	f023 0303 	bic.w	r3, r3, #3
    e226:	3304      	adds	r3, #4
    e228:	3415      	adds	r4, #21
    e22a:	42a5      	cmp	r5, r4
    e22c:	bf38      	it	cc
    e22e:	2304      	movcc	r3, #4
    e230:	e9cd a702 	strd	sl, r7, [sp, #8]
    e234:	46ac      	mov	ip, r5
    e236:	461f      	mov	r7, r3
    e238:	4692      	mov	sl, r2
    e23a:	e005      	b.n	e248 <__multiply+0x90>
    e23c:	0c09      	lsrs	r1, r1, #16
    e23e:	d129      	bne.n	e294 <__multiply+0xdc>
    e240:	45c3      	cmp	fp, r8
    e242:	f109 0904 	add.w	r9, r9, #4
    e246:	d948      	bls.n	e2da <__multiply+0x122>
    e248:	f858 1b04 	ldr.w	r1, [r8], #4
    e24c:	b28d      	uxth	r5, r1
    e24e:	2d00      	cmp	r5, #0
    e250:	d0f4      	beq.n	e23c <__multiply+0x84>
    e252:	4656      	mov	r6, sl
    e254:	464c      	mov	r4, r9
    e256:	2300      	movs	r3, #0
    e258:	f856 1b04 	ldr.w	r1, [r6], #4
    e25c:	6822      	ldr	r2, [r4, #0]
    e25e:	fa1f fe81 	uxth.w	lr, r1
    e262:	b290      	uxth	r0, r2
    e264:	0c09      	lsrs	r1, r1, #16
    e266:	fb05 000e 	mla	r0, r5, lr, r0
    e26a:	0c12      	lsrs	r2, r2, #16
    e26c:	4403      	add	r3, r0
    e26e:	fb05 2201 	mla	r2, r5, r1, r2
    e272:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    e276:	b29b      	uxth	r3, r3
    e278:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    e27c:	45b4      	cmp	ip, r6
    e27e:	f844 3b04 	str.w	r3, [r4], #4
    e282:	ea4f 4312 	mov.w	r3, r2, lsr #16
    e286:	d8e7      	bhi.n	e258 <__multiply+0xa0>
    e288:	f849 3007 	str.w	r3, [r9, r7]
    e28c:	f858 1c04 	ldr.w	r1, [r8, #-4]
    e290:	0c09      	lsrs	r1, r1, #16
    e292:	d0d5      	beq.n	e240 <__multiply+0x88>
    e294:	f8d9 3000 	ldr.w	r3, [r9]
    e298:	4650      	mov	r0, sl
    e29a:	461a      	mov	r2, r3
    e29c:	464c      	mov	r4, r9
    e29e:	2600      	movs	r6, #0
    e2a0:	8805      	ldrh	r5, [r0, #0]
    e2a2:	0c12      	lsrs	r2, r2, #16
    e2a4:	fb01 2205 	mla	r2, r1, r5, r2
    e2a8:	4416      	add	r6, r2
    e2aa:	b29b      	uxth	r3, r3
    e2ac:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    e2b0:	f844 3b04 	str.w	r3, [r4], #4
    e2b4:	f850 5b04 	ldr.w	r5, [r0], #4
    e2b8:	6822      	ldr	r2, [r4, #0]
    e2ba:	0c2d      	lsrs	r5, r5, #16
    e2bc:	b293      	uxth	r3, r2
    e2be:	fb01 3305 	mla	r3, r1, r5, r3
    e2c2:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    e2c6:	4584      	cmp	ip, r0
    e2c8:	ea4f 4613 	mov.w	r6, r3, lsr #16
    e2cc:	d8e8      	bhi.n	e2a0 <__multiply+0xe8>
    e2ce:	45c3      	cmp	fp, r8
    e2d0:	f849 3007 	str.w	r3, [r9, r7]
    e2d4:	f109 0904 	add.w	r9, r9, #4
    e2d8:	d8b6      	bhi.n	e248 <__multiply+0x90>
    e2da:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    e2de:	2f00      	cmp	r7, #0
    e2e0:	dc02      	bgt.n	e2e8 <__multiply+0x130>
    e2e2:	e005      	b.n	e2f0 <__multiply+0x138>
    e2e4:	3f01      	subs	r7, #1
    e2e6:	d003      	beq.n	e2f0 <__multiply+0x138>
    e2e8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    e2ec:	2b00      	cmp	r3, #0
    e2ee:	d0f9      	beq.n	e2e4 <__multiply+0x12c>
    e2f0:	9b01      	ldr	r3, [sp, #4]
    e2f2:	4618      	mov	r0, r3
    e2f4:	611f      	str	r7, [r3, #16]
    e2f6:	b005      	add	sp, #20
    e2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e2fc:	4b03      	ldr	r3, [pc, #12]	; (e30c <__multiply+0x154>)
    e2fe:	4804      	ldr	r0, [pc, #16]	; (e310 <__multiply+0x158>)
    e300:	9a01      	ldr	r2, [sp, #4]
    e302:	f44f 71b1 	mov.w	r1, #354	; 0x162
    e306:	f7ff fda1 	bl	de4c <__assert_func>
    e30a:	bf00      	nop
    e30c:	20001148 	.word	0x20001148
    e310:	2000115c 	.word	0x2000115c

0000e314 <__pow5mult>:
    e314:	f012 0303 	ands.w	r3, r2, #3
    e318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e31c:	4614      	mov	r4, r2
    e31e:	4606      	mov	r6, r0
    e320:	d132      	bne.n	e388 <__pow5mult+0x74>
    e322:	460d      	mov	r5, r1
    e324:	10a4      	asrs	r4, r4, #2
    e326:	d020      	beq.n	e36a <__pow5mult+0x56>
    e328:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    e32c:	f1b8 0f00 	cmp.w	r8, #0
    e330:	d033      	beq.n	e39a <__pow5mult+0x86>
    e332:	07e3      	lsls	r3, r4, #31
    e334:	f04f 0700 	mov.w	r7, #0
    e338:	d407      	bmi.n	e34a <__pow5mult+0x36>
    e33a:	1064      	asrs	r4, r4, #1
    e33c:	d015      	beq.n	e36a <__pow5mult+0x56>
    e33e:	f8d8 0000 	ldr.w	r0, [r8]
    e342:	b1a8      	cbz	r0, e370 <__pow5mult+0x5c>
    e344:	4680      	mov	r8, r0
    e346:	07e3      	lsls	r3, r4, #31
    e348:	d5f7      	bpl.n	e33a <__pow5mult+0x26>
    e34a:	4642      	mov	r2, r8
    e34c:	4629      	mov	r1, r5
    e34e:	4630      	mov	r0, r6
    e350:	f7ff ff32 	bl	e1b8 <__multiply>
    e354:	b1b5      	cbz	r5, e384 <__pow5mult+0x70>
    e356:	6869      	ldr	r1, [r5, #4]
    e358:	6c73      	ldr	r3, [r6, #68]	; 0x44
    e35a:	1064      	asrs	r4, r4, #1
    e35c:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    e360:	602a      	str	r2, [r5, #0]
    e362:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    e366:	4605      	mov	r5, r0
    e368:	d1e9      	bne.n	e33e <__pow5mult+0x2a>
    e36a:	4628      	mov	r0, r5
    e36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e370:	4642      	mov	r2, r8
    e372:	4641      	mov	r1, r8
    e374:	4630      	mov	r0, r6
    e376:	f7ff ff1f 	bl	e1b8 <__multiply>
    e37a:	f8c8 0000 	str.w	r0, [r8]
    e37e:	6007      	str	r7, [r0, #0]
    e380:	4680      	mov	r8, r0
    e382:	e7e0      	b.n	e346 <__pow5mult+0x32>
    e384:	4605      	mov	r5, r0
    e386:	e7d8      	b.n	e33a <__pow5mult+0x26>
    e388:	3b01      	subs	r3, #1
    e38a:	4a0f      	ldr	r2, [pc, #60]	; (e3c8 <__pow5mult+0xb4>)
    e38c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    e390:	2300      	movs	r3, #0
    e392:	f7ff fe41 	bl	e018 <__multadd>
    e396:	4605      	mov	r5, r0
    e398:	e7c4      	b.n	e324 <__pow5mult+0x10>
    e39a:	2101      	movs	r1, #1
    e39c:	4630      	mov	r0, r6
    e39e:	f7ff fe0b 	bl	dfb8 <_Balloc>
    e3a2:	4680      	mov	r8, r0
    e3a4:	b140      	cbz	r0, e3b8 <__pow5mult+0xa4>
    e3a6:	2301      	movs	r3, #1
    e3a8:	f240 2271 	movw	r2, #625	; 0x271
    e3ac:	e9c0 3204 	strd	r3, r2, [r0, #16]
    e3b0:	2300      	movs	r3, #0
    e3b2:	6430      	str	r0, [r6, #64]	; 0x40
    e3b4:	6003      	str	r3, [r0, #0]
    e3b6:	e7bc      	b.n	e332 <__pow5mult+0x1e>
    e3b8:	4b04      	ldr	r3, [pc, #16]	; (e3cc <__pow5mult+0xb8>)
    e3ba:	4805      	ldr	r0, [pc, #20]	; (e3d0 <__pow5mult+0xbc>)
    e3bc:	4642      	mov	r2, r8
    e3be:	f240 1145 	movw	r1, #325	; 0x145
    e3c2:	f7ff fd43 	bl	de4c <__assert_func>
    e3c6:	bf00      	nop
    e3c8:	200016fc 	.word	0x200016fc
    e3cc:	20001148 	.word	0x20001148
    e3d0:	2000115c 	.word	0x2000115c

0000e3d4 <__lshift>:
    e3d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e3d8:	460d      	mov	r5, r1
    e3da:	4614      	mov	r4, r2
    e3dc:	692f      	ldr	r7, [r5, #16]
    e3de:	68ab      	ldr	r3, [r5, #8]
    e3e0:	6849      	ldr	r1, [r1, #4]
    e3e2:	eb07 1762 	add.w	r7, r7, r2, asr #5
    e3e6:	1c7e      	adds	r6, r7, #1
    e3e8:	429e      	cmp	r6, r3
    e3ea:	4680      	mov	r8, r0
    e3ec:	ea4f 1962 	mov.w	r9, r2, asr #5
    e3f0:	dd04      	ble.n	e3fc <__lshift+0x28>
    e3f2:	005b      	lsls	r3, r3, #1
    e3f4:	429e      	cmp	r6, r3
    e3f6:	f101 0101 	add.w	r1, r1, #1
    e3fa:	dcfa      	bgt.n	e3f2 <__lshift+0x1e>
    e3fc:	4640      	mov	r0, r8
    e3fe:	f7ff fddb 	bl	dfb8 <_Balloc>
    e402:	4684      	mov	ip, r0
    e404:	2800      	cmp	r0, #0
    e406:	d052      	beq.n	e4ae <__lshift+0xda>
    e408:	f1b9 0f00 	cmp.w	r9, #0
    e40c:	f100 0214 	add.w	r2, r0, #20
    e410:	dd0e      	ble.n	e430 <__lshift+0x5c>
    e412:	f109 0105 	add.w	r1, r9, #5
    e416:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    e41a:	4613      	mov	r3, r2
    e41c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    e420:	2000      	movs	r0, #0
    e422:	f843 0b04 	str.w	r0, [r3], #4
    e426:	428b      	cmp	r3, r1
    e428:	d1fb      	bne.n	e422 <__lshift+0x4e>
    e42a:	f1ae 0314 	sub.w	r3, lr, #20
    e42e:	441a      	add	r2, r3
    e430:	6929      	ldr	r1, [r5, #16]
    e432:	f105 0314 	add.w	r3, r5, #20
    e436:	f014 0e1f 	ands.w	lr, r4, #31
    e43a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    e43e:	d02e      	beq.n	e49e <__lshift+0xca>
    e440:	f1ce 0920 	rsb	r9, lr, #32
    e444:	4610      	mov	r0, r2
    e446:	f04f 0a00 	mov.w	sl, #0
    e44a:	681c      	ldr	r4, [r3, #0]
    e44c:	fa04 f40e 	lsl.w	r4, r4, lr
    e450:	ea44 040a 	orr.w	r4, r4, sl
    e454:	f840 4b04 	str.w	r4, [r0], #4
    e458:	f853 4b04 	ldr.w	r4, [r3], #4
    e45c:	4299      	cmp	r1, r3
    e45e:	fa24 fa09 	lsr.w	sl, r4, r9
    e462:	d8f2      	bhi.n	e44a <__lshift+0x76>
    e464:	1b4b      	subs	r3, r1, r5
    e466:	3b15      	subs	r3, #21
    e468:	f023 0303 	bic.w	r3, r3, #3
    e46c:	3304      	adds	r3, #4
    e46e:	f105 0015 	add.w	r0, r5, #21
    e472:	4281      	cmp	r1, r0
    e474:	bf38      	it	cc
    e476:	2304      	movcc	r3, #4
    e478:	f1ba 0f00 	cmp.w	sl, #0
    e47c:	bf18      	it	ne
    e47e:	4637      	movne	r7, r6
    e480:	f842 a003 	str.w	sl, [r2, r3]
    e484:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    e488:	686a      	ldr	r2, [r5, #4]
    e48a:	f8cc 7010 	str.w	r7, [ip, #16]
    e48e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    e492:	6029      	str	r1, [r5, #0]
    e494:	4660      	mov	r0, ip
    e496:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    e49a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e49e:	3a04      	subs	r2, #4
    e4a0:	f853 0b04 	ldr.w	r0, [r3], #4
    e4a4:	f842 0f04 	str.w	r0, [r2, #4]!
    e4a8:	4299      	cmp	r1, r3
    e4aa:	d8f9      	bhi.n	e4a0 <__lshift+0xcc>
    e4ac:	e7ea      	b.n	e484 <__lshift+0xb0>
    e4ae:	4b03      	ldr	r3, [pc, #12]	; (e4bc <__lshift+0xe8>)
    e4b0:	4803      	ldr	r0, [pc, #12]	; (e4c0 <__lshift+0xec>)
    e4b2:	4662      	mov	r2, ip
    e4b4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    e4b8:	f7ff fcc8 	bl	de4c <__assert_func>
    e4bc:	20001148 	.word	0x20001148
    e4c0:	2000115c 	.word	0x2000115c

0000e4c4 <__mcmp>:
    e4c4:	690b      	ldr	r3, [r1, #16]
    e4c6:	4684      	mov	ip, r0
    e4c8:	6900      	ldr	r0, [r0, #16]
    e4ca:	1ac0      	subs	r0, r0, r3
    e4cc:	d116      	bne.n	e4fc <__mcmp+0x38>
    e4ce:	f10c 0c14 	add.w	ip, ip, #20
    e4d2:	3114      	adds	r1, #20
    e4d4:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    e4d8:	b410      	push	{r4}
    e4da:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    e4de:	e001      	b.n	e4e4 <__mcmp+0x20>
    e4e0:	4594      	cmp	ip, r2
    e4e2:	d208      	bcs.n	e4f6 <__mcmp+0x32>
    e4e4:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    e4e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    e4ec:	428c      	cmp	r4, r1
    e4ee:	d0f7      	beq.n	e4e0 <__mcmp+0x1c>
    e4f0:	d205      	bcs.n	e4fe <__mcmp+0x3a>
    e4f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e4f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    e4fa:	4770      	bx	lr
    e4fc:	4770      	bx	lr
    e4fe:	2001      	movs	r0, #1
    e500:	f85d 4b04 	ldr.w	r4, [sp], #4
    e504:	4770      	bx	lr
    e506:	bf00      	nop

0000e508 <__mdiff>:
    e508:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e50c:	690f      	ldr	r7, [r1, #16]
    e50e:	6913      	ldr	r3, [r2, #16]
    e510:	1aff      	subs	r7, r7, r3
    e512:	2f00      	cmp	r7, #0
    e514:	460e      	mov	r6, r1
    e516:	4690      	mov	r8, r2
    e518:	d17f      	bne.n	e61a <__mdiff+0x112>
    e51a:	f101 0514 	add.w	r5, r1, #20
    e51e:	3214      	adds	r2, #20
    e520:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    e524:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    e528:	e001      	b.n	e52e <__mdiff+0x26>
    e52a:	429d      	cmp	r5, r3
    e52c:	d278      	bcs.n	e620 <__mdiff+0x118>
    e52e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    e532:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    e536:	42a1      	cmp	r1, r4
    e538:	d0f7      	beq.n	e52a <__mdiff+0x22>
    e53a:	d369      	bcc.n	e610 <__mdiff+0x108>
    e53c:	6871      	ldr	r1, [r6, #4]
    e53e:	f7ff fd3b 	bl	dfb8 <_Balloc>
    e542:	4681      	mov	r9, r0
    e544:	2800      	cmp	r0, #0
    e546:	d077      	beq.n	e638 <__mdiff+0x130>
    e548:	6935      	ldr	r5, [r6, #16]
    e54a:	f8d8 2010 	ldr.w	r2, [r8, #16]
    e54e:	60c7      	str	r7, [r0, #12]
    e550:	f108 0e14 	add.w	lr, r8, #20
    e554:	f106 0014 	add.w	r0, r6, #20
    e558:	f109 0a14 	add.w	sl, r9, #20
    e55c:	f106 0110 	add.w	r1, r6, #16
    e560:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    e564:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    e568:	4656      	mov	r6, sl
    e56a:	f04f 0c00 	mov.w	ip, #0
    e56e:	f85e 4b04 	ldr.w	r4, [lr], #4
    e572:	f851 bf04 	ldr.w	fp, [r1, #4]!
    e576:	b2a3      	uxth	r3, r4
    e578:	fa1c fc8b 	uxtah	ip, ip, fp
    e57c:	ebac 0303 	sub.w	r3, ip, r3
    e580:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    e584:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    e588:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    e58c:	b29b      	uxth	r3, r3
    e58e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    e592:	4572      	cmp	r2, lr
    e594:	f846 3b04 	str.w	r3, [r6], #4
    e598:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    e59c:	d8e7      	bhi.n	e56e <__mdiff+0x66>
    e59e:	eba2 0108 	sub.w	r1, r2, r8
    e5a2:	3915      	subs	r1, #21
    e5a4:	f108 0815 	add.w	r8, r8, #21
    e5a8:	4542      	cmp	r2, r8
    e5aa:	f021 0403 	bic.w	r4, r1, #3
    e5ae:	f104 0404 	add.w	r4, r4, #4
    e5b2:	bf38      	it	cc
    e5b4:	2404      	movcc	r4, #4
    e5b6:	4420      	add	r0, r4
    e5b8:	f021 0203 	bic.w	r2, r1, #3
    e5bc:	bf38      	it	cc
    e5be:	2200      	movcc	r2, #0
    e5c0:	4287      	cmp	r7, r0
    e5c2:	4452      	add	r2, sl
    e5c4:	4454      	add	r4, sl
    e5c6:	d918      	bls.n	e5fa <__mdiff+0xf2>
    e5c8:	4626      	mov	r6, r4
    e5ca:	4601      	mov	r1, r0
    e5cc:	f851 3b04 	ldr.w	r3, [r1], #4
    e5d0:	fa1c fc83 	uxtah	ip, ip, r3
    e5d4:	ea4f 422c 	mov.w	r2, ip, asr #16
    e5d8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    e5dc:	fa1f fc8c 	uxth.w	ip, ip
    e5e0:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    e5e4:	428f      	cmp	r7, r1
    e5e6:	f846 3b04 	str.w	r3, [r6], #4
    e5ea:	ea4f 4c22 	mov.w	ip, r2, asr #16
    e5ee:	d8ed      	bhi.n	e5cc <__mdiff+0xc4>
    e5f0:	3f01      	subs	r7, #1
    e5f2:	1a3f      	subs	r7, r7, r0
    e5f4:	f027 0703 	bic.w	r7, r7, #3
    e5f8:	19e2      	adds	r2, r4, r7
    e5fa:	b923      	cbnz	r3, e606 <__mdiff+0xfe>
    e5fc:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    e600:	3d01      	subs	r5, #1
    e602:	2b00      	cmp	r3, #0
    e604:	d0fa      	beq.n	e5fc <__mdiff+0xf4>
    e606:	f8c9 5010 	str.w	r5, [r9, #16]
    e60a:	4648      	mov	r0, r9
    e60c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e610:	4633      	mov	r3, r6
    e612:	2701      	movs	r7, #1
    e614:	4646      	mov	r6, r8
    e616:	4698      	mov	r8, r3
    e618:	e790      	b.n	e53c <__mdiff+0x34>
    e61a:	dbf9      	blt.n	e610 <__mdiff+0x108>
    e61c:	2700      	movs	r7, #0
    e61e:	e78d      	b.n	e53c <__mdiff+0x34>
    e620:	2100      	movs	r1, #0
    e622:	f7ff fcc9 	bl	dfb8 <_Balloc>
    e626:	4681      	mov	r9, r0
    e628:	b168      	cbz	r0, e646 <__mdiff+0x13e>
    e62a:	2201      	movs	r2, #1
    e62c:	2300      	movs	r3, #0
    e62e:	e9c9 2304 	strd	r2, r3, [r9, #16]
    e632:	4648      	mov	r0, r9
    e634:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e638:	4b06      	ldr	r3, [pc, #24]	; (e654 <__mdiff+0x14c>)
    e63a:	4807      	ldr	r0, [pc, #28]	; (e658 <__mdiff+0x150>)
    e63c:	464a      	mov	r2, r9
    e63e:	f240 2145 	movw	r1, #581	; 0x245
    e642:	f7ff fc03 	bl	de4c <__assert_func>
    e646:	4b03      	ldr	r3, [pc, #12]	; (e654 <__mdiff+0x14c>)
    e648:	4803      	ldr	r0, [pc, #12]	; (e658 <__mdiff+0x150>)
    e64a:	464a      	mov	r2, r9
    e64c:	f240 2137 	movw	r1, #567	; 0x237
    e650:	f7ff fbfc 	bl	de4c <__assert_func>
    e654:	20001148 	.word	0x20001148
    e658:	2000115c 	.word	0x2000115c

0000e65c <__d2b>:
    e65c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e660:	4688      	mov	r8, r1
    e662:	b083      	sub	sp, #12
    e664:	2101      	movs	r1, #1
    e666:	ec57 6b10 	vmov	r6, r7, d0
    e66a:	4615      	mov	r5, r2
    e66c:	f7ff fca4 	bl	dfb8 <_Balloc>
    e670:	4604      	mov	r4, r0
    e672:	2800      	cmp	r0, #0
    e674:	d051      	beq.n	e71a <__d2b+0xbe>
    e676:	f3c7 590a 	ubfx	r9, r7, #20, #11
    e67a:	f3c7 0313 	ubfx	r3, r7, #0, #20
    e67e:	f1b9 0f00 	cmp.w	r9, #0
    e682:	d001      	beq.n	e688 <__d2b+0x2c>
    e684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    e688:	2e00      	cmp	r6, #0
    e68a:	9301      	str	r3, [sp, #4]
    e68c:	d118      	bne.n	e6c0 <__d2b+0x64>
    e68e:	a801      	add	r0, sp, #4
    e690:	f7ff fd34 	bl	e0fc <__lo0bits>
    e694:	9a01      	ldr	r2, [sp, #4]
    e696:	6162      	str	r2, [r4, #20]
    e698:	2201      	movs	r2, #1
    e69a:	f100 0320 	add.w	r3, r0, #32
    e69e:	6122      	str	r2, [r4, #16]
    e6a0:	f1b9 0f00 	cmp.w	r9, #0
    e6a4:	d025      	beq.n	e6f2 <__d2b+0x96>
    e6a6:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    e6aa:	eb09 0203 	add.w	r2, r9, r3
    e6ae:	4620      	mov	r0, r4
    e6b0:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    e6b4:	f8c8 2000 	str.w	r2, [r8]
    e6b8:	602b      	str	r3, [r5, #0]
    e6ba:	b003      	add	sp, #12
    e6bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e6c0:	4668      	mov	r0, sp
    e6c2:	9600      	str	r6, [sp, #0]
    e6c4:	f7ff fd1a 	bl	e0fc <__lo0bits>
    e6c8:	4603      	mov	r3, r0
    e6ca:	b310      	cbz	r0, e712 <__d2b+0xb6>
    e6cc:	e9dd 0200 	ldrd	r0, r2, [sp]
    e6d0:	f1c3 0120 	rsb	r1, r3, #32
    e6d4:	fa02 f101 	lsl.w	r1, r2, r1
    e6d8:	4301      	orrs	r1, r0
    e6da:	40da      	lsrs	r2, r3
    e6dc:	6161      	str	r1, [r4, #20]
    e6de:	9201      	str	r2, [sp, #4]
    e6e0:	2a00      	cmp	r2, #0
    e6e2:	61a2      	str	r2, [r4, #24]
    e6e4:	bf14      	ite	ne
    e6e6:	2202      	movne	r2, #2
    e6e8:	2201      	moveq	r2, #1
    e6ea:	6122      	str	r2, [r4, #16]
    e6ec:	f1b9 0f00 	cmp.w	r9, #0
    e6f0:	d1d9      	bne.n	e6a6 <__d2b+0x4a>
    e6f2:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    e6f6:	f8c8 3000 	str.w	r3, [r8]
    e6fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    e6fe:	6918      	ldr	r0, [r3, #16]
    e700:	f7ff fcdc 	bl	e0bc <__hi0bits>
    e704:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    e708:	4620      	mov	r0, r4
    e70a:	602b      	str	r3, [r5, #0]
    e70c:	b003      	add	sp, #12
    e70e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e712:	9a00      	ldr	r2, [sp, #0]
    e714:	6162      	str	r2, [r4, #20]
    e716:	9a01      	ldr	r2, [sp, #4]
    e718:	e7e2      	b.n	e6e0 <__d2b+0x84>
    e71a:	4b03      	ldr	r3, [pc, #12]	; (e728 <__d2b+0xcc>)
    e71c:	4803      	ldr	r0, [pc, #12]	; (e72c <__d2b+0xd0>)
    e71e:	4622      	mov	r2, r4
    e720:	f240 310f 	movw	r1, #783	; 0x30f
    e724:	f7ff fb92 	bl	de4c <__assert_func>
    e728:	20001148 	.word	0x20001148
    e72c:	2000115c 	.word	0x2000115c

0000e730 <_calloc_r>:
    e730:	b538      	push	{r3, r4, r5, lr}
    e732:	fba1 1402 	umull	r1, r4, r1, r2
    e736:	bb8c      	cbnz	r4, e79c <_calloc_r+0x6c>
    e738:	f7ff f82c 	bl	d794 <_malloc_r>
    e73c:	4605      	mov	r5, r0
    e73e:	b1e0      	cbz	r0, e77a <_calloc_r+0x4a>
    e740:	f850 2c04 	ldr.w	r2, [r0, #-4]
    e744:	f022 0203 	bic.w	r2, r2, #3
    e748:	3a04      	subs	r2, #4
    e74a:	2a24      	cmp	r2, #36	; 0x24
    e74c:	d817      	bhi.n	e77e <_calloc_r+0x4e>
    e74e:	2a13      	cmp	r2, #19
    e750:	d91a      	bls.n	e788 <_calloc_r+0x58>
    e752:	2a1b      	cmp	r2, #27
    e754:	e9c0 4400 	strd	r4, r4, [r0]
    e758:	d91d      	bls.n	e796 <_calloc_r+0x66>
    e75a:	2a24      	cmp	r2, #36	; 0x24
    e75c:	bf14      	ite	ne
    e75e:	f100 0210 	addne.w	r2, r0, #16
    e762:	f100 0218 	addeq.w	r2, r0, #24
    e766:	f04f 0300 	mov.w	r3, #0
    e76a:	e9c0 4402 	strd	r4, r4, [r0, #8]
    e76e:	bf04      	itt	eq
    e770:	6104      	streq	r4, [r0, #16]
    e772:	6144      	streq	r4, [r0, #20]
    e774:	e9c2 3300 	strd	r3, r3, [r2]
    e778:	6093      	str	r3, [r2, #8]
    e77a:	4628      	mov	r0, r5
    e77c:	bd38      	pop	{r3, r4, r5, pc}
    e77e:	4621      	mov	r1, r4
    e780:	f7ff fb84 	bl	de8c <memset>
    e784:	4628      	mov	r0, r5
    e786:	bd38      	pop	{r3, r4, r5, pc}
    e788:	4602      	mov	r2, r0
    e78a:	2300      	movs	r3, #0
    e78c:	e9c2 3300 	strd	r3, r3, [r2]
    e790:	6093      	str	r3, [r2, #8]
    e792:	4628      	mov	r0, r5
    e794:	bd38      	pop	{r3, r4, r5, pc}
    e796:	f100 0208 	add.w	r2, r0, #8
    e79a:	e7f6      	b.n	e78a <_calloc_r+0x5a>
    e79c:	f7fe ffb0 	bl	d700 <__errno>
    e7a0:	230c      	movs	r3, #12
    e7a2:	2500      	movs	r5, #0
    e7a4:	6003      	str	r3, [r0, #0]
    e7a6:	e7e8      	b.n	e77a <_calloc_r+0x4a>

0000e7a8 <stdio_exit_handler>:
    e7a8:	4a02      	ldr	r2, [pc, #8]	; (e7b4 <stdio_exit_handler+0xc>)
    e7aa:	4903      	ldr	r1, [pc, #12]	; (e7b8 <stdio_exit_handler+0x10>)
    e7ac:	4803      	ldr	r0, [pc, #12]	; (e7bc <stdio_exit_handler+0x14>)
    e7ae:	f000 bd71 	b.w	f294 <_fwalk_sglue>
    e7b2:	bf00      	nop
    e7b4:	20002140 	.word	0x20002140
    e7b8:	00011fd9 	.word	0x00011fd9
    e7bc:	200018f8 	.word	0x200018f8

0000e7c0 <cleanup_stdio>:
    e7c0:	4b0c      	ldr	r3, [pc, #48]	; (e7f4 <cleanup_stdio+0x34>)
    e7c2:	6841      	ldr	r1, [r0, #4]
    e7c4:	4299      	cmp	r1, r3
    e7c6:	b510      	push	{r4, lr}
    e7c8:	4604      	mov	r4, r0
    e7ca:	d001      	beq.n	e7d0 <cleanup_stdio+0x10>
    e7cc:	f003 fc04 	bl	11fd8 <_fclose_r>
    e7d0:	68a1      	ldr	r1, [r4, #8]
    e7d2:	4b09      	ldr	r3, [pc, #36]	; (e7f8 <cleanup_stdio+0x38>)
    e7d4:	4299      	cmp	r1, r3
    e7d6:	d002      	beq.n	e7de <cleanup_stdio+0x1e>
    e7d8:	4620      	mov	r0, r4
    e7da:	f003 fbfd 	bl	11fd8 <_fclose_r>
    e7de:	68e1      	ldr	r1, [r4, #12]
    e7e0:	4b06      	ldr	r3, [pc, #24]	; (e7fc <cleanup_stdio+0x3c>)
    e7e2:	4299      	cmp	r1, r3
    e7e4:	d004      	beq.n	e7f0 <cleanup_stdio+0x30>
    e7e6:	4620      	mov	r0, r4
    e7e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7ec:	f003 bbf4 	b.w	11fd8 <_fclose_r>
    e7f0:	bd10      	pop	{r4, pc}
    e7f2:	bf00      	nop
    e7f4:	200036f4 	.word	0x200036f4
    e7f8:	2000375c 	.word	0x2000375c
    e7fc:	200037c4 	.word	0x200037c4

0000e800 <global_stdio_init.part.0>:
    e800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e804:	4c2a      	ldr	r4, [pc, #168]	; (e8b0 <global_stdio_init.part.0+0xb0>)
    e806:	4b2b      	ldr	r3, [pc, #172]	; (e8b4 <global_stdio_init.part.0+0xb4>)
    e808:	482b      	ldr	r0, [pc, #172]	; (e8b8 <global_stdio_init.part.0+0xb8>)
    e80a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; e8cc <global_stdio_init.part.0+0xcc>
    e80e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; e8d0 <global_stdio_init.part.0+0xd0>
    e812:	4f2a      	ldr	r7, [pc, #168]	; (e8bc <global_stdio_init.part.0+0xbc>)
    e814:	6018      	str	r0, [r3, #0]
    e816:	2500      	movs	r5, #0
    e818:	2304      	movs	r3, #4
    e81a:	2208      	movs	r2, #8
    e81c:	4629      	mov	r1, r5
    e81e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    e822:	4e27      	ldr	r6, [pc, #156]	; (e8c0 <global_stdio_init.part.0+0xc0>)
    e824:	6665      	str	r5, [r4, #100]	; 0x64
    e826:	e9c4 5302 	strd	r5, r3, [r4, #8]
    e82a:	e9c4 5500 	strd	r5, r5, [r4]
    e82e:	e9c4 5504 	strd	r5, r5, [r4, #16]
    e832:	61a5      	str	r5, [r4, #24]
    e834:	f7ff fb2a 	bl	de8c <memset>
    e838:	4b22      	ldr	r3, [pc, #136]	; (e8c4 <global_stdio_init.part.0+0xc4>)
    e83a:	6763      	str	r3, [r4, #116]	; 0x74
    e83c:	2208      	movs	r2, #8
    e83e:	4629      	mov	r1, r5
    e840:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    e844:	e9c4 4907 	strd	r4, r9, [r4, #28]
    e848:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    e84c:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    e850:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    e854:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    e858:	6725      	str	r5, [r4, #112]	; 0x70
    e85a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    e85e:	62e6      	str	r6, [r4, #44]	; 0x2c
    e860:	f7ff fb14 	bl	de8c <memset>
    e864:	4b18      	ldr	r3, [pc, #96]	; (e8c8 <global_stdio_init.part.0+0xc8>)
    e866:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    e86a:	4629      	mov	r1, r5
    e86c:	f104 0368 	add.w	r3, r4, #104	; 0x68
    e870:	2208      	movs	r2, #8
    e872:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    e876:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    e87a:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    e87e:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    e882:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    e886:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    e88a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    e88e:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    e892:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    e896:	f7ff faf9 	bl	de8c <memset>
    e89a:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    e89e:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    e8a2:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    e8a6:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    e8aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e8ae:	bf00      	nop
    e8b0:	200036f4 	.word	0x200036f4
    e8b4:	2000382c 	.word	0x2000382c
    e8b8:	0000e7a9 	.word	0x0000e7a9
    e8bc:	0000f22d 	.word	0x0000f22d
    e8c0:	0000f24d 	.word	0x0000f24d
    e8c4:	00010009 	.word	0x00010009
    e8c8:	00020012 	.word	0x00020012
    e8cc:	0000f1c9 	.word	0x0000f1c9
    e8d0:	0000f1ed 	.word	0x0000f1ed

0000e8d4 <__sinit>:
    e8d4:	b510      	push	{r4, lr}
    e8d6:	4604      	mov	r4, r0
    e8d8:	480a      	ldr	r0, [pc, #40]	; (e904 <__sinit+0x30>)
    e8da:	f7ff fb57 	bl	df8c <__retarget_lock_acquire_recursive>
    e8de:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e8e0:	b923      	cbnz	r3, e8ec <__sinit+0x18>
    e8e2:	4b09      	ldr	r3, [pc, #36]	; (e908 <__sinit+0x34>)
    e8e4:	4a09      	ldr	r2, [pc, #36]	; (e90c <__sinit+0x38>)
    e8e6:	681b      	ldr	r3, [r3, #0]
    e8e8:	6362      	str	r2, [r4, #52]	; 0x34
    e8ea:	b123      	cbz	r3, e8f6 <__sinit+0x22>
    e8ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e8f0:	4804      	ldr	r0, [pc, #16]	; (e904 <__sinit+0x30>)
    e8f2:	f7ff bb4d 	b.w	df90 <__retarget_lock_release_recursive>
    e8f6:	f7ff ff83 	bl	e800 <global_stdio_init.part.0>
    e8fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e8fe:	4801      	ldr	r0, [pc, #4]	; (e904 <__sinit+0x30>)
    e900:	f7ff bb46 	b.w	df90 <__retarget_lock_release_recursive>
    e904:	200036bc 	.word	0x200036bc
    e908:	2000382c 	.word	0x2000382c
    e90c:	0000e7c1 	.word	0x0000e7c1

0000e910 <__sfp_lock_acquire>:
    e910:	4801      	ldr	r0, [pc, #4]	; (e918 <__sfp_lock_acquire+0x8>)
    e912:	f7ff bb3b 	b.w	df8c <__retarget_lock_acquire_recursive>
    e916:	bf00      	nop
    e918:	200036bc 	.word	0x200036bc

0000e91c <__sfp_lock_release>:
    e91c:	4801      	ldr	r0, [pc, #4]	; (e924 <__sfp_lock_release+0x8>)
    e91e:	f7ff bb37 	b.w	df90 <__retarget_lock_release_recursive>
    e922:	bf00      	nop
    e924:	200036bc 	.word	0x200036bc
	...

0000e930 <memchr>:
    e930:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e934:	2a10      	cmp	r2, #16
    e936:	db2b      	blt.n	e990 <memchr+0x60>
    e938:	f010 0f07 	tst.w	r0, #7
    e93c:	d008      	beq.n	e950 <memchr+0x20>
    e93e:	f810 3b01 	ldrb.w	r3, [r0], #1
    e942:	3a01      	subs	r2, #1
    e944:	428b      	cmp	r3, r1
    e946:	d02d      	beq.n	e9a4 <memchr+0x74>
    e948:	f010 0f07 	tst.w	r0, #7
    e94c:	b342      	cbz	r2, e9a0 <memchr+0x70>
    e94e:	d1f6      	bne.n	e93e <memchr+0xe>
    e950:	b4f0      	push	{r4, r5, r6, r7}
    e952:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    e956:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    e95a:	f022 0407 	bic.w	r4, r2, #7
    e95e:	f07f 0700 	mvns.w	r7, #0
    e962:	2300      	movs	r3, #0
    e964:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    e968:	3c08      	subs	r4, #8
    e96a:	ea85 0501 	eor.w	r5, r5, r1
    e96e:	ea86 0601 	eor.w	r6, r6, r1
    e972:	fa85 f547 	uadd8	r5, r5, r7
    e976:	faa3 f587 	sel	r5, r3, r7
    e97a:	fa86 f647 	uadd8	r6, r6, r7
    e97e:	faa5 f687 	sel	r6, r5, r7
    e982:	b98e      	cbnz	r6, e9a8 <memchr+0x78>
    e984:	d1ee      	bne.n	e964 <memchr+0x34>
    e986:	bcf0      	pop	{r4, r5, r6, r7}
    e988:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e98c:	f002 0207 	and.w	r2, r2, #7
    e990:	b132      	cbz	r2, e9a0 <memchr+0x70>
    e992:	f810 3b01 	ldrb.w	r3, [r0], #1
    e996:	3a01      	subs	r2, #1
    e998:	ea83 0301 	eor.w	r3, r3, r1
    e99c:	b113      	cbz	r3, e9a4 <memchr+0x74>
    e99e:	d1f8      	bne.n	e992 <memchr+0x62>
    e9a0:	2000      	movs	r0, #0
    e9a2:	4770      	bx	lr
    e9a4:	3801      	subs	r0, #1
    e9a6:	4770      	bx	lr
    e9a8:	2d00      	cmp	r5, #0
    e9aa:	bf06      	itte	eq
    e9ac:	4635      	moveq	r5, r6
    e9ae:	3803      	subeq	r0, #3
    e9b0:	3807      	subne	r0, #7
    e9b2:	f015 0f01 	tst.w	r5, #1
    e9b6:	d107      	bne.n	e9c8 <memchr+0x98>
    e9b8:	3001      	adds	r0, #1
    e9ba:	f415 7f80 	tst.w	r5, #256	; 0x100
    e9be:	bf02      	ittt	eq
    e9c0:	3001      	addeq	r0, #1
    e9c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    e9c6:	3001      	addeq	r0, #1
    e9c8:	bcf0      	pop	{r4, r5, r6, r7}
    e9ca:	3801      	subs	r0, #1
    e9cc:	4770      	bx	lr
    e9ce:	bf00      	nop

0000e9d0 <_vasnprintf_r>:
    e9d0:	b530      	push	{r4, r5, lr}
    e9d2:	6814      	ldr	r4, [r2, #0]
    e9d4:	4615      	mov	r5, r2
    e9d6:	b09b      	sub	sp, #108	; 0x6c
    e9d8:	461a      	mov	r2, r3
    e9da:	b109      	cbz	r1, e9e0 <_vasnprintf_r+0x10>
    e9dc:	2c00      	cmp	r4, #0
    e9de:	d119      	bne.n	ea14 <_vasnprintf_r+0x44>
    e9e0:	2100      	movs	r1, #0
    e9e2:	f44f 7322 	mov.w	r3, #648	; 0x288
    e9e6:	f8ad 300c 	strh.w	r3, [sp, #12]
    e9ea:	9100      	str	r1, [sp, #0]
    e9ec:	9104      	str	r1, [sp, #16]
    e9ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e9f2:	9102      	str	r1, [sp, #8]
    e9f4:	9105      	str	r1, [sp, #20]
    e9f6:	f8ad 300e 	strh.w	r3, [sp, #14]
    e9fa:	4669      	mov	r1, sp
    e9fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    e9fe:	f000 fc83 	bl	f308 <_svfprintf_r>
    ea02:	2800      	cmp	r0, #0
    ea04:	db13      	blt.n	ea2e <_vasnprintf_r+0x5e>
    ea06:	9b00      	ldr	r3, [sp, #0]
    ea08:	6028      	str	r0, [r5, #0]
    ea0a:	2200      	movs	r2, #0
    ea0c:	701a      	strb	r2, [r3, #0]
    ea0e:	9804      	ldr	r0, [sp, #16]
    ea10:	b01b      	add	sp, #108	; 0x6c
    ea12:	bd30      	pop	{r4, r5, pc}
    ea14:	f44f 63c1 	mov.w	r3, #1544	; 0x608
    ea18:	9100      	str	r1, [sp, #0]
    ea1a:	9104      	str	r1, [sp, #16]
    ea1c:	f8ad 300c 	strh.w	r3, [sp, #12]
    ea20:	4621      	mov	r1, r4
    ea22:	dae4      	bge.n	e9ee <_vasnprintf_r+0x1e>
    ea24:	238b      	movs	r3, #139	; 0x8b
    ea26:	6003      	str	r3, [r0, #0]
    ea28:	2000      	movs	r0, #0
    ea2a:	b01b      	add	sp, #108	; 0x6c
    ea2c:	bd30      	pop	{r4, r5, pc}
    ea2e:	2000      	movs	r0, #0
    ea30:	e7ee      	b.n	ea10 <_vasnprintf_r+0x40>
    ea32:	bf00      	nop
	...

0000ea40 <strlen>:
    ea40:	f890 f000 	pld	[r0]
    ea44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    ea48:	f020 0107 	bic.w	r1, r0, #7
    ea4c:	f06f 0c00 	mvn.w	ip, #0
    ea50:	f010 0407 	ands.w	r4, r0, #7
    ea54:	f891 f020 	pld	[r1, #32]
    ea58:	f040 8049 	bne.w	eaee <strlen+0xae>
    ea5c:	f04f 0400 	mov.w	r4, #0
    ea60:	f06f 0007 	mvn.w	r0, #7
    ea64:	e9d1 2300 	ldrd	r2, r3, [r1]
    ea68:	f891 f040 	pld	[r1, #64]	; 0x40
    ea6c:	f100 0008 	add.w	r0, r0, #8
    ea70:	fa82 f24c 	uadd8	r2, r2, ip
    ea74:	faa4 f28c 	sel	r2, r4, ip
    ea78:	fa83 f34c 	uadd8	r3, r3, ip
    ea7c:	faa2 f38c 	sel	r3, r2, ip
    ea80:	bb4b      	cbnz	r3, ead6 <strlen+0x96>
    ea82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    ea86:	fa82 f24c 	uadd8	r2, r2, ip
    ea8a:	f100 0008 	add.w	r0, r0, #8
    ea8e:	faa4 f28c 	sel	r2, r4, ip
    ea92:	fa83 f34c 	uadd8	r3, r3, ip
    ea96:	faa2 f38c 	sel	r3, r2, ip
    ea9a:	b9e3      	cbnz	r3, ead6 <strlen+0x96>
    ea9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    eaa0:	fa82 f24c 	uadd8	r2, r2, ip
    eaa4:	f100 0008 	add.w	r0, r0, #8
    eaa8:	faa4 f28c 	sel	r2, r4, ip
    eaac:	fa83 f34c 	uadd8	r3, r3, ip
    eab0:	faa2 f38c 	sel	r3, r2, ip
    eab4:	b97b      	cbnz	r3, ead6 <strlen+0x96>
    eab6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    eaba:	f101 0120 	add.w	r1, r1, #32
    eabe:	fa82 f24c 	uadd8	r2, r2, ip
    eac2:	f100 0008 	add.w	r0, r0, #8
    eac6:	faa4 f28c 	sel	r2, r4, ip
    eaca:	fa83 f34c 	uadd8	r3, r3, ip
    eace:	faa2 f38c 	sel	r3, r2, ip
    ead2:	2b00      	cmp	r3, #0
    ead4:	d0c6      	beq.n	ea64 <strlen+0x24>
    ead6:	2a00      	cmp	r2, #0
    ead8:	bf04      	itt	eq
    eada:	3004      	addeq	r0, #4
    eadc:	461a      	moveq	r2, r3
    eade:	ba12      	rev	r2, r2
    eae0:	fab2 f282 	clz	r2, r2
    eae4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    eae8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    eaec:	4770      	bx	lr
    eaee:	e9d1 2300 	ldrd	r2, r3, [r1]
    eaf2:	f004 0503 	and.w	r5, r4, #3
    eaf6:	f1c4 0000 	rsb	r0, r4, #0
    eafa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    eafe:	f014 0f04 	tst.w	r4, #4
    eb02:	f891 f040 	pld	[r1, #64]	; 0x40
    eb06:	fa0c f505 	lsl.w	r5, ip, r5
    eb0a:	ea62 0205 	orn	r2, r2, r5
    eb0e:	bf1c      	itt	ne
    eb10:	ea63 0305 	ornne	r3, r3, r5
    eb14:	4662      	movne	r2, ip
    eb16:	f04f 0400 	mov.w	r4, #0
    eb1a:	e7a9      	b.n	ea70 <strlen+0x30>

0000eb1c <_realloc_r>:
    eb1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb20:	4617      	mov	r7, r2
    eb22:	2900      	cmp	r1, #0
    eb24:	f000 8098 	beq.w	ec58 <_realloc_r+0x13c>
    eb28:	460c      	mov	r4, r1
    eb2a:	f107 050b 	add.w	r5, r7, #11
    eb2e:	4680      	mov	r8, r0
    eb30:	f7ff fa36 	bl	dfa0 <__malloc_lock>
    eb34:	2d16      	cmp	r5, #22
    eb36:	f854 1c04 	ldr.w	r1, [r4, #-4]
    eb3a:	d85b      	bhi.n	ebf4 <_realloc_r+0xd8>
    eb3c:	2510      	movs	r5, #16
    eb3e:	462a      	mov	r2, r5
    eb40:	42af      	cmp	r7, r5
    eb42:	d85c      	bhi.n	ebfe <_realloc_r+0xe2>
    eb44:	f021 0603 	bic.w	r6, r1, #3
    eb48:	4296      	cmp	r6, r2
    eb4a:	f1a4 0908 	sub.w	r9, r4, #8
    eb4e:	da62      	bge.n	ec16 <_realloc_r+0xfa>
    eb50:	4bbc      	ldr	r3, [pc, #752]	; (ee44 <_realloc_r+0x328>)
    eb52:	f8d3 c008 	ldr.w	ip, [r3, #8]
    eb56:	eb09 0006 	add.w	r0, r9, r6
    eb5a:	4584      	cmp	ip, r0
    eb5c:	f000 8097 	beq.w	ec8e <_realloc_r+0x172>
    eb60:	f8d0 c004 	ldr.w	ip, [r0, #4]
    eb64:	f02c 0301 	bic.w	r3, ip, #1
    eb68:	4403      	add	r3, r0
    eb6a:	685b      	ldr	r3, [r3, #4]
    eb6c:	07db      	lsls	r3, r3, #31
    eb6e:	d468      	bmi.n	ec42 <_realloc_r+0x126>
    eb70:	f02c 0c03 	bic.w	ip, ip, #3
    eb74:	eb06 030c 	add.w	r3, r6, ip
    eb78:	4293      	cmp	r3, r2
    eb7a:	da47      	bge.n	ec0c <_realloc_r+0xf0>
    eb7c:	07cb      	lsls	r3, r1, #31
    eb7e:	d410      	bmi.n	eba2 <_realloc_r+0x86>
    eb80:	f854 3c08 	ldr.w	r3, [r4, #-8]
    eb84:	eba9 0a03 	sub.w	sl, r9, r3
    eb88:	f8da 3004 	ldr.w	r3, [sl, #4]
    eb8c:	f023 0103 	bic.w	r1, r3, #3
    eb90:	448c      	add	ip, r1
    eb92:	44b4      	add	ip, r6
    eb94:	4594      	cmp	ip, r2
    eb96:	f280 8111 	bge.w	edbc <_realloc_r+0x2a0>
    eb9a:	1873      	adds	r3, r6, r1
    eb9c:	4293      	cmp	r3, r2
    eb9e:	f280 80e8 	bge.w	ed72 <_realloc_r+0x256>
    eba2:	4639      	mov	r1, r7
    eba4:	4640      	mov	r0, r8
    eba6:	f7fe fdf5 	bl	d794 <_malloc_r>
    ebaa:	4607      	mov	r7, r0
    ebac:	b1e0      	cbz	r0, ebe8 <_realloc_r+0xcc>
    ebae:	f854 3c04 	ldr.w	r3, [r4, #-4]
    ebb2:	f023 0301 	bic.w	r3, r3, #1
    ebb6:	444b      	add	r3, r9
    ebb8:	f1a0 0208 	sub.w	r2, r0, #8
    ebbc:	4293      	cmp	r3, r2
    ebbe:	f000 80d2 	beq.w	ed66 <_realloc_r+0x24a>
    ebc2:	1f32      	subs	r2, r6, #4
    ebc4:	2a24      	cmp	r2, #36	; 0x24
    ebc6:	f200 80f5 	bhi.w	edb4 <_realloc_r+0x298>
    ebca:	2a13      	cmp	r2, #19
    ebcc:	f200 80ac 	bhi.w	ed28 <_realloc_r+0x20c>
    ebd0:	4603      	mov	r3, r0
    ebd2:	4622      	mov	r2, r4
    ebd4:	6811      	ldr	r1, [r2, #0]
    ebd6:	6019      	str	r1, [r3, #0]
    ebd8:	6851      	ldr	r1, [r2, #4]
    ebda:	6059      	str	r1, [r3, #4]
    ebdc:	6892      	ldr	r2, [r2, #8]
    ebde:	609a      	str	r2, [r3, #8]
    ebe0:	4621      	mov	r1, r4
    ebe2:	4640      	mov	r0, r8
    ebe4:	f000 f9d6 	bl	ef94 <_free_r>
    ebe8:	4640      	mov	r0, r8
    ebea:	f7ff f9df 	bl	dfac <__malloc_unlock>
    ebee:	4638      	mov	r0, r7
    ebf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ebf4:	f025 0507 	bic.w	r5, r5, #7
    ebf8:	2d00      	cmp	r5, #0
    ebfa:	462a      	mov	r2, r5
    ebfc:	daa0      	bge.n	eb40 <_realloc_r+0x24>
    ebfe:	230c      	movs	r3, #12
    ec00:	f8c8 3000 	str.w	r3, [r8]
    ec04:	2700      	movs	r7, #0
    ec06:	4638      	mov	r0, r7
    ec08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec0c:	461e      	mov	r6, r3
    ec0e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    ec12:	60d3      	str	r3, [r2, #12]
    ec14:	609a      	str	r2, [r3, #8]
    ec16:	1b73      	subs	r3, r6, r5
    ec18:	2b0f      	cmp	r3, #15
    ec1a:	d822      	bhi.n	ec62 <_realloc_r+0x146>
    ec1c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    ec20:	f003 0301 	and.w	r3, r3, #1
    ec24:	4333      	orrs	r3, r6
    ec26:	444e      	add	r6, r9
    ec28:	f8c9 3004 	str.w	r3, [r9, #4]
    ec2c:	6873      	ldr	r3, [r6, #4]
    ec2e:	f043 0301 	orr.w	r3, r3, #1
    ec32:	6073      	str	r3, [r6, #4]
    ec34:	4640      	mov	r0, r8
    ec36:	4627      	mov	r7, r4
    ec38:	f7ff f9b8 	bl	dfac <__malloc_unlock>
    ec3c:	4638      	mov	r0, r7
    ec3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec42:	07c9      	lsls	r1, r1, #31
    ec44:	d4ad      	bmi.n	eba2 <_realloc_r+0x86>
    ec46:	f854 3c08 	ldr.w	r3, [r4, #-8]
    ec4a:	eba9 0a03 	sub.w	sl, r9, r3
    ec4e:	f8da 1004 	ldr.w	r1, [sl, #4]
    ec52:	f021 0103 	bic.w	r1, r1, #3
    ec56:	e7a0      	b.n	eb9a <_realloc_r+0x7e>
    ec58:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec5c:	4611      	mov	r1, r2
    ec5e:	f7fe bd99 	b.w	d794 <_malloc_r>
    ec62:	f8d9 2004 	ldr.w	r2, [r9, #4]
    ec66:	eb09 0105 	add.w	r1, r9, r5
    ec6a:	f002 0201 	and.w	r2, r2, #1
    ec6e:	444e      	add	r6, r9
    ec70:	f043 0301 	orr.w	r3, r3, #1
    ec74:	432a      	orrs	r2, r5
    ec76:	f8c9 2004 	str.w	r2, [r9, #4]
    ec7a:	604b      	str	r3, [r1, #4]
    ec7c:	6873      	ldr	r3, [r6, #4]
    ec7e:	f043 0301 	orr.w	r3, r3, #1
    ec82:	3108      	adds	r1, #8
    ec84:	6073      	str	r3, [r6, #4]
    ec86:	4640      	mov	r0, r8
    ec88:	f000 f984 	bl	ef94 <_free_r>
    ec8c:	e7d2      	b.n	ec34 <_realloc_r+0x118>
    ec8e:	f8dc 0004 	ldr.w	r0, [ip, #4]
    ec92:	f020 0b03 	bic.w	fp, r0, #3
    ec96:	eb06 0c0b 	add.w	ip, r6, fp
    ec9a:	f105 0010 	add.w	r0, r5, #16
    ec9e:	4584      	cmp	ip, r0
    eca0:	da4d      	bge.n	ed3e <_realloc_r+0x222>
    eca2:	07c9      	lsls	r1, r1, #31
    eca4:	f53f af7d 	bmi.w	eba2 <_realloc_r+0x86>
    eca8:	f854 1c08 	ldr.w	r1, [r4, #-8]
    ecac:	eba9 0a01 	sub.w	sl, r9, r1
    ecb0:	f8da 1004 	ldr.w	r1, [sl, #4]
    ecb4:	f021 0103 	bic.w	r1, r1, #3
    ecb8:	448b      	add	fp, r1
    ecba:	44b3      	add	fp, r6
    ecbc:	4558      	cmp	r0, fp
    ecbe:	f73f af6c 	bgt.w	eb9a <_realloc_r+0x7e>
    ecc2:	4657      	mov	r7, sl
    ecc4:	f8da 100c 	ldr.w	r1, [sl, #12]
    ecc8:	f857 0f08 	ldr.w	r0, [r7, #8]!
    eccc:	1f32      	subs	r2, r6, #4
    ecce:	2a24      	cmp	r2, #36	; 0x24
    ecd0:	60c1      	str	r1, [r0, #12]
    ecd2:	6088      	str	r0, [r1, #8]
    ecd4:	f200 80db 	bhi.w	ee8e <_realloc_r+0x372>
    ecd8:	2a13      	cmp	r2, #19
    ecda:	f240 80d6 	bls.w	ee8a <_realloc_r+0x36e>
    ecde:	6821      	ldr	r1, [r4, #0]
    ece0:	f8ca 1008 	str.w	r1, [sl, #8]
    ece4:	6861      	ldr	r1, [r4, #4]
    ece6:	f8ca 100c 	str.w	r1, [sl, #12]
    ecea:	2a1b      	cmp	r2, #27
    ecec:	f200 80df 	bhi.w	eeae <_realloc_r+0x392>
    ecf0:	3408      	adds	r4, #8
    ecf2:	f10a 0210 	add.w	r2, sl, #16
    ecf6:	6821      	ldr	r1, [r4, #0]
    ecf8:	6011      	str	r1, [r2, #0]
    ecfa:	6861      	ldr	r1, [r4, #4]
    ecfc:	6051      	str	r1, [r2, #4]
    ecfe:	68a1      	ldr	r1, [r4, #8]
    ed00:	6091      	str	r1, [r2, #8]
    ed02:	eb0a 0105 	add.w	r1, sl, r5
    ed06:	ebab 0205 	sub.w	r2, fp, r5
    ed0a:	f042 0201 	orr.w	r2, r2, #1
    ed0e:	6099      	str	r1, [r3, #8]
    ed10:	604a      	str	r2, [r1, #4]
    ed12:	f8da 3004 	ldr.w	r3, [sl, #4]
    ed16:	f003 0301 	and.w	r3, r3, #1
    ed1a:	432b      	orrs	r3, r5
    ed1c:	4640      	mov	r0, r8
    ed1e:	f8ca 3004 	str.w	r3, [sl, #4]
    ed22:	f7ff f943 	bl	dfac <__malloc_unlock>
    ed26:	e76e      	b.n	ec06 <_realloc_r+0xea>
    ed28:	6823      	ldr	r3, [r4, #0]
    ed2a:	6003      	str	r3, [r0, #0]
    ed2c:	6863      	ldr	r3, [r4, #4]
    ed2e:	6043      	str	r3, [r0, #4]
    ed30:	2a1b      	cmp	r2, #27
    ed32:	d868      	bhi.n	ee06 <_realloc_r+0x2ea>
    ed34:	f104 0208 	add.w	r2, r4, #8
    ed38:	f100 0308 	add.w	r3, r0, #8
    ed3c:	e74a      	b.n	ebd4 <_realloc_r+0xb8>
    ed3e:	eb09 0205 	add.w	r2, r9, r5
    ed42:	609a      	str	r2, [r3, #8]
    ed44:	ebac 0305 	sub.w	r3, ip, r5
    ed48:	f043 0301 	orr.w	r3, r3, #1
    ed4c:	6053      	str	r3, [r2, #4]
    ed4e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    ed52:	f003 0301 	and.w	r3, r3, #1
    ed56:	432b      	orrs	r3, r5
    ed58:	4640      	mov	r0, r8
    ed5a:	f844 3c04 	str.w	r3, [r4, #-4]
    ed5e:	f7ff f925 	bl	dfac <__malloc_unlock>
    ed62:	4627      	mov	r7, r4
    ed64:	e74f      	b.n	ec06 <_realloc_r+0xea>
    ed66:	f850 3c04 	ldr.w	r3, [r0, #-4]
    ed6a:	f023 0303 	bic.w	r3, r3, #3
    ed6e:	441e      	add	r6, r3
    ed70:	e751      	b.n	ec16 <_realloc_r+0xfa>
    ed72:	4657      	mov	r7, sl
    ed74:	f8da 100c 	ldr.w	r1, [sl, #12]
    ed78:	f857 0f08 	ldr.w	r0, [r7, #8]!
    ed7c:	1f32      	subs	r2, r6, #4
    ed7e:	2a24      	cmp	r2, #36	; 0x24
    ed80:	60c1      	str	r1, [r0, #12]
    ed82:	6088      	str	r0, [r1, #8]
    ed84:	d84c      	bhi.n	ee20 <_realloc_r+0x304>
    ed86:	2a13      	cmp	r2, #19
    ed88:	d948      	bls.n	ee1c <_realloc_r+0x300>
    ed8a:	6821      	ldr	r1, [r4, #0]
    ed8c:	f8ca 1008 	str.w	r1, [sl, #8]
    ed90:	6861      	ldr	r1, [r4, #4]
    ed92:	f8ca 100c 	str.w	r1, [sl, #12]
    ed96:	2a1b      	cmp	r2, #27
    ed98:	d856      	bhi.n	ee48 <_realloc_r+0x32c>
    ed9a:	3408      	adds	r4, #8
    ed9c:	f10a 0210 	add.w	r2, sl, #16
    eda0:	461e      	mov	r6, r3
    eda2:	6823      	ldr	r3, [r4, #0]
    eda4:	6013      	str	r3, [r2, #0]
    eda6:	6863      	ldr	r3, [r4, #4]
    eda8:	6053      	str	r3, [r2, #4]
    edaa:	68a3      	ldr	r3, [r4, #8]
    edac:	6093      	str	r3, [r2, #8]
    edae:	46d1      	mov	r9, sl
    edb0:	463c      	mov	r4, r7
    edb2:	e730      	b.n	ec16 <_realloc_r+0xfa>
    edb4:	4621      	mov	r1, r4
    edb6:	f7fe ffcd 	bl	dd54 <memmove>
    edba:	e711      	b.n	ebe0 <_realloc_r+0xc4>
    edbc:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    edc0:	4657      	mov	r7, sl
    edc2:	60cb      	str	r3, [r1, #12]
    edc4:	6099      	str	r1, [r3, #8]
    edc6:	f857 1f08 	ldr.w	r1, [r7, #8]!
    edca:	f8da 300c 	ldr.w	r3, [sl, #12]
    edce:	60cb      	str	r3, [r1, #12]
    edd0:	1f32      	subs	r2, r6, #4
    edd2:	2a24      	cmp	r2, #36	; 0x24
    edd4:	6099      	str	r1, [r3, #8]
    edd6:	d82d      	bhi.n	ee34 <_realloc_r+0x318>
    edd8:	2a13      	cmp	r2, #19
    edda:	d929      	bls.n	ee30 <_realloc_r+0x314>
    eddc:	6823      	ldr	r3, [r4, #0]
    edde:	f8ca 3008 	str.w	r3, [sl, #8]
    ede2:	6863      	ldr	r3, [r4, #4]
    ede4:	f8ca 300c 	str.w	r3, [sl, #12]
    ede8:	2a1b      	cmp	r2, #27
    edea:	d842      	bhi.n	ee72 <_realloc_r+0x356>
    edec:	3408      	adds	r4, #8
    edee:	f10a 0310 	add.w	r3, sl, #16
    edf2:	6822      	ldr	r2, [r4, #0]
    edf4:	601a      	str	r2, [r3, #0]
    edf6:	6862      	ldr	r2, [r4, #4]
    edf8:	605a      	str	r2, [r3, #4]
    edfa:	68a2      	ldr	r2, [r4, #8]
    edfc:	609a      	str	r2, [r3, #8]
    edfe:	4666      	mov	r6, ip
    ee00:	46d1      	mov	r9, sl
    ee02:	463c      	mov	r4, r7
    ee04:	e707      	b.n	ec16 <_realloc_r+0xfa>
    ee06:	68a3      	ldr	r3, [r4, #8]
    ee08:	6083      	str	r3, [r0, #8]
    ee0a:	68e3      	ldr	r3, [r4, #12]
    ee0c:	60c3      	str	r3, [r0, #12]
    ee0e:	2a24      	cmp	r2, #36	; 0x24
    ee10:	d026      	beq.n	ee60 <_realloc_r+0x344>
    ee12:	f104 0210 	add.w	r2, r4, #16
    ee16:	f100 0310 	add.w	r3, r0, #16
    ee1a:	e6db      	b.n	ebd4 <_realloc_r+0xb8>
    ee1c:	463a      	mov	r2, r7
    ee1e:	e7bf      	b.n	eda0 <_realloc_r+0x284>
    ee20:	4621      	mov	r1, r4
    ee22:	4638      	mov	r0, r7
    ee24:	461e      	mov	r6, r3
    ee26:	46d1      	mov	r9, sl
    ee28:	f7fe ff94 	bl	dd54 <memmove>
    ee2c:	463c      	mov	r4, r7
    ee2e:	e6f2      	b.n	ec16 <_realloc_r+0xfa>
    ee30:	463b      	mov	r3, r7
    ee32:	e7de      	b.n	edf2 <_realloc_r+0x2d6>
    ee34:	4621      	mov	r1, r4
    ee36:	4638      	mov	r0, r7
    ee38:	4666      	mov	r6, ip
    ee3a:	46d1      	mov	r9, sl
    ee3c:	f7fe ff8a 	bl	dd54 <memmove>
    ee40:	463c      	mov	r4, r7
    ee42:	e6e8      	b.n	ec16 <_realloc_r+0xfa>
    ee44:	20001d30 	.word	0x20001d30
    ee48:	68a1      	ldr	r1, [r4, #8]
    ee4a:	f8ca 1010 	str.w	r1, [sl, #16]
    ee4e:	68e1      	ldr	r1, [r4, #12]
    ee50:	f8ca 1014 	str.w	r1, [sl, #20]
    ee54:	2a24      	cmp	r2, #36	; 0x24
    ee56:	d020      	beq.n	ee9a <_realloc_r+0x37e>
    ee58:	3410      	adds	r4, #16
    ee5a:	f10a 0218 	add.w	r2, sl, #24
    ee5e:	e79f      	b.n	eda0 <_realloc_r+0x284>
    ee60:	6923      	ldr	r3, [r4, #16]
    ee62:	6103      	str	r3, [r0, #16]
    ee64:	6961      	ldr	r1, [r4, #20]
    ee66:	6141      	str	r1, [r0, #20]
    ee68:	f104 0218 	add.w	r2, r4, #24
    ee6c:	f100 0318 	add.w	r3, r0, #24
    ee70:	e6b0      	b.n	ebd4 <_realloc_r+0xb8>
    ee72:	68a3      	ldr	r3, [r4, #8]
    ee74:	f8ca 3010 	str.w	r3, [sl, #16]
    ee78:	68e3      	ldr	r3, [r4, #12]
    ee7a:	f8ca 3014 	str.w	r3, [sl, #20]
    ee7e:	2a24      	cmp	r2, #36	; 0x24
    ee80:	d021      	beq.n	eec6 <_realloc_r+0x3aa>
    ee82:	3410      	adds	r4, #16
    ee84:	f10a 0318 	add.w	r3, sl, #24
    ee88:	e7b3      	b.n	edf2 <_realloc_r+0x2d6>
    ee8a:	463a      	mov	r2, r7
    ee8c:	e733      	b.n	ecf6 <_realloc_r+0x1da>
    ee8e:	4621      	mov	r1, r4
    ee90:	4638      	mov	r0, r7
    ee92:	f7fe ff5f 	bl	dd54 <memmove>
    ee96:	4b16      	ldr	r3, [pc, #88]	; (eef0 <_realloc_r+0x3d4>)
    ee98:	e733      	b.n	ed02 <_realloc_r+0x1e6>
    ee9a:	6922      	ldr	r2, [r4, #16]
    ee9c:	f8ca 2018 	str.w	r2, [sl, #24]
    eea0:	6962      	ldr	r2, [r4, #20]
    eea2:	f8ca 201c 	str.w	r2, [sl, #28]
    eea6:	3418      	adds	r4, #24
    eea8:	f10a 0220 	add.w	r2, sl, #32
    eeac:	e778      	b.n	eda0 <_realloc_r+0x284>
    eeae:	68a1      	ldr	r1, [r4, #8]
    eeb0:	f8ca 1010 	str.w	r1, [sl, #16]
    eeb4:	68e1      	ldr	r1, [r4, #12]
    eeb6:	f8ca 1014 	str.w	r1, [sl, #20]
    eeba:	2a24      	cmp	r2, #36	; 0x24
    eebc:	d00d      	beq.n	eeda <_realloc_r+0x3be>
    eebe:	3410      	adds	r4, #16
    eec0:	f10a 0218 	add.w	r2, sl, #24
    eec4:	e717      	b.n	ecf6 <_realloc_r+0x1da>
    eec6:	6923      	ldr	r3, [r4, #16]
    eec8:	f8ca 3018 	str.w	r3, [sl, #24]
    eecc:	6963      	ldr	r3, [r4, #20]
    eece:	f8ca 301c 	str.w	r3, [sl, #28]
    eed2:	3418      	adds	r4, #24
    eed4:	f10a 0320 	add.w	r3, sl, #32
    eed8:	e78b      	b.n	edf2 <_realloc_r+0x2d6>
    eeda:	6922      	ldr	r2, [r4, #16]
    eedc:	f8ca 2018 	str.w	r2, [sl, #24]
    eee0:	6962      	ldr	r2, [r4, #20]
    eee2:	f8ca 201c 	str.w	r2, [sl, #28]
    eee6:	3418      	adds	r4, #24
    eee8:	f10a 0220 	add.w	r2, sl, #32
    eeec:	e703      	b.n	ecf6 <_realloc_r+0x1da>
    eeee:	bf00      	nop
    eef0:	20001d30 	.word	0x20001d30

0000eef4 <_malloc_trim_r>:
    eef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eef6:	4f24      	ldr	r7, [pc, #144]	; (ef88 <_malloc_trim_r+0x94>)
    eef8:	460c      	mov	r4, r1
    eefa:	4606      	mov	r6, r0
    eefc:	f7ff f850 	bl	dfa0 <__malloc_lock>
    ef00:	68bb      	ldr	r3, [r7, #8]
    ef02:	685d      	ldr	r5, [r3, #4]
    ef04:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    ef08:	310f      	adds	r1, #15
    ef0a:	f025 0503 	bic.w	r5, r5, #3
    ef0e:	194b      	adds	r3, r1, r5
    ef10:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    ef14:	f023 030f 	bic.w	r3, r3, #15
    ef18:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    ef1c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    ef20:	db07      	blt.n	ef32 <_malloc_trim_r+0x3e>
    ef22:	2100      	movs	r1, #0
    ef24:	4630      	mov	r0, r6
    ef26:	f000 f9a3 	bl	f270 <_sbrk_r>
    ef2a:	68bb      	ldr	r3, [r7, #8]
    ef2c:	442b      	add	r3, r5
    ef2e:	4298      	cmp	r0, r3
    ef30:	d004      	beq.n	ef3c <_malloc_trim_r+0x48>
    ef32:	4630      	mov	r0, r6
    ef34:	f7ff f83a 	bl	dfac <__malloc_unlock>
    ef38:	2000      	movs	r0, #0
    ef3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ef3c:	4261      	negs	r1, r4
    ef3e:	4630      	mov	r0, r6
    ef40:	f000 f996 	bl	f270 <_sbrk_r>
    ef44:	3001      	adds	r0, #1
    ef46:	d00d      	beq.n	ef64 <_malloc_trim_r+0x70>
    ef48:	4a10      	ldr	r2, [pc, #64]	; (ef8c <_malloc_trim_r+0x98>)
    ef4a:	68bb      	ldr	r3, [r7, #8]
    ef4c:	1b2d      	subs	r5, r5, r4
    ef4e:	f045 0501 	orr.w	r5, r5, #1
    ef52:	605d      	str	r5, [r3, #4]
    ef54:	6813      	ldr	r3, [r2, #0]
    ef56:	4630      	mov	r0, r6
    ef58:	1b1b      	subs	r3, r3, r4
    ef5a:	6013      	str	r3, [r2, #0]
    ef5c:	f7ff f826 	bl	dfac <__malloc_unlock>
    ef60:	2001      	movs	r0, #1
    ef62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ef64:	2100      	movs	r1, #0
    ef66:	4630      	mov	r0, r6
    ef68:	f000 f982 	bl	f270 <_sbrk_r>
    ef6c:	68ba      	ldr	r2, [r7, #8]
    ef6e:	1a83      	subs	r3, r0, r2
    ef70:	2b0f      	cmp	r3, #15
    ef72:	ddde      	ble.n	ef32 <_malloc_trim_r+0x3e>
    ef74:	f043 0301 	orr.w	r3, r3, #1
    ef78:	6053      	str	r3, [r2, #4]
    ef7a:	4b05      	ldr	r3, [pc, #20]	; (ef90 <_malloc_trim_r+0x9c>)
    ef7c:	4903      	ldr	r1, [pc, #12]	; (ef8c <_malloc_trim_r+0x98>)
    ef7e:	681b      	ldr	r3, [r3, #0]
    ef80:	1ac0      	subs	r0, r0, r3
    ef82:	6008      	str	r0, [r1, #0]
    ef84:	e7d5      	b.n	ef32 <_malloc_trim_r+0x3e>
    ef86:	bf00      	nop
    ef88:	20001d30 	.word	0x20001d30
    ef8c:	200036c0 	.word	0x200036c0
    ef90:	20002138 	.word	0x20002138

0000ef94 <_free_r>:
    ef94:	2900      	cmp	r1, #0
    ef96:	d061      	beq.n	f05c <_free_r+0xc8>
    ef98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ef9a:	460c      	mov	r4, r1
    ef9c:	4606      	mov	r6, r0
    ef9e:	f7fe ffff 	bl	dfa0 <__malloc_lock>
    efa2:	f854 2c04 	ldr.w	r2, [r4, #-4]
    efa6:	4f7b      	ldr	r7, [pc, #492]	; (f194 <_free_r+0x200>)
    efa8:	f1a4 0508 	sub.w	r5, r4, #8
    efac:	f022 0101 	bic.w	r1, r2, #1
    efb0:	eb05 0c01 	add.w	ip, r5, r1
    efb4:	68b8      	ldr	r0, [r7, #8]
    efb6:	f8dc 3004 	ldr.w	r3, [ip, #4]
    efba:	4560      	cmp	r0, ip
    efbc:	f023 0303 	bic.w	r3, r3, #3
    efc0:	f000 808b 	beq.w	f0da <_free_r+0x146>
    efc4:	07d2      	lsls	r2, r2, #31
    efc6:	f8cc 3004 	str.w	r3, [ip, #4]
    efca:	d432      	bmi.n	f032 <_free_r+0x9e>
    efcc:	f854 2c08 	ldr.w	r2, [r4, #-8]
    efd0:	1aad      	subs	r5, r5, r2
    efd2:	4411      	add	r1, r2
    efd4:	68aa      	ldr	r2, [r5, #8]
    efd6:	f107 0008 	add.w	r0, r7, #8
    efda:	4282      	cmp	r2, r0
    efdc:	d06a      	beq.n	f0b4 <_free_r+0x120>
    efde:	eb0c 0403 	add.w	r4, ip, r3
    efe2:	f8d4 e004 	ldr.w	lr, [r4, #4]
    efe6:	68ec      	ldr	r4, [r5, #12]
    efe8:	60d4      	str	r4, [r2, #12]
    efea:	f01e 0f01 	tst.w	lr, #1
    efee:	60a2      	str	r2, [r4, #8]
    eff0:	f000 8097 	beq.w	f122 <_free_r+0x18e>
    eff4:	f041 0301 	orr.w	r3, r1, #1
    eff8:	606b      	str	r3, [r5, #4]
    effa:	f8cc 1000 	str.w	r1, [ip]
    effe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    f002:	d235      	bcs.n	f070 <_free_r+0xdc>
    f004:	6878      	ldr	r0, [r7, #4]
    f006:	08cb      	lsrs	r3, r1, #3
    f008:	2201      	movs	r2, #1
    f00a:	0949      	lsrs	r1, r1, #5
    f00c:	3301      	adds	r3, #1
    f00e:	408a      	lsls	r2, r1
    f010:	4302      	orrs	r2, r0
    f012:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    f016:	607a      	str	r2, [r7, #4]
    f018:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    f01c:	3a08      	subs	r2, #8
    f01e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    f022:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    f026:	60cd      	str	r5, [r1, #12]
    f028:	4630      	mov	r0, r6
    f02a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    f02e:	f7fe bfbd 	b.w	dfac <__malloc_unlock>
    f032:	eb0c 0203 	add.w	r2, ip, r3
    f036:	6852      	ldr	r2, [r2, #4]
    f038:	07d0      	lsls	r0, r2, #31
    f03a:	d410      	bmi.n	f05e <_free_r+0xca>
    f03c:	4419      	add	r1, r3
    f03e:	f107 0008 	add.w	r0, r7, #8
    f042:	f8dc 3008 	ldr.w	r3, [ip, #8]
    f046:	4283      	cmp	r3, r0
    f048:	d073      	beq.n	f132 <_free_r+0x19e>
    f04a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    f04e:	60da      	str	r2, [r3, #12]
    f050:	6093      	str	r3, [r2, #8]
    f052:	f041 0301 	orr.w	r3, r1, #1
    f056:	606b      	str	r3, [r5, #4]
    f058:	5069      	str	r1, [r5, r1]
    f05a:	e7d0      	b.n	effe <_free_r+0x6a>
    f05c:	4770      	bx	lr
    f05e:	f041 0301 	orr.w	r3, r1, #1
    f062:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    f066:	f844 3c04 	str.w	r3, [r4, #-4]
    f06a:	f8cc 1000 	str.w	r1, [ip]
    f06e:	d3c9      	bcc.n	f004 <_free_r+0x70>
    f070:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    f074:	ea4f 2351 	mov.w	r3, r1, lsr #9
    f078:	d248      	bcs.n	f10c <_free_r+0x178>
    f07a:	098b      	lsrs	r3, r1, #6
    f07c:	f103 0039 	add.w	r0, r3, #57	; 0x39
    f080:	f103 0238 	add.w	r2, r3, #56	; 0x38
    f084:	00c3      	lsls	r3, r0, #3
    f086:	18f8      	adds	r0, r7, r3
    f088:	58fb      	ldr	r3, [r7, r3]
    f08a:	3808      	subs	r0, #8
    f08c:	4298      	cmp	r0, r3
    f08e:	d059      	beq.n	f144 <_free_r+0x1b0>
    f090:	685a      	ldr	r2, [r3, #4]
    f092:	f022 0203 	bic.w	r2, r2, #3
    f096:	428a      	cmp	r2, r1
    f098:	d902      	bls.n	f0a0 <_free_r+0x10c>
    f09a:	689b      	ldr	r3, [r3, #8]
    f09c:	4298      	cmp	r0, r3
    f09e:	d1f7      	bne.n	f090 <_free_r+0xfc>
    f0a0:	68d8      	ldr	r0, [r3, #12]
    f0a2:	e9c5 3002 	strd	r3, r0, [r5, #8]
    f0a6:	6085      	str	r5, [r0, #8]
    f0a8:	60dd      	str	r5, [r3, #12]
    f0aa:	4630      	mov	r0, r6
    f0ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    f0b0:	f7fe bf7c 	b.w	dfac <__malloc_unlock>
    f0b4:	eb0c 0203 	add.w	r2, ip, r3
    f0b8:	6852      	ldr	r2, [r2, #4]
    f0ba:	07d2      	lsls	r2, r2, #31
    f0bc:	d463      	bmi.n	f186 <_free_r+0x1f2>
    f0be:	440b      	add	r3, r1
    f0c0:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    f0c4:	60ca      	str	r2, [r1, #12]
    f0c6:	6091      	str	r1, [r2, #8]
    f0c8:	f043 0201 	orr.w	r2, r3, #1
    f0cc:	606a      	str	r2, [r5, #4]
    f0ce:	4630      	mov	r0, r6
    f0d0:	50eb      	str	r3, [r5, r3]
    f0d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    f0d6:	f7fe bf69 	b.w	dfac <__malloc_unlock>
    f0da:	440b      	add	r3, r1
    f0dc:	07d1      	lsls	r1, r2, #31
    f0de:	d407      	bmi.n	f0f0 <_free_r+0x15c>
    f0e0:	f854 2c08 	ldr.w	r2, [r4, #-8]
    f0e4:	1aad      	subs	r5, r5, r2
    f0e6:	4413      	add	r3, r2
    f0e8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    f0ec:	60ca      	str	r2, [r1, #12]
    f0ee:	6091      	str	r1, [r2, #8]
    f0f0:	f043 0201 	orr.w	r2, r3, #1
    f0f4:	606a      	str	r2, [r5, #4]
    f0f6:	4a28      	ldr	r2, [pc, #160]	; (f198 <_free_r+0x204>)
    f0f8:	60bd      	str	r5, [r7, #8]
    f0fa:	6812      	ldr	r2, [r2, #0]
    f0fc:	429a      	cmp	r2, r3
    f0fe:	d893      	bhi.n	f028 <_free_r+0x94>
    f100:	4b26      	ldr	r3, [pc, #152]	; (f19c <_free_r+0x208>)
    f102:	4630      	mov	r0, r6
    f104:	6819      	ldr	r1, [r3, #0]
    f106:	f7ff fef5 	bl	eef4 <_malloc_trim_r>
    f10a:	e78d      	b.n	f028 <_free_r+0x94>
    f10c:	2b14      	cmp	r3, #20
    f10e:	d90a      	bls.n	f126 <_free_r+0x192>
    f110:	2b54      	cmp	r3, #84	; 0x54
    f112:	d81f      	bhi.n	f154 <_free_r+0x1c0>
    f114:	0b0b      	lsrs	r3, r1, #12
    f116:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    f11a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    f11e:	00c3      	lsls	r3, r0, #3
    f120:	e7b1      	b.n	f086 <_free_r+0xf2>
    f122:	4419      	add	r1, r3
    f124:	e78d      	b.n	f042 <_free_r+0xae>
    f126:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    f12a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    f12e:	00c3      	lsls	r3, r0, #3
    f130:	e7a9      	b.n	f086 <_free_r+0xf2>
    f132:	f041 0301 	orr.w	r3, r1, #1
    f136:	e9c7 5504 	strd	r5, r5, [r7, #16]
    f13a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    f13e:	606b      	str	r3, [r5, #4]
    f140:	5069      	str	r1, [r5, r1]
    f142:	e771      	b.n	f028 <_free_r+0x94>
    f144:	6879      	ldr	r1, [r7, #4]
    f146:	1092      	asrs	r2, r2, #2
    f148:	2401      	movs	r4, #1
    f14a:	fa04 f202 	lsl.w	r2, r4, r2
    f14e:	430a      	orrs	r2, r1
    f150:	607a      	str	r2, [r7, #4]
    f152:	e7a6      	b.n	f0a2 <_free_r+0x10e>
    f154:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    f158:	d806      	bhi.n	f168 <_free_r+0x1d4>
    f15a:	0bcb      	lsrs	r3, r1, #15
    f15c:	f103 0078 	add.w	r0, r3, #120	; 0x78
    f160:	f103 0277 	add.w	r2, r3, #119	; 0x77
    f164:	00c3      	lsls	r3, r0, #3
    f166:	e78e      	b.n	f086 <_free_r+0xf2>
    f168:	f240 5254 	movw	r2, #1364	; 0x554
    f16c:	4293      	cmp	r3, r2
    f16e:	d806      	bhi.n	f17e <_free_r+0x1ea>
    f170:	0c8b      	lsrs	r3, r1, #18
    f172:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    f176:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    f17a:	00c3      	lsls	r3, r0, #3
    f17c:	e783      	b.n	f086 <_free_r+0xf2>
    f17e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    f182:	227e      	movs	r2, #126	; 0x7e
    f184:	e77f      	b.n	f086 <_free_r+0xf2>
    f186:	f041 0301 	orr.w	r3, r1, #1
    f18a:	606b      	str	r3, [r5, #4]
    f18c:	f8cc 1000 	str.w	r1, [ip]
    f190:	e74a      	b.n	f028 <_free_r+0x94>
    f192:	bf00      	nop
    f194:	20001d30 	.word	0x20001d30
    f198:	2000213c 	.word	0x2000213c
    f19c:	200036f0 	.word	0x200036f0

0000f1a0 <fiprintf>:
    f1a0:	b40e      	push	{r1, r2, r3}
    f1a2:	b510      	push	{r4, lr}
    f1a4:	b083      	sub	sp, #12
    f1a6:	ab05      	add	r3, sp, #20
    f1a8:	4c06      	ldr	r4, [pc, #24]	; (f1c4 <fiprintf+0x24>)
    f1aa:	f853 2b04 	ldr.w	r2, [r3], #4
    f1ae:	9301      	str	r3, [sp, #4]
    f1b0:	4601      	mov	r1, r0
    f1b2:	6820      	ldr	r0, [r4, #0]
    f1b4:	f001 fe86 	bl	10ec4 <_vfiprintf_r>
    f1b8:	b003      	add	sp, #12
    f1ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f1be:	b003      	add	sp, #12
    f1c0:	4770      	bx	lr
    f1c2:	bf00      	nop
    f1c4:	2000214c 	.word	0x2000214c

0000f1c8 <__sread>:
    f1c8:	b510      	push	{r4, lr}
    f1ca:	460c      	mov	r4, r1
    f1cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    f1d0:	f004 f8a0 	bl	13314 <_read_r>
    f1d4:	2800      	cmp	r0, #0
    f1d6:	db03      	blt.n	f1e0 <__sread+0x18>
    f1d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    f1da:	4403      	add	r3, r0
    f1dc:	6523      	str	r3, [r4, #80]	; 0x50
    f1de:	bd10      	pop	{r4, pc}
    f1e0:	89a3      	ldrh	r3, [r4, #12]
    f1e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    f1e6:	81a3      	strh	r3, [r4, #12]
    f1e8:	bd10      	pop	{r4, pc}
    f1ea:	bf00      	nop

0000f1ec <__swrite>:
    f1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f1f0:	460c      	mov	r4, r1
    f1f2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    f1f6:	461f      	mov	r7, r3
    f1f8:	05cb      	lsls	r3, r1, #23
    f1fa:	4605      	mov	r5, r0
    f1fc:	4616      	mov	r6, r2
    f1fe:	d40b      	bmi.n	f218 <__swrite+0x2c>
    f200:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    f204:	81a1      	strh	r1, [r4, #12]
    f206:	463b      	mov	r3, r7
    f208:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    f20c:	4632      	mov	r2, r6
    f20e:	4628      	mov	r0, r5
    f210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f214:	f000 b862 	b.w	f2dc <_write_r>
    f218:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    f21c:	2302      	movs	r3, #2
    f21e:	2200      	movs	r2, #0
    f220:	f004 f862 	bl	132e8 <_lseek_r>
    f224:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    f228:	e7ea      	b.n	f200 <__swrite+0x14>
    f22a:	bf00      	nop

0000f22c <__sseek>:
    f22c:	b510      	push	{r4, lr}
    f22e:	460c      	mov	r4, r1
    f230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    f234:	f004 f858 	bl	132e8 <_lseek_r>
    f238:	89a3      	ldrh	r3, [r4, #12]
    f23a:	1c42      	adds	r2, r0, #1
    f23c:	bf0e      	itee	eq
    f23e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    f242:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    f246:	6520      	strne	r0, [r4, #80]	; 0x50
    f248:	81a3      	strh	r3, [r4, #12]
    f24a:	bd10      	pop	{r4, pc}

0000f24c <__sclose>:
    f24c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    f250:	f003 bf10 	b.w	13074 <_close_r>

0000f254 <__ascii_wctomb>:
    f254:	b149      	cbz	r1, f26a <__ascii_wctomb+0x16>
    f256:	2aff      	cmp	r2, #255	; 0xff
    f258:	d802      	bhi.n	f260 <__ascii_wctomb+0xc>
    f25a:	700a      	strb	r2, [r1, #0]
    f25c:	2001      	movs	r0, #1
    f25e:	4770      	bx	lr
    f260:	238a      	movs	r3, #138	; 0x8a
    f262:	6003      	str	r3, [r0, #0]
    f264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f268:	4770      	bx	lr
    f26a:	4608      	mov	r0, r1
    f26c:	4770      	bx	lr
    f26e:	bf00      	nop

0000f270 <_sbrk_r>:
    f270:	b538      	push	{r3, r4, r5, lr}
    f272:	4d07      	ldr	r5, [pc, #28]	; (f290 <_sbrk_r+0x20>)
    f274:	2200      	movs	r2, #0
    f276:	4604      	mov	r4, r0
    f278:	4608      	mov	r0, r1
    f27a:	602a      	str	r2, [r5, #0]
    f27c:	f7fc fc00 	bl	ba80 <_sbrk>
    f280:	1c43      	adds	r3, r0, #1
    f282:	d000      	beq.n	f286 <_sbrk_r+0x16>
    f284:	bd38      	pop	{r3, r4, r5, pc}
    f286:	682b      	ldr	r3, [r5, #0]
    f288:	2b00      	cmp	r3, #0
    f28a:	d0fb      	beq.n	f284 <_sbrk_r+0x14>
    f28c:	6023      	str	r3, [r4, #0]
    f28e:	bd38      	pop	{r3, r4, r5, pc}
    f290:	20003850 	.word	0x20003850

0000f294 <_fwalk_sglue>:
    f294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f298:	4680      	mov	r8, r0
    f29a:	460f      	mov	r7, r1
    f29c:	4616      	mov	r6, r2
    f29e:	f04f 0900 	mov.w	r9, #0
    f2a2:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    f2a6:	3d01      	subs	r5, #1
    f2a8:	d411      	bmi.n	f2ce <_fwalk_sglue+0x3a>
    f2aa:	89a3      	ldrh	r3, [r4, #12]
    f2ac:	2b01      	cmp	r3, #1
    f2ae:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
    f2b2:	d908      	bls.n	f2c6 <_fwalk_sglue+0x32>
    f2b4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    f2b8:	3301      	adds	r3, #1
    f2ba:	4621      	mov	r1, r4
    f2bc:	d003      	beq.n	f2c6 <_fwalk_sglue+0x32>
    f2be:	4640      	mov	r0, r8
    f2c0:	47b8      	blx	r7
    f2c2:	ea49 0900 	orr.w	r9, r9, r0
    f2c6:	1c6b      	adds	r3, r5, #1
    f2c8:	f104 0468 	add.w	r4, r4, #104	; 0x68
    f2cc:	d1ed      	bne.n	f2aa <_fwalk_sglue+0x16>
    f2ce:	6836      	ldr	r6, [r6, #0]
    f2d0:	2e00      	cmp	r6, #0
    f2d2:	d1e6      	bne.n	f2a2 <_fwalk_sglue+0xe>
    f2d4:	4648      	mov	r0, r9
    f2d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f2da:	bf00      	nop

0000f2dc <_write_r>:
    f2dc:	b538      	push	{r3, r4, r5, lr}
    f2de:	460c      	mov	r4, r1
    f2e0:	4d08      	ldr	r5, [pc, #32]	; (f304 <_write_r+0x28>)
    f2e2:	4684      	mov	ip, r0
    f2e4:	4611      	mov	r1, r2
    f2e6:	4620      	mov	r0, r4
    f2e8:	461a      	mov	r2, r3
    f2ea:	2300      	movs	r3, #0
    f2ec:	602b      	str	r3, [r5, #0]
    f2ee:	4664      	mov	r4, ip
    f2f0:	f7fb fee4 	bl	b0bc <_write>
    f2f4:	1c43      	adds	r3, r0, #1
    f2f6:	d000      	beq.n	f2fa <_write_r+0x1e>
    f2f8:	bd38      	pop	{r3, r4, r5, pc}
    f2fa:	682b      	ldr	r3, [r5, #0]
    f2fc:	2b00      	cmp	r3, #0
    f2fe:	d0fb      	beq.n	f2f8 <_write_r+0x1c>
    f300:	6023      	str	r3, [r4, #0]
    f302:	bd38      	pop	{r3, r4, r5, pc}
    f304:	20003850 	.word	0x20003850

0000f308 <_svfprintf_r>:
    f308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f30c:	ed2d 8b08 	vpush	{d8-d11}
    f310:	b0d1      	sub	sp, #324	; 0x144
    f312:	460c      	mov	r4, r1
    f314:	ee0b 1a10 	vmov	s22, r1
    f318:	4690      	mov	r8, r2
    f31a:	9308      	str	r3, [sp, #32]
    f31c:	4683      	mov	fp, r0
    f31e:	f002 fe57 	bl	11fd0 <_localeconv_r>
    f322:	6803      	ldr	r3, [r0, #0]
    f324:	9312      	str	r3, [sp, #72]	; 0x48
    f326:	4618      	mov	r0, r3
    f328:	f7ff fb8a 	bl	ea40 <strlen>
    f32c:	af20      	add	r7, sp, #128	; 0x80
    f32e:	9010      	str	r0, [sp, #64]	; 0x40
    f330:	2208      	movs	r2, #8
    f332:	2100      	movs	r1, #0
    f334:	4638      	mov	r0, r7
    f336:	f7fe fda9 	bl	de8c <memset>
    f33a:	89a3      	ldrh	r3, [r4, #12]
    f33c:	061b      	lsls	r3, r3, #24
    f33e:	d503      	bpl.n	f348 <_svfprintf_r+0x40>
    f340:	6923      	ldr	r3, [r4, #16]
    f342:	2b00      	cmp	r3, #0
    f344:	f000 8755 	beq.w	101f2 <_svfprintf_r+0xeea>
    f348:	2300      	movs	r3, #0
    f34a:	ed9f 8b83 	vldr	d8, [pc, #524]	; f558 <_svfprintf_r+0x250>
    f34e:	ed9f 9b84 	vldr	d9, [pc, #528]	; f560 <_svfprintf_r+0x258>
    f352:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    f356:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    f35a:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    f35e:	aa27      	add	r2, sp, #156	; 0x9c
    f360:	930e      	str	r3, [sp, #56]	; 0x38
    f362:	9224      	str	r2, [sp, #144]	; 0x90
    f364:	4692      	mov	sl, r2
    f366:	9311      	str	r3, [sp, #68]	; 0x44
    f368:	9304      	str	r3, [sp, #16]
    f36a:	4644      	mov	r4, r8
    f36c:	46a1      	mov	r9, r4
    f36e:	4b7e      	ldr	r3, [pc, #504]	; (f568 <_svfprintf_r+0x260>)
    f370:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    f374:	f7fe fe0e 	bl	df94 <__locale_mb_cur_max>
    f378:	464a      	mov	r2, r9
    f37a:	4603      	mov	r3, r0
    f37c:	a91c      	add	r1, sp, #112	; 0x70
    f37e:	9700      	str	r7, [sp, #0]
    f380:	4658      	mov	r0, fp
    f382:	47a8      	blx	r5
    f384:	2800      	cmp	r0, #0
    f386:	f000 80b0 	beq.w	f4ea <_svfprintf_r+0x1e2>
    f38a:	f2c0 80a6 	blt.w	f4da <_svfprintf_r+0x1d2>
    f38e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    f390:	2a25      	cmp	r2, #37	; 0x25
    f392:	4603      	mov	r3, r0
    f394:	d001      	beq.n	f39a <_svfprintf_r+0x92>
    f396:	4499      	add	r9, r3
    f398:	e7e9      	b.n	f36e <_svfprintf_r+0x66>
    f39a:	ebb9 0504 	subs.w	r5, r9, r4
    f39e:	4606      	mov	r6, r0
    f3a0:	f040 80a7 	bne.w	f4f2 <_svfprintf_r+0x1ea>
    f3a4:	2300      	movs	r3, #0
    f3a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f3aa:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    f3ae:	4698      	mov	r8, r3
    f3b0:	9306      	str	r3, [sp, #24]
    f3b2:	f109 0901 	add.w	r9, r9, #1
    f3b6:	f899 3000 	ldrb.w	r3, [r9]
    f3ba:	9203      	str	r2, [sp, #12]
    f3bc:	252b      	movs	r5, #43	; 0x2b
    f3be:	2620      	movs	r6, #32
    f3c0:	f109 0901 	add.w	r9, r9, #1
    f3c4:	f1a3 0220 	sub.w	r2, r3, #32
    f3c8:	2a5a      	cmp	r2, #90	; 0x5a
    f3ca:	f200 80cf 	bhi.w	f56c <_svfprintf_r+0x264>
    f3ce:	e8df f012 	tbh	[pc, r2, lsl #1]
    f3d2:	02e8      	.short	0x02e8
    f3d4:	00cd00cd 	.word	0x00cd00cd
    f3d8:	00cd02e3 	.word	0x00cd02e3
    f3dc:	00cd00cd 	.word	0x00cd00cd
    f3e0:	00cd006a 	.word	0x00cd006a
    f3e4:	020500cd 	.word	0x020500cd
    f3e8:	00cd0284 	.word	0x00cd0284
    f3ec:	02c90210 	.word	0x02c90210
    f3f0:	02bd00cd 	.word	0x02bd00cd
    f3f4:	005b005b 	.word	0x005b005b
    f3f8:	005b005b 	.word	0x005b005b
    f3fc:	005b005b 	.word	0x005b005b
    f400:	005b005b 	.word	0x005b005b
    f404:	00cd005b 	.word	0x00cd005b
    f408:	00cd00cd 	.word	0x00cd00cd
    f40c:	00cd00cd 	.word	0x00cd00cd
    f410:	00cd00cd 	.word	0x00cd00cd
    f414:	00cd0153 	.word	0x00cd0153
    f418:	021a0183 	.word	0x021a0183
    f41c:	01530153 	.word	0x01530153
    f420:	00cd0153 	.word	0x00cd0153
    f424:	00cd00cd 	.word	0x00cd00cd
    f428:	021500cd 	.word	0x021500cd
    f42c:	00cd00cd 	.word	0x00cd00cd
    f430:	00cd0296 	.word	0x00cd0296
    f434:	00cd00cd 	.word	0x00cd00cd
    f438:	00cd01ab 	.word	0x00cd01ab
    f43c:	00cd02aa 	.word	0x00cd02aa
    f440:	06e300cd 	.word	0x06e300cd
    f444:	00cd00cd 	.word	0x00cd00cd
    f448:	00cd00cd 	.word	0x00cd00cd
    f44c:	00cd00cd 	.word	0x00cd00cd
    f450:	00cd00cd 	.word	0x00cd00cd
    f454:	00cd0153 	.word	0x00cd0153
    f458:	01de0183 	.word	0x01de0183
    f45c:	01530153 	.word	0x01530153
    f460:	02770153 	.word	0x02770153
    f464:	007f01de 	.word	0x007f01de
    f468:	028900cd 	.word	0x028900cd
    f46c:	025f00cd 	.word	0x025f00cd
    f470:	022f06e0 	.word	0x022f06e0
    f474:	00cd007f 	.word	0x00cd007f
    f478:	007c01ab 	.word	0x007c01ab
    f47c:	00cd06b8 	.word	0x00cd06b8
    f480:	06bd00cd 	.word	0x06bd00cd
    f484:	007c00cd 	.word	0x007c00cd
    f488:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    f48c:	2100      	movs	r1, #0
    f48e:	f819 3b01 	ldrb.w	r3, [r9], #1
    f492:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    f496:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    f49a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    f49e:	2a09      	cmp	r2, #9
    f4a0:	d9f5      	bls.n	f48e <_svfprintf_r+0x186>
    f4a2:	9106      	str	r1, [sp, #24]
    f4a4:	e78e      	b.n	f3c4 <_svfprintf_r+0xbc>
    f4a6:	4658      	mov	r0, fp
    f4a8:	f002 fd92 	bl	11fd0 <_localeconv_r>
    f4ac:	6843      	ldr	r3, [r0, #4]
    f4ae:	9315      	str	r3, [sp, #84]	; 0x54
    f4b0:	4618      	mov	r0, r3
    f4b2:	f7ff fac5 	bl	ea40 <strlen>
    f4b6:	9016      	str	r0, [sp, #88]	; 0x58
    f4b8:	4658      	mov	r0, fp
    f4ba:	f002 fd89 	bl	11fd0 <_localeconv_r>
    f4be:	6883      	ldr	r3, [r0, #8]
    f4c0:	9313      	str	r3, [sp, #76]	; 0x4c
    f4c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f4c4:	2b00      	cmp	r3, #0
    f4c6:	f040 862d 	bne.w	10124 <_svfprintf_r+0xe1c>
    f4ca:	f899 3000 	ldrb.w	r3, [r9]
    f4ce:	e777      	b.n	f3c0 <_svfprintf_r+0xb8>
    f4d0:	f899 3000 	ldrb.w	r3, [r9]
    f4d4:	f048 0820 	orr.w	r8, r8, #32
    f4d8:	e772      	b.n	f3c0 <_svfprintf_r+0xb8>
    f4da:	2208      	movs	r2, #8
    f4dc:	2100      	movs	r1, #0
    f4de:	4638      	mov	r0, r7
    f4e0:	f7fe fcd4 	bl	de8c <memset>
    f4e4:	2301      	movs	r3, #1
    f4e6:	4499      	add	r9, r3
    f4e8:	e741      	b.n	f36e <_svfprintf_r+0x66>
    f4ea:	ebb9 0504 	subs.w	r5, r9, r4
    f4ee:	4606      	mov	r6, r0
    f4f0:	d011      	beq.n	f516 <_svfprintf_r+0x20e>
    f4f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
    f4f4:	442b      	add	r3, r5
    f4f6:	9326      	str	r3, [sp, #152]	; 0x98
    f4f8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f4fa:	3301      	adds	r3, #1
    f4fc:	2b07      	cmp	r3, #7
    f4fe:	e9ca 4500 	strd	r4, r5, [sl]
    f502:	9325      	str	r3, [sp, #148]	; 0x94
    f504:	dc1c      	bgt.n	f540 <_svfprintf_r+0x238>
    f506:	f10a 0a08 	add.w	sl, sl, #8
    f50a:	9b04      	ldr	r3, [sp, #16]
    f50c:	442b      	add	r3, r5
    f50e:	9304      	str	r3, [sp, #16]
    f510:	2e00      	cmp	r6, #0
    f512:	f47f af47 	bne.w	f3a4 <_svfprintf_r+0x9c>
    f516:	9b26      	ldr	r3, [sp, #152]	; 0x98
    f518:	2b00      	cmp	r3, #0
    f51a:	f041 820b 	bne.w	10934 <_svfprintf_r+0x162c>
    f51e:	ee1b 3a10 	vmov	r3, s22
    f522:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    f526:	f013 0f40 	tst.w	r3, #64	; 0x40
    f52a:	9b04      	ldr	r3, [sp, #16]
    f52c:	bf18      	it	ne
    f52e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    f532:	9304      	str	r3, [sp, #16]
    f534:	9804      	ldr	r0, [sp, #16]
    f536:	b051      	add	sp, #324	; 0x144
    f538:	ecbd 8b08 	vpop	{d8-d11}
    f53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f540:	ee1b 1a10 	vmov	r1, s22
    f544:	aa24      	add	r2, sp, #144	; 0x90
    f546:	4658      	mov	r0, fp
    f548:	f004 f8fe 	bl	13748 <__ssprint_r>
    f54c:	2800      	cmp	r0, #0
    f54e:	d1e6      	bne.n	f51e <_svfprintf_r+0x216>
    f550:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f554:	e7d9      	b.n	f50a <_svfprintf_r+0x202>
    f556:	bf00      	nop
	...
    f560:	ffffffff 	.word	0xffffffff
    f564:	7fefffff 	.word	0x7fefffff
    f568:	20001bc4 	.word	0x20001bc4
    f56c:	930b      	str	r3, [sp, #44]	; 0x2c
    f56e:	2b00      	cmp	r3, #0
    f570:	d0d1      	beq.n	f516 <_svfprintf_r+0x20e>
    f572:	2100      	movs	r1, #0
    f574:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    f578:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    f57c:	2301      	movs	r3, #1
    f57e:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    f582:	9302      	str	r3, [sp, #8]
    f584:	9107      	str	r1, [sp, #28]
    f586:	9305      	str	r3, [sp, #20]
    f588:	9103      	str	r1, [sp, #12]
    f58a:	910f      	str	r1, [sp, #60]	; 0x3c
    f58c:	ac37      	add	r4, sp, #220	; 0xdc
    f58e:	f018 0302 	ands.w	r3, r8, #2
    f592:	9309      	str	r3, [sp, #36]	; 0x24
    f594:	d002      	beq.n	f59c <_svfprintf_r+0x294>
    f596:	9b02      	ldr	r3, [sp, #8]
    f598:	3302      	adds	r3, #2
    f59a:	9302      	str	r3, [sp, #8]
    f59c:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    f5a0:	930a      	str	r3, [sp, #40]	; 0x28
    f5a2:	d105      	bne.n	f5b0 <_svfprintf_r+0x2a8>
    f5a4:	9b06      	ldr	r3, [sp, #24]
    f5a6:	9a02      	ldr	r2, [sp, #8]
    f5a8:	1a9d      	subs	r5, r3, r2
    f5aa:	2d00      	cmp	r5, #0
    f5ac:	f300 8369 	bgt.w	fc82 <_svfprintf_r+0x97a>
    f5b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f5b2:	b189      	cbz	r1, f5d8 <_svfprintf_r+0x2d0>
    f5b4:	9925      	ldr	r1, [sp, #148]	; 0x94
    f5b6:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    f5ba:	3101      	adds	r1, #1
    f5bc:	3201      	adds	r2, #1
    f5be:	f8ca 0000 	str.w	r0, [sl]
    f5c2:	2907      	cmp	r1, #7
    f5c4:	f04f 0001 	mov.w	r0, #1
    f5c8:	9226      	str	r2, [sp, #152]	; 0x98
    f5ca:	9125      	str	r1, [sp, #148]	; 0x94
    f5cc:	f8ca 0004 	str.w	r0, [sl, #4]
    f5d0:	f300 83a2 	bgt.w	fd18 <_svfprintf_r+0xa10>
    f5d4:	f10a 0a08 	add.w	sl, sl, #8
    f5d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f5da:	b183      	cbz	r3, f5fe <_svfprintf_r+0x2f6>
    f5dc:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f5de:	a91a      	add	r1, sp, #104	; 0x68
    f5e0:	3301      	adds	r3, #1
    f5e2:	3202      	adds	r2, #2
    f5e4:	f8ca 1000 	str.w	r1, [sl]
    f5e8:	2b07      	cmp	r3, #7
    f5ea:	f04f 0102 	mov.w	r1, #2
    f5ee:	9226      	str	r2, [sp, #152]	; 0x98
    f5f0:	9325      	str	r3, [sp, #148]	; 0x94
    f5f2:	f8ca 1004 	str.w	r1, [sl, #4]
    f5f6:	f300 83a3 	bgt.w	fd40 <_svfprintf_r+0xa38>
    f5fa:	f10a 0a08 	add.w	sl, sl, #8
    f5fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f600:	2b80      	cmp	r3, #128	; 0x80
    f602:	f000 826c 	beq.w	fade <_svfprintf_r+0x7d6>
    f606:	9b03      	ldr	r3, [sp, #12]
    f608:	9905      	ldr	r1, [sp, #20]
    f60a:	1a5d      	subs	r5, r3, r1
    f60c:	2d00      	cmp	r5, #0
    f60e:	f300 82a5 	bgt.w	fb5c <_svfprintf_r+0x854>
    f612:	f418 7f80 	tst.w	r8, #256	; 0x100
    f616:	f040 820d 	bne.w	fa34 <_svfprintf_r+0x72c>
    f61a:	9b05      	ldr	r3, [sp, #20]
    f61c:	f8ca 3004 	str.w	r3, [sl, #4]
    f620:	441a      	add	r2, r3
    f622:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f624:	f8ca 4000 	str.w	r4, [sl]
    f628:	3301      	adds	r3, #1
    f62a:	2b07      	cmp	r3, #7
    f62c:	9226      	str	r2, [sp, #152]	; 0x98
    f62e:	9325      	str	r3, [sp, #148]	; 0x94
    f630:	f300 831b 	bgt.w	fc6a <_svfprintf_r+0x962>
    f634:	f10a 0a08 	add.w	sl, sl, #8
    f638:	f018 0f04 	tst.w	r8, #4
    f63c:	d005      	beq.n	f64a <_svfprintf_r+0x342>
    f63e:	9b06      	ldr	r3, [sp, #24]
    f640:	9902      	ldr	r1, [sp, #8]
    f642:	1a5c      	subs	r4, r3, r1
    f644:	2c00      	cmp	r4, #0
    f646:	f300 8388 	bgt.w	fd5a <_svfprintf_r+0xa52>
    f64a:	9b04      	ldr	r3, [sp, #16]
    f64c:	9906      	ldr	r1, [sp, #24]
    f64e:	9802      	ldr	r0, [sp, #8]
    f650:	4281      	cmp	r1, r0
    f652:	bfac      	ite	ge
    f654:	185b      	addge	r3, r3, r1
    f656:	181b      	addlt	r3, r3, r0
    f658:	9304      	str	r3, [sp, #16]
    f65a:	2a00      	cmp	r2, #0
    f65c:	f040 82b0 	bne.w	fbc0 <_svfprintf_r+0x8b8>
    f660:	2300      	movs	r3, #0
    f662:	9325      	str	r3, [sp, #148]	; 0x94
    f664:	9b07      	ldr	r3, [sp, #28]
    f666:	b11b      	cbz	r3, f670 <_svfprintf_r+0x368>
    f668:	9907      	ldr	r1, [sp, #28]
    f66a:	4658      	mov	r0, fp
    f66c:	f7ff fc92 	bl	ef94 <_free_r>
    f670:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f674:	464c      	mov	r4, r9
    f676:	e679      	b.n	f36c <_svfprintf_r+0x64>
    f678:	930b      	str	r3, [sp, #44]	; 0x2c
    f67a:	9b08      	ldr	r3, [sp, #32]
    f67c:	3307      	adds	r3, #7
    f67e:	f023 0307 	bic.w	r3, r3, #7
    f682:	ecb3 8b02 	vldmia	r3!, {d8}
    f686:	eeb0 7bc8 	vabs.f64	d7, d8
    f68a:	eeb4 7b49 	vcmp.f64	d7, d9
    f68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f692:	9308      	str	r3, [sp, #32]
    f694:	f340 84e9 	ble.w	1006a <_svfprintf_r+0xd62>
    f698:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    f69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f6a0:	f101 8059 	bmi.w	10756 <_svfprintf_r+0x144e>
    f6a4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f6a8:	4cab      	ldr	r4, [pc, #684]	; (f958 <_svfprintf_r+0x650>)
    f6aa:	4bac      	ldr	r3, [pc, #688]	; (f95c <_svfprintf_r+0x654>)
    f6ac:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    f6b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f6b2:	2a47      	cmp	r2, #71	; 0x47
    f6b4:	bfc8      	it	gt
    f6b6:	461c      	movgt	r4, r3
    f6b8:	2300      	movs	r3, #0
    f6ba:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    f6be:	2203      	movs	r2, #3
    f6c0:	9307      	str	r3, [sp, #28]
    f6c2:	9202      	str	r2, [sp, #8]
    f6c4:	9205      	str	r2, [sp, #20]
    f6c6:	9303      	str	r3, [sp, #12]
    f6c8:	930f      	str	r3, [sp, #60]	; 0x3c
    f6ca:	2900      	cmp	r1, #0
    f6cc:	f43f af5f 	beq.w	f58e <_svfprintf_r+0x286>
    f6d0:	9b02      	ldr	r3, [sp, #8]
    f6d2:	3301      	adds	r3, #1
    f6d4:	9302      	str	r3, [sp, #8]
    f6d6:	e75a      	b.n	f58e <_svfprintf_r+0x286>
    f6d8:	2b43      	cmp	r3, #67	; 0x43
    f6da:	930b      	str	r3, [sp, #44]	; 0x2c
    f6dc:	d003      	beq.n	f6e6 <_svfprintf_r+0x3de>
    f6de:	f018 0f10 	tst.w	r8, #16
    f6e2:	f000 855d 	beq.w	101a0 <_svfprintf_r+0xe98>
    f6e6:	9d08      	ldr	r5, [sp, #32]
    f6e8:	2208      	movs	r2, #8
    f6ea:	2100      	movs	r1, #0
    f6ec:	a822      	add	r0, sp, #136	; 0x88
    f6ee:	ac37      	add	r4, sp, #220	; 0xdc
    f6f0:	f7fe fbcc 	bl	de8c <memset>
    f6f4:	ab22      	add	r3, sp, #136	; 0x88
    f6f6:	f855 2b04 	ldr.w	r2, [r5], #4
    f6fa:	4621      	mov	r1, r4
    f6fc:	4658      	mov	r0, fp
    f6fe:	f002 fc41 	bl	11f84 <_wcrtomb_r>
    f702:	4603      	mov	r3, r0
    f704:	3301      	adds	r3, #1
    f706:	9005      	str	r0, [sp, #20]
    f708:	f001 82ee 	beq.w	10ce8 <_svfprintf_r+0x19e0>
    f70c:	9b05      	ldr	r3, [sp, #20]
    f70e:	9508      	str	r5, [sp, #32]
    f710:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f714:	9302      	str	r3, [sp, #8]
    f716:	2100      	movs	r1, #0
    f718:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    f71c:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    f720:	9107      	str	r1, [sp, #28]
    f722:	9103      	str	r1, [sp, #12]
    f724:	910f      	str	r1, [sp, #60]	; 0x3c
    f726:	e732      	b.n	f58e <_svfprintf_r+0x286>
    f728:	930b      	str	r3, [sp, #44]	; 0x2c
    f72a:	9b08      	ldr	r3, [sp, #32]
    f72c:	461a      	mov	r2, r3
    f72e:	2300      	movs	r3, #0
    f730:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    f734:	4613      	mov	r3, r2
    f736:	f853 4b04 	ldr.w	r4, [r3], #4
    f73a:	9308      	str	r3, [sp, #32]
    f73c:	2c00      	cmp	r4, #0
    f73e:	f000 8548 	beq.w	101d2 <_svfprintf_r+0xeca>
    f742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f744:	2b53      	cmp	r3, #83	; 0x53
    f746:	f000 86ec 	beq.w	10522 <_svfprintf_r+0x121a>
    f74a:	f018 0310 	ands.w	r3, r8, #16
    f74e:	930c      	str	r3, [sp, #48]	; 0x30
    f750:	f040 86e7 	bne.w	10522 <_svfprintf_r+0x121a>
    f754:	9b03      	ldr	r3, [sp, #12]
    f756:	1c5d      	adds	r5, r3, #1
    f758:	f001 80e5 	beq.w	10926 <_svfprintf_r+0x161e>
    f75c:	990c      	ldr	r1, [sp, #48]	; 0x30
    f75e:	461a      	mov	r2, r3
    f760:	4620      	mov	r0, r4
    f762:	f7ff f8e5 	bl	e930 <memchr>
    f766:	9007      	str	r0, [sp, #28]
    f768:	2800      	cmp	r0, #0
    f76a:	f001 8328 	beq.w	10dbe <_svfprintf_r+0x1ab6>
    f76e:	9b07      	ldr	r3, [sp, #28]
    f770:	1b1a      	subs	r2, r3, r4
    f772:	9205      	str	r2, [sp, #20]
    f774:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f776:	9303      	str	r3, [sp, #12]
    f778:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    f77c:	930f      	str	r3, [sp, #60]	; 0x3c
    f77e:	930d      	str	r3, [sp, #52]	; 0x34
    f780:	9307      	str	r3, [sp, #28]
    f782:	2373      	movs	r3, #115	; 0x73
    f784:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f788:	9202      	str	r2, [sp, #8]
    f78a:	930b      	str	r3, [sp, #44]	; 0x2c
    f78c:	e79d      	b.n	f6ca <_svfprintf_r+0x3c2>
    f78e:	f018 0f20 	tst.w	r8, #32
    f792:	930b      	str	r3, [sp, #44]	; 0x2c
    f794:	9b08      	ldr	r3, [sp, #32]
    f796:	d03d      	beq.n	f814 <_svfprintf_r+0x50c>
    f798:	3307      	adds	r3, #7
    f79a:	f023 0307 	bic.w	r3, r3, #7
    f79e:	461a      	mov	r2, r3
    f7a0:	4611      	mov	r1, r2
    f7a2:	685b      	ldr	r3, [r3, #4]
    f7a4:	f851 2b08 	ldr.w	r2, [r1], #8
    f7a8:	9108      	str	r1, [sp, #32]
    f7aa:	4619      	mov	r1, r3
    f7ac:	2b00      	cmp	r3, #0
    f7ae:	f2c0 840c 	blt.w	ffca <_svfprintf_r+0xcc2>
    f7b2:	9b03      	ldr	r3, [sp, #12]
    f7b4:	3301      	adds	r3, #1
    f7b6:	f000 829e 	beq.w	fcf6 <_svfprintf_r+0x9ee>
    f7ba:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    f7be:	ea52 0301 	orrs.w	r3, r2, r1
    f7c2:	9002      	str	r0, [sp, #8]
    f7c4:	f040 8299 	bne.w	fcfa <_svfprintf_r+0x9f2>
    f7c8:	9b03      	ldr	r3, [sp, #12]
    f7ca:	2b00      	cmp	r3, #0
    f7cc:	f040 829a 	bne.w	fd04 <_svfprintf_r+0x9fc>
    f7d0:	4680      	mov	r8, r0
    f7d2:	2300      	movs	r3, #0
    f7d4:	9303      	str	r3, [sp, #12]
    f7d6:	9305      	str	r3, [sp, #20]
    f7d8:	ac50      	add	r4, sp, #320	; 0x140
    f7da:	e106      	b.n	f9ea <_svfprintf_r+0x6e2>
    f7dc:	9b08      	ldr	r3, [sp, #32]
    f7de:	f853 2b04 	ldr.w	r2, [r3], #4
    f7e2:	9206      	str	r2, [sp, #24]
    f7e4:	2a00      	cmp	r2, #0
    f7e6:	f280 8419 	bge.w	1001c <_svfprintf_r+0xd14>
    f7ea:	9a06      	ldr	r2, [sp, #24]
    f7ec:	9308      	str	r3, [sp, #32]
    f7ee:	4252      	negs	r2, r2
    f7f0:	9206      	str	r2, [sp, #24]
    f7f2:	f899 3000 	ldrb.w	r3, [r9]
    f7f6:	f048 0804 	orr.w	r8, r8, #4
    f7fa:	e5e1      	b.n	f3c0 <_svfprintf_r+0xb8>
    f7fc:	f899 3000 	ldrb.w	r3, [r9]
    f800:	f048 0808 	orr.w	r8, r8, #8
    f804:	e5dc      	b.n	f3c0 <_svfprintf_r+0xb8>
    f806:	f048 0810 	orr.w	r8, r8, #16
    f80a:	f018 0f20 	tst.w	r8, #32
    f80e:	930b      	str	r3, [sp, #44]	; 0x2c
    f810:	9b08      	ldr	r3, [sp, #32]
    f812:	d1c1      	bne.n	f798 <_svfprintf_r+0x490>
    f814:	f018 0f10 	tst.w	r8, #16
    f818:	f040 840b 	bne.w	10032 <_svfprintf_r+0xd2a>
    f81c:	f018 0f40 	tst.w	r8, #64	; 0x40
    f820:	f000 8403 	beq.w	1002a <_svfprintf_r+0xd22>
    f824:	f933 2b04 	ldrsh.w	r2, [r3], #4
    f828:	9308      	str	r3, [sp, #32]
    f82a:	17d1      	asrs	r1, r2, #31
    f82c:	460b      	mov	r3, r1
    f82e:	e7bd      	b.n	f7ac <_svfprintf_r+0x4a4>
    f830:	9b08      	ldr	r3, [sp, #32]
    f832:	f048 0202 	orr.w	r2, r8, #2
    f836:	9202      	str	r2, [sp, #8]
    f838:	f853 2b04 	ldr.w	r2, [r3], #4
    f83c:	9308      	str	r3, [sp, #32]
    f83e:	f647 0330 	movw	r3, #30768	; 0x7830
    f842:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    f846:	2078      	movs	r0, #120	; 0x78
    f848:	4b45      	ldr	r3, [pc, #276]	; (f960 <_svfprintf_r+0x658>)
    f84a:	9311      	str	r3, [sp, #68]	; 0x44
    f84c:	2100      	movs	r1, #0
    f84e:	2302      	movs	r3, #2
    f850:	900b      	str	r0, [sp, #44]	; 0x2c
    f852:	2000      	movs	r0, #0
    f854:	9c03      	ldr	r4, [sp, #12]
    f856:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    f85a:	1c60      	adds	r0, r4, #1
    f85c:	f000 80ad 	beq.w	f9ba <_svfprintf_r+0x6b2>
    f860:	9802      	ldr	r0, [sp, #8]
    f862:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    f866:	ea52 0001 	orrs.w	r0, r2, r1
    f86a:	f040 80a4 	bne.w	f9b6 <_svfprintf_r+0x6ae>
    f86e:	2c00      	cmp	r4, #0
    f870:	f040 86ae 	bne.w	105d0 <_svfprintf_r+0x12c8>
    f874:	2b00      	cmp	r3, #0
    f876:	d1ac      	bne.n	f7d2 <_svfprintf_r+0x4ca>
    f878:	9b02      	ldr	r3, [sp, #8]
    f87a:	f013 0301 	ands.w	r3, r3, #1
    f87e:	9305      	str	r3, [sp, #20]
    f880:	f000 83d1 	beq.w	10026 <_svfprintf_r+0xd1e>
    f884:	2330      	movs	r3, #48	; 0x30
    f886:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    f88a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    f88e:	e0ac      	b.n	f9ea <_svfprintf_r+0x6e2>
    f890:	f018 0f20 	tst.w	r8, #32
    f894:	f040 83d4 	bne.w	10040 <_svfprintf_r+0xd38>
    f898:	f018 0f10 	tst.w	r8, #16
    f89c:	f040 869f 	bne.w	105de <_svfprintf_r+0x12d6>
    f8a0:	f018 0f40 	tst.w	r8, #64	; 0x40
    f8a4:	f040 8797 	bne.w	107d6 <_svfprintf_r+0x14ce>
    f8a8:	f418 7f00 	tst.w	r8, #512	; 0x200
    f8ac:	f000 8697 	beq.w	105de <_svfprintf_r+0x12d6>
    f8b0:	9b08      	ldr	r3, [sp, #32]
    f8b2:	9904      	ldr	r1, [sp, #16]
    f8b4:	f853 2b04 	ldr.w	r2, [r3], #4
    f8b8:	9308      	str	r3, [sp, #32]
    f8ba:	7011      	strb	r1, [r2, #0]
    f8bc:	464c      	mov	r4, r9
    f8be:	e555      	b.n	f36c <_svfprintf_r+0x64>
    f8c0:	f899 3000 	ldrb.w	r3, [r9]
    f8c4:	2b68      	cmp	r3, #104	; 0x68
    f8c6:	bf03      	ittte	eq
    f8c8:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    f8cc:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    f8d0:	f109 0901 	addeq.w	r9, r9, #1
    f8d4:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    f8d8:	e572      	b.n	f3c0 <_svfprintf_r+0xb8>
    f8da:	f899 3000 	ldrb.w	r3, [r9]
    f8de:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    f8e2:	e56d      	b.n	f3c0 <_svfprintf_r+0xb8>
    f8e4:	f899 3000 	ldrb.w	r3, [r9]
    f8e8:	2b6c      	cmp	r3, #108	; 0x6c
    f8ea:	bf03      	ittte	eq
    f8ec:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    f8f0:	f048 0820 	orreq.w	r8, r8, #32
    f8f4:	f109 0901 	addeq.w	r9, r9, #1
    f8f8:	f048 0810 	orrne.w	r8, r8, #16
    f8fc:	e560      	b.n	f3c0 <_svfprintf_r+0xb8>
    f8fe:	930b      	str	r3, [sp, #44]	; 0x2c
    f900:	f048 0810 	orr.w	r8, r8, #16
    f904:	f018 0120 	ands.w	r1, r8, #32
    f908:	f000 8351 	beq.w	ffae <_svfprintf_r+0xca6>
    f90c:	9b08      	ldr	r3, [sp, #32]
    f90e:	3307      	adds	r3, #7
    f910:	f023 0307 	bic.w	r3, r3, #7
    f914:	6859      	ldr	r1, [r3, #4]
    f916:	f853 2b08 	ldr.w	r2, [r3], #8
    f91a:	9308      	str	r3, [sp, #32]
    f91c:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    f920:	9302      	str	r3, [sp, #8]
    f922:	2300      	movs	r3, #0
    f924:	e795      	b.n	f852 <_svfprintf_r+0x54a>
    f926:	930b      	str	r3, [sp, #44]	; 0x2c
    f928:	f048 0310 	orr.w	r3, r8, #16
    f92c:	9302      	str	r3, [sp, #8]
    f92e:	9b02      	ldr	r3, [sp, #8]
    f930:	f013 0120 	ands.w	r1, r3, #32
    f934:	f000 8329 	beq.w	ff8a <_svfprintf_r+0xc82>
    f938:	9b08      	ldr	r3, [sp, #32]
    f93a:	3307      	adds	r3, #7
    f93c:	f023 0307 	bic.w	r3, r3, #7
    f940:	6859      	ldr	r1, [r3, #4]
    f942:	f853 2b08 	ldr.w	r2, [r3], #8
    f946:	9308      	str	r3, [sp, #32]
    f948:	2301      	movs	r3, #1
    f94a:	e782      	b.n	f852 <_svfprintf_r+0x54a>
    f94c:	f899 3000 	ldrb.w	r3, [r9]
    f950:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    f954:	e534      	b.n	f3c0 <_svfprintf_r+0xb8>
    f956:	bf00      	nop
    f958:	20001328 	.word	0x20001328
    f95c:	2000132c 	.word	0x2000132c
    f960:	20001338 	.word	0x20001338
    f964:	4649      	mov	r1, r9
    f966:	f811 3b01 	ldrb.w	r3, [r1], #1
    f96a:	2b2a      	cmp	r3, #42	; 0x2a
    f96c:	f001 8249 	beq.w	10e02 <_svfprintf_r+0x1afa>
    f970:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    f974:	2a09      	cmp	r2, #9
    f976:	4689      	mov	r9, r1
    f978:	bf98      	it	ls
    f97a:	2100      	movls	r1, #0
    f97c:	f201 8144 	bhi.w	10c08 <_svfprintf_r+0x1900>
    f980:	f819 3b01 	ldrb.w	r3, [r9], #1
    f984:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    f988:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    f98c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    f990:	2a09      	cmp	r2, #9
    f992:	d9f5      	bls.n	f980 <_svfprintf_r+0x678>
    f994:	9103      	str	r1, [sp, #12]
    f996:	e515      	b.n	f3c4 <_svfprintf_r+0xbc>
    f998:	f899 3000 	ldrb.w	r3, [r9]
    f99c:	f048 0801 	orr.w	r8, r8, #1
    f9a0:	e50e      	b.n	f3c0 <_svfprintf_r+0xb8>
    f9a2:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    f9a6:	2b00      	cmp	r3, #0
    f9a8:	f47f ad8f 	bne.w	f4ca <_svfprintf_r+0x1c2>
    f9ac:	f899 3000 	ldrb.w	r3, [r9]
    f9b0:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    f9b4:	e504      	b.n	f3c0 <_svfprintf_r+0xb8>
    f9b6:	f8cd 8008 	str.w	r8, [sp, #8]
    f9ba:	2b01      	cmp	r3, #1
    f9bc:	f000 819d 	beq.w	fcfa <_svfprintf_r+0x9f2>
    f9c0:	2b02      	cmp	r3, #2
    f9c2:	ac50      	add	r4, sp, #320	; 0x140
    f9c4:	d120      	bne.n	fa08 <_svfprintf_r+0x700>
    f9c6:	9811      	ldr	r0, [sp, #68]	; 0x44
    f9c8:	f002 030f 	and.w	r3, r2, #15
    f9cc:	0912      	lsrs	r2, r2, #4
    f9ce:	5cc3      	ldrb	r3, [r0, r3]
    f9d0:	f804 3d01 	strb.w	r3, [r4, #-1]!
    f9d4:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    f9d8:	0909      	lsrs	r1, r1, #4
    f9da:	ea52 0301 	orrs.w	r3, r2, r1
    f9de:	d1f3      	bne.n	f9c8 <_svfprintf_r+0x6c0>
    f9e0:	ab50      	add	r3, sp, #320	; 0x140
    f9e2:	1b1b      	subs	r3, r3, r4
    f9e4:	f8dd 8008 	ldr.w	r8, [sp, #8]
    f9e8:	9305      	str	r3, [sp, #20]
    f9ea:	9a05      	ldr	r2, [sp, #20]
    f9ec:	9803      	ldr	r0, [sp, #12]
    f9ee:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f9f2:	4282      	cmp	r2, r0
    f9f4:	f04f 0300 	mov.w	r3, #0
    f9f8:	bfb8      	it	lt
    f9fa:	4602      	movlt	r2, r0
    f9fc:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    fa00:	9307      	str	r3, [sp, #28]
    fa02:	9202      	str	r2, [sp, #8]
    fa04:	930f      	str	r3, [sp, #60]	; 0x3c
    fa06:	e660      	b.n	f6ca <_svfprintf_r+0x3c2>
    fa08:	f002 0307 	and.w	r3, r2, #7
    fa0c:	08d2      	lsrs	r2, r2, #3
    fa0e:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    fa12:	08c9      	lsrs	r1, r1, #3
    fa14:	3330      	adds	r3, #48	; 0x30
    fa16:	ea52 0501 	orrs.w	r5, r2, r1
    fa1a:	4620      	mov	r0, r4
    fa1c:	f804 3d01 	strb.w	r3, [r4, #-1]!
    fa20:	d1f2      	bne.n	fa08 <_svfprintf_r+0x700>
    fa22:	9a02      	ldr	r2, [sp, #8]
    fa24:	07d1      	lsls	r1, r2, #31
    fa26:	f100 824d 	bmi.w	fec4 <_svfprintf_r+0xbbc>
    fa2a:	ab50      	add	r3, sp, #320	; 0x140
    fa2c:	1b1b      	subs	r3, r3, r4
    fa2e:	4690      	mov	r8, r2
    fa30:	9305      	str	r3, [sp, #20]
    fa32:	e7da      	b.n	f9ea <_svfprintf_r+0x6e2>
    fa34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa36:	2b65      	cmp	r3, #101	; 0x65
    fa38:	f340 80d4 	ble.w	fbe4 <_svfprintf_r+0x8dc>
    fa3c:	eeb5 8b40 	vcmp.f64	d8, #0.0
    fa40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fa44:	f040 81c1 	bne.w	fdca <_svfprintf_r+0xac2>
    fa48:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fa4a:	49ba      	ldr	r1, [pc, #744]	; (fd34 <_svfprintf_r+0xa2c>)
    fa4c:	f8ca 1000 	str.w	r1, [sl]
    fa50:	3301      	adds	r3, #1
    fa52:	3201      	adds	r2, #1
    fa54:	2101      	movs	r1, #1
    fa56:	2b07      	cmp	r3, #7
    fa58:	9226      	str	r2, [sp, #152]	; 0x98
    fa5a:	9325      	str	r3, [sp, #148]	; 0x94
    fa5c:	f8ca 1004 	str.w	r1, [sl, #4]
    fa60:	f300 8551 	bgt.w	10506 <_svfprintf_r+0x11fe>
    fa64:	f10a 0a08 	add.w	sl, sl, #8
    fa68:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    fa6a:	990e      	ldr	r1, [sp, #56]	; 0x38
    fa6c:	428b      	cmp	r3, r1
    fa6e:	f280 82d0 	bge.w	10012 <_svfprintf_r+0xd0a>
    fa72:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fa74:	9912      	ldr	r1, [sp, #72]	; 0x48
    fa76:	441a      	add	r2, r3
    fa78:	e9ca 1300 	strd	r1, r3, [sl]
    fa7c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fa7e:	9226      	str	r2, [sp, #152]	; 0x98
    fa80:	3301      	adds	r3, #1
    fa82:	2b07      	cmp	r3, #7
    fa84:	9325      	str	r3, [sp, #148]	; 0x94
    fa86:	f300 8397 	bgt.w	101b8 <_svfprintf_r+0xeb0>
    fa8a:	f10a 0a08 	add.w	sl, sl, #8
    fa8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fa90:	1e5c      	subs	r4, r3, #1
    fa92:	2c00      	cmp	r4, #0
    fa94:	f77f add0 	ble.w	f638 <_svfprintf_r+0x330>
    fa98:	2c10      	cmp	r4, #16
    fa9a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fa9c:	f340 856e 	ble.w	1057c <_svfprintf_r+0x1274>
    faa0:	ee1b 6a10 	vmov	r6, s22
    faa4:	2510      	movs	r5, #16
    faa6:	e005      	b.n	fab4 <_svfprintf_r+0x7ac>
    faa8:	f10a 0a08 	add.w	sl, sl, #8
    faac:	3c10      	subs	r4, #16
    faae:	2c10      	cmp	r4, #16
    fab0:	f340 8564 	ble.w	1057c <_svfprintf_r+0x1274>
    fab4:	3301      	adds	r3, #1
    fab6:	49a0      	ldr	r1, [pc, #640]	; (fd38 <_svfprintf_r+0xa30>)
    fab8:	3210      	adds	r2, #16
    faba:	2b07      	cmp	r3, #7
    fabc:	e9ca 1500 	strd	r1, r5, [sl]
    fac0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fac4:	ddf0      	ble.n	faa8 <_svfprintf_r+0x7a0>
    fac6:	aa24      	add	r2, sp, #144	; 0x90
    fac8:	4631      	mov	r1, r6
    faca:	4658      	mov	r0, fp
    facc:	f003 fe3c 	bl	13748 <__ssprint_r>
    fad0:	2800      	cmp	r0, #0
    fad2:	d17e      	bne.n	fbd2 <_svfprintf_r+0x8ca>
    fad4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    fad8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fadc:	e7e6      	b.n	faac <_svfprintf_r+0x7a4>
    fade:	9b06      	ldr	r3, [sp, #24]
    fae0:	9902      	ldr	r1, [sp, #8]
    fae2:	1a5d      	subs	r5, r3, r1
    fae4:	2d00      	cmp	r5, #0
    fae6:	f77f ad8e 	ble.w	f606 <_svfprintf_r+0x2fe>
    faea:	2d10      	cmp	r5, #16
    faec:	9b25      	ldr	r3, [sp, #148]	; 0x94
    faee:	dd21      	ble.n	fb34 <_svfprintf_r+0x82c>
    faf0:	9409      	str	r4, [sp, #36]	; 0x24
    faf2:	2610      	movs	r6, #16
    faf4:	ee1b 4a10 	vmov	r4, s22
    faf8:	e004      	b.n	fb04 <_svfprintf_r+0x7fc>
    fafa:	3d10      	subs	r5, #16
    fafc:	2d10      	cmp	r5, #16
    fafe:	f10a 0a08 	add.w	sl, sl, #8
    fb02:	dd16      	ble.n	fb32 <_svfprintf_r+0x82a>
    fb04:	3301      	adds	r3, #1
    fb06:	498c      	ldr	r1, [pc, #560]	; (fd38 <_svfprintf_r+0xa30>)
    fb08:	3210      	adds	r2, #16
    fb0a:	2b07      	cmp	r3, #7
    fb0c:	e9ca 1600 	strd	r1, r6, [sl]
    fb10:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fb14:	ddf1      	ble.n	fafa <_svfprintf_r+0x7f2>
    fb16:	aa24      	add	r2, sp, #144	; 0x90
    fb18:	4621      	mov	r1, r4
    fb1a:	4658      	mov	r0, fp
    fb1c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fb20:	f003 fe12 	bl	13748 <__ssprint_r>
    fb24:	2800      	cmp	r0, #0
    fb26:	d154      	bne.n	fbd2 <_svfprintf_r+0x8ca>
    fb28:	3d10      	subs	r5, #16
    fb2a:	2d10      	cmp	r5, #16
    fb2c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    fb30:	dce8      	bgt.n	fb04 <_svfprintf_r+0x7fc>
    fb32:	9c09      	ldr	r4, [sp, #36]	; 0x24
    fb34:	4980      	ldr	r1, [pc, #512]	; (fd38 <_svfprintf_r+0xa30>)
    fb36:	f8ca 5004 	str.w	r5, [sl, #4]
    fb3a:	3301      	adds	r3, #1
    fb3c:	442a      	add	r2, r5
    fb3e:	2b07      	cmp	r3, #7
    fb40:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fb44:	f8ca 1000 	str.w	r1, [sl]
    fb48:	f300 8526 	bgt.w	10598 <_svfprintf_r+0x1290>
    fb4c:	9b03      	ldr	r3, [sp, #12]
    fb4e:	9905      	ldr	r1, [sp, #20]
    fb50:	1a5d      	subs	r5, r3, r1
    fb52:	2d00      	cmp	r5, #0
    fb54:	f10a 0a08 	add.w	sl, sl, #8
    fb58:	f77f ad5b 	ble.w	f612 <_svfprintf_r+0x30a>
    fb5c:	2d10      	cmp	r5, #16
    fb5e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fb60:	dd1f      	ble.n	fba2 <_svfprintf_r+0x89a>
    fb62:	4651      	mov	r1, sl
    fb64:	2610      	movs	r6, #16
    fb66:	ee1b aa10 	vmov	sl, s22
    fb6a:	e004      	b.n	fb76 <_svfprintf_r+0x86e>
    fb6c:	3d10      	subs	r5, #16
    fb6e:	2d10      	cmp	r5, #16
    fb70:	f101 0108 	add.w	r1, r1, #8
    fb74:	dd14      	ble.n	fba0 <_svfprintf_r+0x898>
    fb76:	3301      	adds	r3, #1
    fb78:	486f      	ldr	r0, [pc, #444]	; (fd38 <_svfprintf_r+0xa30>)
    fb7a:	3210      	adds	r2, #16
    fb7c:	2b07      	cmp	r3, #7
    fb7e:	e9c1 0600 	strd	r0, r6, [r1]
    fb82:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fb86:	ddf1      	ble.n	fb6c <_svfprintf_r+0x864>
    fb88:	aa24      	add	r2, sp, #144	; 0x90
    fb8a:	4651      	mov	r1, sl
    fb8c:	4658      	mov	r0, fp
    fb8e:	f003 fddb 	bl	13748 <__ssprint_r>
    fb92:	b9f0      	cbnz	r0, fbd2 <_svfprintf_r+0x8ca>
    fb94:	3d10      	subs	r5, #16
    fb96:	2d10      	cmp	r5, #16
    fb98:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    fb9c:	a927      	add	r1, sp, #156	; 0x9c
    fb9e:	dcea      	bgt.n	fb76 <_svfprintf_r+0x86e>
    fba0:	468a      	mov	sl, r1
    fba2:	3301      	adds	r3, #1
    fba4:	4964      	ldr	r1, [pc, #400]	; (fd38 <_svfprintf_r+0xa30>)
    fba6:	f8ca 5004 	str.w	r5, [sl, #4]
    fbaa:	442a      	add	r2, r5
    fbac:	2b07      	cmp	r3, #7
    fbae:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fbb2:	f8ca 1000 	str.w	r1, [sl]
    fbb6:	f300 81da 	bgt.w	ff6e <_svfprintf_r+0xc66>
    fbba:	f10a 0a08 	add.w	sl, sl, #8
    fbbe:	e528      	b.n	f612 <_svfprintf_r+0x30a>
    fbc0:	ee1b 1a10 	vmov	r1, s22
    fbc4:	aa24      	add	r2, sp, #144	; 0x90
    fbc6:	4658      	mov	r0, fp
    fbc8:	f003 fdbe 	bl	13748 <__ssprint_r>
    fbcc:	2800      	cmp	r0, #0
    fbce:	f43f ad47 	beq.w	f660 <_svfprintf_r+0x358>
    fbd2:	9b07      	ldr	r3, [sp, #28]
    fbd4:	2b00      	cmp	r3, #0
    fbd6:	f43f aca2 	beq.w	f51e <_svfprintf_r+0x216>
    fbda:	9907      	ldr	r1, [sp, #28]
    fbdc:	4658      	mov	r0, fp
    fbde:	f7ff f9d9 	bl	ef94 <_free_r>
    fbe2:	e49c      	b.n	f51e <_svfprintf_r+0x216>
    fbe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fbe6:	2b01      	cmp	r3, #1
    fbe8:	f340 817a 	ble.w	fee0 <_svfprintf_r+0xbd8>
    fbec:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fbee:	f8ca 4000 	str.w	r4, [sl]
    fbf2:	3301      	adds	r3, #1
    fbf4:	3201      	adds	r2, #1
    fbf6:	2101      	movs	r1, #1
    fbf8:	2b07      	cmp	r3, #7
    fbfa:	9226      	str	r2, [sp, #152]	; 0x98
    fbfc:	9325      	str	r3, [sp, #148]	; 0x94
    fbfe:	f8ca 1004 	str.w	r1, [sl, #4]
    fc02:	f300 81f8 	bgt.w	fff6 <_svfprintf_r+0xcee>
    fc06:	f10a 0a08 	add.w	sl, sl, #8
    fc0a:	9910      	ldr	r1, [sp, #64]	; 0x40
    fc0c:	9812      	ldr	r0, [sp, #72]	; 0x48
    fc0e:	3301      	adds	r3, #1
    fc10:	440a      	add	r2, r1
    fc12:	2b07      	cmp	r3, #7
    fc14:	e9ca 0100 	strd	r0, r1, [sl]
    fc18:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fc1c:	f300 81dd 	bgt.w	ffda <_svfprintf_r+0xcd2>
    fc20:	f10a 0a08 	add.w	sl, sl, #8
    fc24:	eeb5 8b40 	vcmp.f64	d8, #0.0
    fc28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fc2c:	f000 8177 	beq.w	ff1e <_svfprintf_r+0xc16>
    fc30:	990e      	ldr	r1, [sp, #56]	; 0x38
    fc32:	3301      	adds	r3, #1
    fc34:	3901      	subs	r1, #1
    fc36:	3401      	adds	r4, #1
    fc38:	440a      	add	r2, r1
    fc3a:	2b07      	cmp	r3, #7
    fc3c:	f8ca 4000 	str.w	r4, [sl]
    fc40:	9325      	str	r3, [sp, #148]	; 0x94
    fc42:	f8ca 1004 	str.w	r1, [sl, #4]
    fc46:	9226      	str	r2, [sp, #152]	; 0x98
    fc48:	f300 815b 	bgt.w	ff02 <_svfprintf_r+0xbfa>
    fc4c:	f10a 0a08 	add.w	sl, sl, #8
    fc50:	9914      	ldr	r1, [sp, #80]	; 0x50
    fc52:	f8ca 1004 	str.w	r1, [sl, #4]
    fc56:	3301      	adds	r3, #1
    fc58:	440a      	add	r2, r1
    fc5a:	2b07      	cmp	r3, #7
    fc5c:	a91e      	add	r1, sp, #120	; 0x78
    fc5e:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fc62:	f8ca 1000 	str.w	r1, [sl]
    fc66:	f77f ace5 	ble.w	f634 <_svfprintf_r+0x32c>
    fc6a:	ee1b 1a10 	vmov	r1, s22
    fc6e:	aa24      	add	r2, sp, #144	; 0x90
    fc70:	4658      	mov	r0, fp
    fc72:	f003 fd69 	bl	13748 <__ssprint_r>
    fc76:	2800      	cmp	r0, #0
    fc78:	d1ab      	bne.n	fbd2 <_svfprintf_r+0x8ca>
    fc7a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fc7c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fc80:	e4da      	b.n	f638 <_svfprintf_r+0x330>
    fc82:	2d10      	cmp	r5, #16
    fc84:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    fc88:	4e2c      	ldr	r6, [pc, #176]	; (fd3c <_svfprintf_r+0xa34>)
    fc8a:	dd24      	ble.n	fcd6 <_svfprintf_r+0x9ce>
    fc8c:	9417      	str	r4, [sp, #92]	; 0x5c
    fc8e:	2310      	movs	r3, #16
    fc90:	ee1b 4a10 	vmov	r4, s22
    fc94:	4608      	mov	r0, r1
    fc96:	e004      	b.n	fca2 <_svfprintf_r+0x99a>
    fc98:	3d10      	subs	r5, #16
    fc9a:	2d10      	cmp	r5, #16
    fc9c:	f10a 0a08 	add.w	sl, sl, #8
    fca0:	dd17      	ble.n	fcd2 <_svfprintf_r+0x9ca>
    fca2:	3001      	adds	r0, #1
    fca4:	3210      	adds	r2, #16
    fca6:	2807      	cmp	r0, #7
    fca8:	e9ca 6300 	strd	r6, r3, [sl]
    fcac:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    fcb0:	ddf2      	ble.n	fc98 <_svfprintf_r+0x990>
    fcb2:	aa24      	add	r2, sp, #144	; 0x90
    fcb4:	4621      	mov	r1, r4
    fcb6:	4658      	mov	r0, fp
    fcb8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fcbc:	f003 fd44 	bl	13748 <__ssprint_r>
    fcc0:	2800      	cmp	r0, #0
    fcc2:	d186      	bne.n	fbd2 <_svfprintf_r+0x8ca>
    fcc4:	3d10      	subs	r5, #16
    fcc6:	2d10      	cmp	r5, #16
    fcc8:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    fccc:	f04f 0310 	mov.w	r3, #16
    fcd0:	dce7      	bgt.n	fca2 <_svfprintf_r+0x99a>
    fcd2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    fcd4:	4601      	mov	r1, r0
    fcd6:	3101      	adds	r1, #1
    fcd8:	442a      	add	r2, r5
    fcda:	2907      	cmp	r1, #7
    fcdc:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    fce0:	f8ca 6000 	str.w	r6, [sl]
    fce4:	f8ca 5004 	str.w	r5, [sl, #4]
    fce8:	f300 83bd 	bgt.w	10466 <_svfprintf_r+0x115e>
    fcec:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    fcf0:	f10a 0a08 	add.w	sl, sl, #8
    fcf4:	e45d      	b.n	f5b2 <_svfprintf_r+0x2aa>
    fcf6:	f8cd 8008 	str.w	r8, [sp, #8]
    fcfa:	2a0a      	cmp	r2, #10
    fcfc:	f171 0300 	sbcs.w	r3, r1, #0
    fd00:	f080 8345 	bcs.w	1038e <_svfprintf_r+0x1086>
    fd04:	3230      	adds	r2, #48	; 0x30
    fd06:	2301      	movs	r3, #1
    fd08:	f8dd 8008 	ldr.w	r8, [sp, #8]
    fd0c:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    fd10:	9305      	str	r3, [sp, #20]
    fd12:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    fd16:	e668      	b.n	f9ea <_svfprintf_r+0x6e2>
    fd18:	ee1b 1a10 	vmov	r1, s22
    fd1c:	aa24      	add	r2, sp, #144	; 0x90
    fd1e:	4658      	mov	r0, fp
    fd20:	f003 fd12 	bl	13748 <__ssprint_r>
    fd24:	2800      	cmp	r0, #0
    fd26:	f47f af54 	bne.w	fbd2 <_svfprintf_r+0x8ca>
    fd2a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fd2c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fd30:	e452      	b.n	f5d8 <_svfprintf_r+0x2d0>
    fd32:	bf00      	nop
    fd34:	20001368 	.word	0x20001368
    fd38:	200018d8 	.word	0x200018d8
    fd3c:	2000136c 	.word	0x2000136c
    fd40:	ee1b 1a10 	vmov	r1, s22
    fd44:	aa24      	add	r2, sp, #144	; 0x90
    fd46:	4658      	mov	r0, fp
    fd48:	f003 fcfe 	bl	13748 <__ssprint_r>
    fd4c:	2800      	cmp	r0, #0
    fd4e:	f47f af40 	bne.w	fbd2 <_svfprintf_r+0x8ca>
    fd52:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fd54:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fd58:	e451      	b.n	f5fe <_svfprintf_r+0x2f6>
    fd5a:	2c10      	cmp	r4, #16
    fd5c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fd5e:	4ebe      	ldr	r6, [pc, #760]	; (10058 <_svfprintf_r+0xd50>)
    fd60:	dd1f      	ble.n	fda2 <_svfprintf_r+0xa9a>
    fd62:	ee1b 8a10 	vmov	r8, s22
    fd66:	2510      	movs	r5, #16
    fd68:	e004      	b.n	fd74 <_svfprintf_r+0xa6c>
    fd6a:	3c10      	subs	r4, #16
    fd6c:	2c10      	cmp	r4, #16
    fd6e:	f10a 0a08 	add.w	sl, sl, #8
    fd72:	dd16      	ble.n	fda2 <_svfprintf_r+0xa9a>
    fd74:	3301      	adds	r3, #1
    fd76:	3210      	adds	r2, #16
    fd78:	2b07      	cmp	r3, #7
    fd7a:	e9ca 6500 	strd	r6, r5, [sl]
    fd7e:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fd82:	ddf2      	ble.n	fd6a <_svfprintf_r+0xa62>
    fd84:	aa24      	add	r2, sp, #144	; 0x90
    fd86:	4641      	mov	r1, r8
    fd88:	4658      	mov	r0, fp
    fd8a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fd8e:	f003 fcdb 	bl	13748 <__ssprint_r>
    fd92:	2800      	cmp	r0, #0
    fd94:	f47f af1d 	bne.w	fbd2 <_svfprintf_r+0x8ca>
    fd98:	3c10      	subs	r4, #16
    fd9a:	2c10      	cmp	r4, #16
    fd9c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    fda0:	dce8      	bgt.n	fd74 <_svfprintf_r+0xa6c>
    fda2:	3301      	adds	r3, #1
    fda4:	4422      	add	r2, r4
    fda6:	2b07      	cmp	r3, #7
    fda8:	e9ca 6400 	strd	r6, r4, [sl]
    fdac:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fdb0:	f77f ac4b 	ble.w	f64a <_svfprintf_r+0x342>
    fdb4:	ee1b 1a10 	vmov	r1, s22
    fdb8:	aa24      	add	r2, sp, #144	; 0x90
    fdba:	4658      	mov	r0, fp
    fdbc:	f003 fcc4 	bl	13748 <__ssprint_r>
    fdc0:	2800      	cmp	r0, #0
    fdc2:	f47f af06 	bne.w	fbd2 <_svfprintf_r+0x8ca>
    fdc6:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fdc8:	e43f      	b.n	f64a <_svfprintf_r+0x342>
    fdca:	991b      	ldr	r1, [sp, #108]	; 0x6c
    fdcc:	2900      	cmp	r1, #0
    fdce:	f340 835a 	ble.w	10486 <_svfprintf_r+0x117e>
    fdd2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    fdd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fdd6:	429e      	cmp	r6, r3
    fdd8:	bfa8      	it	ge
    fdda:	461e      	movge	r6, r3
    fddc:	2e00      	cmp	r6, #0
    fdde:	dd0b      	ble.n	fdf8 <_svfprintf_r+0xaf0>
    fde0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fde2:	3301      	adds	r3, #1
    fde4:	4432      	add	r2, r6
    fde6:	2b07      	cmp	r3, #7
    fde8:	e9ca 4600 	strd	r4, r6, [sl]
    fdec:	9226      	str	r2, [sp, #152]	; 0x98
    fdee:	9325      	str	r3, [sp, #148]	; 0x94
    fdf0:	f300 8689 	bgt.w	10b06 <_svfprintf_r+0x17fe>
    fdf4:	f10a 0a08 	add.w	sl, sl, #8
    fdf8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    fdfa:	2e00      	cmp	r6, #0
    fdfc:	bfa8      	it	ge
    fdfe:	1bad      	subge	r5, r5, r6
    fe00:	2d00      	cmp	r5, #0
    fe02:	f300 8203 	bgt.w	1020c <_svfprintf_r+0xf04>
    fe06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fe08:	f418 6f80 	tst.w	r8, #1024	; 0x400
    fe0c:	4423      	add	r3, r4
    fe0e:	9305      	str	r3, [sp, #20]
    fe10:	f040 821f 	bne.w	10252 <_svfprintf_r+0xf4a>
    fe14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    fe16:	990e      	ldr	r1, [sp, #56]	; 0x38
    fe18:	428b      	cmp	r3, r1
    fe1a:	db03      	blt.n	fe24 <_svfprintf_r+0xb1c>
    fe1c:	f018 0f01 	tst.w	r8, #1
    fe20:	f000 84cf 	beq.w	107c2 <_svfprintf_r+0x14ba>
    fe24:	9910      	ldr	r1, [sp, #64]	; 0x40
    fe26:	9812      	ldr	r0, [sp, #72]	; 0x48
    fe28:	440a      	add	r2, r1
    fe2a:	e9ca 0100 	strd	r0, r1, [sl]
    fe2e:	9925      	ldr	r1, [sp, #148]	; 0x94
    fe30:	9226      	str	r2, [sp, #152]	; 0x98
    fe32:	3101      	adds	r1, #1
    fe34:	2907      	cmp	r1, #7
    fe36:	9125      	str	r1, [sp, #148]	; 0x94
    fe38:	f300 86a5 	bgt.w	10b86 <_svfprintf_r+0x187e>
    fe3c:	f10a 0a08 	add.w	sl, sl, #8
    fe40:	990e      	ldr	r1, [sp, #56]	; 0x38
    fe42:	1865      	adds	r5, r4, r1
    fe44:	1acc      	subs	r4, r1, r3
    fe46:	9b05      	ldr	r3, [sp, #20]
    fe48:	1aed      	subs	r5, r5, r3
    fe4a:	42a5      	cmp	r5, r4
    fe4c:	bfa8      	it	ge
    fe4e:	4625      	movge	r5, r4
    fe50:	2d00      	cmp	r5, #0
    fe52:	dd0d      	ble.n	fe70 <_svfprintf_r+0xb68>
    fe54:	f8ca 3000 	str.w	r3, [sl]
    fe58:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fe5a:	f8ca 5004 	str.w	r5, [sl, #4]
    fe5e:	3301      	adds	r3, #1
    fe60:	442a      	add	r2, r5
    fe62:	2b07      	cmp	r3, #7
    fe64:	9226      	str	r2, [sp, #152]	; 0x98
    fe66:	9325      	str	r3, [sp, #148]	; 0x94
    fe68:	f300 86bb 	bgt.w	10be2 <_svfprintf_r+0x18da>
    fe6c:	f10a 0a08 	add.w	sl, sl, #8
    fe70:	2d00      	cmp	r5, #0
    fe72:	bfa8      	it	ge
    fe74:	1b64      	subge	r4, r4, r5
    fe76:	2c00      	cmp	r4, #0
    fe78:	f77f abde 	ble.w	f638 <_svfprintf_r+0x330>
    fe7c:	2c10      	cmp	r4, #16
    fe7e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fe80:	f340 837c 	ble.w	1057c <_svfprintf_r+0x1274>
    fe84:	ee1b 6a10 	vmov	r6, s22
    fe88:	2510      	movs	r5, #16
    fe8a:	e005      	b.n	fe98 <_svfprintf_r+0xb90>
    fe8c:	f10a 0a08 	add.w	sl, sl, #8
    fe90:	3c10      	subs	r4, #16
    fe92:	2c10      	cmp	r4, #16
    fe94:	f340 8372 	ble.w	1057c <_svfprintf_r+0x1274>
    fe98:	3301      	adds	r3, #1
    fe9a:	4970      	ldr	r1, [pc, #448]	; (1005c <_svfprintf_r+0xd54>)
    fe9c:	3210      	adds	r2, #16
    fe9e:	2b07      	cmp	r3, #7
    fea0:	e9ca 1500 	strd	r1, r5, [sl]
    fea4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fea8:	ddf0      	ble.n	fe8c <_svfprintf_r+0xb84>
    feaa:	aa24      	add	r2, sp, #144	; 0x90
    feac:	4631      	mov	r1, r6
    feae:	4658      	mov	r0, fp
    feb0:	f003 fc4a 	bl	13748 <__ssprint_r>
    feb4:	2800      	cmp	r0, #0
    feb6:	f47f ae8c 	bne.w	fbd2 <_svfprintf_r+0x8ca>
    feba:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    febe:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fec2:	e7e5      	b.n	fe90 <_svfprintf_r+0xb88>
    fec4:	2b30      	cmp	r3, #48	; 0x30
    fec6:	f43f ad8b 	beq.w	f9e0 <_svfprintf_r+0x6d8>
    feca:	2330      	movs	r3, #48	; 0x30
    fecc:	3802      	subs	r0, #2
    fece:	f804 3c01 	strb.w	r3, [r4, #-1]
    fed2:	ab50      	add	r3, sp, #320	; 0x140
    fed4:	1a1b      	subs	r3, r3, r0
    fed6:	f8dd 8008 	ldr.w	r8, [sp, #8]
    feda:	9305      	str	r3, [sp, #20]
    fedc:	4604      	mov	r4, r0
    fede:	e584      	b.n	f9ea <_svfprintf_r+0x6e2>
    fee0:	f018 0f01 	tst.w	r8, #1
    fee4:	f47f ae82 	bne.w	fbec <_svfprintf_r+0x8e4>
    fee8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    feea:	f8ca 4000 	str.w	r4, [sl]
    feee:	3301      	adds	r3, #1
    fef0:	3201      	adds	r2, #1
    fef2:	2101      	movs	r1, #1
    fef4:	2b07      	cmp	r3, #7
    fef6:	9226      	str	r2, [sp, #152]	; 0x98
    fef8:	9325      	str	r3, [sp, #148]	; 0x94
    fefa:	f8ca 1004 	str.w	r1, [sl, #4]
    fefe:	f77f aea5 	ble.w	fc4c <_svfprintf_r+0x944>
    ff02:	ee1b 1a10 	vmov	r1, s22
    ff06:	aa24      	add	r2, sp, #144	; 0x90
    ff08:	4658      	mov	r0, fp
    ff0a:	f003 fc1d 	bl	13748 <__ssprint_r>
    ff0e:	2800      	cmp	r0, #0
    ff10:	f47f ae5f 	bne.w	fbd2 <_svfprintf_r+0x8ca>
    ff14:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ff18:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ff1c:	e698      	b.n	fc50 <_svfprintf_r+0x948>
    ff1e:	990e      	ldr	r1, [sp, #56]	; 0x38
    ff20:	1e4c      	subs	r4, r1, #1
    ff22:	2c00      	cmp	r4, #0
    ff24:	f77f ae94 	ble.w	fc50 <_svfprintf_r+0x948>
    ff28:	2c10      	cmp	r4, #16
    ff2a:	f340 8361 	ble.w	105f0 <_svfprintf_r+0x12e8>
    ff2e:	ee1b 6a10 	vmov	r6, s22
    ff32:	2510      	movs	r5, #16
    ff34:	e005      	b.n	ff42 <_svfprintf_r+0xc3a>
    ff36:	f10a 0a08 	add.w	sl, sl, #8
    ff3a:	3c10      	subs	r4, #16
    ff3c:	2c10      	cmp	r4, #16
    ff3e:	f340 8357 	ble.w	105f0 <_svfprintf_r+0x12e8>
    ff42:	3301      	adds	r3, #1
    ff44:	4945      	ldr	r1, [pc, #276]	; (1005c <_svfprintf_r+0xd54>)
    ff46:	3210      	adds	r2, #16
    ff48:	2b07      	cmp	r3, #7
    ff4a:	e9ca 1500 	strd	r1, r5, [sl]
    ff4e:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ff52:	ddf0      	ble.n	ff36 <_svfprintf_r+0xc2e>
    ff54:	aa24      	add	r2, sp, #144	; 0x90
    ff56:	4631      	mov	r1, r6
    ff58:	4658      	mov	r0, fp
    ff5a:	f003 fbf5 	bl	13748 <__ssprint_r>
    ff5e:	2800      	cmp	r0, #0
    ff60:	f47f ae37 	bne.w	fbd2 <_svfprintf_r+0x8ca>
    ff64:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ff68:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ff6c:	e7e5      	b.n	ff3a <_svfprintf_r+0xc32>
    ff6e:	ee1b 1a10 	vmov	r1, s22
    ff72:	aa24      	add	r2, sp, #144	; 0x90
    ff74:	4658      	mov	r0, fp
    ff76:	f003 fbe7 	bl	13748 <__ssprint_r>
    ff7a:	2800      	cmp	r0, #0
    ff7c:	f47f ae29 	bne.w	fbd2 <_svfprintf_r+0x8ca>
    ff80:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ff82:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ff86:	f7ff bb44 	b.w	f612 <_svfprintf_r+0x30a>
    ff8a:	9b02      	ldr	r3, [sp, #8]
    ff8c:	f013 0310 	ands.w	r3, r3, #16
    ff90:	f040 80c1 	bne.w	10116 <_svfprintf_r+0xe0e>
    ff94:	9a02      	ldr	r2, [sp, #8]
    ff96:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    ff9a:	f000 837a 	beq.w	10692 <_svfprintf_r+0x138a>
    ff9e:	9808      	ldr	r0, [sp, #32]
    ffa0:	f850 2b04 	ldr.w	r2, [r0], #4
    ffa4:	9008      	str	r0, [sp, #32]
    ffa6:	4619      	mov	r1, r3
    ffa8:	b292      	uxth	r2, r2
    ffaa:	2301      	movs	r3, #1
    ffac:	e451      	b.n	f852 <_svfprintf_r+0x54a>
    ffae:	f018 0310 	ands.w	r3, r8, #16
    ffb2:	d155      	bne.n	10060 <_svfprintf_r+0xd58>
    ffb4:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    ffb8:	f000 835d 	beq.w	10676 <_svfprintf_r+0x136e>
    ffbc:	9808      	ldr	r0, [sp, #32]
    ffbe:	f850 2b04 	ldr.w	r2, [r0], #4
    ffc2:	9008      	str	r0, [sp, #32]
    ffc4:	4619      	mov	r1, r3
    ffc6:	b292      	uxth	r2, r2
    ffc8:	e4a8      	b.n	f91c <_svfprintf_r+0x614>
    ffca:	4252      	negs	r2, r2
    ffcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    ffd0:	f8cd 8008 	str.w	r8, [sp, #8]
    ffd4:	202d      	movs	r0, #45	; 0x2d
    ffd6:	2301      	movs	r3, #1
    ffd8:	e43c      	b.n	f854 <_svfprintf_r+0x54c>
    ffda:	ee1b 1a10 	vmov	r1, s22
    ffde:	aa24      	add	r2, sp, #144	; 0x90
    ffe0:	4658      	mov	r0, fp
    ffe2:	f003 fbb1 	bl	13748 <__ssprint_r>
    ffe6:	2800      	cmp	r0, #0
    ffe8:	f47f adf3 	bne.w	fbd2 <_svfprintf_r+0x8ca>
    ffec:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    fff0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fff4:	e616      	b.n	fc24 <_svfprintf_r+0x91c>
    fff6:	ee1b 1a10 	vmov	r1, s22
    fffa:	aa24      	add	r2, sp, #144	; 0x90
    fffc:	4658      	mov	r0, fp
    fffe:	f003 fba3 	bl	13748 <__ssprint_r>
   10002:	2800      	cmp	r0, #0
   10004:	f47f ade5 	bne.w	fbd2 <_svfprintf_r+0x8ca>
   10008:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1000c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   10010:	e5fb      	b.n	fc0a <_svfprintf_r+0x902>
   10012:	f018 0f01 	tst.w	r8, #1
   10016:	f43f ab0f 	beq.w	f638 <_svfprintf_r+0x330>
   1001a:	e52a      	b.n	fa72 <_svfprintf_r+0x76a>
   1001c:	9308      	str	r3, [sp, #32]
   1001e:	f899 3000 	ldrb.w	r3, [r9]
   10022:	f7ff b9cd 	b.w	f3c0 <_svfprintf_r+0xb8>
   10026:	ac50      	add	r4, sp, #320	; 0x140
   10028:	e4df      	b.n	f9ea <_svfprintf_r+0x6e2>
   1002a:	f418 7f00 	tst.w	r8, #512	; 0x200
   1002e:	f040 83db 	bne.w	107e8 <_svfprintf_r+0x14e0>
   10032:	f853 2b04 	ldr.w	r2, [r3], #4
   10036:	9308      	str	r3, [sp, #32]
   10038:	17d1      	asrs	r1, r2, #31
   1003a:	460b      	mov	r3, r1
   1003c:	f7ff bbb6 	b.w	f7ac <_svfprintf_r+0x4a4>
   10040:	9b08      	ldr	r3, [sp, #32]
   10042:	9804      	ldr	r0, [sp, #16]
   10044:	f853 1b04 	ldr.w	r1, [r3], #4
   10048:	9308      	str	r3, [sp, #32]
   1004a:	17c2      	asrs	r2, r0, #31
   1004c:	e9c1 0200 	strd	r0, r2, [r1]
   10050:	464c      	mov	r4, r9
   10052:	f7ff b98b 	b.w	f36c <_svfprintf_r+0x64>
   10056:	bf00      	nop
   10058:	2000136c 	.word	0x2000136c
   1005c:	200018d8 	.word	0x200018d8
   10060:	9b08      	ldr	r3, [sp, #32]
   10062:	f853 2b04 	ldr.w	r2, [r3], #4
   10066:	9308      	str	r3, [sp, #32]
   10068:	e458      	b.n	f91c <_svfprintf_r+0x614>
   1006a:	eeb4 8b48 	vcmp.f64	d8, d8
   1006e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10072:	f180 8694 	bvs.w	10d9e <_svfprintf_r+0x1a96>
   10076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10078:	2b61      	cmp	r3, #97	; 0x61
   1007a:	f000 8552 	beq.w	10b22 <_svfprintf_r+0x181a>
   1007e:	2b41      	cmp	r3, #65	; 0x41
   10080:	f000 85c0 	beq.w	10c04 <_svfprintf_r+0x18fc>
   10084:	9b03      	ldr	r3, [sp, #12]
   10086:	3301      	adds	r3, #1
   10088:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1008a:	f023 0520 	bic.w	r5, r3, #32
   1008e:	f000 8480 	beq.w	10992 <_svfprintf_r+0x168a>
   10092:	2d47      	cmp	r5, #71	; 0x47
   10094:	d104      	bne.n	100a0 <_svfprintf_r+0xd98>
   10096:	9b03      	ldr	r3, [sp, #12]
   10098:	2b00      	cmp	r3, #0
   1009a:	bf08      	it	eq
   1009c:	2301      	moveq	r3, #1
   1009e:	9303      	str	r3, [sp, #12]
   100a0:	ee18 3a90 	vmov	r3, s17
   100a4:	2b00      	cmp	r3, #0
   100a6:	f448 7280 	orr.w	r2, r8, #256	; 0x100
   100aa:	4646      	mov	r6, r8
   100ac:	f2c0 8618 	blt.w	10ce0 <_svfprintf_r+0x19d8>
   100b0:	eeb0 ab48 	vmov.f64	d10, d8
   100b4:	2300      	movs	r3, #0
   100b6:	4690      	mov	r8, r2
   100b8:	9309      	str	r3, [sp, #36]	; 0x24
   100ba:	9307      	str	r3, [sp, #28]
   100bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   100be:	3b41      	subs	r3, #65	; 0x41
   100c0:	2b25      	cmp	r3, #37	; 0x25
   100c2:	f200 8398 	bhi.w	107f6 <_svfprintf_r+0x14ee>
   100c6:	e8df f013 	tbh	[pc, r3, lsl #1]
   100ca:	046f      	.short	0x046f
   100cc:	03960396 	.word	0x03960396
   100d0:	04680396 	.word	0x04680396
   100d4:	0396046c 	.word	0x0396046c
   100d8:	03960396 	.word	0x03960396
   100dc:	03960396 	.word	0x03960396
   100e0:	03960396 	.word	0x03960396
   100e4:	03960396 	.word	0x03960396
   100e8:	03960396 	.word	0x03960396
   100ec:	03960396 	.word	0x03960396
   100f0:	03960396 	.word	0x03960396
   100f4:	03960396 	.word	0x03960396
   100f8:	03960396 	.word	0x03960396
   100fc:	03960396 	.word	0x03960396
   10100:	03960396 	.word	0x03960396
   10104:	03960396 	.word	0x03960396
   10108:	03960396 	.word	0x03960396
   1010c:	03960396 	.word	0x03960396
   10110:	04680396 	.word	0x04680396
   10114:	046c      	.short	0x046c
   10116:	9b08      	ldr	r3, [sp, #32]
   10118:	f853 2b04 	ldr.w	r2, [r3], #4
   1011c:	9308      	str	r3, [sp, #32]
   1011e:	2301      	movs	r3, #1
   10120:	f7ff bb97 	b.w	f852 <_svfprintf_r+0x54a>
   10124:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10126:	2b00      	cmp	r3, #0
   10128:	f43f a9cf 	beq.w	f4ca <_svfprintf_r+0x1c2>
   1012c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1012e:	781b      	ldrb	r3, [r3, #0]
   10130:	2b00      	cmp	r3, #0
   10132:	f43f a9ca 	beq.w	f4ca <_svfprintf_r+0x1c2>
   10136:	f899 3000 	ldrb.w	r3, [r9]
   1013a:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
   1013e:	f7ff b93f 	b.w	f3c0 <_svfprintf_r+0xb8>
   10142:	930b      	str	r3, [sp, #44]	; 0x2c
   10144:	f8cd 8008 	str.w	r8, [sp, #8]
   10148:	f7ff bbf1 	b.w	f92e <_svfprintf_r+0x626>
   1014c:	930b      	str	r3, [sp, #44]	; 0x2c
   1014e:	4b9a      	ldr	r3, [pc, #616]	; (103b8 <_svfprintf_r+0x10b0>)
   10150:	9311      	str	r3, [sp, #68]	; 0x44
   10152:	f018 0120 	ands.w	r1, r8, #32
   10156:	f000 8105 	beq.w	10364 <_svfprintf_r+0x105c>
   1015a:	9b08      	ldr	r3, [sp, #32]
   1015c:	3307      	adds	r3, #7
   1015e:	f023 0307 	bic.w	r3, r3, #7
   10162:	6859      	ldr	r1, [r3, #4]
   10164:	f853 2b08 	ldr.w	r2, [r3], #8
   10168:	9308      	str	r3, [sp, #32]
   1016a:	f018 0f01 	tst.w	r8, #1
   1016e:	d00a      	beq.n	10186 <_svfprintf_r+0xe7e>
   10170:	ea52 0301 	orrs.w	r3, r2, r1
   10174:	d007      	beq.n	10186 <_svfprintf_r+0xe7e>
   10176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10178:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   1017c:	2330      	movs	r3, #48	; 0x30
   1017e:	f048 0802 	orr.w	r8, r8, #2
   10182:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   10186:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   1018a:	9302      	str	r3, [sp, #8]
   1018c:	2302      	movs	r3, #2
   1018e:	f7ff bb60 	b.w	f852 <_svfprintf_r+0x54a>
   10192:	930b      	str	r3, [sp, #44]	; 0x2c
   10194:	f7ff bbb6 	b.w	f904 <_svfprintf_r+0x5fc>
   10198:	930b      	str	r3, [sp, #44]	; 0x2c
   1019a:	4b88      	ldr	r3, [pc, #544]	; (103bc <_svfprintf_r+0x10b4>)
   1019c:	9311      	str	r3, [sp, #68]	; 0x44
   1019e:	e7d8      	b.n	10152 <_svfprintf_r+0xe4a>
   101a0:	9b08      	ldr	r3, [sp, #32]
   101a2:	2101      	movs	r1, #1
   101a4:	f853 2b04 	ldr.w	r2, [r3], #4
   101a8:	9102      	str	r1, [sp, #8]
   101aa:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
   101ae:	9308      	str	r3, [sp, #32]
   101b0:	9105      	str	r1, [sp, #20]
   101b2:	ac37      	add	r4, sp, #220	; 0xdc
   101b4:	f7ff baaf 	b.w	f716 <_svfprintf_r+0x40e>
   101b8:	ee1b 1a10 	vmov	r1, s22
   101bc:	aa24      	add	r2, sp, #144	; 0x90
   101be:	4658      	mov	r0, fp
   101c0:	f003 fac2 	bl	13748 <__ssprint_r>
   101c4:	2800      	cmp	r0, #0
   101c6:	f47f ad04 	bne.w	fbd2 <_svfprintf_r+0x8ca>
   101ca:	9a26      	ldr	r2, [sp, #152]	; 0x98
   101cc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   101d0:	e45d      	b.n	fa8e <_svfprintf_r+0x786>
   101d2:	9b03      	ldr	r3, [sp, #12]
   101d4:	9407      	str	r4, [sp, #28]
   101d6:	2b06      	cmp	r3, #6
   101d8:	4622      	mov	r2, r4
   101da:	bf28      	it	cs
   101dc:	2306      	movcs	r3, #6
   101de:	9403      	str	r4, [sp, #12]
   101e0:	4621      	mov	r1, r4
   101e2:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
   101e6:	4c76      	ldr	r4, [pc, #472]	; (103c0 <_svfprintf_r+0x10b8>)
   101e8:	9302      	str	r3, [sp, #8]
   101ea:	9305      	str	r3, [sp, #20]
   101ec:	920f      	str	r2, [sp, #60]	; 0x3c
   101ee:	f7ff ba6c 	b.w	f6ca <_svfprintf_r+0x3c2>
   101f2:	2140      	movs	r1, #64	; 0x40
   101f4:	4658      	mov	r0, fp
   101f6:	f7fd facd 	bl	d794 <_malloc_r>
   101fa:	6020      	str	r0, [r4, #0]
   101fc:	6120      	str	r0, [r4, #16]
   101fe:	2800      	cmp	r0, #0
   10200:	f000 860f 	beq.w	10e22 <_svfprintf_r+0x1b1a>
   10204:	2340      	movs	r3, #64	; 0x40
   10206:	6163      	str	r3, [r4, #20]
   10208:	f7ff b89e 	b.w	f348 <_svfprintf_r+0x40>
   1020c:	2d10      	cmp	r5, #16
   1020e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   10210:	f340 825d 	ble.w	106ce <_svfprintf_r+0x13c6>
   10214:	4651      	mov	r1, sl
   10216:	2610      	movs	r6, #16
   10218:	ee1b aa10 	vmov	sl, s22
   1021c:	e004      	b.n	10228 <_svfprintf_r+0xf20>
   1021e:	3108      	adds	r1, #8
   10220:	3d10      	subs	r5, #16
   10222:	2d10      	cmp	r5, #16
   10224:	f340 8252 	ble.w	106cc <_svfprintf_r+0x13c4>
   10228:	3301      	adds	r3, #1
   1022a:	4866      	ldr	r0, [pc, #408]	; (103c4 <_svfprintf_r+0x10bc>)
   1022c:	3210      	adds	r2, #16
   1022e:	2b07      	cmp	r3, #7
   10230:	e9c1 0600 	strd	r0, r6, [r1]
   10234:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   10238:	ddf1      	ble.n	1021e <_svfprintf_r+0xf16>
   1023a:	aa24      	add	r2, sp, #144	; 0x90
   1023c:	4651      	mov	r1, sl
   1023e:	4658      	mov	r0, fp
   10240:	f003 fa82 	bl	13748 <__ssprint_r>
   10244:	2800      	cmp	r0, #0
   10246:	f47f acc4 	bne.w	fbd2 <_svfprintf_r+0x8ca>
   1024a:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1024e:	a927      	add	r1, sp, #156	; 0x9c
   10250:	e7e6      	b.n	10220 <_svfprintf_r+0xf18>
   10252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10254:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   10258:	18e3      	adds	r3, r4, r3
   1025a:	9303      	str	r3, [sp, #12]
   1025c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1025e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   10262:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   10264:	9d05      	ldr	r5, [sp, #20]
   10266:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
   1026a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   1026e:	940b      	str	r4, [sp, #44]	; 0x2c
   10270:	ee1b 1a10 	vmov	r1, s22
   10274:	4650      	mov	r0, sl
   10276:	2b00      	cmp	r3, #0
   10278:	d034      	beq.n	102e4 <_svfprintf_r+0xfdc>
   1027a:	f1b8 0f00 	cmp.w	r8, #0
   1027e:	d135      	bne.n	102ec <_svfprintf_r+0xfe4>
   10280:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10282:	3b01      	subs	r3, #1
   10284:	3e01      	subs	r6, #1
   10286:	930d      	str	r3, [sp, #52]	; 0x34
   10288:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1028a:	e9c0 3900 	strd	r3, r9, [r0]
   1028e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   10290:	3301      	adds	r3, #1
   10292:	444a      	add	r2, r9
   10294:	2b07      	cmp	r3, #7
   10296:	9226      	str	r2, [sp, #152]	; 0x98
   10298:	9325      	str	r3, [sp, #148]	; 0x94
   1029a:	dc6c      	bgt.n	10376 <_svfprintf_r+0x106e>
   1029c:	3008      	adds	r0, #8
   1029e:	9b03      	ldr	r3, [sp, #12]
   102a0:	f896 c000 	ldrb.w	ip, [r6]
   102a4:	1b5b      	subs	r3, r3, r5
   102a6:	4563      	cmp	r3, ip
   102a8:	bfa8      	it	ge
   102aa:	4663      	movge	r3, ip
   102ac:	2b00      	cmp	r3, #0
   102ae:	469a      	mov	sl, r3
   102b0:	dd0c      	ble.n	102cc <_svfprintf_r+0xfc4>
   102b2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   102b4:	3401      	adds	r4, #1
   102b6:	441a      	add	r2, r3
   102b8:	2c07      	cmp	r4, #7
   102ba:	e9c0 5300 	strd	r5, r3, [r0]
   102be:	9226      	str	r2, [sp, #152]	; 0x98
   102c0:	9425      	str	r4, [sp, #148]	; 0x94
   102c2:	f300 8177 	bgt.w	105b4 <_svfprintf_r+0x12ac>
   102c6:	f896 c000 	ldrb.w	ip, [r6]
   102ca:	3008      	adds	r0, #8
   102cc:	f1ba 0f00 	cmp.w	sl, #0
   102d0:	bfac      	ite	ge
   102d2:	ebac 040a 	subge.w	r4, ip, sl
   102d6:	4664      	movlt	r4, ip
   102d8:	2c00      	cmp	r4, #0
   102da:	dc0a      	bgt.n	102f2 <_svfprintf_r+0xfea>
   102dc:	4465      	add	r5, ip
   102de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   102e0:	2b00      	cmp	r3, #0
   102e2:	d1ca      	bne.n	1027a <_svfprintf_r+0xf72>
   102e4:	f1b8 0f00 	cmp.w	r8, #0
   102e8:	f000 83ac 	beq.w	10a44 <_svfprintf_r+0x173c>
   102ec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   102f0:	e7ca      	b.n	10288 <_svfprintf_r+0xf80>
   102f2:	2c10      	cmp	r4, #16
   102f4:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
   102f8:	dd24      	ble.n	10344 <_svfprintf_r+0x103c>
   102fa:	9505      	str	r5, [sp, #20]
   102fc:	f04f 0a10 	mov.w	sl, #16
   10300:	4663      	mov	r3, ip
   10302:	460d      	mov	r5, r1
   10304:	e004      	b.n	10310 <_svfprintf_r+0x1008>
   10306:	3c10      	subs	r4, #16
   10308:	2c10      	cmp	r4, #16
   1030a:	f100 0008 	add.w	r0, r0, #8
   1030e:	dd16      	ble.n	1033e <_svfprintf_r+0x1036>
   10310:	3301      	adds	r3, #1
   10312:	492c      	ldr	r1, [pc, #176]	; (103c4 <_svfprintf_r+0x10bc>)
   10314:	3210      	adds	r2, #16
   10316:	2b07      	cmp	r3, #7
   10318:	e9c0 1a00 	strd	r1, sl, [r0]
   1031c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   10320:	ddf1      	ble.n	10306 <_svfprintf_r+0xffe>
   10322:	aa24      	add	r2, sp, #144	; 0x90
   10324:	4629      	mov	r1, r5
   10326:	4658      	mov	r0, fp
   10328:	f003 fa0e 	bl	13748 <__ssprint_r>
   1032c:	2800      	cmp	r0, #0
   1032e:	f47f ac50 	bne.w	fbd2 <_svfprintf_r+0x8ca>
   10332:	3c10      	subs	r4, #16
   10334:	2c10      	cmp	r4, #16
   10336:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1033a:	a827      	add	r0, sp, #156	; 0x9c
   1033c:	dce8      	bgt.n	10310 <_svfprintf_r+0x1008>
   1033e:	4629      	mov	r1, r5
   10340:	9d05      	ldr	r5, [sp, #20]
   10342:	469c      	mov	ip, r3
   10344:	f10c 0301 	add.w	r3, ip, #1
   10348:	4422      	add	r2, r4
   1034a:	6044      	str	r4, [r0, #4]
   1034c:	2b07      	cmp	r3, #7
   1034e:	4c1d      	ldr	r4, [pc, #116]	; (103c4 <_svfprintf_r+0x10bc>)
   10350:	6004      	str	r4, [r0, #0]
   10352:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   10356:	f300 83c6 	bgt.w	10ae6 <_svfprintf_r+0x17de>
   1035a:	f896 c000 	ldrb.w	ip, [r6]
   1035e:	3008      	adds	r0, #8
   10360:	4465      	add	r5, ip
   10362:	e7bc      	b.n	102de <_svfprintf_r+0xfd6>
   10364:	f018 0310 	ands.w	r3, r8, #16
   10368:	f000 80c2 	beq.w	104f0 <_svfprintf_r+0x11e8>
   1036c:	9b08      	ldr	r3, [sp, #32]
   1036e:	f853 2b04 	ldr.w	r2, [r3], #4
   10372:	9308      	str	r3, [sp, #32]
   10374:	e6f9      	b.n	1016a <_svfprintf_r+0xe62>
   10376:	aa24      	add	r2, sp, #144	; 0x90
   10378:	4658      	mov	r0, fp
   1037a:	9105      	str	r1, [sp, #20]
   1037c:	f003 f9e4 	bl	13748 <__ssprint_r>
   10380:	2800      	cmp	r0, #0
   10382:	f47f ac26 	bne.w	fbd2 <_svfprintf_r+0x8ca>
   10386:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10388:	9905      	ldr	r1, [sp, #20]
   1038a:	a827      	add	r0, sp, #156	; 0x9c
   1038c:	e787      	b.n	1029e <_svfprintf_r+0xf96>
   1038e:	9802      	ldr	r0, [sp, #8]
   10390:	f8cd a01c 	str.w	sl, [sp, #28]
   10394:	ac50      	add	r4, sp, #320	; 0x140
   10396:	f400 6080 	and.w	r0, r0, #1024	; 0x400
   1039a:	2500      	movs	r5, #0
   1039c:	ee0a ba10 	vmov	s20, fp
   103a0:	4b09      	ldr	r3, [pc, #36]	; (103c8 <_svfprintf_r+0x10c0>)
   103a2:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   103a6:	f8cd 9014 	str.w	r9, [sp, #20]
   103aa:	46a3      	mov	fp, r4
   103ac:	f04f 0805 	mov.w	r8, #5
   103b0:	46ac      	mov	ip, r5
   103b2:	4604      	mov	r4, r0
   103b4:	e010      	b.n	103d8 <_svfprintf_r+0x10d0>
   103b6:	bf00      	nop
   103b8:	20001338 	.word	0x20001338
   103bc:	2000134c 	.word	0x2000134c
   103c0:	20001360 	.word	0x20001360
   103c4:	200018d8 	.word	0x200018d8
   103c8:	cccccccd 	.word	0xcccccccd
   103cc:	2a0a      	cmp	r2, #10
   103ce:	f171 0100 	sbcs.w	r1, r1, #0
   103d2:	d336      	bcc.n	10442 <_svfprintf_r+0x113a>
   103d4:	464a      	mov	r2, r9
   103d6:	4631      	mov	r1, r6
   103d8:	1850      	adds	r0, r2, r1
   103da:	f140 0000 	adc.w	r0, r0, #0
   103de:	fba3 5600 	umull	r5, r6, r3, r0
   103e2:	f026 0503 	bic.w	r5, r6, #3
   103e6:	eb05 0596 	add.w	r5, r5, r6, lsr #2
   103ea:	1b40      	subs	r0, r0, r5
   103ec:	1a15      	subs	r5, r2, r0
   103ee:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
   103f2:	f161 0e00 	sbc.w	lr, r1, #0
   103f6:	fb06 f605 	mul.w	r6, r6, r5
   103fa:	fba5 9503 	umull	r9, r5, r5, r3
   103fe:	fb03 660e 	mla	r6, r3, lr, r6
   10402:	f009 0e01 	and.w	lr, r9, #1
   10406:	442e      	add	r6, r5
   10408:	fbae 5e08 	umull	r5, lr, lr, r8
   1040c:	182d      	adds	r5, r5, r0
   1040e:	ea4f 0959 	mov.w	r9, r9, lsr #1
   10412:	3530      	adds	r5, #48	; 0x30
   10414:	f80b 5c01 	strb.w	r5, [fp, #-1]
   10418:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
   1041c:	f10c 0c01 	add.w	ip, ip, #1
   10420:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   10424:	0876      	lsrs	r6, r6, #1
   10426:	2c00      	cmp	r4, #0
   10428:	d0d0      	beq.n	103cc <_svfprintf_r+0x10c4>
   1042a:	f89a 0000 	ldrb.w	r0, [sl]
   1042e:	4584      	cmp	ip, r0
   10430:	d1cc      	bne.n	103cc <_svfprintf_r+0x10c4>
   10432:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   10436:	d0c9      	beq.n	103cc <_svfprintf_r+0x10c4>
   10438:	2a0a      	cmp	r2, #10
   1043a:	f171 0100 	sbcs.w	r1, r1, #0
   1043e:	f080 818f 	bcs.w	10760 <_svfprintf_r+0x1458>
   10442:	465c      	mov	r4, fp
   10444:	ab50      	add	r3, sp, #320	; 0x140
   10446:	1b1b      	subs	r3, r3, r4
   10448:	f8dd 9014 	ldr.w	r9, [sp, #20]
   1044c:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
   10450:	ee1a ba10 	vmov	fp, s20
   10454:	f8dd a01c 	ldr.w	sl, [sp, #28]
   10458:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1045c:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   10460:	9305      	str	r3, [sp, #20]
   10462:	f7ff bac2 	b.w	f9ea <_svfprintf_r+0x6e2>
   10466:	ee1b 1a10 	vmov	r1, s22
   1046a:	aa24      	add	r2, sp, #144	; 0x90
   1046c:	4658      	mov	r0, fp
   1046e:	f003 f96b 	bl	13748 <__ssprint_r>
   10472:	2800      	cmp	r0, #0
   10474:	f47f abad 	bne.w	fbd2 <_svfprintf_r+0x8ca>
   10478:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   1047c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1047e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   10482:	f7ff b896 	b.w	f5b2 <_svfprintf_r+0x2aa>
   10486:	9b25      	ldr	r3, [sp, #148]	; 0x94
   10488:	48be      	ldr	r0, [pc, #760]	; (10784 <_svfprintf_r+0x147c>)
   1048a:	f8ca 0000 	str.w	r0, [sl]
   1048e:	3301      	adds	r3, #1
   10490:	3201      	adds	r2, #1
   10492:	2001      	movs	r0, #1
   10494:	2b07      	cmp	r3, #7
   10496:	9226      	str	r2, [sp, #152]	; 0x98
   10498:	9325      	str	r3, [sp, #148]	; 0x94
   1049a:	f8ca 0004 	str.w	r0, [sl, #4]
   1049e:	f300 8177 	bgt.w	10790 <_svfprintf_r+0x1488>
   104a2:	f10a 0a08 	add.w	sl, sl, #8
   104a6:	2900      	cmp	r1, #0
   104a8:	f040 80af 	bne.w	1060a <_svfprintf_r+0x1302>
   104ac:	990e      	ldr	r1, [sp, #56]	; 0x38
   104ae:	f008 0301 	and.w	r3, r8, #1
   104b2:	430b      	orrs	r3, r1
   104b4:	f43f a8c0 	beq.w	f638 <_svfprintf_r+0x330>
   104b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   104ba:	9912      	ldr	r1, [sp, #72]	; 0x48
   104bc:	441a      	add	r2, r3
   104be:	e9ca 1300 	strd	r1, r3, [sl]
   104c2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   104c4:	9226      	str	r2, [sp, #152]	; 0x98
   104c6:	3301      	adds	r3, #1
   104c8:	2b07      	cmp	r3, #7
   104ca:	9325      	str	r3, [sp, #148]	; 0x94
   104cc:	f300 8252 	bgt.w	10974 <_svfprintf_r+0x166c>
   104d0:	f10a 0a08 	add.w	sl, sl, #8
   104d4:	990e      	ldr	r1, [sp, #56]	; 0x38
   104d6:	f8ca 4000 	str.w	r4, [sl]
   104da:	3301      	adds	r3, #1
   104dc:	440a      	add	r2, r1
   104de:	2b07      	cmp	r3, #7
   104e0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   104e4:	f8ca 1004 	str.w	r1, [sl, #4]
   104e8:	f77f a8a4 	ble.w	f634 <_svfprintf_r+0x32c>
   104ec:	f7ff bbbd 	b.w	fc6a <_svfprintf_r+0x962>
   104f0:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   104f4:	f000 80dd 	beq.w	106b2 <_svfprintf_r+0x13aa>
   104f8:	9808      	ldr	r0, [sp, #32]
   104fa:	f850 2b04 	ldr.w	r2, [r0], #4
   104fe:	9008      	str	r0, [sp, #32]
   10500:	4619      	mov	r1, r3
   10502:	b292      	uxth	r2, r2
   10504:	e631      	b.n	1016a <_svfprintf_r+0xe62>
   10506:	ee1b 1a10 	vmov	r1, s22
   1050a:	aa24      	add	r2, sp, #144	; 0x90
   1050c:	4658      	mov	r0, fp
   1050e:	f003 f91b 	bl	13748 <__ssprint_r>
   10512:	2800      	cmp	r0, #0
   10514:	f47f ab5d 	bne.w	fbd2 <_svfprintf_r+0x8ca>
   10518:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1051a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1051e:	f7ff baa3 	b.w	fa68 <_svfprintf_r+0x760>
   10522:	ae22      	add	r6, sp, #136	; 0x88
   10524:	2208      	movs	r2, #8
   10526:	2100      	movs	r1, #0
   10528:	4630      	mov	r0, r6
   1052a:	941d      	str	r4, [sp, #116]	; 0x74
   1052c:	f7fd fcae 	bl	de8c <memset>
   10530:	9b03      	ldr	r3, [sp, #12]
   10532:	1c5a      	adds	r2, r3, #1
   10534:	f000 80db 	beq.w	106ee <_svfprintf_r+0x13e6>
   10538:	2500      	movs	r5, #0
   1053a:	f8cd 9008 	str.w	r9, [sp, #8]
   1053e:	f8cd 801c 	str.w	r8, [sp, #28]
   10542:	4699      	mov	r9, r3
   10544:	46a8      	mov	r8, r5
   10546:	e00c      	b.n	10562 <_svfprintf_r+0x125a>
   10548:	a937      	add	r1, sp, #220	; 0xdc
   1054a:	4658      	mov	r0, fp
   1054c:	f001 fd1a 	bl	11f84 <_wcrtomb_r>
   10550:	1c43      	adds	r3, r0, #1
   10552:	4440      	add	r0, r8
   10554:	f000 83c8 	beq.w	10ce8 <_svfprintf_r+0x19e0>
   10558:	4548      	cmp	r0, r9
   1055a:	dc08      	bgt.n	1056e <_svfprintf_r+0x1266>
   1055c:	f000 8418 	beq.w	10d90 <_svfprintf_r+0x1a88>
   10560:	4680      	mov	r8, r0
   10562:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   10564:	5952      	ldr	r2, [r2, r5]
   10566:	4633      	mov	r3, r6
   10568:	3504      	adds	r5, #4
   1056a:	2a00      	cmp	r2, #0
   1056c:	d1ec      	bne.n	10548 <_svfprintf_r+0x1240>
   1056e:	f8cd 8014 	str.w	r8, [sp, #20]
   10572:	f8dd 9008 	ldr.w	r9, [sp, #8]
   10576:	f8dd 801c 	ldr.w	r8, [sp, #28]
   1057a:	e0c5      	b.n	10708 <_svfprintf_r+0x1400>
   1057c:	3301      	adds	r3, #1
   1057e:	4982      	ldr	r1, [pc, #520]	; (10788 <_svfprintf_r+0x1480>)
   10580:	f8ca 4004 	str.w	r4, [sl, #4]
   10584:	4422      	add	r2, r4
   10586:	2b07      	cmp	r3, #7
   10588:	f8ca 1000 	str.w	r1, [sl]
   1058c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   10590:	f77f a850 	ble.w	f634 <_svfprintf_r+0x32c>
   10594:	f7ff bb69 	b.w	fc6a <_svfprintf_r+0x962>
   10598:	ee1b 1a10 	vmov	r1, s22
   1059c:	aa24      	add	r2, sp, #144	; 0x90
   1059e:	4658      	mov	r0, fp
   105a0:	f003 f8d2 	bl	13748 <__ssprint_r>
   105a4:	2800      	cmp	r0, #0
   105a6:	f47f ab14 	bne.w	fbd2 <_svfprintf_r+0x8ca>
   105aa:	9a26      	ldr	r2, [sp, #152]	; 0x98
   105ac:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   105b0:	f7ff b829 	b.w	f606 <_svfprintf_r+0x2fe>
   105b4:	aa24      	add	r2, sp, #144	; 0x90
   105b6:	4658      	mov	r0, fp
   105b8:	9105      	str	r1, [sp, #20]
   105ba:	f003 f8c5 	bl	13748 <__ssprint_r>
   105be:	2800      	cmp	r0, #0
   105c0:	f47f ab07 	bne.w	fbd2 <_svfprintf_r+0x8ca>
   105c4:	f896 c000 	ldrb.w	ip, [r6]
   105c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   105ca:	9905      	ldr	r1, [sp, #20]
   105cc:	a827      	add	r0, sp, #156	; 0x9c
   105ce:	e67d      	b.n	102cc <_svfprintf_r+0xfc4>
   105d0:	2b01      	cmp	r3, #1
   105d2:	f8cd 8008 	str.w	r8, [sp, #8]
   105d6:	f47f a9f3 	bne.w	f9c0 <_svfprintf_r+0x6b8>
   105da:	f7ff bb93 	b.w	fd04 <_svfprintf_r+0x9fc>
   105de:	9b08      	ldr	r3, [sp, #32]
   105e0:	9904      	ldr	r1, [sp, #16]
   105e2:	f853 2b04 	ldr.w	r2, [r3], #4
   105e6:	464c      	mov	r4, r9
   105e8:	6011      	str	r1, [r2, #0]
   105ea:	9308      	str	r3, [sp, #32]
   105ec:	f7fe bebe 	b.w	f36c <_svfprintf_r+0x64>
   105f0:	3301      	adds	r3, #1
   105f2:	4965      	ldr	r1, [pc, #404]	; (10788 <_svfprintf_r+0x1480>)
   105f4:	f8ca 4004 	str.w	r4, [sl, #4]
   105f8:	4422      	add	r2, r4
   105fa:	2b07      	cmp	r3, #7
   105fc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   10600:	f8ca 1000 	str.w	r1, [sl]
   10604:	f77f ab22 	ble.w	fc4c <_svfprintf_r+0x944>
   10608:	e47b      	b.n	ff02 <_svfprintf_r+0xbfa>
   1060a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1060c:	9812      	ldr	r0, [sp, #72]	; 0x48
   1060e:	441a      	add	r2, r3
   10610:	e9ca 0300 	strd	r0, r3, [sl]
   10614:	9b25      	ldr	r3, [sp, #148]	; 0x94
   10616:	9226      	str	r2, [sp, #152]	; 0x98
   10618:	3301      	adds	r3, #1
   1061a:	2b07      	cmp	r3, #7
   1061c:	9325      	str	r3, [sp, #148]	; 0x94
   1061e:	f300 81a9 	bgt.w	10974 <_svfprintf_r+0x166c>
   10622:	f10a 0a08 	add.w	sl, sl, #8
   10626:	2900      	cmp	r1, #0
   10628:	f6bf af54 	bge.w	104d4 <_svfprintf_r+0x11cc>
   1062c:	424d      	negs	r5, r1
   1062e:	3110      	adds	r1, #16
   10630:	f280 830f 	bge.w	10c52 <_svfprintf_r+0x194a>
   10634:	ee1b 1a10 	vmov	r1, s22
   10638:	2610      	movs	r6, #16
   1063a:	e005      	b.n	10648 <_svfprintf_r+0x1340>
   1063c:	f10a 0a08 	add.w	sl, sl, #8
   10640:	3d10      	subs	r5, #16
   10642:	2d10      	cmp	r5, #16
   10644:	f340 8305 	ble.w	10c52 <_svfprintf_r+0x194a>
   10648:	3301      	adds	r3, #1
   1064a:	484f      	ldr	r0, [pc, #316]	; (10788 <_svfprintf_r+0x1480>)
   1064c:	3210      	adds	r2, #16
   1064e:	2b07      	cmp	r3, #7
   10650:	e9ca 0600 	strd	r0, r6, [sl]
   10654:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   10658:	ddf0      	ble.n	1063c <_svfprintf_r+0x1334>
   1065a:	aa24      	add	r2, sp, #144	; 0x90
   1065c:	4658      	mov	r0, fp
   1065e:	9103      	str	r1, [sp, #12]
   10660:	f003 f872 	bl	13748 <__ssprint_r>
   10664:	2800      	cmp	r0, #0
   10666:	f47f aab4 	bne.w	fbd2 <_svfprintf_r+0x8ca>
   1066a:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1066e:	9903      	ldr	r1, [sp, #12]
   10670:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   10674:	e7e4      	b.n	10640 <_svfprintf_r+0x1338>
   10676:	9b08      	ldr	r3, [sp, #32]
   10678:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   1067c:	bf1a      	itte	ne
   1067e:	4611      	movne	r1, r2
   10680:	f853 2b04 	ldrne.w	r2, [r3], #4
   10684:	f853 2b04 	ldreq.w	r2, [r3], #4
   10688:	9308      	str	r3, [sp, #32]
   1068a:	bf18      	it	ne
   1068c:	b2d2      	uxtbne	r2, r2
   1068e:	f7ff b945 	b.w	f91c <_svfprintf_r+0x614>
   10692:	9b02      	ldr	r3, [sp, #8]
   10694:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   10698:	9b08      	ldr	r3, [sp, #32]
   1069a:	bf1a      	itte	ne
   1069c:	4611      	movne	r1, r2
   1069e:	f853 2b04 	ldrne.w	r2, [r3], #4
   106a2:	f853 2b04 	ldreq.w	r2, [r3], #4
   106a6:	9308      	str	r3, [sp, #32]
   106a8:	bf18      	it	ne
   106aa:	b2d2      	uxtbne	r2, r2
   106ac:	2301      	movs	r3, #1
   106ae:	f7ff b8d0 	b.w	f852 <_svfprintf_r+0x54a>
   106b2:	9b08      	ldr	r3, [sp, #32]
   106b4:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   106b8:	bf1a      	itte	ne
   106ba:	4611      	movne	r1, r2
   106bc:	f853 2b04 	ldrne.w	r2, [r3], #4
   106c0:	f853 2b04 	ldreq.w	r2, [r3], #4
   106c4:	9308      	str	r3, [sp, #32]
   106c6:	bf18      	it	ne
   106c8:	b2d2      	uxtbne	r2, r2
   106ca:	e54e      	b.n	1016a <_svfprintf_r+0xe62>
   106cc:	468a      	mov	sl, r1
   106ce:	3301      	adds	r3, #1
   106d0:	492d      	ldr	r1, [pc, #180]	; (10788 <_svfprintf_r+0x1480>)
   106d2:	f8ca 5004 	str.w	r5, [sl, #4]
   106d6:	442a      	add	r2, r5
   106d8:	2b07      	cmp	r3, #7
   106da:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   106de:	f8ca 1000 	str.w	r1, [sl]
   106e2:	f300 8139 	bgt.w	10958 <_svfprintf_r+0x1650>
   106e6:	f10a 0a08 	add.w	sl, sl, #8
   106ea:	f7ff bb8c 	b.w	fe06 <_svfprintf_r+0xafe>
   106ee:	2300      	movs	r3, #0
   106f0:	4619      	mov	r1, r3
   106f2:	9600      	str	r6, [sp, #0]
   106f4:	aa1d      	add	r2, sp, #116	; 0x74
   106f6:	4658      	mov	r0, fp
   106f8:	f001 fda4 	bl	12244 <_wcsrtombs_r>
   106fc:	4603      	mov	r3, r0
   106fe:	3301      	adds	r3, #1
   10700:	9005      	str	r0, [sp, #20]
   10702:	f000 82f1 	beq.w	10ce8 <_svfprintf_r+0x19e0>
   10706:	941d      	str	r4, [sp, #116]	; 0x74
   10708:	9b05      	ldr	r3, [sp, #20]
   1070a:	2b00      	cmp	r3, #0
   1070c:	d04e      	beq.n	107ac <_svfprintf_r+0x14a4>
   1070e:	2b63      	cmp	r3, #99	; 0x63
   10710:	f300 8118 	bgt.w	10944 <_svfprintf_r+0x163c>
   10714:	2300      	movs	r3, #0
   10716:	9307      	str	r3, [sp, #28]
   10718:	ac37      	add	r4, sp, #220	; 0xdc
   1071a:	2208      	movs	r2, #8
   1071c:	2100      	movs	r1, #0
   1071e:	4630      	mov	r0, r6
   10720:	f7fd fbb4 	bl	de8c <memset>
   10724:	9d05      	ldr	r5, [sp, #20]
   10726:	9600      	str	r6, [sp, #0]
   10728:	462b      	mov	r3, r5
   1072a:	aa1d      	add	r2, sp, #116	; 0x74
   1072c:	4621      	mov	r1, r4
   1072e:	4658      	mov	r0, fp
   10730:	f001 fd88 	bl	12244 <_wcsrtombs_r>
   10734:	4285      	cmp	r5, r0
   10736:	f040 837c 	bne.w	10e32 <_svfprintf_r+0x1b2a>
   1073a:	9a05      	ldr	r2, [sp, #20]
   1073c:	2300      	movs	r3, #0
   1073e:	54a3      	strb	r3, [r4, r2]
   10740:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   10744:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   10748:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   1074c:	9303      	str	r3, [sp, #12]
   1074e:	9202      	str	r2, [sp, #8]
   10750:	930f      	str	r3, [sp, #60]	; 0x3c
   10752:	f7fe bfba 	b.w	f6ca <_svfprintf_r+0x3c2>
   10756:	212d      	movs	r1, #45	; 0x2d
   10758:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   1075c:	f7fe bfa4 	b.w	f6a8 <_svfprintf_r+0x3a0>
   10760:	9b16      	ldr	r3, [sp, #88]	; 0x58
   10762:	9915      	ldr	r1, [sp, #84]	; 0x54
   10764:	ebab 0b03 	sub.w	fp, fp, r3
   10768:	461a      	mov	r2, r3
   1076a:	4658      	mov	r0, fp
   1076c:	f7fc ff96 	bl	d69c <strncpy>
   10770:	f89a 2001 	ldrb.w	r2, [sl, #1]
   10774:	4b05      	ldr	r3, [pc, #20]	; (1078c <_svfprintf_r+0x1484>)
   10776:	b10a      	cbz	r2, 1077c <_svfprintf_r+0x1474>
   10778:	f10a 0a01 	add.w	sl, sl, #1
   1077c:	f04f 0c00 	mov.w	ip, #0
   10780:	e628      	b.n	103d4 <_svfprintf_r+0x10cc>
   10782:	bf00      	nop
   10784:	20001368 	.word	0x20001368
   10788:	200018d8 	.word	0x200018d8
   1078c:	cccccccd 	.word	0xcccccccd
   10790:	ee1b 1a10 	vmov	r1, s22
   10794:	aa24      	add	r2, sp, #144	; 0x90
   10796:	4658      	mov	r0, fp
   10798:	f002 ffd6 	bl	13748 <__ssprint_r>
   1079c:	2800      	cmp	r0, #0
   1079e:	f47f aa18 	bne.w	fbd2 <_svfprintf_r+0x8ca>
   107a2:	991b      	ldr	r1, [sp, #108]	; 0x6c
   107a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   107a6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   107aa:	e67c      	b.n	104a6 <_svfprintf_r+0x119e>
   107ac:	9b05      	ldr	r3, [sp, #20]
   107ae:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   107b2:	930f      	str	r3, [sp, #60]	; 0x3c
   107b4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   107b8:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   107bc:	9307      	str	r3, [sp, #28]
   107be:	f7fe bf84 	b.w	f6ca <_svfprintf_r+0x3c2>
   107c2:	990e      	ldr	r1, [sp, #56]	; 0x38
   107c4:	9805      	ldr	r0, [sp, #20]
   107c6:	1865      	adds	r5, r4, r1
   107c8:	1a2d      	subs	r5, r5, r0
   107ca:	1acc      	subs	r4, r1, r3
   107cc:	42a5      	cmp	r5, r4
   107ce:	bfa8      	it	ge
   107d0:	4625      	movge	r5, r4
   107d2:	f7ff bb4d 	b.w	fe70 <_svfprintf_r+0xb68>
   107d6:	9b08      	ldr	r3, [sp, #32]
   107d8:	9904      	ldr	r1, [sp, #16]
   107da:	f853 2b04 	ldr.w	r2, [r3], #4
   107de:	9308      	str	r3, [sp, #32]
   107e0:	8011      	strh	r1, [r2, #0]
   107e2:	464c      	mov	r4, r9
   107e4:	f7fe bdc2 	b.w	f36c <_svfprintf_r+0x64>
   107e8:	f913 2b04 	ldrsb.w	r2, [r3], #4
   107ec:	9308      	str	r3, [sp, #32]
   107ee:	17d1      	asrs	r1, r2, #31
   107f0:	460b      	mov	r3, r1
   107f2:	f7fe bfdb 	b.w	f7ac <_svfprintf_r+0x4a4>
   107f6:	9a03      	ldr	r2, [sp, #12]
   107f8:	2102      	movs	r1, #2
   107fa:	ab22      	add	r3, sp, #136	; 0x88
   107fc:	9301      	str	r3, [sp, #4]
   107fe:	ab1d      	add	r3, sp, #116	; 0x74
   10800:	9300      	str	r3, [sp, #0]
   10802:	4658      	mov	r0, fp
   10804:	ab1b      	add	r3, sp, #108	; 0x6c
   10806:	eeb0 0b4a 	vmov.f64	d0, d10
   1080a:	9202      	str	r2, [sp, #8]
   1080c:	f001 fdbc 	bl	12388 <_dtoa_r>
   10810:	2d47      	cmp	r5, #71	; 0x47
   10812:	9a02      	ldr	r2, [sp, #8]
   10814:	4604      	mov	r4, r0
   10816:	f000 8161 	beq.w	10adc <_svfprintf_r+0x17d4>
   1081a:	2d46      	cmp	r5, #70	; 0x46
   1081c:	4410      	add	r0, r2
   1081e:	d105      	bne.n	1082c <_svfprintf_r+0x1524>
   10820:	7823      	ldrb	r3, [r4, #0]
   10822:	2b30      	cmp	r3, #48	; 0x30
   10824:	f000 826f 	beq.w	10d06 <_svfprintf_r+0x19fe>
   10828:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1082a:	4410      	add	r0, r2
   1082c:	eeb5 ab40 	vcmp.f64	d10, #0.0
   10830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10834:	f040 8146 	bne.w	10ac4 <_svfprintf_r+0x17bc>
   10838:	4603      	mov	r3, r0
   1083a:	1b1b      	subs	r3, r3, r4
   1083c:	930e      	str	r3, [sp, #56]	; 0x38
   1083e:	2d47      	cmp	r5, #71	; 0x47
   10840:	f000 8110 	beq.w	10a64 <_svfprintf_r+0x175c>
   10844:	2d46      	cmp	r5, #70	; 0x46
   10846:	f000 81b5 	beq.w	10bb4 <_svfprintf_r+0x18ac>
   1084a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1084c:	930c      	str	r3, [sp, #48]	; 0x30
   1084e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10850:	2d41      	cmp	r5, #65	; 0x41
   10852:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   10856:	931b      	str	r3, [sp, #108]	; 0x6c
   10858:	f000 81e5 	beq.w	10c26 <_svfprintf_r+0x191e>
   1085c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   10860:	2100      	movs	r1, #0
   10862:	2b00      	cmp	r3, #0
   10864:	bfb8      	it	lt
   10866:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
   10868:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   1086c:	bfba      	itte	lt
   1086e:	f1c3 0301 	rsblt	r3, r3, #1
   10872:	222d      	movlt	r2, #45	; 0x2d
   10874:	222b      	movge	r2, #43	; 0x2b
   10876:	2b09      	cmp	r3, #9
   10878:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   1087c:	f340 81da 	ble.w	10c34 <_svfprintf_r+0x192c>
   10880:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
   10884:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 10ca4 <_svfprintf_r+0x199c>
   10888:	462a      	mov	r2, r5
   1088a:	4610      	mov	r0, r2
   1088c:	fb8c 2103 	smull	r2, r1, ip, r3
   10890:	17da      	asrs	r2, r3, #31
   10892:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   10896:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   1089a:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   1089e:	3130      	adds	r1, #48	; 0x30
   108a0:	f800 1c01 	strb.w	r1, [r0, #-1]
   108a4:	4619      	mov	r1, r3
   108a6:	2963      	cmp	r1, #99	; 0x63
   108a8:	4613      	mov	r3, r2
   108aa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   108ae:	dcec      	bgt.n	1088a <_svfprintf_r+0x1582>
   108b0:	3330      	adds	r3, #48	; 0x30
   108b2:	b2d9      	uxtb	r1, r3
   108b4:	1e83      	subs	r3, r0, #2
   108b6:	429d      	cmp	r5, r3
   108b8:	f802 1c01 	strb.w	r1, [r2, #-1]
   108bc:	f240 828b 	bls.w	10dd6 <_svfprintf_r+0x1ace>
   108c0:	4613      	mov	r3, r2
   108c2:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   108c6:	e001      	b.n	108cc <_svfprintf_r+0x15c4>
   108c8:	f813 1b01 	ldrb.w	r1, [r3], #1
   108cc:	f802 1b01 	strb.w	r1, [r2], #1
   108d0:	429d      	cmp	r5, r3
   108d2:	d1f9      	bne.n	108c8 <_svfprintf_r+0x15c0>
   108d4:	f10d 0391 	add.w	r3, sp, #145	; 0x91
   108d8:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   108dc:	1a1b      	subs	r3, r3, r0
   108de:	4413      	add	r3, r2
   108e0:	aa1e      	add	r2, sp, #120	; 0x78
   108e2:	1a9b      	subs	r3, r3, r2
   108e4:	9314      	str	r3, [sp, #80]	; 0x50
   108e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   108e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   108ea:	2b01      	cmp	r3, #1
   108ec:	441a      	add	r2, r3
   108ee:	9205      	str	r2, [sp, #20]
   108f0:	f340 8203 	ble.w	10cfa <_svfprintf_r+0x19f2>
   108f4:	9b05      	ldr	r3, [sp, #20]
   108f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   108f8:	4413      	add	r3, r2
   108fa:	9305      	str	r3, [sp, #20]
   108fc:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   10900:	9a05      	ldr	r2, [sp, #20]
   10902:	f443 7880 	orr.w	r8, r3, #256	; 0x100
   10906:	2300      	movs	r3, #0
   10908:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   1090c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   10910:	930f      	str	r3, [sp, #60]	; 0x3c
   10912:	9202      	str	r2, [sp, #8]
   10914:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10916:	2b00      	cmp	r3, #0
   10918:	f040 80b1 	bne.w	10a7e <_svfprintf_r+0x1776>
   1091c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   10920:	9303      	str	r3, [sp, #12]
   10922:	f7fe bed2 	b.w	f6ca <_svfprintf_r+0x3c2>
   10926:	4620      	mov	r0, r4
   10928:	f7fe f88a 	bl	ea40 <strlen>
   1092c:	4602      	mov	r2, r0
   1092e:	9005      	str	r0, [sp, #20]
   10930:	f7fe bf20 	b.w	f774 <_svfprintf_r+0x46c>
   10934:	ee1b 1a10 	vmov	r1, s22
   10938:	aa24      	add	r2, sp, #144	; 0x90
   1093a:	4658      	mov	r0, fp
   1093c:	f002 ff04 	bl	13748 <__ssprint_r>
   10940:	f7fe bded 	b.w	f51e <_svfprintf_r+0x216>
   10944:	1c59      	adds	r1, r3, #1
   10946:	4658      	mov	r0, fp
   10948:	f7fc ff24 	bl	d794 <_malloc_r>
   1094c:	4604      	mov	r4, r0
   1094e:	2800      	cmp	r0, #0
   10950:	f000 81ca 	beq.w	10ce8 <_svfprintf_r+0x19e0>
   10954:	9007      	str	r0, [sp, #28]
   10956:	e6e0      	b.n	1071a <_svfprintf_r+0x1412>
   10958:	ee1b 1a10 	vmov	r1, s22
   1095c:	aa24      	add	r2, sp, #144	; 0x90
   1095e:	4658      	mov	r0, fp
   10960:	f002 fef2 	bl	13748 <__ssprint_r>
   10964:	2800      	cmp	r0, #0
   10966:	f47f a934 	bne.w	fbd2 <_svfprintf_r+0x8ca>
   1096a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1096c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   10970:	f7ff ba49 	b.w	fe06 <_svfprintf_r+0xafe>
   10974:	ee1b 1a10 	vmov	r1, s22
   10978:	aa24      	add	r2, sp, #144	; 0x90
   1097a:	4658      	mov	r0, fp
   1097c:	f002 fee4 	bl	13748 <__ssprint_r>
   10980:	2800      	cmp	r0, #0
   10982:	f47f a926 	bne.w	fbd2 <_svfprintf_r+0x8ca>
   10986:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1098a:	991b      	ldr	r1, [sp, #108]	; 0x6c
   1098c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   10990:	e649      	b.n	10626 <_svfprintf_r+0x131e>
   10992:	2306      	movs	r3, #6
   10994:	9303      	str	r3, [sp, #12]
   10996:	f7ff bb83 	b.w	100a0 <_svfprintf_r+0xd98>
   1099a:	9b03      	ldr	r3, [sp, #12]
   1099c:	2102      	movs	r1, #2
   1099e:	1c5a      	adds	r2, r3, #1
   109a0:	e72b      	b.n	107fa <_svfprintf_r+0x14f2>
   109a2:	9a03      	ldr	r2, [sp, #12]
   109a4:	2103      	movs	r1, #3
   109a6:	e728      	b.n	107fa <_svfprintf_r+0x14f2>
   109a8:	a81b      	add	r0, sp, #108	; 0x6c
   109aa:	eeb0 0b4a 	vmov.f64	d0, d10
   109ae:	f002 fc37 	bl	13220 <frexp>
   109b2:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   109b6:	ee20 0b07 	vmul.f64	d0, d0, d7
   109ba:	eeb5 0b40 	vcmp.f64	d0, #0.0
   109be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   109c2:	d101      	bne.n	109c8 <_svfprintf_r+0x16c0>
   109c4:	2301      	movs	r3, #1
   109c6:	931b      	str	r3, [sp, #108]	; 0x6c
   109c8:	48b3      	ldr	r0, [pc, #716]	; (10c98 <_svfprintf_r+0x1990>)
   109ca:	9b03      	ldr	r3, [sp, #12]
   109cc:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
   109d0:	3b01      	subs	r3, #1
   109d2:	4622      	mov	r2, r4
   109d4:	e004      	b.n	109e0 <_svfprintf_r+0x16d8>
   109d6:	eeb5 0b40 	vcmp.f64	d0, #0.0
   109da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   109de:	d013      	beq.n	10a08 <_svfprintf_r+0x1700>
   109e0:	ee20 0b05 	vmul.f64	d0, d0, d5
   109e4:	eefd 7bc0 	vcvt.s32.f64	s15, d0
   109e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   109ec:	ee17 1a90 	vmov	r1, s15
   109f0:	5c41      	ldrb	r1, [r0, r1]
   109f2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
   109f6:	4694      	mov	ip, r2
   109f8:	ee30 0b46 	vsub.f64	d0, d0, d6
   109fc:	f802 1b01 	strb.w	r1, [r2], #1
   10a00:	4619      	mov	r1, r3
   10a02:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   10a06:	d1e6      	bne.n	109d6 <_svfprintf_r+0x16ce>
   10a08:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   10a0c:	eeb4 0bc6 	vcmpe.f64	d0, d6
   10a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10a14:	f300 8148 	bgt.w	10ca8 <_svfprintf_r+0x19a0>
   10a18:	eeb4 0b46 	vcmp.f64	d0, d6
   10a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10a20:	d104      	bne.n	10a2c <_svfprintf_r+0x1724>
   10a22:	ee17 3a90 	vmov	r3, s15
   10a26:	07db      	lsls	r3, r3, #31
   10a28:	f100 813e 	bmi.w	10ca8 <_svfprintf_r+0x19a0>
   10a2c:	2900      	cmp	r1, #0
   10a2e:	db06      	blt.n	10a3e <_svfprintf_r+0x1736>
   10a30:	1c4b      	adds	r3, r1, #1
   10a32:	4413      	add	r3, r2
   10a34:	2130      	movs	r1, #48	; 0x30
   10a36:	f802 1b01 	strb.w	r1, [r2], #1
   10a3a:	4293      	cmp	r3, r2
   10a3c:	d1fb      	bne.n	10a36 <_svfprintf_r+0x172e>
   10a3e:	1b13      	subs	r3, r2, r4
   10a40:	930e      	str	r3, [sp, #56]	; 0x38
   10a42:	e6fc      	b.n	1083e <_svfprintf_r+0x1536>
   10a44:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   10a46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10a48:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   10a4c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   10a50:	9613      	str	r6, [sp, #76]	; 0x4c
   10a52:	18e3      	adds	r3, r4, r3
   10a54:	429d      	cmp	r5, r3
   10a56:	4629      	mov	r1, r5
   10a58:	bf28      	it	cs
   10a5a:	4619      	movcs	r1, r3
   10a5c:	4682      	mov	sl, r0
   10a5e:	9105      	str	r1, [sp, #20]
   10a60:	f7ff b9d8 	b.w	fe14 <_svfprintf_r+0xb0c>
   10a64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10a66:	930c      	str	r3, [sp, #48]	; 0x30
   10a68:	1cda      	adds	r2, r3, #3
   10a6a:	db02      	blt.n	10a72 <_svfprintf_r+0x176a>
   10a6c:	9a03      	ldr	r2, [sp, #12]
   10a6e:	4293      	cmp	r3, r2
   10a70:	dd0c      	ble.n	10a8c <_svfprintf_r+0x1784>
   10a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10a74:	3b02      	subs	r3, #2
   10a76:	930b      	str	r3, [sp, #44]	; 0x2c
   10a78:	f023 0520 	bic.w	r5, r3, #32
   10a7c:	e6e7      	b.n	1084e <_svfprintf_r+0x1546>
   10a7e:	212d      	movs	r1, #45	; 0x2d
   10a80:	2300      	movs	r3, #0
   10a82:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   10a86:	9303      	str	r3, [sp, #12]
   10a88:	f7fe be22 	b.w	f6d0 <_svfprintf_r+0x3c8>
   10a8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10a8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10a90:	4293      	cmp	r3, r2
   10a92:	f2c0 80bd 	blt.w	10c10 <_svfprintf_r+0x1908>
   10a96:	07f0      	lsls	r0, r6, #31
   10a98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10a9a:	f140 8132 	bpl.w	10d02 <_svfprintf_r+0x19fa>
   10a9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10aa0:	4413      	add	r3, r2
   10aa2:	9305      	str	r3, [sp, #20]
   10aa4:	0571      	lsls	r1, r6, #21
   10aa6:	d503      	bpl.n	10ab0 <_svfprintf_r+0x17a8>
   10aa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10aaa:	2b00      	cmp	r3, #0
   10aac:	f300 8135 	bgt.w	10d1a <_svfprintf_r+0x1a12>
   10ab0:	9b05      	ldr	r3, [sp, #20]
   10ab2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10ab6:	9302      	str	r3, [sp, #8]
   10ab8:	2367      	movs	r3, #103	; 0x67
   10aba:	930b      	str	r3, [sp, #44]	; 0x2c
   10abc:	2300      	movs	r3, #0
   10abe:	930f      	str	r3, [sp, #60]	; 0x3c
   10ac0:	930d      	str	r3, [sp, #52]	; 0x34
   10ac2:	e727      	b.n	10914 <_svfprintf_r+0x160c>
   10ac4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10ac6:	4283      	cmp	r3, r0
   10ac8:	f4bf aeb7 	bcs.w	1083a <_svfprintf_r+0x1532>
   10acc:	2130      	movs	r1, #48	; 0x30
   10ace:	1c5a      	adds	r2, r3, #1
   10ad0:	9222      	str	r2, [sp, #136]	; 0x88
   10ad2:	7019      	strb	r1, [r3, #0]
   10ad4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10ad6:	4298      	cmp	r0, r3
   10ad8:	d8f9      	bhi.n	10ace <_svfprintf_r+0x17c6>
   10ada:	e6ae      	b.n	1083a <_svfprintf_r+0x1532>
   10adc:	07f3      	lsls	r3, r6, #31
   10ade:	f100 80a7 	bmi.w	10c30 <_svfprintf_r+0x1928>
   10ae2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10ae4:	e6a9      	b.n	1083a <_svfprintf_r+0x1532>
   10ae6:	aa24      	add	r2, sp, #144	; 0x90
   10ae8:	4658      	mov	r0, fp
   10aea:	9105      	str	r1, [sp, #20]
   10aec:	f002 fe2c 	bl	13748 <__ssprint_r>
   10af0:	2800      	cmp	r0, #0
   10af2:	f47f a86e 	bne.w	fbd2 <_svfprintf_r+0x8ca>
   10af6:	f896 c000 	ldrb.w	ip, [r6]
   10afa:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10afc:	9905      	ldr	r1, [sp, #20]
   10afe:	a827      	add	r0, sp, #156	; 0x9c
   10b00:	4465      	add	r5, ip
   10b02:	f7ff bbec 	b.w	102de <_svfprintf_r+0xfd6>
   10b06:	ee1b 1a10 	vmov	r1, s22
   10b0a:	aa24      	add	r2, sp, #144	; 0x90
   10b0c:	4658      	mov	r0, fp
   10b0e:	f002 fe1b 	bl	13748 <__ssprint_r>
   10b12:	2800      	cmp	r0, #0
   10b14:	f47f a85d 	bne.w	fbd2 <_svfprintf_r+0x8ca>
   10b18:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10b1a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   10b1e:	f7ff b96b 	b.w	fdf8 <_svfprintf_r+0xaf0>
   10b22:	2378      	movs	r3, #120	; 0x78
   10b24:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   10b28:	2330      	movs	r3, #48	; 0x30
   10b2a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   10b2e:	9b03      	ldr	r3, [sp, #12]
   10b30:	2b63      	cmp	r3, #99	; 0x63
   10b32:	f048 0602 	orr.w	r6, r8, #2
   10b36:	f300 80a6 	bgt.w	10c86 <_svfprintf_r+0x197e>
   10b3a:	2300      	movs	r3, #0
   10b3c:	9307      	str	r3, [sp, #28]
   10b3e:	ac37      	add	r4, sp, #220	; 0xdc
   10b40:	ee18 3a90 	vmov	r3, s17
   10b44:	2b00      	cmp	r3, #0
   10b46:	f448 7881 	orr.w	r8, r8, #258	; 0x102
   10b4a:	db2b      	blt.n	10ba4 <_svfprintf_r+0x189c>
   10b4c:	eeb0 ab48 	vmov.f64	d10, d8
   10b50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10b52:	f023 0520 	bic.w	r5, r3, #32
   10b56:	2300      	movs	r3, #0
   10b58:	9309      	str	r3, [sp, #36]	; 0x24
   10b5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10b5c:	2b61      	cmp	r3, #97	; 0x61
   10b5e:	f47f aaad 	bne.w	100bc <_svfprintf_r+0xdb4>
   10b62:	eeb0 0b4a 	vmov.f64	d0, d10
   10b66:	a81b      	add	r0, sp, #108	; 0x6c
   10b68:	f002 fb5a 	bl	13220 <frexp>
   10b6c:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   10b70:	ee20 0b07 	vmul.f64	d0, d0, d7
   10b74:	eeb5 0b40 	vcmp.f64	d0, #0.0
   10b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10b7c:	d101      	bne.n	10b82 <_svfprintf_r+0x187a>
   10b7e:	2301      	movs	r3, #1
   10b80:	931b      	str	r3, [sp, #108]	; 0x6c
   10b82:	4846      	ldr	r0, [pc, #280]	; (10c9c <_svfprintf_r+0x1994>)
   10b84:	e721      	b.n	109ca <_svfprintf_r+0x16c2>
   10b86:	ee1b 1a10 	vmov	r1, s22
   10b8a:	aa24      	add	r2, sp, #144	; 0x90
   10b8c:	4658      	mov	r0, fp
   10b8e:	f002 fddb 	bl	13748 <__ssprint_r>
   10b92:	2800      	cmp	r0, #0
   10b94:	f47f a81d 	bne.w	fbd2 <_svfprintf_r+0x8ca>
   10b98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10b9a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10b9c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   10ba0:	f7ff b94e 	b.w	fe40 <_svfprintf_r+0xb38>
   10ba4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10ba6:	f023 0520 	bic.w	r5, r3, #32
   10baa:	232d      	movs	r3, #45	; 0x2d
   10bac:	9309      	str	r3, [sp, #36]	; 0x24
   10bae:	eeb1 ab48 	vneg.f64	d10, d8
   10bb2:	e7d2      	b.n	10b5a <_svfprintf_r+0x1852>
   10bb4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   10bb6:	920c      	str	r2, [sp, #48]	; 0x30
   10bb8:	2a00      	cmp	r2, #0
   10bba:	f006 0301 	and.w	r3, r6, #1
   10bbe:	f340 810d 	ble.w	10ddc <_svfprintf_r+0x1ad4>
   10bc2:	9903      	ldr	r1, [sp, #12]
   10bc4:	430b      	orrs	r3, r1
   10bc6:	f040 80cf 	bne.w	10d68 <_svfprintf_r+0x1a60>
   10bca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10bcc:	9305      	str	r3, [sp, #20]
   10bce:	2366      	movs	r3, #102	; 0x66
   10bd0:	930b      	str	r3, [sp, #44]	; 0x2c
   10bd2:	0572      	lsls	r2, r6, #21
   10bd4:	f100 80a3 	bmi.w	10d1e <_svfprintf_r+0x1a16>
   10bd8:	9b05      	ldr	r3, [sp, #20]
   10bda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10bde:	9302      	str	r3, [sp, #8]
   10be0:	e76c      	b.n	10abc <_svfprintf_r+0x17b4>
   10be2:	ee1b 1a10 	vmov	r1, s22
   10be6:	aa24      	add	r2, sp, #144	; 0x90
   10be8:	4658      	mov	r0, fp
   10bea:	f002 fdad 	bl	13748 <__ssprint_r>
   10bee:	2800      	cmp	r0, #0
   10bf0:	f47e afef 	bne.w	fbd2 <_svfprintf_r+0x8ca>
   10bf4:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   10bf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10bf8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10bfa:	1b1c      	subs	r4, r3, r4
   10bfc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   10c00:	f7ff b936 	b.w	fe70 <_svfprintf_r+0xb68>
   10c04:	2358      	movs	r3, #88	; 0x58
   10c06:	e78d      	b.n	10b24 <_svfprintf_r+0x181c>
   10c08:	2200      	movs	r2, #0
   10c0a:	9203      	str	r2, [sp, #12]
   10c0c:	f7fe bbda 	b.w	f3c4 <_svfprintf_r+0xbc>
   10c10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10c12:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10c14:	189a      	adds	r2, r3, r2
   10c16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10c18:	9205      	str	r2, [sp, #20]
   10c1a:	2b00      	cmp	r3, #0
   10c1c:	f340 80ab 	ble.w	10d76 <_svfprintf_r+0x1a6e>
   10c20:	2367      	movs	r3, #103	; 0x67
   10c22:	930b      	str	r3, [sp, #44]	; 0x2c
   10c24:	e7d5      	b.n	10bd2 <_svfprintf_r+0x18ca>
   10c26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10c28:	320f      	adds	r2, #15
   10c2a:	b2d2      	uxtb	r2, r2
   10c2c:	2101      	movs	r1, #1
   10c2e:	e618      	b.n	10862 <_svfprintf_r+0x155a>
   10c30:	18a0      	adds	r0, r4, r2
   10c32:	e5fb      	b.n	1082c <_svfprintf_r+0x1524>
   10c34:	2900      	cmp	r1, #0
   10c36:	f040 80a8 	bne.w	10d8a <_svfprintf_r+0x1a82>
   10c3a:	2230      	movs	r2, #48	; 0x30
   10c3c:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
   10c40:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
   10c44:	3330      	adds	r3, #48	; 0x30
   10c46:	f802 3b01 	strb.w	r3, [r2], #1
   10c4a:	ab1e      	add	r3, sp, #120	; 0x78
   10c4c:	1ad3      	subs	r3, r2, r3
   10c4e:	9314      	str	r3, [sp, #80]	; 0x50
   10c50:	e649      	b.n	108e6 <_svfprintf_r+0x15de>
   10c52:	3301      	adds	r3, #1
   10c54:	4912      	ldr	r1, [pc, #72]	; (10ca0 <_svfprintf_r+0x1998>)
   10c56:	f8ca 5004 	str.w	r5, [sl, #4]
   10c5a:	442a      	add	r2, r5
   10c5c:	2b07      	cmp	r3, #7
   10c5e:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   10c62:	f8ca 1000 	str.w	r1, [sl]
   10c66:	f77f ac33 	ble.w	104d0 <_svfprintf_r+0x11c8>
   10c6a:	ee1b 1a10 	vmov	r1, s22
   10c6e:	aa24      	add	r2, sp, #144	; 0x90
   10c70:	4658      	mov	r0, fp
   10c72:	f002 fd69 	bl	13748 <__ssprint_r>
   10c76:	2800      	cmp	r0, #0
   10c78:	f47e afab 	bne.w	fbd2 <_svfprintf_r+0x8ca>
   10c7c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   10c80:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   10c84:	e426      	b.n	104d4 <_svfprintf_r+0x11cc>
   10c86:	1c59      	adds	r1, r3, #1
   10c88:	4658      	mov	r0, fp
   10c8a:	f7fc fd83 	bl	d794 <_malloc_r>
   10c8e:	4604      	mov	r4, r0
   10c90:	b350      	cbz	r0, 10ce8 <_svfprintf_r+0x19e0>
   10c92:	9007      	str	r0, [sp, #28]
   10c94:	e754      	b.n	10b40 <_svfprintf_r+0x1838>
   10c96:	bf00      	nop
   10c98:	2000134c 	.word	0x2000134c
   10c9c:	20001338 	.word	0x20001338
   10ca0:	200018d8 	.word	0x200018d8
   10ca4:	66666667 	.word	0x66666667
   10ca8:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
   10cac:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   10cb0:	f890 c00f 	ldrb.w	ip, [r0, #15]
   10cb4:	4561      	cmp	r1, ip
   10cb6:	4613      	mov	r3, r2
   10cb8:	d10a      	bne.n	10cd0 <_svfprintf_r+0x19c8>
   10cba:	f04f 0e30 	mov.w	lr, #48	; 0x30
   10cbe:	f803 ec01 	strb.w	lr, [r3, #-1]
   10cc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10cc4:	1e59      	subs	r1, r3, #1
   10cc6:	9122      	str	r1, [sp, #136]	; 0x88
   10cc8:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   10ccc:	458c      	cmp	ip, r1
   10cce:	d0f6      	beq.n	10cbe <_svfprintf_r+0x19b6>
   10cd0:	2939      	cmp	r1, #57	; 0x39
   10cd2:	bf16      	itet	ne
   10cd4:	3101      	addne	r1, #1
   10cd6:	7a81      	ldrbeq	r1, [r0, #10]
   10cd8:	b2c9      	uxtbne	r1, r1
   10cda:	f803 1c01 	strb.w	r1, [r3, #-1]
   10cde:	e6ae      	b.n	10a3e <_svfprintf_r+0x1736>
   10ce0:	2300      	movs	r3, #0
   10ce2:	4690      	mov	r8, r2
   10ce4:	9307      	str	r3, [sp, #28]
   10ce6:	e760      	b.n	10baa <_svfprintf_r+0x18a2>
   10ce8:	ee1b 2a10 	vmov	r2, s22
   10cec:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   10cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10cf4:	8193      	strh	r3, [r2, #12]
   10cf6:	f7fe bc16 	b.w	f526 <_svfprintf_r+0x21e>
   10cfa:	07f5      	lsls	r5, r6, #31
   10cfc:	f57f adfe 	bpl.w	108fc <_svfprintf_r+0x15f4>
   10d00:	e5f8      	b.n	108f4 <_svfprintf_r+0x15ec>
   10d02:	9305      	str	r3, [sp, #20]
   10d04:	e6ce      	b.n	10aa4 <_svfprintf_r+0x179c>
   10d06:	eeb5 ab40 	vcmp.f64	d10, #0.0
   10d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10d0e:	f43f ad8b 	beq.w	10828 <_svfprintf_r+0x1520>
   10d12:	f1c2 0201 	rsb	r2, r2, #1
   10d16:	921b      	str	r2, [sp, #108]	; 0x6c
   10d18:	e587      	b.n	1082a <_svfprintf_r+0x1522>
   10d1a:	2367      	movs	r3, #103	; 0x67
   10d1c:	930b      	str	r3, [sp, #44]	; 0x2c
   10d1e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   10d20:	780b      	ldrb	r3, [r1, #0]
   10d22:	2bff      	cmp	r3, #255	; 0xff
   10d24:	d079      	beq.n	10e1a <_svfprintf_r+0x1b12>
   10d26:	2500      	movs	r5, #0
   10d28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10d2a:	4628      	mov	r0, r5
   10d2c:	e003      	b.n	10d36 <_svfprintf_r+0x1a2e>
   10d2e:	3001      	adds	r0, #1
   10d30:	3101      	adds	r1, #1
   10d32:	2bff      	cmp	r3, #255	; 0xff
   10d34:	d008      	beq.n	10d48 <_svfprintf_r+0x1a40>
   10d36:	4293      	cmp	r3, r2
   10d38:	da06      	bge.n	10d48 <_svfprintf_r+0x1a40>
   10d3a:	1ad2      	subs	r2, r2, r3
   10d3c:	784b      	ldrb	r3, [r1, #1]
   10d3e:	2b00      	cmp	r3, #0
   10d40:	d1f5      	bne.n	10d2e <_svfprintf_r+0x1a26>
   10d42:	780b      	ldrb	r3, [r1, #0]
   10d44:	3501      	adds	r5, #1
   10d46:	e7f4      	b.n	10d32 <_svfprintf_r+0x1a2a>
   10d48:	920c      	str	r2, [sp, #48]	; 0x30
   10d4a:	9113      	str	r1, [sp, #76]	; 0x4c
   10d4c:	900d      	str	r0, [sp, #52]	; 0x34
   10d4e:	950f      	str	r5, [sp, #60]	; 0x3c
   10d50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10d52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10d54:	9916      	ldr	r1, [sp, #88]	; 0x58
   10d56:	4413      	add	r3, r2
   10d58:	9a05      	ldr	r2, [sp, #20]
   10d5a:	fb01 2303 	mla	r3, r1, r3, r2
   10d5e:	9305      	str	r3, [sp, #20]
   10d60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10d64:	9302      	str	r3, [sp, #8]
   10d66:	e5d5      	b.n	10914 <_svfprintf_r+0x160c>
   10d68:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10d6a:	18d3      	adds	r3, r2, r3
   10d6c:	4419      	add	r1, r3
   10d6e:	2366      	movs	r3, #102	; 0x66
   10d70:	9105      	str	r1, [sp, #20]
   10d72:	930b      	str	r3, [sp, #44]	; 0x2c
   10d74:	e72d      	b.n	10bd2 <_svfprintf_r+0x18ca>
   10d76:	f1c3 0301 	rsb	r3, r3, #1
   10d7a:	441a      	add	r2, r3
   10d7c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10d80:	9302      	str	r3, [sp, #8]
   10d82:	2367      	movs	r3, #103	; 0x67
   10d84:	9205      	str	r2, [sp, #20]
   10d86:	930b      	str	r3, [sp, #44]	; 0x2c
   10d88:	e698      	b.n	10abc <_svfprintf_r+0x17b4>
   10d8a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   10d8e:	e759      	b.n	10c44 <_svfprintf_r+0x193c>
   10d90:	9b03      	ldr	r3, [sp, #12]
   10d92:	f8dd 9008 	ldr.w	r9, [sp, #8]
   10d96:	f8dd 801c 	ldr.w	r8, [sp, #28]
   10d9a:	9305      	str	r3, [sp, #20]
   10d9c:	e4b4      	b.n	10708 <_svfprintf_r+0x1400>
   10d9e:	ee18 3a90 	vmov	r3, s17
   10da2:	2b00      	cmp	r3, #0
   10da4:	bfb4      	ite	lt
   10da6:	212d      	movlt	r1, #45	; 0x2d
   10da8:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
   10dac:	4c25      	ldr	r4, [pc, #148]	; (10e44 <_svfprintf_r+0x1b3c>)
   10dae:	4b26      	ldr	r3, [pc, #152]	; (10e48 <_svfprintf_r+0x1b40>)
   10db0:	bfb8      	it	lt
   10db2:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
   10db6:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   10dba:	f7fe bc79 	b.w	f6b0 <_svfprintf_r+0x3a8>
   10dbe:	9b03      	ldr	r3, [sp, #12]
   10dc0:	9302      	str	r3, [sp, #8]
   10dc2:	9305      	str	r3, [sp, #20]
   10dc4:	2373      	movs	r3, #115	; 0x73
   10dc6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   10dca:	9003      	str	r0, [sp, #12]
   10dcc:	900f      	str	r0, [sp, #60]	; 0x3c
   10dce:	900d      	str	r0, [sp, #52]	; 0x34
   10dd0:	930b      	str	r3, [sp, #44]	; 0x2c
   10dd2:	f7fe bc7a 	b.w	f6ca <_svfprintf_r+0x3c2>
   10dd6:	2302      	movs	r3, #2
   10dd8:	9314      	str	r3, [sp, #80]	; 0x50
   10dda:	e584      	b.n	108e6 <_svfprintf_r+0x15de>
   10ddc:	9a03      	ldr	r2, [sp, #12]
   10dde:	4313      	orrs	r3, r2
   10de0:	d105      	bne.n	10dee <_svfprintf_r+0x1ae6>
   10de2:	2301      	movs	r3, #1
   10de4:	2266      	movs	r2, #102	; 0x66
   10de6:	9302      	str	r3, [sp, #8]
   10de8:	920b      	str	r2, [sp, #44]	; 0x2c
   10dea:	9305      	str	r3, [sp, #20]
   10dec:	e666      	b.n	10abc <_svfprintf_r+0x17b4>
   10dee:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10df0:	3301      	adds	r3, #1
   10df2:	441a      	add	r2, r3
   10df4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10df8:	9302      	str	r3, [sp, #8]
   10dfa:	2366      	movs	r3, #102	; 0x66
   10dfc:	9205      	str	r2, [sp, #20]
   10dfe:	930b      	str	r3, [sp, #44]	; 0x2c
   10e00:	e65c      	b.n	10abc <_svfprintf_r+0x17b4>
   10e02:	9a08      	ldr	r2, [sp, #32]
   10e04:	f899 3001 	ldrb.w	r3, [r9, #1]
   10e08:	4689      	mov	r9, r1
   10e0a:	f852 1b04 	ldr.w	r1, [r2], #4
   10e0e:	9208      	str	r2, [sp, #32]
   10e10:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   10e14:	9103      	str	r1, [sp, #12]
   10e16:	f7fe bad3 	b.w	f3c0 <_svfprintf_r+0xb8>
   10e1a:	2300      	movs	r3, #0
   10e1c:	930f      	str	r3, [sp, #60]	; 0x3c
   10e1e:	930d      	str	r3, [sp, #52]	; 0x34
   10e20:	e796      	b.n	10d50 <_svfprintf_r+0x1a48>
   10e22:	230c      	movs	r3, #12
   10e24:	f8cb 3000 	str.w	r3, [fp]
   10e28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10e2c:	9304      	str	r3, [sp, #16]
   10e2e:	f7fe bb81 	b.w	f534 <_svfprintf_r+0x22c>
   10e32:	ee1b 2a10 	vmov	r2, s22
   10e36:	8993      	ldrh	r3, [r2, #12]
   10e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10e3c:	8193      	strh	r3, [r2, #12]
   10e3e:	f7fe bec8 	b.w	fbd2 <_svfprintf_r+0x8ca>
   10e42:	bf00      	nop
   10e44:	20001330 	.word	0x20001330
   10e48:	20001334 	.word	0x20001334

00010e4c <__sprint_r.part.0>:
   10e4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e50:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   10e52:	049c      	lsls	r4, r3, #18
   10e54:	4690      	mov	r8, r2
   10e56:	d52d      	bpl.n	10eb4 <__sprint_r.part.0+0x68>
   10e58:	6893      	ldr	r3, [r2, #8]
   10e5a:	6812      	ldr	r2, [r2, #0]
   10e5c:	b343      	cbz	r3, 10eb0 <__sprint_r.part.0+0x64>
   10e5e:	468b      	mov	fp, r1
   10e60:	4606      	mov	r6, r0
   10e62:	f102 0908 	add.w	r9, r2, #8
   10e66:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   10e6a:	ea5f 079a 	movs.w	r7, sl, lsr #2
   10e6e:	d015      	beq.n	10e9c <__sprint_r.part.0+0x50>
   10e70:	3d04      	subs	r5, #4
   10e72:	2400      	movs	r4, #0
   10e74:	e001      	b.n	10e7a <__sprint_r.part.0+0x2e>
   10e76:	42a7      	cmp	r7, r4
   10e78:	d00e      	beq.n	10e98 <__sprint_r.part.0+0x4c>
   10e7a:	f855 1f04 	ldr.w	r1, [r5, #4]!
   10e7e:	465a      	mov	r2, fp
   10e80:	4630      	mov	r0, r6
   10e82:	f002 fab3 	bl	133ec <_fputwc_r>
   10e86:	1c43      	adds	r3, r0, #1
   10e88:	f104 0401 	add.w	r4, r4, #1
   10e8c:	d1f3      	bne.n	10e76 <__sprint_r.part.0+0x2a>
   10e8e:	2300      	movs	r3, #0
   10e90:	e9c8 3301 	strd	r3, r3, [r8, #4]
   10e94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e98:	f8d8 3008 	ldr.w	r3, [r8, #8]
   10e9c:	f02a 0a03 	bic.w	sl, sl, #3
   10ea0:	eba3 030a 	sub.w	r3, r3, sl
   10ea4:	f8c8 3008 	str.w	r3, [r8, #8]
   10ea8:	f109 0908 	add.w	r9, r9, #8
   10eac:	2b00      	cmp	r3, #0
   10eae:	d1da      	bne.n	10e66 <__sprint_r.part.0+0x1a>
   10eb0:	2000      	movs	r0, #0
   10eb2:	e7ec      	b.n	10e8e <__sprint_r.part.0+0x42>
   10eb4:	f002 face 	bl	13454 <__sfvwrite_r>
   10eb8:	2300      	movs	r3, #0
   10eba:	e9c8 3301 	strd	r3, r3, [r8, #4]
   10ebe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ec2:	bf00      	nop

00010ec4 <_vfiprintf_r>:
   10ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ec8:	ed2d 8b02 	vpush	{d8}
   10ecc:	b0c5      	sub	sp, #276	; 0x114
   10ece:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   10ed2:	4683      	mov	fp, r0
   10ed4:	ee08 1a10 	vmov	s16, r1
   10ed8:	4616      	mov	r6, r2
   10eda:	2100      	movs	r1, #0
   10edc:	2208      	movs	r2, #8
   10ede:	4650      	mov	r0, sl
   10ee0:	461c      	mov	r4, r3
   10ee2:	9307      	str	r3, [sp, #28]
   10ee4:	f7fc ffd2 	bl	de8c <memset>
   10ee8:	f1bb 0f00 	cmp.w	fp, #0
   10eec:	d004      	beq.n	10ef8 <_vfiprintf_r+0x34>
   10eee:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   10ef2:	2b00      	cmp	r3, #0
   10ef4:	f000 86a0 	beq.w	11c38 <_vfiprintf_r+0xd74>
   10ef8:	ee18 2a10 	vmov	r2, s16
   10efc:	6e53      	ldr	r3, [r2, #100]	; 0x64
   10efe:	07db      	lsls	r3, r3, #31
   10f00:	f140 8513 	bpl.w	1192a <_vfiprintf_r+0xa66>
   10f04:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   10f08:	b28a      	uxth	r2, r1
   10f0a:	0495      	lsls	r5, r2, #18
   10f0c:	d40b      	bmi.n	10f26 <_vfiprintf_r+0x62>
   10f0e:	ee18 3a10 	vmov	r3, s16
   10f12:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   10f16:	8199      	strh	r1, [r3, #12]
   10f18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   10f1a:	b28a      	uxth	r2, r1
   10f1c:	ee18 1a10 	vmov	r1, s16
   10f20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   10f24:	664b      	str	r3, [r1, #100]	; 0x64
   10f26:	0710      	lsls	r0, r2, #28
   10f28:	f140 8105 	bpl.w	11136 <_vfiprintf_r+0x272>
   10f2c:	ee18 3a10 	vmov	r3, s16
   10f30:	691b      	ldr	r3, [r3, #16]
   10f32:	2b00      	cmp	r3, #0
   10f34:	f000 80ff 	beq.w	11136 <_vfiprintf_r+0x272>
   10f38:	f002 031a 	and.w	r3, r2, #26
   10f3c:	2b0a      	cmp	r3, #10
   10f3e:	f000 810a 	beq.w	11156 <_vfiprintf_r+0x292>
   10f42:	2300      	movs	r3, #0
   10f44:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   10f48:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   10f4c:	aa1b      	add	r2, sp, #108	; 0x6c
   10f4e:	930c      	str	r3, [sp, #48]	; 0x30
   10f50:	9218      	str	r2, [sp, #96]	; 0x60
   10f52:	4691      	mov	r9, r2
   10f54:	930b      	str	r3, [sp, #44]	; 0x2c
   10f56:	9305      	str	r3, [sp, #20]
   10f58:	46b0      	mov	r8, r6
   10f5a:	4644      	mov	r4, r8
   10f5c:	4ba8      	ldr	r3, [pc, #672]	; (11200 <_vfiprintf_r+0x33c>)
   10f5e:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   10f62:	f7fd f817 	bl	df94 <__locale_mb_cur_max>
   10f66:	4622      	mov	r2, r4
   10f68:	4603      	mov	r3, r0
   10f6a:	a912      	add	r1, sp, #72	; 0x48
   10f6c:	f8cd a000 	str.w	sl, [sp]
   10f70:	4658      	mov	r0, fp
   10f72:	47a8      	blx	r5
   10f74:	2800      	cmp	r0, #0
   10f76:	f000 8145 	beq.w	11204 <_vfiprintf_r+0x340>
   10f7a:	f2c0 8139 	blt.w	111f0 <_vfiprintf_r+0x32c>
   10f7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   10f80:	2a25      	cmp	r2, #37	; 0x25
   10f82:	4603      	mov	r3, r0
   10f84:	d001      	beq.n	10f8a <_vfiprintf_r+0xc6>
   10f86:	441c      	add	r4, r3
   10f88:	e7e8      	b.n	10f5c <_vfiprintf_r+0x98>
   10f8a:	ebb4 0608 	subs.w	r6, r4, r8
   10f8e:	4605      	mov	r5, r0
   10f90:	f040 813c 	bne.w	1120c <_vfiprintf_r+0x348>
   10f94:	2300      	movs	r3, #0
   10f96:	7861      	ldrb	r1, [r4, #1]
   10f98:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   10f9c:	f104 0801 	add.w	r8, r4, #1
   10fa0:	9306      	str	r3, [sp, #24]
   10fa2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   10fa6:	461e      	mov	r6, r3
   10fa8:	242b      	movs	r4, #43	; 0x2b
   10faa:	f108 0801 	add.w	r8, r8, #1
   10fae:	f1a1 0320 	sub.w	r3, r1, #32
   10fb2:	2b5a      	cmp	r3, #90	; 0x5a
   10fb4:	f200 8178 	bhi.w	112a8 <_vfiprintf_r+0x3e4>
   10fb8:	e8df f013 	tbh	[pc, r3, lsl #1]
   10fbc:	017602b5 	.word	0x017602b5
   10fc0:	02b00176 	.word	0x02b00176
   10fc4:	01760176 	.word	0x01760176
   10fc8:	006a0176 	.word	0x006a0176
   10fcc:	01760176 	.word	0x01760176
   10fd0:	028d027d 	.word	0x028d027d
   10fd4:	02880176 	.word	0x02880176
   10fd8:	01760297 	.word	0x01760297
   10fdc:	005b0292 	.word	0x005b0292
   10fe0:	005b005b 	.word	0x005b005b
   10fe4:	005b005b 	.word	0x005b005b
   10fe8:	005b005b 	.word	0x005b005b
   10fec:	005b005b 	.word	0x005b005b
   10ff0:	01760176 	.word	0x01760176
   10ff4:	01760176 	.word	0x01760176
   10ff8:	01760176 	.word	0x01760176
   10ffc:	01760176 	.word	0x01760176
   11000:	025c0176 	.word	0x025c0176
   11004:	01760084 	.word	0x01760084
   11008:	01760176 	.word	0x01760176
   1100c:	01760176 	.word	0x01760176
   11010:	01760176 	.word	0x01760176
   11014:	01760176 	.word	0x01760176
   11018:	00e80176 	.word	0x00e80176
   1101c:	01760176 	.word	0x01760176
   11020:	02330176 	.word	0x02330176
   11024:	02da0176 	.word	0x02da0176
   11028:	01760176 	.word	0x01760176
   1102c:	0176058b 	.word	0x0176058b
   11030:	01760176 	.word	0x01760176
   11034:	01760176 	.word	0x01760176
   11038:	01760176 	.word	0x01760176
   1103c:	01760176 	.word	0x01760176
   11040:	025c0176 	.word	0x025c0176
   11044:	01760086 	.word	0x01760086
   11048:	01760176 	.word	0x01760176
   1104c:	008602cd 	.word	0x008602cd
   11050:	0176007f 	.word	0x0176007f
   11054:	017602c0 	.word	0x017602c0
   11058:	00ea02fd 	.word	0x00ea02fd
   1105c:	007f02ed 	.word	0x007f02ed
   11060:	02330176 	.word	0x02330176
   11064:	0569007c 	.word	0x0569007c
   11068:	01760176 	.word	0x01760176
   1106c:	0176056b 	.word	0x0176056b
   11070:	007c      	.short	0x007c
   11072:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   11076:	2200      	movs	r2, #0
   11078:	f818 1b01 	ldrb.w	r1, [r8], #1
   1107c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   11080:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   11084:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   11088:	2b09      	cmp	r3, #9
   1108a:	d9f5      	bls.n	11078 <_vfiprintf_r+0x1b4>
   1108c:	9206      	str	r2, [sp, #24]
   1108e:	e78e      	b.n	10fae <_vfiprintf_r+0xea>
   11090:	4658      	mov	r0, fp
   11092:	f000 ff9d 	bl	11fd0 <_localeconv_r>
   11096:	6843      	ldr	r3, [r0, #4]
   11098:	930d      	str	r3, [sp, #52]	; 0x34
   1109a:	4618      	mov	r0, r3
   1109c:	f7fd fcd0 	bl	ea40 <strlen>
   110a0:	900e      	str	r0, [sp, #56]	; 0x38
   110a2:	4605      	mov	r5, r0
   110a4:	4658      	mov	r0, fp
   110a6:	f000 ff93 	bl	11fd0 <_localeconv_r>
   110aa:	6883      	ldr	r3, [r0, #8]
   110ac:	930b      	str	r3, [sp, #44]	; 0x2c
   110ae:	2d00      	cmp	r5, #0
   110b0:	f040 84d6 	bne.w	11a60 <_vfiprintf_r+0xb9c>
   110b4:	f898 1000 	ldrb.w	r1, [r8]
   110b8:	e777      	b.n	10faa <_vfiprintf_r+0xe6>
   110ba:	f898 1000 	ldrb.w	r1, [r8]
   110be:	f046 0620 	orr.w	r6, r6, #32
   110c2:	e772      	b.n	10faa <_vfiprintf_r+0xe6>
   110c4:	f046 0610 	orr.w	r6, r6, #16
   110c8:	06b4      	lsls	r4, r6, #26
   110ca:	f140 818e 	bpl.w	113ea <_vfiprintf_r+0x526>
   110ce:	9b07      	ldr	r3, [sp, #28]
   110d0:	3307      	adds	r3, #7
   110d2:	f023 0307 	bic.w	r3, r3, #7
   110d6:	461a      	mov	r2, r3
   110d8:	6859      	ldr	r1, [r3, #4]
   110da:	f852 3b08 	ldr.w	r3, [r2], #8
   110de:	9207      	str	r2, [sp, #28]
   110e0:	460a      	mov	r2, r1
   110e2:	2900      	cmp	r1, #0
   110e4:	f2c0 8470 	blt.w	119c8 <_vfiprintf_r+0xb04>
   110e8:	1c79      	adds	r1, r7, #1
   110ea:	f000 85a2 	beq.w	11c32 <_vfiprintf_r+0xd6e>
   110ee:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   110f2:	9103      	str	r1, [sp, #12]
   110f4:	ea53 0102 	orrs.w	r1, r3, r2
   110f8:	f000 843f 	beq.w	1197a <_vfiprintf_r+0xab6>
   110fc:	2b0a      	cmp	r3, #10
   110fe:	f172 0100 	sbcs.w	r1, r2, #0
   11102:	f080 8541 	bcs.w	11b88 <_vfiprintf_r+0xcc4>
   11106:	3330      	adds	r3, #48	; 0x30
   11108:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   1110c:	9e03      	ldr	r6, [sp, #12]
   1110e:	2301      	movs	r3, #1
   11110:	9304      	str	r3, [sp, #16]
   11112:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   11116:	9b04      	ldr	r3, [sp, #16]
   11118:	42bb      	cmp	r3, r7
   1111a:	bfb8      	it	lt
   1111c:	463b      	movlt	r3, r7
   1111e:	9303      	str	r3, [sp, #12]
   11120:	2300      	movs	r3, #0
   11122:	9308      	str	r3, [sp, #32]
   11124:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   11128:	2b00      	cmp	r3, #0
   1112a:	f000 80cb 	beq.w	112c4 <_vfiprintf_r+0x400>
   1112e:	9b03      	ldr	r3, [sp, #12]
   11130:	3301      	adds	r3, #1
   11132:	9303      	str	r3, [sp, #12]
   11134:	e0c6      	b.n	112c4 <_vfiprintf_r+0x400>
   11136:	ee18 1a10 	vmov	r1, s16
   1113a:	4658      	mov	r0, fp
   1113c:	ee18 5a10 	vmov	r5, s16
   11140:	f000 ffae 	bl	120a0 <__swsetup_r>
   11144:	2800      	cmp	r0, #0
   11146:	f040 8652 	bne.w	11dee <_vfiprintf_r+0xf2a>
   1114a:	89aa      	ldrh	r2, [r5, #12]
   1114c:	f002 031a 	and.w	r3, r2, #26
   11150:	2b0a      	cmp	r3, #10
   11152:	f47f aef6 	bne.w	10f42 <_vfiprintf_r+0x7e>
   11156:	ee18 1a10 	vmov	r1, s16
   1115a:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   1115e:	2b00      	cmp	r3, #0
   11160:	f6ff aeef 	blt.w	10f42 <_vfiprintf_r+0x7e>
   11164:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   11166:	07db      	lsls	r3, r3, #31
   11168:	d402      	bmi.n	11170 <_vfiprintf_r+0x2ac>
   1116a:	0597      	lsls	r7, r2, #22
   1116c:	f140 8612 	bpl.w	11d94 <_vfiprintf_r+0xed0>
   11170:	ee18 1a10 	vmov	r1, s16
   11174:	4623      	mov	r3, r4
   11176:	4632      	mov	r2, r6
   11178:	4658      	mov	r0, fp
   1117a:	f000 fe69 	bl	11e50 <__sbprintf>
   1117e:	9005      	str	r0, [sp, #20]
   11180:	9805      	ldr	r0, [sp, #20]
   11182:	b045      	add	sp, #276	; 0x114
   11184:	ecbd 8b02 	vpop	{d8}
   11188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1118c:	f046 0610 	orr.w	r6, r6, #16
   11190:	f016 0220 	ands.w	r2, r6, #32
   11194:	f000 8136 	beq.w	11404 <_vfiprintf_r+0x540>
   11198:	9b07      	ldr	r3, [sp, #28]
   1119a:	3307      	adds	r3, #7
   1119c:	f023 0307 	bic.w	r3, r3, #7
   111a0:	4619      	mov	r1, r3
   111a2:	685a      	ldr	r2, [r3, #4]
   111a4:	f851 3b08 	ldr.w	r3, [r1], #8
   111a8:	9107      	str	r1, [sp, #28]
   111aa:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   111ae:	9103      	str	r1, [sp, #12]
   111b0:	2100      	movs	r1, #0
   111b2:	2000      	movs	r0, #0
   111b4:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   111b8:	1c78      	adds	r0, r7, #1
   111ba:	f000 8210 	beq.w	115de <_vfiprintf_r+0x71a>
   111be:	9803      	ldr	r0, [sp, #12]
   111c0:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   111c4:	ea53 0002 	orrs.w	r0, r3, r2
   111c8:	f040 8208 	bne.w	115dc <_vfiprintf_r+0x718>
   111cc:	2f00      	cmp	r7, #0
   111ce:	f040 8538 	bne.w	11c42 <_vfiprintf_r+0xd7e>
   111d2:	2900      	cmp	r1, #0
   111d4:	f040 83d5 	bne.w	11982 <_vfiprintf_r+0xabe>
   111d8:	9b03      	ldr	r3, [sp, #12]
   111da:	f013 0301 	ands.w	r3, r3, #1
   111de:	9304      	str	r3, [sp, #16]
   111e0:	f000 8411 	beq.w	11a06 <_vfiprintf_r+0xb42>
   111e4:	2330      	movs	r3, #48	; 0x30
   111e6:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   111ea:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   111ee:	e792      	b.n	11116 <_vfiprintf_r+0x252>
   111f0:	2208      	movs	r2, #8
   111f2:	2100      	movs	r1, #0
   111f4:	4650      	mov	r0, sl
   111f6:	f7fc fe49 	bl	de8c <memset>
   111fa:	2301      	movs	r3, #1
   111fc:	441c      	add	r4, r3
   111fe:	e6ad      	b.n	10f5c <_vfiprintf_r+0x98>
   11200:	20001bc4 	.word	0x20001bc4
   11204:	ebb4 0608 	subs.w	r6, r4, r8
   11208:	4605      	mov	r5, r0
   1120a:	d01b      	beq.n	11244 <_vfiprintf_r+0x380>
   1120c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1120e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   11210:	3301      	adds	r3, #1
   11212:	4432      	add	r2, r6
   11214:	2b07      	cmp	r3, #7
   11216:	e9c9 8600 	strd	r8, r6, [r9]
   1121a:	921a      	str	r2, [sp, #104]	; 0x68
   1121c:	9319      	str	r3, [sp, #100]	; 0x64
   1121e:	dd1c      	ble.n	1125a <_vfiprintf_r+0x396>
   11220:	2a00      	cmp	r2, #0
   11222:	f000 83a6 	beq.w	11972 <_vfiprintf_r+0xaae>
   11226:	ee18 1a10 	vmov	r1, s16
   1122a:	aa18      	add	r2, sp, #96	; 0x60
   1122c:	4658      	mov	r0, fp
   1122e:	f7ff fe0d 	bl	10e4c <__sprint_r.part.0>
   11232:	bb20      	cbnz	r0, 1127e <_vfiprintf_r+0x3ba>
   11234:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11238:	9b05      	ldr	r3, [sp, #20]
   1123a:	4433      	add	r3, r6
   1123c:	9305      	str	r3, [sp, #20]
   1123e:	2d00      	cmp	r5, #0
   11240:	f47f aea8 	bne.w	10f94 <_vfiprintf_r+0xd0>
   11244:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   11246:	2b00      	cmp	r3, #0
   11248:	f040 85c1 	bne.w	11dce <_vfiprintf_r+0xf0a>
   1124c:	ee18 3a10 	vmov	r3, s16
   11250:	2200      	movs	r2, #0
   11252:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   11256:	9219      	str	r2, [sp, #100]	; 0x64
   11258:	e015      	b.n	11286 <_vfiprintf_r+0x3c2>
   1125a:	f109 0908 	add.w	r9, r9, #8
   1125e:	e7eb      	b.n	11238 <_vfiprintf_r+0x374>
   11260:	ee18 1a10 	vmov	r1, s16
   11264:	aa18      	add	r2, sp, #96	; 0x60
   11266:	4658      	mov	r0, fp
   11268:	f7ff fdf0 	bl	10e4c <__sprint_r.part.0>
   1126c:	2800      	cmp	r0, #0
   1126e:	f000 80a6 	beq.w	113be <_vfiprintf_r+0x4fa>
   11272:	9b08      	ldr	r3, [sp, #32]
   11274:	b11b      	cbz	r3, 1127e <_vfiprintf_r+0x3ba>
   11276:	9908      	ldr	r1, [sp, #32]
   11278:	4658      	mov	r0, fp
   1127a:	f7fd fe8b 	bl	ef94 <_free_r>
   1127e:	ee18 3a10 	vmov	r3, s16
   11282:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   11286:	ee18 2a10 	vmov	r2, s16
   1128a:	6e52      	ldr	r2, [r2, #100]	; 0x64
   1128c:	f012 0f01 	tst.w	r2, #1
   11290:	b29a      	uxth	r2, r3
   11292:	f000 80a0 	beq.w	113d6 <_vfiprintf_r+0x512>
   11296:	0650      	lsls	r0, r2, #25
   11298:	f100 85b2 	bmi.w	11e00 <_vfiprintf_r+0xf3c>
   1129c:	9805      	ldr	r0, [sp, #20]
   1129e:	b045      	add	sp, #276	; 0x114
   112a0:	ecbd 8b02 	vpop	{d8}
   112a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   112a8:	2900      	cmp	r1, #0
   112aa:	d0cb      	beq.n	11244 <_vfiprintf_r+0x380>
   112ac:	2300      	movs	r3, #0
   112ae:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   112b2:	2301      	movs	r3, #1
   112b4:	e9cd 3303 	strd	r3, r3, [sp, #12]
   112b8:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   112bc:	ac2b      	add	r4, sp, #172	; 0xac
   112be:	2300      	movs	r3, #0
   112c0:	9308      	str	r3, [sp, #32]
   112c2:	461f      	mov	r7, r3
   112c4:	f016 0302 	ands.w	r3, r6, #2
   112c8:	9309      	str	r3, [sp, #36]	; 0x24
   112ca:	d002      	beq.n	112d2 <_vfiprintf_r+0x40e>
   112cc:	9b03      	ldr	r3, [sp, #12]
   112ce:	3302      	adds	r3, #2
   112d0:	9303      	str	r3, [sp, #12]
   112d2:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   112d6:	930a      	str	r3, [sp, #40]	; 0x28
   112d8:	d105      	bne.n	112e6 <_vfiprintf_r+0x422>
   112da:	9b06      	ldr	r3, [sp, #24]
   112dc:	9a03      	ldr	r2, [sp, #12]
   112de:	1a9d      	subs	r5, r3, r2
   112e0:	2d00      	cmp	r5, #0
   112e2:	f300 827b 	bgt.w	117dc <_vfiprintf_r+0x918>
   112e6:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   112ea:	1c41      	adds	r1, r0, #1
   112ec:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   112f0:	b182      	cbz	r2, 11314 <_vfiprintf_r+0x450>
   112f2:	2201      	movs	r2, #1
   112f4:	3301      	adds	r3, #1
   112f6:	f8c9 2004 	str.w	r2, [r9, #4]
   112fa:	2907      	cmp	r1, #7
   112fc:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   11300:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   11304:	f8c9 2000 	str.w	r2, [r9]
   11308:	f300 824a 	bgt.w	117a0 <_vfiprintf_r+0x8dc>
   1130c:	4608      	mov	r0, r1
   1130e:	f109 0908 	add.w	r9, r9, #8
   11312:	3101      	adds	r1, #1
   11314:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11316:	b1e2      	cbz	r2, 11352 <_vfiprintf_r+0x48e>
   11318:	aa11      	add	r2, sp, #68	; 0x44
   1131a:	3302      	adds	r3, #2
   1131c:	f8c9 2000 	str.w	r2, [r9]
   11320:	2907      	cmp	r1, #7
   11322:	f04f 0202 	mov.w	r2, #2
   11326:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1132a:	f8c9 2004 	str.w	r2, [r9, #4]
   1132e:	f340 8250 	ble.w	117d2 <_vfiprintf_r+0x90e>
   11332:	2b00      	cmp	r3, #0
   11334:	f000 8343 	beq.w	119be <_vfiprintf_r+0xafa>
   11338:	ee18 1a10 	vmov	r1, s16
   1133c:	aa18      	add	r2, sp, #96	; 0x60
   1133e:	4658      	mov	r0, fp
   11340:	f7ff fd84 	bl	10e4c <__sprint_r.part.0>
   11344:	2800      	cmp	r0, #0
   11346:	d194      	bne.n	11272 <_vfiprintf_r+0x3ae>
   11348:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1134c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11350:	1c41      	adds	r1, r0, #1
   11352:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11354:	2a80      	cmp	r2, #128	; 0x80
   11356:	f000 8184 	beq.w	11662 <_vfiprintf_r+0x79e>
   1135a:	9a04      	ldr	r2, [sp, #16]
   1135c:	1abd      	subs	r5, r7, r2
   1135e:	2d00      	cmp	r5, #0
   11360:	f300 81d7 	bgt.w	11712 <_vfiprintf_r+0x84e>
   11364:	9a04      	ldr	r2, [sp, #16]
   11366:	f8c9 4000 	str.w	r4, [r9]
   1136a:	4413      	add	r3, r2
   1136c:	2907      	cmp	r1, #7
   1136e:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   11372:	f8c9 2004 	str.w	r2, [r9, #4]
   11376:	f340 816e 	ble.w	11656 <_vfiprintf_r+0x792>
   1137a:	2b00      	cmp	r3, #0
   1137c:	f000 8275 	beq.w	1186a <_vfiprintf_r+0x9a6>
   11380:	ee18 1a10 	vmov	r1, s16
   11384:	aa18      	add	r2, sp, #96	; 0x60
   11386:	4658      	mov	r0, fp
   11388:	f7ff fd60 	bl	10e4c <__sprint_r.part.0>
   1138c:	2800      	cmp	r0, #0
   1138e:	f47f af70 	bne.w	11272 <_vfiprintf_r+0x3ae>
   11392:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   11394:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11398:	0775      	lsls	r5, r6, #29
   1139a:	d505      	bpl.n	113a8 <_vfiprintf_r+0x4e4>
   1139c:	9a06      	ldr	r2, [sp, #24]
   1139e:	9903      	ldr	r1, [sp, #12]
   113a0:	1a54      	subs	r4, r2, r1
   113a2:	2c00      	cmp	r4, #0
   113a4:	f300 826b 	bgt.w	1187e <_vfiprintf_r+0x9ba>
   113a8:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   113ac:	9803      	ldr	r0, [sp, #12]
   113ae:	4281      	cmp	r1, r0
   113b0:	bfac      	ite	ge
   113b2:	1852      	addge	r2, r2, r1
   113b4:	1812      	addlt	r2, r2, r0
   113b6:	9205      	str	r2, [sp, #20]
   113b8:	2b00      	cmp	r3, #0
   113ba:	f47f af51 	bne.w	11260 <_vfiprintf_r+0x39c>
   113be:	9908      	ldr	r1, [sp, #32]
   113c0:	2300      	movs	r3, #0
   113c2:	9319      	str	r3, [sp, #100]	; 0x64
   113c4:	2900      	cmp	r1, #0
   113c6:	f000 8149 	beq.w	1165c <_vfiprintf_r+0x798>
   113ca:	4658      	mov	r0, fp
   113cc:	f7fd fde2 	bl	ef94 <_free_r>
   113d0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   113d4:	e5c1      	b.n	10f5a <_vfiprintf_r+0x96>
   113d6:	059c      	lsls	r4, r3, #22
   113d8:	f53f af5d 	bmi.w	11296 <_vfiprintf_r+0x3d2>
   113dc:	ee18 4a10 	vmov	r4, s16
   113e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   113e2:	f7fc fdd5 	bl	df90 <__retarget_lock_release_recursive>
   113e6:	89a2      	ldrh	r2, [r4, #12]
   113e8:	e755      	b.n	11296 <_vfiprintf_r+0x3d2>
   113ea:	06f0      	lsls	r0, r6, #27
   113ec:	9a07      	ldr	r2, [sp, #28]
   113ee:	f100 831f 	bmi.w	11a30 <_vfiprintf_r+0xb6c>
   113f2:	0671      	lsls	r1, r6, #25
   113f4:	f140 8319 	bpl.w	11a2a <_vfiprintf_r+0xb66>
   113f8:	f932 3b04 	ldrsh.w	r3, [r2], #4
   113fc:	9207      	str	r2, [sp, #28]
   113fe:	17da      	asrs	r2, r3, #31
   11400:	4611      	mov	r1, r2
   11402:	e66e      	b.n	110e2 <_vfiprintf_r+0x21e>
   11404:	f016 0310 	ands.w	r3, r6, #16
   11408:	9907      	ldr	r1, [sp, #28]
   1140a:	f040 8309 	bne.w	11a20 <_vfiprintf_r+0xb5c>
   1140e:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   11412:	f000 8301 	beq.w	11a18 <_vfiprintf_r+0xb54>
   11416:	461a      	mov	r2, r3
   11418:	f851 3b04 	ldr.w	r3, [r1], #4
   1141c:	9107      	str	r1, [sp, #28]
   1141e:	b29b      	uxth	r3, r3
   11420:	e6c3      	b.n	111aa <_vfiprintf_r+0x2e6>
   11422:	9b07      	ldr	r3, [sp, #28]
   11424:	461a      	mov	r2, r3
   11426:	2300      	movs	r3, #0
   11428:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1142c:	4613      	mov	r3, r2
   1142e:	f853 4b04 	ldr.w	r4, [r3], #4
   11432:	9303      	str	r3, [sp, #12]
   11434:	2c00      	cmp	r4, #0
   11436:	f000 8412 	beq.w	11c5e <_vfiprintf_r+0xd9a>
   1143a:	2953      	cmp	r1, #83	; 0x53
   1143c:	f000 8365 	beq.w	11b0a <_vfiprintf_r+0xc46>
   11440:	f016 0510 	ands.w	r5, r6, #16
   11444:	f040 8361 	bne.w	11b0a <_vfiprintf_r+0xc46>
   11448:	1c7b      	adds	r3, r7, #1
   1144a:	f000 84b3 	beq.w	11db4 <_vfiprintf_r+0xef0>
   1144e:	463a      	mov	r2, r7
   11450:	4629      	mov	r1, r5
   11452:	4620      	mov	r0, r4
   11454:	f7fd fa6c 	bl	e930 <memchr>
   11458:	9008      	str	r0, [sp, #32]
   1145a:	2800      	cmp	r0, #0
   1145c:	f000 849f 	beq.w	11d9e <_vfiprintf_r+0xeda>
   11460:	1b03      	subs	r3, r0, r4
   11462:	9a03      	ldr	r2, [sp, #12]
   11464:	9304      	str	r3, [sp, #16]
   11466:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1146a:	462f      	mov	r7, r5
   1146c:	9207      	str	r2, [sp, #28]
   1146e:	9303      	str	r3, [sp, #12]
   11470:	9508      	str	r5, [sp, #32]
   11472:	e657      	b.n	11124 <_vfiprintf_r+0x260>
   11474:	2943      	cmp	r1, #67	; 0x43
   11476:	d002      	beq.n	1147e <_vfiprintf_r+0x5ba>
   11478:	06f5      	lsls	r5, r6, #27
   1147a:	f140 832d 	bpl.w	11ad8 <_vfiprintf_r+0xc14>
   1147e:	9d07      	ldr	r5, [sp, #28]
   11480:	2208      	movs	r2, #8
   11482:	2100      	movs	r1, #0
   11484:	a816      	add	r0, sp, #88	; 0x58
   11486:	ac2b      	add	r4, sp, #172	; 0xac
   11488:	f7fc fd00 	bl	de8c <memset>
   1148c:	ab16      	add	r3, sp, #88	; 0x58
   1148e:	f855 2b04 	ldr.w	r2, [r5], #4
   11492:	4621      	mov	r1, r4
   11494:	4658      	mov	r0, fp
   11496:	f000 fd75 	bl	11f84 <_wcrtomb_r>
   1149a:	4603      	mov	r3, r0
   1149c:	3301      	adds	r3, #1
   1149e:	9004      	str	r0, [sp, #16]
   114a0:	f000 84b3 	beq.w	11e0a <_vfiprintf_r+0xf46>
   114a4:	9b04      	ldr	r3, [sp, #16]
   114a6:	9507      	str	r5, [sp, #28]
   114a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   114ac:	9303      	str	r3, [sp, #12]
   114ae:	2300      	movs	r3, #0
   114b0:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   114b4:	e703      	b.n	112be <_vfiprintf_r+0x3fa>
   114b6:	9b07      	ldr	r3, [sp, #28]
   114b8:	f853 2b04 	ldr.w	r2, [r3], #4
   114bc:	9206      	str	r2, [sp, #24]
   114be:	2a00      	cmp	r2, #0
   114c0:	f280 829c 	bge.w	119fc <_vfiprintf_r+0xb38>
   114c4:	9a06      	ldr	r2, [sp, #24]
   114c6:	4252      	negs	r2, r2
   114c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   114cc:	f898 1000 	ldrb.w	r1, [r8]
   114d0:	f046 0604 	orr.w	r6, r6, #4
   114d4:	e569      	b.n	10faa <_vfiprintf_r+0xe6>
   114d6:	f898 1000 	ldrb.w	r1, [r8]
   114da:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   114de:	e564      	b.n	10faa <_vfiprintf_r+0xe6>
   114e0:	f898 1000 	ldrb.w	r1, [r8]
   114e4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   114e8:	e55f      	b.n	10faa <_vfiprintf_r+0xe6>
   114ea:	4642      	mov	r2, r8
   114ec:	f812 1b01 	ldrb.w	r1, [r2], #1
   114f0:	292a      	cmp	r1, #42	; 0x2a
   114f2:	f000 8496 	beq.w	11e22 <_vfiprintf_r+0xf5e>
   114f6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   114fa:	2b09      	cmp	r3, #9
   114fc:	4690      	mov	r8, r2
   114fe:	f04f 0700 	mov.w	r7, #0
   11502:	f63f ad54 	bhi.w	10fae <_vfiprintf_r+0xea>
   11506:	f818 1b01 	ldrb.w	r1, [r8], #1
   1150a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   1150e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   11512:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   11516:	2b09      	cmp	r3, #9
   11518:	d9f5      	bls.n	11506 <_vfiprintf_r+0x642>
   1151a:	e548      	b.n	10fae <_vfiprintf_r+0xea>
   1151c:	f898 1000 	ldrb.w	r1, [r8]
   11520:	f046 0601 	orr.w	r6, r6, #1
   11524:	e541      	b.n	10faa <_vfiprintf_r+0xe6>
   11526:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   1152a:	2b00      	cmp	r3, #0
   1152c:	f47f adc2 	bne.w	110b4 <_vfiprintf_r+0x1f0>
   11530:	2320      	movs	r3, #32
   11532:	f898 1000 	ldrb.w	r1, [r8]
   11536:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1153a:	e536      	b.n	10faa <_vfiprintf_r+0xe6>
   1153c:	f898 1000 	ldrb.w	r1, [r8]
   11540:	296c      	cmp	r1, #108	; 0x6c
   11542:	bf03      	ittte	eq
   11544:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   11548:	f046 0620 	orreq.w	r6, r6, #32
   1154c:	f108 0801 	addeq.w	r8, r8, #1
   11550:	f046 0610 	orrne.w	r6, r6, #16
   11554:	e529      	b.n	10faa <_vfiprintf_r+0xe6>
   11556:	f898 1000 	ldrb.w	r1, [r8]
   1155a:	2968      	cmp	r1, #104	; 0x68
   1155c:	bf03      	ittte	eq
   1155e:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   11562:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   11566:	f108 0801 	addeq.w	r8, r8, #1
   1156a:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   1156e:	e51c      	b.n	10faa <_vfiprintf_r+0xe6>
   11570:	f046 0310 	orr.w	r3, r6, #16
   11574:	9303      	str	r3, [sp, #12]
   11576:	9b03      	ldr	r3, [sp, #12]
   11578:	f013 0220 	ands.w	r2, r3, #32
   1157c:	f000 8206 	beq.w	1198c <_vfiprintf_r+0xac8>
   11580:	9b07      	ldr	r3, [sp, #28]
   11582:	3307      	adds	r3, #7
   11584:	f023 0307 	bic.w	r3, r3, #7
   11588:	4619      	mov	r1, r3
   1158a:	685a      	ldr	r2, [r3, #4]
   1158c:	f851 3b08 	ldr.w	r3, [r1], #8
   11590:	9107      	str	r1, [sp, #28]
   11592:	2101      	movs	r1, #1
   11594:	e60d      	b.n	111b2 <_vfiprintf_r+0x2ee>
   11596:	9a07      	ldr	r2, [sp, #28]
   11598:	f046 0302 	orr.w	r3, r6, #2
   1159c:	9303      	str	r3, [sp, #12]
   1159e:	f852 3b04 	ldr.w	r3, [r2], #4
   115a2:	9207      	str	r2, [sp, #28]
   115a4:	f647 0230 	movw	r2, #30768	; 0x7830
   115a8:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   115ac:	4ab8      	ldr	r2, [pc, #736]	; (11890 <_vfiprintf_r+0x9cc>)
   115ae:	920c      	str	r2, [sp, #48]	; 0x30
   115b0:	2102      	movs	r1, #2
   115b2:	2200      	movs	r2, #0
   115b4:	e5fd      	b.n	111b2 <_vfiprintf_r+0x2ee>
   115b6:	06b7      	lsls	r7, r6, #26
   115b8:	f100 8248 	bmi.w	11a4c <_vfiprintf_r+0xb88>
   115bc:	06f5      	lsls	r5, r6, #27
   115be:	f100 8346 	bmi.w	11c4e <_vfiprintf_r+0xd8a>
   115c2:	0674      	lsls	r4, r6, #25
   115c4:	f100 83d5 	bmi.w	11d72 <_vfiprintf_r+0xeae>
   115c8:	05b0      	lsls	r0, r6, #22
   115ca:	f140 8340 	bpl.w	11c4e <_vfiprintf_r+0xd8a>
   115ce:	9b07      	ldr	r3, [sp, #28]
   115d0:	9905      	ldr	r1, [sp, #20]
   115d2:	f853 2b04 	ldr.w	r2, [r3], #4
   115d6:	9307      	str	r3, [sp, #28]
   115d8:	7011      	strb	r1, [r2, #0]
   115da:	e4be      	b.n	10f5a <_vfiprintf_r+0x96>
   115dc:	9603      	str	r6, [sp, #12]
   115de:	2901      	cmp	r1, #1
   115e0:	f43f ad8c 	beq.w	110fc <_vfiprintf_r+0x238>
   115e4:	2902      	cmp	r1, #2
   115e6:	ac44      	add	r4, sp, #272	; 0x110
   115e8:	d111      	bne.n	1160e <_vfiprintf_r+0x74a>
   115ea:	980c      	ldr	r0, [sp, #48]	; 0x30
   115ec:	f003 010f 	and.w	r1, r3, #15
   115f0:	091b      	lsrs	r3, r3, #4
   115f2:	5c41      	ldrb	r1, [r0, r1]
   115f4:	f804 1d01 	strb.w	r1, [r4, #-1]!
   115f8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   115fc:	0912      	lsrs	r2, r2, #4
   115fe:	ea53 0102 	orrs.w	r1, r3, r2
   11602:	d1f3      	bne.n	115ec <_vfiprintf_r+0x728>
   11604:	9e03      	ldr	r6, [sp, #12]
   11606:	ab44      	add	r3, sp, #272	; 0x110
   11608:	1b1b      	subs	r3, r3, r4
   1160a:	9304      	str	r3, [sp, #16]
   1160c:	e583      	b.n	11116 <_vfiprintf_r+0x252>
   1160e:	f003 0107 	and.w	r1, r3, #7
   11612:	08db      	lsrs	r3, r3, #3
   11614:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   11618:	08d2      	lsrs	r2, r2, #3
   1161a:	3130      	adds	r1, #48	; 0x30
   1161c:	ea53 0502 	orrs.w	r5, r3, r2
   11620:	4620      	mov	r0, r4
   11622:	f804 1d01 	strb.w	r1, [r4, #-1]!
   11626:	d1f2      	bne.n	1160e <_vfiprintf_r+0x74a>
   11628:	9e03      	ldr	r6, [sp, #12]
   1162a:	07f3      	lsls	r3, r6, #31
   1162c:	d5eb      	bpl.n	11606 <_vfiprintf_r+0x742>
   1162e:	2930      	cmp	r1, #48	; 0x30
   11630:	d0e8      	beq.n	11604 <_vfiprintf_r+0x740>
   11632:	2330      	movs	r3, #48	; 0x30
   11634:	3802      	subs	r0, #2
   11636:	f804 3c01 	strb.w	r3, [r4, #-1]
   1163a:	ab44      	add	r3, sp, #272	; 0x110
   1163c:	1a1b      	subs	r3, r3, r0
   1163e:	9e03      	ldr	r6, [sp, #12]
   11640:	9304      	str	r3, [sp, #16]
   11642:	4604      	mov	r4, r0
   11644:	e567      	b.n	11116 <_vfiprintf_r+0x252>
   11646:	9b04      	ldr	r3, [sp, #16]
   11648:	941b      	str	r4, [sp, #108]	; 0x6c
   1164a:	2201      	movs	r2, #1
   1164c:	931c      	str	r3, [sp, #112]	; 0x70
   1164e:	931a      	str	r3, [sp, #104]	; 0x68
   11650:	9219      	str	r2, [sp, #100]	; 0x64
   11652:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11656:	f109 0908 	add.w	r9, r9, #8
   1165a:	e69d      	b.n	11398 <_vfiprintf_r+0x4d4>
   1165c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11660:	e47b      	b.n	10f5a <_vfiprintf_r+0x96>
   11662:	9a06      	ldr	r2, [sp, #24]
   11664:	9d03      	ldr	r5, [sp, #12]
   11666:	1b55      	subs	r5, r2, r5
   11668:	2d00      	cmp	r5, #0
   1166a:	f77f ae76 	ble.w	1135a <_vfiprintf_r+0x496>
   1166e:	2d10      	cmp	r5, #16
   11670:	f340 83bb 	ble.w	11dea <_vfiprintf_r+0xf26>
   11674:	9409      	str	r4, [sp, #36]	; 0x24
   11676:	ee18 4a10 	vmov	r4, s16
   1167a:	e007      	b.n	1168c <_vfiprintf_r+0x7c8>
   1167c:	f100 0c02 	add.w	ip, r0, #2
   11680:	f109 0908 	add.w	r9, r9, #8
   11684:	4610      	mov	r0, r2
   11686:	3d10      	subs	r5, #16
   11688:	2d10      	cmp	r5, #16
   1168a:	dd1e      	ble.n	116ca <_vfiprintf_r+0x806>
   1168c:	4981      	ldr	r1, [pc, #516]	; (11894 <_vfiprintf_r+0x9d0>)
   1168e:	f8c9 1000 	str.w	r1, [r9]
   11692:	1c42      	adds	r2, r0, #1
   11694:	3310      	adds	r3, #16
   11696:	2110      	movs	r1, #16
   11698:	2a07      	cmp	r2, #7
   1169a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1169e:	f8c9 1004 	str.w	r1, [r9, #4]
   116a2:	ddeb      	ble.n	1167c <_vfiprintf_r+0x7b8>
   116a4:	aa18      	add	r2, sp, #96	; 0x60
   116a6:	2b00      	cmp	r3, #0
   116a8:	d074      	beq.n	11794 <_vfiprintf_r+0x8d0>
   116aa:	4621      	mov	r1, r4
   116ac:	4658      	mov	r0, fp
   116ae:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   116b2:	f7ff fbcb 	bl	10e4c <__sprint_r.part.0>
   116b6:	2800      	cmp	r0, #0
   116b8:	f47f addb 	bne.w	11272 <_vfiprintf_r+0x3ae>
   116bc:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   116c0:	3d10      	subs	r5, #16
   116c2:	2d10      	cmp	r5, #16
   116c4:	f100 0c01 	add.w	ip, r0, #1
   116c8:	dce0      	bgt.n	1168c <_vfiprintf_r+0x7c8>
   116ca:	9c09      	ldr	r4, [sp, #36]	; 0x24
   116cc:	4a71      	ldr	r2, [pc, #452]	; (11894 <_vfiprintf_r+0x9d0>)
   116ce:	f8c9 5004 	str.w	r5, [r9, #4]
   116d2:	442b      	add	r3, r5
   116d4:	f1bc 0f07 	cmp.w	ip, #7
   116d8:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   116dc:	f8c9 2000 	str.w	r2, [r9]
   116e0:	f340 8194 	ble.w	11a0c <_vfiprintf_r+0xb48>
   116e4:	2b00      	cmp	r3, #0
   116e6:	f000 831f 	beq.w	11d28 <_vfiprintf_r+0xe64>
   116ea:	ee18 1a10 	vmov	r1, s16
   116ee:	aa18      	add	r2, sp, #96	; 0x60
   116f0:	4658      	mov	r0, fp
   116f2:	f7ff fbab 	bl	10e4c <__sprint_r.part.0>
   116f6:	2800      	cmp	r0, #0
   116f8:	f47f adbb 	bne.w	11272 <_vfiprintf_r+0x3ae>
   116fc:	9a04      	ldr	r2, [sp, #16]
   116fe:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   11702:	1abd      	subs	r5, r7, r2
   11704:	2d00      	cmp	r5, #0
   11706:	f100 0101 	add.w	r1, r0, #1
   1170a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1170e:	f77f ae29 	ble.w	11364 <_vfiprintf_r+0x4a0>
   11712:	2d10      	cmp	r5, #16
   11714:	dd29      	ble.n	1176a <_vfiprintf_r+0x8a6>
   11716:	9409      	str	r4, [sp, #36]	; 0x24
   11718:	2710      	movs	r7, #16
   1171a:	ee18 4a10 	vmov	r4, s16
   1171e:	e007      	b.n	11730 <_vfiprintf_r+0x86c>
   11720:	f100 0c02 	add.w	ip, r0, #2
   11724:	f109 0908 	add.w	r9, r9, #8
   11728:	4610      	mov	r0, r2
   1172a:	3d10      	subs	r5, #16
   1172c:	2d10      	cmp	r5, #16
   1172e:	dd1a      	ble.n	11766 <_vfiprintf_r+0x8a2>
   11730:	1c42      	adds	r2, r0, #1
   11732:	4958      	ldr	r1, [pc, #352]	; (11894 <_vfiprintf_r+0x9d0>)
   11734:	3310      	adds	r3, #16
   11736:	2a07      	cmp	r2, #7
   11738:	e9c9 1700 	strd	r1, r7, [r9]
   1173c:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   11740:	ddee      	ble.n	11720 <_vfiprintf_r+0x85c>
   11742:	aa18      	add	r2, sp, #96	; 0x60
   11744:	b303      	cbz	r3, 11788 <_vfiprintf_r+0x8c4>
   11746:	4621      	mov	r1, r4
   11748:	4658      	mov	r0, fp
   1174a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1174e:	f7ff fb7d 	bl	10e4c <__sprint_r.part.0>
   11752:	2800      	cmp	r0, #0
   11754:	f47f ad8d 	bne.w	11272 <_vfiprintf_r+0x3ae>
   11758:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1175c:	3d10      	subs	r5, #16
   1175e:	2d10      	cmp	r5, #16
   11760:	f100 0c01 	add.w	ip, r0, #1
   11764:	dce4      	bgt.n	11730 <_vfiprintf_r+0x86c>
   11766:	9c09      	ldr	r4, [sp, #36]	; 0x24
   11768:	4661      	mov	r1, ip
   1176a:	4a4a      	ldr	r2, [pc, #296]	; (11894 <_vfiprintf_r+0x9d0>)
   1176c:	f8c9 5004 	str.w	r5, [r9, #4]
   11770:	442b      	add	r3, r5
   11772:	2907      	cmp	r1, #7
   11774:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   11778:	f8c9 2000 	str.w	r2, [r9]
   1177c:	f300 80e7 	bgt.w	1194e <_vfiprintf_r+0xa8a>
   11780:	f109 0908 	add.w	r9, r9, #8
   11784:	3101      	adds	r1, #1
   11786:	e5ed      	b.n	11364 <_vfiprintf_r+0x4a0>
   11788:	f04f 0c01 	mov.w	ip, #1
   1178c:	4618      	mov	r0, r3
   1178e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11792:	e7ca      	b.n	1172a <_vfiprintf_r+0x866>
   11794:	f04f 0c01 	mov.w	ip, #1
   11798:	4618      	mov	r0, r3
   1179a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1179e:	e772      	b.n	11686 <_vfiprintf_r+0x7c2>
   117a0:	2b00      	cmp	r3, #0
   117a2:	f000 8104 	beq.w	119ae <_vfiprintf_r+0xaea>
   117a6:	ee18 1a10 	vmov	r1, s16
   117aa:	aa18      	add	r2, sp, #96	; 0x60
   117ac:	4658      	mov	r0, fp
   117ae:	f7ff fb4d 	bl	10e4c <__sprint_r.part.0>
   117b2:	2800      	cmp	r0, #0
   117b4:	f47f ad5d 	bne.w	11272 <_vfiprintf_r+0x3ae>
   117b8:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   117bc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   117c0:	1c41      	adds	r1, r0, #1
   117c2:	e5a7      	b.n	11314 <_vfiprintf_r+0x450>
   117c4:	2302      	movs	r3, #2
   117c6:	aa11      	add	r2, sp, #68	; 0x44
   117c8:	931c      	str	r3, [sp, #112]	; 0x70
   117ca:	921b      	str	r2, [sp, #108]	; 0x6c
   117cc:	2101      	movs	r1, #1
   117ce:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   117d2:	4608      	mov	r0, r1
   117d4:	f109 0908 	add.w	r9, r9, #8
   117d8:	1c41      	adds	r1, r0, #1
   117da:	e5ba      	b.n	11352 <_vfiprintf_r+0x48e>
   117dc:	2d10      	cmp	r5, #16
   117de:	f340 82e5 	ble.w	11dac <_vfiprintf_r+0xee8>
   117e2:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   117e6:	940f      	str	r4, [sp, #60]	; 0x3c
   117e8:	4608      	mov	r0, r1
   117ea:	ee18 4a10 	vmov	r4, s16
   117ee:	e007      	b.n	11800 <_vfiprintf_r+0x93c>
   117f0:	f100 0c02 	add.w	ip, r0, #2
   117f4:	f109 0908 	add.w	r9, r9, #8
   117f8:	4610      	mov	r0, r2
   117fa:	3d10      	subs	r5, #16
   117fc:	2d10      	cmp	r5, #16
   117fe:	dd1d      	ble.n	1183c <_vfiprintf_r+0x978>
   11800:	4925      	ldr	r1, [pc, #148]	; (11898 <_vfiprintf_r+0x9d4>)
   11802:	f8c9 1000 	str.w	r1, [r9]
   11806:	1c42      	adds	r2, r0, #1
   11808:	3310      	adds	r3, #16
   1180a:	2110      	movs	r1, #16
   1180c:	2a07      	cmp	r2, #7
   1180e:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   11812:	f8c9 1004 	str.w	r1, [r9, #4]
   11816:	ddeb      	ble.n	117f0 <_vfiprintf_r+0x92c>
   11818:	aa18      	add	r2, sp, #96	; 0x60
   1181a:	b303      	cbz	r3, 1185e <_vfiprintf_r+0x99a>
   1181c:	4621      	mov	r1, r4
   1181e:	4658      	mov	r0, fp
   11820:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11824:	f7ff fb12 	bl	10e4c <__sprint_r.part.0>
   11828:	2800      	cmp	r0, #0
   1182a:	f47f ad22 	bne.w	11272 <_vfiprintf_r+0x3ae>
   1182e:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   11832:	3d10      	subs	r5, #16
   11834:	2d10      	cmp	r5, #16
   11836:	f100 0c01 	add.w	ip, r0, #1
   1183a:	dce1      	bgt.n	11800 <_vfiprintf_r+0x93c>
   1183c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1183e:	4660      	mov	r0, ip
   11840:	4a15      	ldr	r2, [pc, #84]	; (11898 <_vfiprintf_r+0x9d4>)
   11842:	f8c9 5004 	str.w	r5, [r9, #4]
   11846:	442b      	add	r3, r5
   11848:	2807      	cmp	r0, #7
   1184a:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1184e:	f8c9 2000 	str.w	r2, [r9]
   11852:	f300 80c1 	bgt.w	119d8 <_vfiprintf_r+0xb14>
   11856:	f109 0908 	add.w	r9, r9, #8
   1185a:	1c41      	adds	r1, r0, #1
   1185c:	e546      	b.n	112ec <_vfiprintf_r+0x428>
   1185e:	4618      	mov	r0, r3
   11860:	f04f 0c01 	mov.w	ip, #1
   11864:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11868:	e7c7      	b.n	117fa <_vfiprintf_r+0x936>
   1186a:	0776      	lsls	r6, r6, #29
   1186c:	9319      	str	r3, [sp, #100]	; 0x64
   1186e:	d553      	bpl.n	11918 <_vfiprintf_r+0xa54>
   11870:	9a06      	ldr	r2, [sp, #24]
   11872:	9903      	ldr	r1, [sp, #12]
   11874:	1a54      	subs	r4, r2, r1
   11876:	2c00      	cmp	r4, #0
   11878:	dd4e      	ble.n	11918 <_vfiprintf_r+0xa54>
   1187a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1187e:	2c10      	cmp	r4, #16
   11880:	f340 82b0 	ble.w	11de4 <_vfiprintf_r+0xf20>
   11884:	9919      	ldr	r1, [sp, #100]	; 0x64
   11886:	ee18 6a10 	vmov	r6, s16
   1188a:	2510      	movs	r5, #16
   1188c:	e00d      	b.n	118aa <_vfiprintf_r+0x9e6>
   1188e:	bf00      	nop
   11890:	20001338 	.word	0x20001338
   11894:	200018e8 	.word	0x200018e8
   11898:	2000137c 	.word	0x2000137c
   1189c:	1c88      	adds	r0, r1, #2
   1189e:	f109 0908 	add.w	r9, r9, #8
   118a2:	4611      	mov	r1, r2
   118a4:	3c10      	subs	r4, #16
   118a6:	2c10      	cmp	r4, #16
   118a8:	dd1a      	ble.n	118e0 <_vfiprintf_r+0xa1c>
   118aa:	1c4a      	adds	r2, r1, #1
   118ac:	48b3      	ldr	r0, [pc, #716]	; (11b7c <_vfiprintf_r+0xcb8>)
   118ae:	3310      	adds	r3, #16
   118b0:	2a07      	cmp	r2, #7
   118b2:	e9c9 0500 	strd	r0, r5, [r9]
   118b6:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   118ba:	ddef      	ble.n	1189c <_vfiprintf_r+0x9d8>
   118bc:	aa18      	add	r2, sp, #96	; 0x60
   118be:	b333      	cbz	r3, 1190e <_vfiprintf_r+0xa4a>
   118c0:	4631      	mov	r1, r6
   118c2:	4658      	mov	r0, fp
   118c4:	f7ff fac2 	bl	10e4c <__sprint_r.part.0>
   118c8:	2800      	cmp	r0, #0
   118ca:	f47f acd2 	bne.w	11272 <_vfiprintf_r+0x3ae>
   118ce:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   118d2:	3c10      	subs	r4, #16
   118d4:	2c10      	cmp	r4, #16
   118d6:	f101 0001 	add.w	r0, r1, #1
   118da:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   118de:	dce4      	bgt.n	118aa <_vfiprintf_r+0x9e6>
   118e0:	4aa6      	ldr	r2, [pc, #664]	; (11b7c <_vfiprintf_r+0xcb8>)
   118e2:	f8c9 4004 	str.w	r4, [r9, #4]
   118e6:	4423      	add	r3, r4
   118e8:	2807      	cmp	r0, #7
   118ea:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   118ee:	f8c9 2000 	str.w	r2, [r9]
   118f2:	f77f ad59 	ble.w	113a8 <_vfiprintf_r+0x4e4>
   118f6:	b17b      	cbz	r3, 11918 <_vfiprintf_r+0xa54>
   118f8:	ee18 1a10 	vmov	r1, s16
   118fc:	aa18      	add	r2, sp, #96	; 0x60
   118fe:	4658      	mov	r0, fp
   11900:	f7ff faa4 	bl	10e4c <__sprint_r.part.0>
   11904:	2800      	cmp	r0, #0
   11906:	f47f acb4 	bne.w	11272 <_vfiprintf_r+0x3ae>
   1190a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1190c:	e54c      	b.n	113a8 <_vfiprintf_r+0x4e4>
   1190e:	2001      	movs	r0, #1
   11910:	4619      	mov	r1, r3
   11912:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11916:	e7c5      	b.n	118a4 <_vfiprintf_r+0x9e0>
   11918:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   1191c:	9903      	ldr	r1, [sp, #12]
   1191e:	428a      	cmp	r2, r1
   11920:	bfac      	ite	ge
   11922:	189b      	addge	r3, r3, r2
   11924:	185b      	addlt	r3, r3, r1
   11926:	9305      	str	r3, [sp, #20]
   11928:	e549      	b.n	113be <_vfiprintf_r+0x4fa>
   1192a:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   1192e:	058f      	lsls	r7, r1, #22
   11930:	ee18 3a10 	vmov	r3, s16
   11934:	b28a      	uxth	r2, r1
   11936:	f53f aae8 	bmi.w	10f0a <_vfiprintf_r+0x46>
   1193a:	ee18 5a10 	vmov	r5, s16
   1193e:	6d98      	ldr	r0, [r3, #88]	; 0x58
   11940:	f7fc fb24 	bl	df8c <__retarget_lock_acquire_recursive>
   11944:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   11948:	b28a      	uxth	r2, r1
   1194a:	f7ff bade 	b.w	10f0a <_vfiprintf_r+0x46>
   1194e:	2b00      	cmp	r3, #0
   11950:	f43f ae79 	beq.w	11646 <_vfiprintf_r+0x782>
   11954:	ee18 1a10 	vmov	r1, s16
   11958:	aa18      	add	r2, sp, #96	; 0x60
   1195a:	4658      	mov	r0, fp
   1195c:	f7ff fa76 	bl	10e4c <__sprint_r.part.0>
   11960:	2800      	cmp	r0, #0
   11962:	f47f ac86 	bne.w	11272 <_vfiprintf_r+0x3ae>
   11966:	9919      	ldr	r1, [sp, #100]	; 0x64
   11968:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1196a:	3101      	adds	r1, #1
   1196c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11970:	e4f8      	b.n	11364 <_vfiprintf_r+0x4a0>
   11972:	9219      	str	r2, [sp, #100]	; 0x64
   11974:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11978:	e45e      	b.n	11238 <_vfiprintf_r+0x374>
   1197a:	2f00      	cmp	r7, #0
   1197c:	f47f abc3 	bne.w	11106 <_vfiprintf_r+0x242>
   11980:	9e03      	ldr	r6, [sp, #12]
   11982:	2700      	movs	r7, #0
   11984:	9704      	str	r7, [sp, #16]
   11986:	ac44      	add	r4, sp, #272	; 0x110
   11988:	f7ff bbc5 	b.w	11116 <_vfiprintf_r+0x252>
   1198c:	9b03      	ldr	r3, [sp, #12]
   1198e:	f013 0310 	ands.w	r3, r3, #16
   11992:	d154      	bne.n	11a3e <_vfiprintf_r+0xb7a>
   11994:	9a03      	ldr	r2, [sp, #12]
   11996:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   1199a:	f000 816b 	beq.w	11c74 <_vfiprintf_r+0xdb0>
   1199e:	9907      	ldr	r1, [sp, #28]
   119a0:	461a      	mov	r2, r3
   119a2:	f851 3b04 	ldr.w	r3, [r1], #4
   119a6:	9107      	str	r1, [sp, #28]
   119a8:	b29b      	uxth	r3, r3
   119aa:	2101      	movs	r1, #1
   119ac:	e401      	b.n	111b2 <_vfiprintf_r+0x2ee>
   119ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
   119b0:	2a00      	cmp	r2, #0
   119b2:	d164      	bne.n	11a7e <_vfiprintf_r+0xbba>
   119b4:	4618      	mov	r0, r3
   119b6:	2101      	movs	r1, #1
   119b8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   119bc:	e4c9      	b.n	11352 <_vfiprintf_r+0x48e>
   119be:	2101      	movs	r1, #1
   119c0:	4618      	mov	r0, r3
   119c2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   119c6:	e4c4      	b.n	11352 <_vfiprintf_r+0x48e>
   119c8:	425b      	negs	r3, r3
   119ca:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   119ce:	9603      	str	r6, [sp, #12]
   119d0:	202d      	movs	r0, #45	; 0x2d
   119d2:	2101      	movs	r1, #1
   119d4:	f7ff bbee 	b.w	111b4 <_vfiprintf_r+0x2f0>
   119d8:	2b00      	cmp	r3, #0
   119da:	f000 8088 	beq.w	11aee <_vfiprintf_r+0xc2a>
   119de:	ee18 1a10 	vmov	r1, s16
   119e2:	aa18      	add	r2, sp, #96	; 0x60
   119e4:	4658      	mov	r0, fp
   119e6:	f7ff fa31 	bl	10e4c <__sprint_r.part.0>
   119ea:	2800      	cmp	r0, #0
   119ec:	f47f ac41 	bne.w	11272 <_vfiprintf_r+0x3ae>
   119f0:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   119f4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   119f8:	1c41      	adds	r1, r0, #1
   119fa:	e477      	b.n	112ec <_vfiprintf_r+0x428>
   119fc:	f898 1000 	ldrb.w	r1, [r8]
   11a00:	9307      	str	r3, [sp, #28]
   11a02:	f7ff bad2 	b.w	10faa <_vfiprintf_r+0xe6>
   11a06:	ac44      	add	r4, sp, #272	; 0x110
   11a08:	f7ff bb85 	b.w	11116 <_vfiprintf_r+0x252>
   11a0c:	f109 0908 	add.w	r9, r9, #8
   11a10:	f10c 0101 	add.w	r1, ip, #1
   11a14:	4660      	mov	r0, ip
   11a16:	e4a0      	b.n	1135a <_vfiprintf_r+0x496>
   11a18:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   11a1c:	f040 8197 	bne.w	11d4e <_vfiprintf_r+0xe8a>
   11a20:	f851 3b04 	ldr.w	r3, [r1], #4
   11a24:	9107      	str	r1, [sp, #28]
   11a26:	f7ff bbc0 	b.w	111aa <_vfiprintf_r+0x2e6>
   11a2a:	05b3      	lsls	r3, r6, #22
   11a2c:	f100 8188 	bmi.w	11d40 <_vfiprintf_r+0xe7c>
   11a30:	f852 3b04 	ldr.w	r3, [r2], #4
   11a34:	9207      	str	r2, [sp, #28]
   11a36:	17da      	asrs	r2, r3, #31
   11a38:	4611      	mov	r1, r2
   11a3a:	f7ff bb52 	b.w	110e2 <_vfiprintf_r+0x21e>
   11a3e:	9907      	ldr	r1, [sp, #28]
   11a40:	f851 3b04 	ldr.w	r3, [r1], #4
   11a44:	9107      	str	r1, [sp, #28]
   11a46:	2101      	movs	r1, #1
   11a48:	f7ff bbb3 	b.w	111b2 <_vfiprintf_r+0x2ee>
   11a4c:	9b07      	ldr	r3, [sp, #28]
   11a4e:	9805      	ldr	r0, [sp, #20]
   11a50:	f853 1b04 	ldr.w	r1, [r3], #4
   11a54:	9307      	str	r3, [sp, #28]
   11a56:	17c2      	asrs	r2, r0, #31
   11a58:	e9c1 0200 	strd	r0, r2, [r1]
   11a5c:	f7ff ba7d 	b.w	10f5a <_vfiprintf_r+0x96>
   11a60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11a62:	2b00      	cmp	r3, #0
   11a64:	f43f ab26 	beq.w	110b4 <_vfiprintf_r+0x1f0>
   11a68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11a6a:	781b      	ldrb	r3, [r3, #0]
   11a6c:	2b00      	cmp	r3, #0
   11a6e:	f43f ab21 	beq.w	110b4 <_vfiprintf_r+0x1f0>
   11a72:	f898 1000 	ldrb.w	r1, [r8]
   11a76:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   11a7a:	f7ff ba96 	b.w	10faa <_vfiprintf_r+0xe6>
   11a7e:	2302      	movs	r3, #2
   11a80:	aa11      	add	r2, sp, #68	; 0x44
   11a82:	931c      	str	r3, [sp, #112]	; 0x70
   11a84:	921b      	str	r2, [sp, #108]	; 0x6c
   11a86:	2001      	movs	r0, #1
   11a88:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11a8c:	e6a2      	b.n	117d4 <_vfiprintf_r+0x910>
   11a8e:	9603      	str	r6, [sp, #12]
   11a90:	e571      	b.n	11576 <_vfiprintf_r+0x6b2>
   11a92:	4b3b      	ldr	r3, [pc, #236]	; (11b80 <_vfiprintf_r+0xcbc>)
   11a94:	930c      	str	r3, [sp, #48]	; 0x30
   11a96:	f016 0220 	ands.w	r2, r6, #32
   11a9a:	d059      	beq.n	11b50 <_vfiprintf_r+0xc8c>
   11a9c:	9b07      	ldr	r3, [sp, #28]
   11a9e:	3307      	adds	r3, #7
   11aa0:	f023 0307 	bic.w	r3, r3, #7
   11aa4:	4618      	mov	r0, r3
   11aa6:	685a      	ldr	r2, [r3, #4]
   11aa8:	f850 3b08 	ldr.w	r3, [r0], #8
   11aac:	9007      	str	r0, [sp, #28]
   11aae:	07f4      	lsls	r4, r6, #31
   11ab0:	d509      	bpl.n	11ac6 <_vfiprintf_r+0xc02>
   11ab2:	ea53 0002 	orrs.w	r0, r3, r2
   11ab6:	d006      	beq.n	11ac6 <_vfiprintf_r+0xc02>
   11ab8:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   11abc:	2130      	movs	r1, #48	; 0x30
   11abe:	f046 0602 	orr.w	r6, r6, #2
   11ac2:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   11ac6:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   11aca:	9103      	str	r1, [sp, #12]
   11acc:	2102      	movs	r1, #2
   11ace:	f7ff bb70 	b.w	111b2 <_vfiprintf_r+0x2ee>
   11ad2:	4b2c      	ldr	r3, [pc, #176]	; (11b84 <_vfiprintf_r+0xcc0>)
   11ad4:	930c      	str	r3, [sp, #48]	; 0x30
   11ad6:	e7de      	b.n	11a96 <_vfiprintf_r+0xbd2>
   11ad8:	9b07      	ldr	r3, [sp, #28]
   11ada:	2101      	movs	r1, #1
   11adc:	f853 2b04 	ldr.w	r2, [r3], #4
   11ae0:	9103      	str	r1, [sp, #12]
   11ae2:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   11ae6:	9307      	str	r3, [sp, #28]
   11ae8:	9104      	str	r1, [sp, #16]
   11aea:	ac2b      	add	r4, sp, #172	; 0xac
   11aec:	e4df      	b.n	114ae <_vfiprintf_r+0x5ea>
   11aee:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   11af2:	2a00      	cmp	r2, #0
   11af4:	f040 8132 	bne.w	11d5c <_vfiprintf_r+0xe98>
   11af8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11afa:	2a00      	cmp	r2, #0
   11afc:	f47f ae62 	bne.w	117c4 <_vfiprintf_r+0x900>
   11b00:	4618      	mov	r0, r3
   11b02:	2101      	movs	r1, #1
   11b04:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11b08:	e427      	b.n	1135a <_vfiprintf_r+0x496>
   11b0a:	2100      	movs	r1, #0
   11b0c:	2208      	movs	r2, #8
   11b0e:	a816      	add	r0, sp, #88	; 0x58
   11b10:	9413      	str	r4, [sp, #76]	; 0x4c
   11b12:	f7fc f9bb 	bl	de8c <memset>
   11b16:	1c79      	adds	r1, r7, #1
   11b18:	f000 80bc 	beq.w	11c94 <_vfiprintf_r+0xdd0>
   11b1c:	2500      	movs	r5, #0
   11b1e:	9407      	str	r4, [sp, #28]
   11b20:	462c      	mov	r4, r5
   11b22:	e00c      	b.n	11b3e <_vfiprintf_r+0xc7a>
   11b24:	a92b      	add	r1, sp, #172	; 0xac
   11b26:	4658      	mov	r0, fp
   11b28:	f000 fa2c 	bl	11f84 <_wcrtomb_r>
   11b2c:	1c42      	adds	r2, r0, #1
   11b2e:	4420      	add	r0, r4
   11b30:	f000 816b 	beq.w	11e0a <_vfiprintf_r+0xf46>
   11b34:	42b8      	cmp	r0, r7
   11b36:	dc08      	bgt.n	11b4a <_vfiprintf_r+0xc86>
   11b38:	f000 8170 	beq.w	11e1c <_vfiprintf_r+0xf58>
   11b3c:	4604      	mov	r4, r0
   11b3e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11b40:	5952      	ldr	r2, [r2, r5]
   11b42:	ab16      	add	r3, sp, #88	; 0x58
   11b44:	3504      	adds	r5, #4
   11b46:	2a00      	cmp	r2, #0
   11b48:	d1ec      	bne.n	11b24 <_vfiprintf_r+0xc60>
   11b4a:	9404      	str	r4, [sp, #16]
   11b4c:	9c07      	ldr	r4, [sp, #28]
   11b4e:	e0af      	b.n	11cb0 <_vfiprintf_r+0xdec>
   11b50:	f016 0310 	ands.w	r3, r6, #16
   11b54:	9807      	ldr	r0, [sp, #28]
   11b56:	d10c      	bne.n	11b72 <_vfiprintf_r+0xcae>
   11b58:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   11b5c:	d005      	beq.n	11b6a <_vfiprintf_r+0xca6>
   11b5e:	461a      	mov	r2, r3
   11b60:	f850 3b04 	ldr.w	r3, [r0], #4
   11b64:	9007      	str	r0, [sp, #28]
   11b66:	b29b      	uxth	r3, r3
   11b68:	e7a1      	b.n	11aae <_vfiprintf_r+0xbea>
   11b6a:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   11b6e:	f040 80e1 	bne.w	11d34 <_vfiprintf_r+0xe70>
   11b72:	f850 3b04 	ldr.w	r3, [r0], #4
   11b76:	9007      	str	r0, [sp, #28]
   11b78:	e799      	b.n	11aae <_vfiprintf_r+0xbea>
   11b7a:	bf00      	nop
   11b7c:	2000137c 	.word	0x2000137c
   11b80:	20001338 	.word	0x20001338
   11b84:	2000134c 	.word	0x2000134c
   11b88:	9903      	ldr	r1, [sp, #12]
   11b8a:	9704      	str	r7, [sp, #16]
   11b8c:	ac44      	add	r4, sp, #272	; 0x110
   11b8e:	469e      	mov	lr, r3
   11b90:	ee08 ba90 	vmov	s17, fp
   11b94:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   11b98:	f04f 0c00 	mov.w	ip, #0
   11b9c:	4623      	mov	r3, r4
   11b9e:	e006      	b.n	11bae <_vfiprintf_r+0xcea>
   11ba0:	f1be 0f0a 	cmp.w	lr, #10
   11ba4:	f172 0200 	sbcs.w	r2, r2, #0
   11ba8:	d339      	bcc.n	11c1e <_vfiprintf_r+0xd5a>
   11baa:	46a6      	mov	lr, r4
   11bac:	462a      	mov	r2, r5
   11bae:	49a6      	ldr	r1, [pc, #664]	; (11e48 <_vfiprintf_r+0xf84>)
   11bb0:	eb1e 0002 	adds.w	r0, lr, r2
   11bb4:	f140 0000 	adc.w	r0, r0, #0
   11bb8:	460f      	mov	r7, r1
   11bba:	fba1 1400 	umull	r1, r4, r1, r0
   11bbe:	f024 0103 	bic.w	r1, r4, #3
   11bc2:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   11bc6:	1a40      	subs	r0, r0, r1
   11bc8:	ebbe 0100 	subs.w	r1, lr, r0
   11bcc:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   11bd0:	f162 0400 	sbc.w	r4, r2, #0
   11bd4:	fb05 f501 	mul.w	r5, r5, r1
   11bd8:	fb07 5504 	mla	r5, r7, r4, r5
   11bdc:	fba1 4107 	umull	r4, r1, r1, r7
   11be0:	440d      	add	r5, r1
   11be2:	2705      	movs	r7, #5
   11be4:	f004 0101 	and.w	r1, r4, #1
   11be8:	fba1 1b07 	umull	r1, fp, r1, r7
   11bec:	1809      	adds	r1, r1, r0
   11bee:	0864      	lsrs	r4, r4, #1
   11bf0:	3130      	adds	r1, #48	; 0x30
   11bf2:	f803 1c01 	strb.w	r1, [r3, #-1]
   11bf6:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   11bfa:	f10c 0c01 	add.w	ip, ip, #1
   11bfe:	3b01      	subs	r3, #1
   11c00:	086d      	lsrs	r5, r5, #1
   11c02:	2e00      	cmp	r6, #0
   11c04:	d0cc      	beq.n	11ba0 <_vfiprintf_r+0xcdc>
   11c06:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11c08:	7809      	ldrb	r1, [r1, #0]
   11c0a:	4561      	cmp	r1, ip
   11c0c:	d1c8      	bne.n	11ba0 <_vfiprintf_r+0xcdc>
   11c0e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   11c12:	d0c5      	beq.n	11ba0 <_vfiprintf_r+0xcdc>
   11c14:	f1be 0f0a 	cmp.w	lr, #10
   11c18:	f172 0200 	sbcs.w	r2, r2, #0
   11c1c:	d26c      	bcs.n	11cf8 <_vfiprintf_r+0xe34>
   11c1e:	461c      	mov	r4, r3
   11c20:	ab44      	add	r3, sp, #272	; 0x110
   11c22:	1b1b      	subs	r3, r3, r4
   11c24:	9f04      	ldr	r7, [sp, #16]
   11c26:	9e03      	ldr	r6, [sp, #12]
   11c28:	9304      	str	r3, [sp, #16]
   11c2a:	ee18 ba90 	vmov	fp, s17
   11c2e:	f7ff ba72 	b.w	11116 <_vfiprintf_r+0x252>
   11c32:	9603      	str	r6, [sp, #12]
   11c34:	f7ff ba62 	b.w	110fc <_vfiprintf_r+0x238>
   11c38:	4658      	mov	r0, fp
   11c3a:	f7fc fe4b 	bl	e8d4 <__sinit>
   11c3e:	f7ff b95b 	b.w	10ef8 <_vfiprintf_r+0x34>
   11c42:	2901      	cmp	r1, #1
   11c44:	9603      	str	r6, [sp, #12]
   11c46:	f47f accd 	bne.w	115e4 <_vfiprintf_r+0x720>
   11c4a:	f7ff ba5c 	b.w	11106 <_vfiprintf_r+0x242>
   11c4e:	9b07      	ldr	r3, [sp, #28]
   11c50:	9905      	ldr	r1, [sp, #20]
   11c52:	f853 2b04 	ldr.w	r2, [r3], #4
   11c56:	6011      	str	r1, [r2, #0]
   11c58:	9307      	str	r3, [sp, #28]
   11c5a:	f7ff b97e 	b.w	10f5a <_vfiprintf_r+0x96>
   11c5e:	2f06      	cmp	r7, #6
   11c60:	463b      	mov	r3, r7
   11c62:	9a03      	ldr	r2, [sp, #12]
   11c64:	4c79      	ldr	r4, [pc, #484]	; (11e4c <_vfiprintf_r+0xf88>)
   11c66:	9207      	str	r2, [sp, #28]
   11c68:	bf28      	it	cs
   11c6a:	2306      	movcs	r3, #6
   11c6c:	9304      	str	r3, [sp, #16]
   11c6e:	9303      	str	r3, [sp, #12]
   11c70:	f7ff bb25 	b.w	112be <_vfiprintf_r+0x3fa>
   11c74:	9b03      	ldr	r3, [sp, #12]
   11c76:	9907      	ldr	r1, [sp, #28]
   11c78:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   11c7c:	bf14      	ite	ne
   11c7e:	f851 3b04 	ldrne.w	r3, [r1], #4
   11c82:	f851 3b04 	ldreq.w	r3, [r1], #4
   11c86:	9107      	str	r1, [sp, #28]
   11c88:	bf1c      	itt	ne
   11c8a:	4602      	movne	r2, r0
   11c8c:	b2db      	uxtbne	r3, r3
   11c8e:	2101      	movs	r1, #1
   11c90:	f7ff ba8f 	b.w	111b2 <_vfiprintf_r+0x2ee>
   11c94:	ab16      	add	r3, sp, #88	; 0x58
   11c96:	9300      	str	r3, [sp, #0]
   11c98:	2300      	movs	r3, #0
   11c9a:	4619      	mov	r1, r3
   11c9c:	aa13      	add	r2, sp, #76	; 0x4c
   11c9e:	4658      	mov	r0, fp
   11ca0:	f000 fad0 	bl	12244 <_wcsrtombs_r>
   11ca4:	4603      	mov	r3, r0
   11ca6:	3301      	adds	r3, #1
   11ca8:	9004      	str	r0, [sp, #16]
   11caa:	f000 80ae 	beq.w	11e0a <_vfiprintf_r+0xf46>
   11cae:	9413      	str	r4, [sp, #76]	; 0x4c
   11cb0:	9b04      	ldr	r3, [sp, #16]
   11cb2:	2b00      	cmp	r3, #0
   11cb4:	d030      	beq.n	11d18 <_vfiprintf_r+0xe54>
   11cb6:	2b63      	cmp	r3, #99	; 0x63
   11cb8:	dc63      	bgt.n	11d82 <_vfiprintf_r+0xebe>
   11cba:	2300      	movs	r3, #0
   11cbc:	9308      	str	r3, [sp, #32]
   11cbe:	ac2b      	add	r4, sp, #172	; 0xac
   11cc0:	2208      	movs	r2, #8
   11cc2:	2100      	movs	r1, #0
   11cc4:	a816      	add	r0, sp, #88	; 0x58
   11cc6:	f7fc f8e1 	bl	de8c <memset>
   11cca:	9d04      	ldr	r5, [sp, #16]
   11ccc:	ab16      	add	r3, sp, #88	; 0x58
   11cce:	9300      	str	r3, [sp, #0]
   11cd0:	aa13      	add	r2, sp, #76	; 0x4c
   11cd2:	462b      	mov	r3, r5
   11cd4:	4621      	mov	r1, r4
   11cd6:	4658      	mov	r0, fp
   11cd8:	f000 fab4 	bl	12244 <_wcsrtombs_r>
   11cdc:	4285      	cmp	r5, r0
   11cde:	f040 80ab 	bne.w	11e38 <_vfiprintf_r+0xf74>
   11ce2:	9b03      	ldr	r3, [sp, #12]
   11ce4:	9a04      	ldr	r2, [sp, #16]
   11ce6:	9307      	str	r3, [sp, #28]
   11ce8:	2300      	movs	r3, #0
   11cea:	54a3      	strb	r3, [r4, r2]
   11cec:	461f      	mov	r7, r3
   11cee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   11cf2:	9303      	str	r3, [sp, #12]
   11cf4:	f7ff ba16 	b.w	11124 <_vfiprintf_r+0x260>
   11cf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11cfa:	990d      	ldr	r1, [sp, #52]	; 0x34
   11cfc:	1a9b      	subs	r3, r3, r2
   11cfe:	4618      	mov	r0, r3
   11d00:	9308      	str	r3, [sp, #32]
   11d02:	f7fb fccb 	bl	d69c <strncpy>
   11d06:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11d08:	9b08      	ldr	r3, [sp, #32]
   11d0a:	784a      	ldrb	r2, [r1, #1]
   11d0c:	b10a      	cbz	r2, 11d12 <_vfiprintf_r+0xe4e>
   11d0e:	3101      	adds	r1, #1
   11d10:	910b      	str	r1, [sp, #44]	; 0x2c
   11d12:	f04f 0c00 	mov.w	ip, #0
   11d16:	e748      	b.n	11baa <_vfiprintf_r+0xce6>
   11d18:	9b03      	ldr	r3, [sp, #12]
   11d1a:	9307      	str	r3, [sp, #28]
   11d1c:	9b04      	ldr	r3, [sp, #16]
   11d1e:	9303      	str	r3, [sp, #12]
   11d20:	461f      	mov	r7, r3
   11d22:	9308      	str	r3, [sp, #32]
   11d24:	f7ff b9fe 	b.w	11124 <_vfiprintf_r+0x260>
   11d28:	2101      	movs	r1, #1
   11d2a:	4618      	mov	r0, r3
   11d2c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11d30:	f7ff bb13 	b.w	1135a <_vfiprintf_r+0x496>
   11d34:	f850 3b04 	ldr.w	r3, [r0], #4
   11d38:	9007      	str	r0, [sp, #28]
   11d3a:	4622      	mov	r2, r4
   11d3c:	b2db      	uxtb	r3, r3
   11d3e:	e6b6      	b.n	11aae <_vfiprintf_r+0xbea>
   11d40:	f912 3b04 	ldrsb.w	r3, [r2], #4
   11d44:	9207      	str	r2, [sp, #28]
   11d46:	17da      	asrs	r2, r3, #31
   11d48:	4611      	mov	r1, r2
   11d4a:	f7ff b9ca 	b.w	110e2 <_vfiprintf_r+0x21e>
   11d4e:	f851 3b04 	ldr.w	r3, [r1], #4
   11d52:	9107      	str	r1, [sp, #28]
   11d54:	4602      	mov	r2, r0
   11d56:	b2db      	uxtb	r3, r3
   11d58:	f7ff ba27 	b.w	111aa <_vfiprintf_r+0x2e6>
   11d5c:	2301      	movs	r3, #1
   11d5e:	931c      	str	r3, [sp, #112]	; 0x70
   11d60:	2101      	movs	r1, #1
   11d62:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   11d66:	931b      	str	r3, [sp, #108]	; 0x6c
   11d68:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11d6c:	460b      	mov	r3, r1
   11d6e:	f7ff bacd 	b.w	1130c <_vfiprintf_r+0x448>
   11d72:	9b07      	ldr	r3, [sp, #28]
   11d74:	9905      	ldr	r1, [sp, #20]
   11d76:	f853 2b04 	ldr.w	r2, [r3], #4
   11d7a:	9307      	str	r3, [sp, #28]
   11d7c:	8011      	strh	r1, [r2, #0]
   11d7e:	f7ff b8ec 	b.w	10f5a <_vfiprintf_r+0x96>
   11d82:	1c59      	adds	r1, r3, #1
   11d84:	4658      	mov	r0, fp
   11d86:	f7fb fd05 	bl	d794 <_malloc_r>
   11d8a:	4604      	mov	r4, r0
   11d8c:	2800      	cmp	r0, #0
   11d8e:	d03c      	beq.n	11e0a <_vfiprintf_r+0xf46>
   11d90:	9008      	str	r0, [sp, #32]
   11d92:	e795      	b.n	11cc0 <_vfiprintf_r+0xdfc>
   11d94:	6d88      	ldr	r0, [r1, #88]	; 0x58
   11d96:	f7fc f8fb 	bl	df90 <__retarget_lock_release_recursive>
   11d9a:	f7ff b9e9 	b.w	11170 <_vfiprintf_r+0x2ac>
   11d9e:	9b03      	ldr	r3, [sp, #12]
   11da0:	9307      	str	r3, [sp, #28]
   11da2:	e9cd 7703 	strd	r7, r7, [sp, #12]
   11da6:	9f08      	ldr	r7, [sp, #32]
   11da8:	f7ff b9bc 	b.w	11124 <_vfiprintf_r+0x260>
   11dac:	9819      	ldr	r0, [sp, #100]	; 0x64
   11dae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   11db0:	3001      	adds	r0, #1
   11db2:	e545      	b.n	11840 <_vfiprintf_r+0x97c>
   11db4:	9b03      	ldr	r3, [sp, #12]
   11db6:	9307      	str	r3, [sp, #28]
   11db8:	4620      	mov	r0, r4
   11dba:	f7fc fe41 	bl	ea40 <strlen>
   11dbe:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   11dc2:	462f      	mov	r7, r5
   11dc4:	9004      	str	r0, [sp, #16]
   11dc6:	9303      	str	r3, [sp, #12]
   11dc8:	9508      	str	r5, [sp, #32]
   11dca:	f7ff b9ab 	b.w	11124 <_vfiprintf_r+0x260>
   11dce:	ee18 1a10 	vmov	r1, s16
   11dd2:	aa18      	add	r2, sp, #96	; 0x60
   11dd4:	4658      	mov	r0, fp
   11dd6:	f7ff f839 	bl	10e4c <__sprint_r.part.0>
   11dda:	2800      	cmp	r0, #0
   11ddc:	f43f aa36 	beq.w	1124c <_vfiprintf_r+0x388>
   11de0:	f7ff ba4d 	b.w	1127e <_vfiprintf_r+0x3ba>
   11de4:	9819      	ldr	r0, [sp, #100]	; 0x64
   11de6:	3001      	adds	r0, #1
   11de8:	e57a      	b.n	118e0 <_vfiprintf_r+0xa1c>
   11dea:	468c      	mov	ip, r1
   11dec:	e46e      	b.n	116cc <_vfiprintf_r+0x808>
   11dee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   11df0:	07d9      	lsls	r1, r3, #31
   11df2:	d405      	bmi.n	11e00 <_vfiprintf_r+0xf3c>
   11df4:	89ab      	ldrh	r3, [r5, #12]
   11df6:	059a      	lsls	r2, r3, #22
   11df8:	d402      	bmi.n	11e00 <_vfiprintf_r+0xf3c>
   11dfa:	6da8      	ldr	r0, [r5, #88]	; 0x58
   11dfc:	f7fc f8c8 	bl	df90 <__retarget_lock_release_recursive>
   11e00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11e04:	9305      	str	r3, [sp, #20]
   11e06:	f7ff ba49 	b.w	1129c <_vfiprintf_r+0x3d8>
   11e0a:	ee18 2a10 	vmov	r2, s16
   11e0e:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   11e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11e16:	8193      	strh	r3, [r2, #12]
   11e18:	f7ff ba35 	b.w	11286 <_vfiprintf_r+0x3c2>
   11e1c:	9c07      	ldr	r4, [sp, #28]
   11e1e:	9704      	str	r7, [sp, #16]
   11e20:	e746      	b.n	11cb0 <_vfiprintf_r+0xdec>
   11e22:	9b07      	ldr	r3, [sp, #28]
   11e24:	f898 1001 	ldrb.w	r1, [r8, #1]
   11e28:	f853 7b04 	ldr.w	r7, [r3], #4
   11e2c:	9307      	str	r3, [sp, #28]
   11e2e:	4690      	mov	r8, r2
   11e30:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   11e34:	f7ff b8b9 	b.w	10faa <_vfiprintf_r+0xe6>
   11e38:	ee18 2a10 	vmov	r2, s16
   11e3c:	8993      	ldrh	r3, [r2, #12]
   11e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11e42:	8193      	strh	r3, [r2, #12]
   11e44:	f7ff ba15 	b.w	11272 <_vfiprintf_r+0x3ae>
   11e48:	cccccccd 	.word	0xcccccccd
   11e4c:	20001360 	.word	0x20001360

00011e50 <__sbprintf>:
   11e50:	b570      	push	{r4, r5, r6, lr}
   11e52:	460c      	mov	r4, r1
   11e54:	8989      	ldrh	r1, [r1, #12]
   11e56:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   11e5a:	f021 0102 	bic.w	r1, r1, #2
   11e5e:	f8ad 1014 	strh.w	r1, [sp, #20]
   11e62:	6e61      	ldr	r1, [r4, #100]	; 0x64
   11e64:	911b      	str	r1, [sp, #108]	; 0x6c
   11e66:	89e1      	ldrh	r1, [r4, #14]
   11e68:	f8ad 1016 	strh.w	r1, [sp, #22]
   11e6c:	69e1      	ldr	r1, [r4, #28]
   11e6e:	9109      	str	r1, [sp, #36]	; 0x24
   11e70:	6a61      	ldr	r1, [r4, #36]	; 0x24
   11e72:	910b      	str	r1, [sp, #44]	; 0x2c
   11e74:	a91c      	add	r1, sp, #112	; 0x70
   11e76:	9102      	str	r1, [sp, #8]
   11e78:	9106      	str	r1, [sp, #24]
   11e7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   11e7e:	4606      	mov	r6, r0
   11e80:	9104      	str	r1, [sp, #16]
   11e82:	9107      	str	r1, [sp, #28]
   11e84:	a818      	add	r0, sp, #96	; 0x60
   11e86:	2100      	movs	r1, #0
   11e88:	e9cd 3200 	strd	r3, r2, [sp]
   11e8c:	9108      	str	r1, [sp, #32]
   11e8e:	f7fc f879 	bl	df84 <__retarget_lock_init_recursive>
   11e92:	e9dd 3200 	ldrd	r3, r2, [sp]
   11e96:	a902      	add	r1, sp, #8
   11e98:	4630      	mov	r0, r6
   11e9a:	f7ff f813 	bl	10ec4 <_vfiprintf_r>
   11e9e:	1e05      	subs	r5, r0, #0
   11ea0:	db07      	blt.n	11eb2 <__sbprintf+0x62>
   11ea2:	a902      	add	r1, sp, #8
   11ea4:	4630      	mov	r0, r6
   11ea6:	f001 f98f 	bl	131c8 <_fflush_r>
   11eaa:	2800      	cmp	r0, #0
   11eac:	bf18      	it	ne
   11eae:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   11eb2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   11eb6:	065b      	lsls	r3, r3, #25
   11eb8:	d503      	bpl.n	11ec2 <__sbprintf+0x72>
   11eba:	89a3      	ldrh	r3, [r4, #12]
   11ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11ec0:	81a3      	strh	r3, [r4, #12]
   11ec2:	9818      	ldr	r0, [sp, #96]	; 0x60
   11ec4:	f7fc f860 	bl	df88 <__retarget_lock_close_recursive>
   11ec8:	4628      	mov	r0, r5
   11eca:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   11ece:	bd70      	pop	{r4, r5, r6, pc}

00011ed0 <__register_exitproc>:
   11ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11ed4:	f8df a07c 	ldr.w	sl, [pc, #124]	; 11f54 <__register_exitproc+0x84>
   11ed8:	4606      	mov	r6, r0
   11eda:	f8da 0000 	ldr.w	r0, [sl]
   11ede:	4698      	mov	r8, r3
   11ee0:	460f      	mov	r7, r1
   11ee2:	4691      	mov	r9, r2
   11ee4:	f7fc f852 	bl	df8c <__retarget_lock_acquire_recursive>
   11ee8:	4b18      	ldr	r3, [pc, #96]	; (11f4c <__register_exitproc+0x7c>)
   11eea:	681c      	ldr	r4, [r3, #0]
   11eec:	b324      	cbz	r4, 11f38 <__register_exitproc+0x68>
   11eee:	6865      	ldr	r5, [r4, #4]
   11ef0:	2d1f      	cmp	r5, #31
   11ef2:	dc24      	bgt.n	11f3e <__register_exitproc+0x6e>
   11ef4:	b95e      	cbnz	r6, 11f0e <__register_exitproc+0x3e>
   11ef6:	1c6b      	adds	r3, r5, #1
   11ef8:	3502      	adds	r5, #2
   11efa:	f8da 0000 	ldr.w	r0, [sl]
   11efe:	6063      	str	r3, [r4, #4]
   11f00:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   11f04:	f7fc f844 	bl	df90 <__retarget_lock_release_recursive>
   11f08:	2000      	movs	r0, #0
   11f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11f0e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   11f12:	2301      	movs	r3, #1
   11f14:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   11f18:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   11f1c:	40ab      	lsls	r3, r5
   11f1e:	431a      	orrs	r2, r3
   11f20:	2e02      	cmp	r6, #2
   11f22:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   11f26:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   11f2a:	d1e4      	bne.n	11ef6 <__register_exitproc+0x26>
   11f2c:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   11f30:	431a      	orrs	r2, r3
   11f32:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   11f36:	e7de      	b.n	11ef6 <__register_exitproc+0x26>
   11f38:	4c05      	ldr	r4, [pc, #20]	; (11f50 <__register_exitproc+0x80>)
   11f3a:	601c      	str	r4, [r3, #0]
   11f3c:	e7d7      	b.n	11eee <__register_exitproc+0x1e>
   11f3e:	f8da 0000 	ldr.w	r0, [sl]
   11f42:	f7fc f825 	bl	df90 <__retarget_lock_release_recursive>
   11f46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11f4a:	e7de      	b.n	11f0a <__register_exitproc+0x3a>
   11f4c:	20003520 	.word	0x20003520
   11f50:	20003524 	.word	0x20003524
   11f54:	20001bb8 	.word	0x20001bb8

00011f58 <__ascii_mbtowc>:
   11f58:	b082      	sub	sp, #8
   11f5a:	b149      	cbz	r1, 11f70 <__ascii_mbtowc+0x18>
   11f5c:	b15a      	cbz	r2, 11f76 <__ascii_mbtowc+0x1e>
   11f5e:	b16b      	cbz	r3, 11f7c <__ascii_mbtowc+0x24>
   11f60:	7813      	ldrb	r3, [r2, #0]
   11f62:	600b      	str	r3, [r1, #0]
   11f64:	7812      	ldrb	r2, [r2, #0]
   11f66:	1e10      	subs	r0, r2, #0
   11f68:	bf18      	it	ne
   11f6a:	2001      	movne	r0, #1
   11f6c:	b002      	add	sp, #8
   11f6e:	4770      	bx	lr
   11f70:	a901      	add	r1, sp, #4
   11f72:	2a00      	cmp	r2, #0
   11f74:	d1f3      	bne.n	11f5e <__ascii_mbtowc+0x6>
   11f76:	4610      	mov	r0, r2
   11f78:	b002      	add	sp, #8
   11f7a:	4770      	bx	lr
   11f7c:	f06f 0001 	mvn.w	r0, #1
   11f80:	e7f4      	b.n	11f6c <__ascii_mbtowc+0x14>
   11f82:	bf00      	nop

00011f84 <_wcrtomb_r>:
   11f84:	b570      	push	{r4, r5, r6, lr}
   11f86:	4605      	mov	r5, r0
   11f88:	b084      	sub	sp, #16
   11f8a:	b15b      	cbz	r3, 11fa4 <_wcrtomb_r+0x20>
   11f8c:	461c      	mov	r4, r3
   11f8e:	b169      	cbz	r1, 11fac <_wcrtomb_r+0x28>
   11f90:	4b0e      	ldr	r3, [pc, #56]	; (11fcc <_wcrtomb_r+0x48>)
   11f92:	4628      	mov	r0, r5
   11f94:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   11f98:	4623      	mov	r3, r4
   11f9a:	47b0      	blx	r6
   11f9c:	1c43      	adds	r3, r0, #1
   11f9e:	d00f      	beq.n	11fc0 <_wcrtomb_r+0x3c>
   11fa0:	b004      	add	sp, #16
   11fa2:	bd70      	pop	{r4, r5, r6, pc}
   11fa4:	f500 7482 	add.w	r4, r0, #260	; 0x104
   11fa8:	2900      	cmp	r1, #0
   11faa:	d1f1      	bne.n	11f90 <_wcrtomb_r+0xc>
   11fac:	4a07      	ldr	r2, [pc, #28]	; (11fcc <_wcrtomb_r+0x48>)
   11fae:	4623      	mov	r3, r4
   11fb0:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   11fb4:	4628      	mov	r0, r5
   11fb6:	460a      	mov	r2, r1
   11fb8:	a901      	add	r1, sp, #4
   11fba:	47b0      	blx	r6
   11fbc:	1c43      	adds	r3, r0, #1
   11fbe:	d1ef      	bne.n	11fa0 <_wcrtomb_r+0x1c>
   11fc0:	2200      	movs	r2, #0
   11fc2:	238a      	movs	r3, #138	; 0x8a
   11fc4:	6022      	str	r2, [r4, #0]
   11fc6:	602b      	str	r3, [r5, #0]
   11fc8:	b004      	add	sp, #16
   11fca:	bd70      	pop	{r4, r5, r6, pc}
   11fcc:	20001bc4 	.word	0x20001bc4

00011fd0 <_localeconv_r>:
   11fd0:	4800      	ldr	r0, [pc, #0]	; (11fd4 <_localeconv_r+0x4>)
   11fd2:	4770      	bx	lr
   11fd4:	20001cb4 	.word	0x20001cb4

00011fd8 <_fclose_r>:
   11fd8:	b570      	push	{r4, r5, r6, lr}
   11fda:	2900      	cmp	r1, #0
   11fdc:	d04b      	beq.n	12076 <_fclose_r+0x9e>
   11fde:	4606      	mov	r6, r0
   11fe0:	460c      	mov	r4, r1
   11fe2:	b110      	cbz	r0, 11fea <_fclose_r+0x12>
   11fe4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11fe6:	2b00      	cmp	r3, #0
   11fe8:	d048      	beq.n	1207c <_fclose_r+0xa4>
   11fea:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11fec:	07d8      	lsls	r0, r3, #31
   11fee:	d534      	bpl.n	1205a <_fclose_r+0x82>
   11ff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11ff4:	2b00      	cmp	r3, #0
   11ff6:	d03e      	beq.n	12076 <_fclose_r+0x9e>
   11ff8:	4621      	mov	r1, r4
   11ffa:	4630      	mov	r0, r6
   11ffc:	f001 f84c 	bl	13098 <__sflush_r>
   12000:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   12002:	4605      	mov	r5, r0
   12004:	b133      	cbz	r3, 12014 <_fclose_r+0x3c>
   12006:	69e1      	ldr	r1, [r4, #28]
   12008:	4630      	mov	r0, r6
   1200a:	4798      	blx	r3
   1200c:	2800      	cmp	r0, #0
   1200e:	bfb8      	it	lt
   12010:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
   12014:	89a3      	ldrh	r3, [r4, #12]
   12016:	061a      	lsls	r2, r3, #24
   12018:	d43c      	bmi.n	12094 <_fclose_r+0xbc>
   1201a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1201c:	b141      	cbz	r1, 12030 <_fclose_r+0x58>
   1201e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   12022:	4299      	cmp	r1, r3
   12024:	d002      	beq.n	1202c <_fclose_r+0x54>
   12026:	4630      	mov	r0, r6
   12028:	f7fc ffb4 	bl	ef94 <_free_r>
   1202c:	2300      	movs	r3, #0
   1202e:	6323      	str	r3, [r4, #48]	; 0x30
   12030:	6c61      	ldr	r1, [r4, #68]	; 0x44
   12032:	b121      	cbz	r1, 1203e <_fclose_r+0x66>
   12034:	4630      	mov	r0, r6
   12036:	f7fc ffad 	bl	ef94 <_free_r>
   1203a:	2300      	movs	r3, #0
   1203c:	6463      	str	r3, [r4, #68]	; 0x44
   1203e:	f7fc fc67 	bl	e910 <__sfp_lock_acquire>
   12042:	6e63      	ldr	r3, [r4, #100]	; 0x64
   12044:	2200      	movs	r2, #0
   12046:	07db      	lsls	r3, r3, #31
   12048:	81a2      	strh	r2, [r4, #12]
   1204a:	d51f      	bpl.n	1208c <_fclose_r+0xb4>
   1204c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1204e:	f7fb ff9b 	bl	df88 <__retarget_lock_close_recursive>
   12052:	f7fc fc63 	bl	e91c <__sfp_lock_release>
   12056:	4628      	mov	r0, r5
   12058:	bd70      	pop	{r4, r5, r6, pc}
   1205a:	89a3      	ldrh	r3, [r4, #12]
   1205c:	0599      	lsls	r1, r3, #22
   1205e:	d4cb      	bmi.n	11ff8 <_fclose_r+0x20>
   12060:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12062:	f7fb ff93 	bl	df8c <__retarget_lock_acquire_recursive>
   12066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1206a:	2b00      	cmp	r3, #0
   1206c:	d1c4      	bne.n	11ff8 <_fclose_r+0x20>
   1206e:	6e65      	ldr	r5, [r4, #100]	; 0x64
   12070:	f015 0501 	ands.w	r5, r5, #1
   12074:	d005      	beq.n	12082 <_fclose_r+0xaa>
   12076:	2500      	movs	r5, #0
   12078:	4628      	mov	r0, r5
   1207a:	bd70      	pop	{r4, r5, r6, pc}
   1207c:	f7fc fc2a 	bl	e8d4 <__sinit>
   12080:	e7b3      	b.n	11fea <_fclose_r+0x12>
   12082:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12084:	f7fb ff84 	bl	df90 <__retarget_lock_release_recursive>
   12088:	4628      	mov	r0, r5
   1208a:	bd70      	pop	{r4, r5, r6, pc}
   1208c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1208e:	f7fb ff7f 	bl	df90 <__retarget_lock_release_recursive>
   12092:	e7db      	b.n	1204c <_fclose_r+0x74>
   12094:	6921      	ldr	r1, [r4, #16]
   12096:	4630      	mov	r0, r6
   12098:	f7fc ff7c 	bl	ef94 <_free_r>
   1209c:	e7bd      	b.n	1201a <_fclose_r+0x42>
   1209e:	bf00      	nop

000120a0 <__swsetup_r>:
   120a0:	b538      	push	{r3, r4, r5, lr}
   120a2:	4b31      	ldr	r3, [pc, #196]	; (12168 <__swsetup_r+0xc8>)
   120a4:	681b      	ldr	r3, [r3, #0]
   120a6:	4605      	mov	r5, r0
   120a8:	460c      	mov	r4, r1
   120aa:	b113      	cbz	r3, 120b2 <__swsetup_r+0x12>
   120ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   120ae:	2a00      	cmp	r2, #0
   120b0:	d04e      	beq.n	12150 <__swsetup_r+0xb0>
   120b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   120b6:	0718      	lsls	r0, r3, #28
   120b8:	b29a      	uxth	r2, r3
   120ba:	d51c      	bpl.n	120f6 <__swsetup_r+0x56>
   120bc:	6921      	ldr	r1, [r4, #16]
   120be:	b329      	cbz	r1, 1210c <__swsetup_r+0x6c>
   120c0:	f012 0001 	ands.w	r0, r2, #1
   120c4:	d007      	beq.n	120d6 <__swsetup_r+0x36>
   120c6:	2000      	movs	r0, #0
   120c8:	60a0      	str	r0, [r4, #8]
   120ca:	6960      	ldr	r0, [r4, #20]
   120cc:	4240      	negs	r0, r0
   120ce:	61a0      	str	r0, [r4, #24]
   120d0:	b139      	cbz	r1, 120e2 <__swsetup_r+0x42>
   120d2:	2000      	movs	r0, #0
   120d4:	bd38      	pop	{r3, r4, r5, pc}
   120d6:	0795      	lsls	r5, r2, #30
   120d8:	bf58      	it	pl
   120da:	6960      	ldrpl	r0, [r4, #20]
   120dc:	60a0      	str	r0, [r4, #8]
   120de:	2900      	cmp	r1, #0
   120e0:	d1f7      	bne.n	120d2 <__swsetup_r+0x32>
   120e2:	0612      	lsls	r2, r2, #24
   120e4:	bf58      	it	pl
   120e6:	4608      	movpl	r0, r1
   120e8:	d5f4      	bpl.n	120d4 <__swsetup_r+0x34>
   120ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   120ee:	81a3      	strh	r3, [r4, #12]
   120f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   120f4:	bd38      	pop	{r3, r4, r5, pc}
   120f6:	06d1      	lsls	r1, r2, #27
   120f8:	d52e      	bpl.n	12158 <__swsetup_r+0xb8>
   120fa:	0752      	lsls	r2, r2, #29
   120fc:	d414      	bmi.n	12128 <__swsetup_r+0x88>
   120fe:	6921      	ldr	r1, [r4, #16]
   12100:	f043 0308 	orr.w	r3, r3, #8
   12104:	81a3      	strh	r3, [r4, #12]
   12106:	b29a      	uxth	r2, r3
   12108:	2900      	cmp	r1, #0
   1210a:	d1d9      	bne.n	120c0 <__swsetup_r+0x20>
   1210c:	f402 7020 	and.w	r0, r2, #640	; 0x280
   12110:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   12114:	d0d4      	beq.n	120c0 <__swsetup_r+0x20>
   12116:	4621      	mov	r1, r4
   12118:	4628      	mov	r0, r5
   1211a:	f000 f827 	bl	1216c <__smakebuf_r>
   1211e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12122:	6921      	ldr	r1, [r4, #16]
   12124:	b29a      	uxth	r2, r3
   12126:	e7cb      	b.n	120c0 <__swsetup_r+0x20>
   12128:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1212a:	b151      	cbz	r1, 12142 <__swsetup_r+0xa2>
   1212c:	f104 0240 	add.w	r2, r4, #64	; 0x40
   12130:	4291      	cmp	r1, r2
   12132:	d004      	beq.n	1213e <__swsetup_r+0x9e>
   12134:	4628      	mov	r0, r5
   12136:	f7fc ff2d 	bl	ef94 <_free_r>
   1213a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1213e:	2200      	movs	r2, #0
   12140:	6322      	str	r2, [r4, #48]	; 0x30
   12142:	6921      	ldr	r1, [r4, #16]
   12144:	2200      	movs	r2, #0
   12146:	e9c4 1200 	strd	r1, r2, [r4]
   1214a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   1214e:	e7d7      	b.n	12100 <__swsetup_r+0x60>
   12150:	4618      	mov	r0, r3
   12152:	f7fc fbbf 	bl	e8d4 <__sinit>
   12156:	e7ac      	b.n	120b2 <__swsetup_r+0x12>
   12158:	2209      	movs	r2, #9
   1215a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1215e:	602a      	str	r2, [r5, #0]
   12160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12164:	81a3      	strh	r3, [r4, #12]
   12166:	bd38      	pop	{r3, r4, r5, pc}
   12168:	2000214c 	.word	0x2000214c

0001216c <__smakebuf_r>:
   1216c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12170:	898b      	ldrh	r3, [r1, #12]
   12172:	460c      	mov	r4, r1
   12174:	0799      	lsls	r1, r3, #30
   12176:	b096      	sub	sp, #88	; 0x58
   12178:	d508      	bpl.n	1218c <__smakebuf_r+0x20>
   1217a:	f104 0343 	add.w	r3, r4, #67	; 0x43
   1217e:	2201      	movs	r2, #1
   12180:	e9c4 3204 	strd	r3, r2, [r4, #16]
   12184:	6023      	str	r3, [r4, #0]
   12186:	b016      	add	sp, #88	; 0x58
   12188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1218c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   12190:	2900      	cmp	r1, #0
   12192:	4606      	mov	r6, r0
   12194:	db25      	blt.n	121e2 <__smakebuf_r+0x76>
   12196:	466a      	mov	r2, sp
   12198:	f001 f87e 	bl	13298 <_fstat_r>
   1219c:	2800      	cmp	r0, #0
   1219e:	db1f      	blt.n	121e0 <__smakebuf_r+0x74>
   121a0:	9d01      	ldr	r5, [sp, #4]
   121a2:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   121a6:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   121aa:	fab5 f585 	clz	r5, r5
   121ae:	f44f 6880 	mov.w	r8, #1024	; 0x400
   121b2:	096d      	lsrs	r5, r5, #5
   121b4:	f44f 6700 	mov.w	r7, #2048	; 0x800
   121b8:	4641      	mov	r1, r8
   121ba:	4630      	mov	r0, r6
   121bc:	f7fb faea 	bl	d794 <_malloc_r>
   121c0:	b1e0      	cbz	r0, 121fc <__smakebuf_r+0x90>
   121c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   121c6:	f8c4 8014 	str.w	r8, [r4, #20]
   121ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   121ce:	6020      	str	r0, [r4, #0]
   121d0:	6120      	str	r0, [r4, #16]
   121d2:	81a3      	strh	r3, [r4, #12]
   121d4:	bb35      	cbnz	r5, 12224 <__smakebuf_r+0xb8>
   121d6:	433b      	orrs	r3, r7
   121d8:	81a3      	strh	r3, [r4, #12]
   121da:	b016      	add	sp, #88	; 0x58
   121dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   121e0:	89a3      	ldrh	r3, [r4, #12]
   121e2:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   121e6:	d019      	beq.n	1221c <__smakebuf_r+0xb0>
   121e8:	f04f 0840 	mov.w	r8, #64	; 0x40
   121ec:	2500      	movs	r5, #0
   121ee:	4641      	mov	r1, r8
   121f0:	4630      	mov	r0, r6
   121f2:	462f      	mov	r7, r5
   121f4:	f7fb face 	bl	d794 <_malloc_r>
   121f8:	2800      	cmp	r0, #0
   121fa:	d1e2      	bne.n	121c2 <__smakebuf_r+0x56>
   121fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12200:	059a      	lsls	r2, r3, #22
   12202:	d4c0      	bmi.n	12186 <__smakebuf_r+0x1a>
   12204:	f023 0303 	bic.w	r3, r3, #3
   12208:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1220c:	f043 0302 	orr.w	r3, r3, #2
   12210:	2101      	movs	r1, #1
   12212:	e9c4 2104 	strd	r2, r1, [r4, #16]
   12216:	81a3      	strh	r3, [r4, #12]
   12218:	6022      	str	r2, [r4, #0]
   1221a:	e7b4      	b.n	12186 <__smakebuf_r+0x1a>
   1221c:	f44f 6880 	mov.w	r8, #1024	; 0x400
   12220:	462f      	mov	r7, r5
   12222:	e7c9      	b.n	121b8 <__smakebuf_r+0x4c>
   12224:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   12228:	4630      	mov	r0, r6
   1222a:	f001 f84b 	bl	132c4 <_isatty_r>
   1222e:	b910      	cbnz	r0, 12236 <__smakebuf_r+0xca>
   12230:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12234:	e7cf      	b.n	121d6 <__smakebuf_r+0x6a>
   12236:	89a3      	ldrh	r3, [r4, #12]
   12238:	f023 0303 	bic.w	r3, r3, #3
   1223c:	f043 0301 	orr.w	r3, r3, #1
   12240:	b21b      	sxth	r3, r3
   12242:	e7c8      	b.n	121d6 <__smakebuf_r+0x6a>

00012244 <_wcsrtombs_r>:
   12244:	b510      	push	{r4, lr}
   12246:	b082      	sub	sp, #8
   12248:	9c04      	ldr	r4, [sp, #16]
   1224a:	e9cd 3400 	strd	r3, r4, [sp]
   1224e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12252:	f001 fbd5 	bl	13a00 <_wcsnrtombs_r>
   12256:	b002      	add	sp, #8
   12258:	bd10      	pop	{r4, pc}
   1225a:	bf00      	nop

0001225c <quorem>:
   1225c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12260:	6903      	ldr	r3, [r0, #16]
   12262:	690c      	ldr	r4, [r1, #16]
   12264:	42a3      	cmp	r3, r4
   12266:	b083      	sub	sp, #12
   12268:	f2c0 8087 	blt.w	1237a <quorem+0x11e>
   1226c:	3c01      	subs	r4, #1
   1226e:	f101 0514 	add.w	r5, r1, #20
   12272:	00a3      	lsls	r3, r4, #2
   12274:	f100 0814 	add.w	r8, r0, #20
   12278:	9300      	str	r3, [sp, #0]
   1227a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1227e:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   12282:	3301      	adds	r3, #1
   12284:	4681      	mov	r9, r0
   12286:	429a      	cmp	r2, r3
   12288:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   1228c:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   12290:	9001      	str	r0, [sp, #4]
   12292:	fbb2 f6f3 	udiv	r6, r2, r3
   12296:	d33b      	bcc.n	12310 <quorem+0xb4>
   12298:	f04f 0c00 	mov.w	ip, #0
   1229c:	46ae      	mov	lr, r5
   1229e:	4640      	mov	r0, r8
   122a0:	46e2      	mov	sl, ip
   122a2:	4663      	mov	r3, ip
   122a4:	f85e bb04 	ldr.w	fp, [lr], #4
   122a8:	6802      	ldr	r2, [r0, #0]
   122aa:	fa1f fc8b 	uxth.w	ip, fp
   122ae:	fb06 330c 	mla	r3, r6, ip, r3
   122b2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   122b6:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   122ba:	fb06 cc0b 	mla	ip, r6, fp, ip
   122be:	b29b      	uxth	r3, r3
   122c0:	ebaa 0303 	sub.w	r3, sl, r3
   122c4:	fa1f fa8c 	uxth.w	sl, ip
   122c8:	fa13 f382 	uxtah	r3, r3, r2
   122cc:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   122d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
   122d4:	b29b      	uxth	r3, r3
   122d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   122da:	4577      	cmp	r7, lr
   122dc:	f840 3b04 	str.w	r3, [r0], #4
   122e0:	ea4f 4a22 	mov.w	sl, r2, asr #16
   122e4:	ea4f 431c 	mov.w	r3, ip, lsr #16
   122e8:	d2dc      	bcs.n	122a4 <quorem+0x48>
   122ea:	9b00      	ldr	r3, [sp, #0]
   122ec:	f858 3003 	ldr.w	r3, [r8, r3]
   122f0:	b973      	cbnz	r3, 12310 <quorem+0xb4>
   122f2:	9b01      	ldr	r3, [sp, #4]
   122f4:	3b04      	subs	r3, #4
   122f6:	4598      	cmp	r8, r3
   122f8:	d304      	bcc.n	12304 <quorem+0xa8>
   122fa:	e007      	b.n	1230c <quorem+0xb0>
   122fc:	4598      	cmp	r8, r3
   122fe:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   12302:	d203      	bcs.n	1230c <quorem+0xb0>
   12304:	f853 2904 	ldr.w	r2, [r3], #-4
   12308:	2a00      	cmp	r2, #0
   1230a:	d0f7      	beq.n	122fc <quorem+0xa0>
   1230c:	f8c9 4010 	str.w	r4, [r9, #16]
   12310:	4648      	mov	r0, r9
   12312:	f7fc f8d7 	bl	e4c4 <__mcmp>
   12316:	2800      	cmp	r0, #0
   12318:	db2b      	blt.n	12372 <quorem+0x116>
   1231a:	3601      	adds	r6, #1
   1231c:	4641      	mov	r1, r8
   1231e:	2300      	movs	r3, #0
   12320:	f855 0b04 	ldr.w	r0, [r5], #4
   12324:	f8d1 c000 	ldr.w	ip, [r1]
   12328:	b282      	uxth	r2, r0
   1232a:	1a9a      	subs	r2, r3, r2
   1232c:	0c03      	lsrs	r3, r0, #16
   1232e:	fa12 f28c 	uxtah	r2, r2, ip
   12332:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   12336:	eb03 4322 	add.w	r3, r3, r2, asr #16
   1233a:	b292      	uxth	r2, r2
   1233c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   12340:	42af      	cmp	r7, r5
   12342:	f841 2b04 	str.w	r2, [r1], #4
   12346:	ea4f 4323 	mov.w	r3, r3, asr #16
   1234a:	d2e9      	bcs.n	12320 <quorem+0xc4>
   1234c:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   12350:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   12354:	b96a      	cbnz	r2, 12372 <quorem+0x116>
   12356:	3b04      	subs	r3, #4
   12358:	4598      	cmp	r8, r3
   1235a:	d304      	bcc.n	12366 <quorem+0x10a>
   1235c:	e007      	b.n	1236e <quorem+0x112>
   1235e:	4598      	cmp	r8, r3
   12360:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   12364:	d203      	bcs.n	1236e <quorem+0x112>
   12366:	f853 2904 	ldr.w	r2, [r3], #-4
   1236a:	2a00      	cmp	r2, #0
   1236c:	d0f7      	beq.n	1235e <quorem+0x102>
   1236e:	f8c9 4010 	str.w	r4, [r9, #16]
   12372:	4630      	mov	r0, r6
   12374:	b003      	add	sp, #12
   12376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1237a:	2000      	movs	r0, #0
   1237c:	b003      	add	sp, #12
   1237e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12382:	bf00      	nop
   12384:	0000      	movs	r0, r0
	...

00012388 <_dtoa_r>:
   12388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1238c:	ed2d 8b02 	vpush	{d8}
   12390:	b08f      	sub	sp, #60	; 0x3c
   12392:	ed8d 0b02 	vstr	d0, [sp, #8]
   12396:	9101      	str	r1, [sp, #4]
   12398:	6b81      	ldr	r1, [r0, #56]	; 0x38
   1239a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   1239c:	9305      	str	r3, [sp, #20]
   1239e:	ec57 6b10 	vmov	r6, r7, d0
   123a2:	4604      	mov	r4, r0
   123a4:	4693      	mov	fp, r2
   123a6:	b141      	cbz	r1, 123ba <_dtoa_r+0x32>
   123a8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   123aa:	604a      	str	r2, [r1, #4]
   123ac:	2301      	movs	r3, #1
   123ae:	4093      	lsls	r3, r2
   123b0:	608b      	str	r3, [r1, #8]
   123b2:	f7fb fe27 	bl	e004 <_Bfree>
   123b6:	2300      	movs	r3, #0
   123b8:	63a3      	str	r3, [r4, #56]	; 0x38
   123ba:	f1b7 0800 	subs.w	r8, r7, #0
   123be:	bfb4      	ite	lt
   123c0:	2301      	movlt	r3, #1
   123c2:	2300      	movge	r3, #0
   123c4:	602b      	str	r3, [r5, #0]
   123c6:	4bbe      	ldr	r3, [pc, #760]	; (126c0 <_dtoa_r+0x338>)
   123c8:	bfbc      	itt	lt
   123ca:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   123ce:	f8cd 800c 	strlt.w	r8, [sp, #12]
   123d2:	ea33 0308 	bics.w	r3, r3, r8
   123d6:	f000 809f 	beq.w	12518 <_dtoa_r+0x190>
   123da:	ed9d 8b02 	vldr	d8, [sp, #8]
   123de:	eeb5 8b40 	vcmp.f64	d8, #0.0
   123e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   123e6:	d111      	bne.n	1240c <_dtoa_r+0x84>
   123e8:	9a05      	ldr	r2, [sp, #20]
   123ea:	2301      	movs	r3, #1
   123ec:	6013      	str	r3, [r2, #0]
   123ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   123f0:	2b00      	cmp	r3, #0
   123f2:	f000 823f 	beq.w	12874 <_dtoa_r+0x4ec>
   123f6:	4bb3      	ldr	r3, [pc, #716]	; (126c4 <_dtoa_r+0x33c>)
   123f8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   123fa:	6013      	str	r3, [r2, #0]
   123fc:	3b01      	subs	r3, #1
   123fe:	9300      	str	r3, [sp, #0]
   12400:	9800      	ldr	r0, [sp, #0]
   12402:	b00f      	add	sp, #60	; 0x3c
   12404:	ecbd 8b02 	vpop	{d8}
   12408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1240c:	aa0c      	add	r2, sp, #48	; 0x30
   1240e:	a90d      	add	r1, sp, #52	; 0x34
   12410:	4620      	mov	r0, r4
   12412:	eeb0 0b48 	vmov.f64	d0, d8
   12416:	f7fc f921 	bl	e65c <__d2b>
   1241a:	ea5f 5318 	movs.w	r3, r8, lsr #20
   1241e:	4605      	mov	r5, r0
   12420:	f040 8092 	bne.w	12548 <_dtoa_r+0x1c0>
   12424:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   12428:	440b      	add	r3, r1
   1242a:	f203 4232 	addw	r2, r3, #1074	; 0x432
   1242e:	2a20      	cmp	r2, #32
   12430:	f340 82fa 	ble.w	12a28 <_dtoa_r+0x6a0>
   12434:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   12438:	fa08 f802 	lsl.w	r8, r8, r2
   1243c:	f203 4212 	addw	r2, r3, #1042	; 0x412
   12440:	40d6      	lsrs	r6, r2
   12442:	ea48 0206 	orr.w	r2, r8, r6
   12446:	ee07 2a10 	vmov	s14, r2
   1244a:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   1244e:	1e58      	subs	r0, r3, #1
   12450:	ee17 6a90 	vmov	r6, s15
   12454:	ec53 2b17 	vmov	r2, r3, d7
   12458:	f04f 0a01 	mov.w	sl, #1
   1245c:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   12460:	ed9f 3b91 	vldr	d3, [pc, #580]	; 126a8 <_dtoa_r+0x320>
   12464:	ed9f 7b92 	vldr	d7, [pc, #584]	; 126b0 <_dtoa_r+0x328>
   12468:	ed9f 5b93 	vldr	d5, [pc, #588]	; 126b8 <_dtoa_r+0x330>
   1246c:	ee06 0a90 	vmov	s13, r0
   12470:	ec43 2b12 	vmov	d2, r2, r3
   12474:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   12478:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   1247c:	ee32 6b46 	vsub.f64	d6, d2, d6
   12480:	eea6 7b03 	vfma.f64	d7, d6, d3
   12484:	eea4 7b05 	vfma.f64	d7, d4, d5
   12488:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   1248c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   12490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12494:	ee16 7a90 	vmov	r7, s13
   12498:	d508      	bpl.n	124ac <_dtoa_r+0x124>
   1249a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   1249e:	eeb4 6b47 	vcmp.f64	d6, d7
   124a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   124a6:	bf18      	it	ne
   124a8:	f107 37ff 	addne.w	r7, r7, #4294967295	; 0xffffffff
   124ac:	2f16      	cmp	r7, #22
   124ae:	f200 8145 	bhi.w	1273c <_dtoa_r+0x3b4>
   124b2:	4b85      	ldr	r3, [pc, #532]	; (126c8 <_dtoa_r+0x340>)
   124b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   124b8:	ed93 7b00 	vldr	d7, [r3]
   124bc:	eeb4 8bc7 	vcmpe.f64	d8, d7
   124c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   124c4:	d557      	bpl.n	12576 <_dtoa_r+0x1ee>
   124c6:	1a09      	subs	r1, r1, r0
   124c8:	2300      	movs	r3, #0
   124ca:	f1b1 0801 	subs.w	r8, r1, #1
   124ce:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   124d2:	930a      	str	r3, [sp, #40]	; 0x28
   124d4:	f100 8139 	bmi.w	1274a <_dtoa_r+0x3c2>
   124d8:	2300      	movs	r3, #0
   124da:	9306      	str	r3, [sp, #24]
   124dc:	2f00      	cmp	r7, #0
   124de:	da52      	bge.n	12586 <_dtoa_r+0x1fe>
   124e0:	9b06      	ldr	r3, [sp, #24]
   124e2:	9704      	str	r7, [sp, #16]
   124e4:	1bdb      	subs	r3, r3, r7
   124e6:	9306      	str	r3, [sp, #24]
   124e8:	427b      	negs	r3, r7
   124ea:	9308      	str	r3, [sp, #32]
   124ec:	9b01      	ldr	r3, [sp, #4]
   124ee:	2b09      	cmp	r3, #9
   124f0:	f04f 0700 	mov.w	r7, #0
   124f4:	d84e      	bhi.n	12594 <_dtoa_r+0x20c>
   124f6:	2b05      	cmp	r3, #5
   124f8:	f340 829d 	ble.w	12a36 <_dtoa_r+0x6ae>
   124fc:	3b04      	subs	r3, #4
   124fe:	9301      	str	r3, [sp, #4]
   12500:	2600      	movs	r6, #0
   12502:	9b01      	ldr	r3, [sp, #4]
   12504:	1e9a      	subs	r2, r3, #2
   12506:	2a03      	cmp	r2, #3
   12508:	f200 8125 	bhi.w	12756 <_dtoa_r+0x3ce>
   1250c:	e8df f012 	tbh	[pc, r2, lsl #1]
   12510:	03a703aa 	.word	0x03a703aa
   12514:	037e039d 	.word	0x037e039d
   12518:	9a05      	ldr	r2, [sp, #20]
   1251a:	f3c8 0813 	ubfx	r8, r8, #0, #20
   1251e:	f242 730f 	movw	r3, #9999	; 0x270f
   12522:	ea58 0806 	orrs.w	r8, r8, r6
   12526:	6013      	str	r3, [r2, #0]
   12528:	d11e      	bne.n	12568 <_dtoa_r+0x1e0>
   1252a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1252c:	2b00      	cmp	r3, #0
   1252e:	f000 8591 	beq.w	13054 <_dtoa_r+0xccc>
   12532:	4b66      	ldr	r3, [pc, #408]	; (126cc <_dtoa_r+0x344>)
   12534:	9300      	str	r3, [sp, #0]
   12536:	3308      	adds	r3, #8
   12538:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1253a:	9800      	ldr	r0, [sp, #0]
   1253c:	6013      	str	r3, [r2, #0]
   1253e:	b00f      	add	sp, #60	; 0x3c
   12540:	ecbd 8b02 	vpop	{d8}
   12544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12548:	ee18 6a90 	vmov	r6, s17
   1254c:	f3c6 0613 	ubfx	r6, r6, #0, #20
   12550:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   12554:	ec53 2b18 	vmov	r2, r3, d8
   12558:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   1255c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1255e:	f04f 0a00 	mov.w	sl, #0
   12562:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   12566:	e77b      	b.n	12460 <_dtoa_r+0xd8>
   12568:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1256a:	2b00      	cmp	r3, #0
   1256c:	f040 833b 	bne.w	12be6 <_dtoa_r+0x85e>
   12570:	4b57      	ldr	r3, [pc, #348]	; (126d0 <_dtoa_r+0x348>)
   12572:	9300      	str	r3, [sp, #0]
   12574:	e744      	b.n	12400 <_dtoa_r+0x78>
   12576:	1a09      	subs	r1, r1, r0
   12578:	2300      	movs	r3, #0
   1257a:	f1b1 0801 	subs.w	r8, r1, #1
   1257e:	930a      	str	r3, [sp, #40]	; 0x28
   12580:	f100 80e3 	bmi.w	1274a <_dtoa_r+0x3c2>
   12584:	9306      	str	r3, [sp, #24]
   12586:	2300      	movs	r3, #0
   12588:	9308      	str	r3, [sp, #32]
   1258a:	9b01      	ldr	r3, [sp, #4]
   1258c:	9704      	str	r7, [sp, #16]
   1258e:	2b09      	cmp	r3, #9
   12590:	44b8      	add	r8, r7
   12592:	d9b0      	bls.n	124f6 <_dtoa_r+0x16e>
   12594:	2300      	movs	r3, #0
   12596:	2601      	movs	r6, #1
   12598:	9301      	str	r3, [sp, #4]
   1259a:	9607      	str	r6, [sp, #28]
   1259c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   125a0:	469b      	mov	fp, r3
   125a2:	2100      	movs	r1, #0
   125a4:	63e1      	str	r1, [r4, #60]	; 0x3c
   125a6:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   125aa:	4620      	mov	r0, r4
   125ac:	f7fb fd04 	bl	dfb8 <_Balloc>
   125b0:	9000      	str	r0, [sp, #0]
   125b2:	2800      	cmp	r0, #0
   125b4:	f000 8540 	beq.w	13038 <_dtoa_r+0xcb0>
   125b8:	9b00      	ldr	r3, [sp, #0]
   125ba:	63a3      	str	r3, [r4, #56]	; 0x38
   125bc:	f1b9 0f0e 	cmp.w	r9, #14
   125c0:	f200 80dc 	bhi.w	1277c <_dtoa_r+0x3f4>
   125c4:	2e00      	cmp	r6, #0
   125c6:	f000 80d9 	beq.w	1277c <_dtoa_r+0x3f4>
   125ca:	9b04      	ldr	r3, [sp, #16]
   125cc:	2b00      	cmp	r3, #0
   125ce:	f340 83de 	ble.w	12d8e <_dtoa_r+0xa06>
   125d2:	4a3d      	ldr	r2, [pc, #244]	; (126c8 <_dtoa_r+0x340>)
   125d4:	f003 010f 	and.w	r1, r3, #15
   125d8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   125dc:	ed92 7b00 	vldr	d7, [r2]
   125e0:	111a      	asrs	r2, r3, #4
   125e2:	05db      	lsls	r3, r3, #23
   125e4:	f140 8382 	bpl.w	12cec <_dtoa_r+0x964>
   125e8:	493a      	ldr	r1, [pc, #232]	; (126d4 <_dtoa_r+0x34c>)
   125ea:	ed91 6b08 	vldr	d6, [r1, #32]
   125ee:	f002 020f 	and.w	r2, r2, #15
   125f2:	2003      	movs	r0, #3
   125f4:	ee88 5b06 	vdiv.f64	d5, d8, d6
   125f8:	b15a      	cbz	r2, 12612 <_dtoa_r+0x28a>
   125fa:	4936      	ldr	r1, [pc, #216]	; (126d4 <_dtoa_r+0x34c>)
   125fc:	07d6      	lsls	r6, r2, #31
   125fe:	d504      	bpl.n	1260a <_dtoa_r+0x282>
   12600:	ed91 6b00 	vldr	d6, [r1]
   12604:	3001      	adds	r0, #1
   12606:	ee27 7b06 	vmul.f64	d7, d7, d6
   1260a:	1052      	asrs	r2, r2, #1
   1260c:	f101 0108 	add.w	r1, r1, #8
   12610:	d1f4      	bne.n	125fc <_dtoa_r+0x274>
   12612:	ee85 6b07 	vdiv.f64	d6, d5, d7
   12616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12618:	b13b      	cbz	r3, 1262a <_dtoa_r+0x2a2>
   1261a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   1261e:	eeb4 6bc7 	vcmpe.f64	d6, d7
   12622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12626:	f100 84ae 	bmi.w	12f86 <_dtoa_r+0xbfe>
   1262a:	ee07 0a90 	vmov	s15, r0
   1262e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   12632:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   12636:	eea5 7b06 	vfma.f64	d7, d5, d6
   1263a:	ee17 2a90 	vmov	r2, s15
   1263e:	ec51 0b17 	vmov	r0, r1, d7
   12642:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   12646:	f1b9 0f00 	cmp.w	r9, #0
   1264a:	f000 8388 	beq.w	12d5e <_dtoa_r+0x9d6>
   1264e:	9e04      	ldr	r6, [sp, #16]
   12650:	464a      	mov	r2, r9
   12652:	9b07      	ldr	r3, [sp, #28]
   12654:	2b00      	cmp	r3, #0
   12656:	f000 8447 	beq.w	12ee8 <_dtoa_r+0xb60>
   1265a:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   1265e:	4b1a      	ldr	r3, [pc, #104]	; (126c8 <_dtoa_r+0x340>)
   12660:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   12664:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   12668:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   1266c:	ee36 7b47 	vsub.f64	d7, d6, d7
   12670:	ed1c 6b02 	vldr	d6, [ip, #-8]
   12674:	ee83 5b06 	vdiv.f64	d5, d3, d6
   12678:	ec41 0b16 	vmov	d6, r0, r1
   1267c:	ee14 0a90 	vmov	r0, s9
   12680:	ee35 5b46 	vsub.f64	d5, d5, d6
   12684:	9900      	ldr	r1, [sp, #0]
   12686:	eeb4 5bc7 	vcmpe.f64	d5, d7
   1268a:	3030      	adds	r0, #48	; 0x30
   1268c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12690:	f801 0b01 	strb.w	r0, [r1], #1
   12694:	f300 84ac 	bgt.w	12ff0 <_dtoa_r+0xc68>
   12698:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   1269c:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   126a0:	f04f 0c00 	mov.w	ip, #0
   126a4:	e031      	b.n	1270a <_dtoa_r+0x382>
   126a6:	bf00      	nop
   126a8:	636f4361 	.word	0x636f4361
   126ac:	3fd287a7 	.word	0x3fd287a7
   126b0:	8b60c8b3 	.word	0x8b60c8b3
   126b4:	3fc68a28 	.word	0x3fc68a28
   126b8:	509f79fb 	.word	0x509f79fb
   126bc:	3fd34413 	.word	0x3fd34413
   126c0:	7ff00000 	.word	0x7ff00000
   126c4:	20001369 	.word	0x20001369
   126c8:	200002a8 	.word	0x200002a8
   126cc:	200012bc 	.word	0x200012bc
   126d0:	200012c8 	.word	0x200012c8
   126d4:	20000280 	.word	0x20000280
   126d8:	f10c 0c01 	add.w	ip, ip, #1
   126dc:	4594      	cmp	ip, r2
   126de:	da4d      	bge.n	1277c <_dtoa_r+0x3f4>
   126e0:	ee27 7b04 	vmul.f64	d7, d7, d4
   126e4:	ee25 5b04 	vmul.f64	d5, d5, d4
   126e8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   126ec:	ee16 3a90 	vmov	r3, s13
   126f0:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   126f4:	3330      	adds	r3, #48	; 0x30
   126f6:	ee37 7b43 	vsub.f64	d7, d7, d3
   126fa:	eeb4 7bc5 	vcmpe.f64	d7, d5
   126fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12702:	f801 3b01 	strb.w	r3, [r1], #1
   12706:	f100 8473 	bmi.w	12ff0 <_dtoa_r+0xc68>
   1270a:	ee32 6b47 	vsub.f64	d6, d2, d7
   1270e:	eeb4 6bc5 	vcmpe.f64	d6, d5
   12712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12716:	d5df      	bpl.n	126d8 <_dtoa_r+0x350>
   12718:	9a00      	ldr	r2, [sp, #0]
   1271a:	9604      	str	r6, [sp, #16]
   1271c:	e002      	b.n	12724 <_dtoa_r+0x39c>
   1271e:	428a      	cmp	r2, r1
   12720:	f000 8450 	beq.w	12fc4 <_dtoa_r+0xc3c>
   12724:	4689      	mov	r9, r1
   12726:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   1272a:	2b39      	cmp	r3, #57	; 0x39
   1272c:	d0f7      	beq.n	1271e <_dtoa_r+0x396>
   1272e:	3301      	adds	r3, #1
   12730:	b2db      	uxtb	r3, r3
   12732:	700b      	strb	r3, [r1, #0]
   12734:	9b04      	ldr	r3, [sp, #16]
   12736:	3301      	adds	r3, #1
   12738:	9304      	str	r3, [sp, #16]
   1273a:	e155      	b.n	129e8 <_dtoa_r+0x660>
   1273c:	1a09      	subs	r1, r1, r0
   1273e:	2301      	movs	r3, #1
   12740:	f1b1 0801 	subs.w	r8, r1, #1
   12744:	930a      	str	r3, [sp, #40]	; 0x28
   12746:	f57f aec7 	bpl.w	124d8 <_dtoa_r+0x150>
   1274a:	f1c1 0301 	rsb	r3, r1, #1
   1274e:	9306      	str	r3, [sp, #24]
   12750:	f04f 0800 	mov.w	r8, #0
   12754:	e6c2      	b.n	124dc <_dtoa_r+0x154>
   12756:	2600      	movs	r6, #0
   12758:	63e6      	str	r6, [r4, #60]	; 0x3c
   1275a:	4631      	mov	r1, r6
   1275c:	4620      	mov	r0, r4
   1275e:	f7fb fc2b 	bl	dfb8 <_Balloc>
   12762:	9000      	str	r0, [sp, #0]
   12764:	2800      	cmp	r0, #0
   12766:	f000 8467 	beq.w	13038 <_dtoa_r+0xcb0>
   1276a:	9b00      	ldr	r3, [sp, #0]
   1276c:	63a3      	str	r3, [r4, #56]	; 0x38
   1276e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12772:	930b      	str	r3, [sp, #44]	; 0x2c
   12774:	4699      	mov	r9, r3
   12776:	2301      	movs	r3, #1
   12778:	46b3      	mov	fp, r6
   1277a:	9307      	str	r3, [sp, #28]
   1277c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1277e:	2a00      	cmp	r2, #0
   12780:	db55      	blt.n	1282e <_dtoa_r+0x4a6>
   12782:	9904      	ldr	r1, [sp, #16]
   12784:	290e      	cmp	r1, #14
   12786:	dc52      	bgt.n	1282e <_dtoa_r+0x4a6>
   12788:	4bb7      	ldr	r3, [pc, #732]	; (12a68 <_dtoa_r+0x6e0>)
   1278a:	f1bb 0f00 	cmp.w	fp, #0
   1278e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   12792:	ed93 6b00 	vldr	d6, [r3]
   12796:	da15      	bge.n	127c4 <_dtoa_r+0x43c>
   12798:	f1b9 0f00 	cmp.w	r9, #0
   1279c:	dc12      	bgt.n	127c4 <_dtoa_r+0x43c>
   1279e:	f040 82f2 	bne.w	12d86 <_dtoa_r+0x9fe>
   127a2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   127a6:	ee26 7b07 	vmul.f64	d7, d6, d7
   127aa:	eeb4 8bc7 	vcmpe.f64	d8, d7
   127ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   127b2:	46ca      	mov	sl, r9
   127b4:	464e      	mov	r6, r9
   127b6:	f200 826d 	bhi.w	12c94 <_dtoa_r+0x90c>
   127ba:	f8dd 8000 	ldr.w	r8, [sp]
   127be:	ea6f 0b0b 	mvn.w	fp, fp
   127c2:	e270      	b.n	12ca6 <_dtoa_r+0x91e>
   127c4:	ee88 7b06 	vdiv.f64	d7, d8, d6
   127c8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   127cc:	9900      	ldr	r1, [sp, #0]
   127ce:	ee17 3a10 	vmov	r3, s14
   127d2:	f1b9 0f01 	cmp.w	r9, #1
   127d6:	f103 0330 	add.w	r3, r3, #48	; 0x30
   127da:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   127de:	f801 3b01 	strb.w	r3, [r1], #1
   127e2:	eea5 8b46 	vfms.f64	d8, d5, d6
   127e6:	f000 8334 	beq.w	12e52 <_dtoa_r+0xaca>
   127ea:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   127ee:	2301      	movs	r3, #1
   127f0:	e011      	b.n	12816 <_dtoa_r+0x48e>
   127f2:	ee88 7b06 	vdiv.f64	d7, d8, d6
   127f6:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   127fa:	3301      	adds	r3, #1
   127fc:	ee17 2a10 	vmov	r2, s14
   12800:	454b      	cmp	r3, r9
   12802:	f102 0230 	add.w	r2, r2, #48	; 0x30
   12806:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   1280a:	f801 2b01 	strb.w	r2, [r1], #1
   1280e:	eea5 8b46 	vfms.f64	d8, d5, d6
   12812:	f000 831e 	beq.w	12e52 <_dtoa_r+0xaca>
   12816:	ee28 8b04 	vmul.f64	d8, d8, d4
   1281a:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1281e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12822:	d1e6      	bne.n	127f2 <_dtoa_r+0x46a>
   12824:	9b04      	ldr	r3, [sp, #16]
   12826:	3301      	adds	r3, #1
   12828:	9304      	str	r3, [sp, #16]
   1282a:	4689      	mov	r9, r1
   1282c:	e0dc      	b.n	129e8 <_dtoa_r+0x660>
   1282e:	9b07      	ldr	r3, [sp, #28]
   12830:	b343      	cbz	r3, 12884 <_dtoa_r+0x4fc>
   12832:	9b01      	ldr	r3, [sp, #4]
   12834:	2b01      	cmp	r3, #1
   12836:	f340 8276 	ble.w	12d26 <_dtoa_r+0x99e>
   1283a:	9b08      	ldr	r3, [sp, #32]
   1283c:	f109 3aff 	add.w	sl, r9, #4294967295	; 0xffffffff
   12840:	4553      	cmp	r3, sl
   12842:	f280 823f 	bge.w	12cc4 <_dtoa_r+0x93c>
   12846:	9b08      	ldr	r3, [sp, #32]
   12848:	f8cd a020 	str.w	sl, [sp, #32]
   1284c:	ebaa 0203 	sub.w	r2, sl, r3
   12850:	4417      	add	r7, r2
   12852:	f04f 0a00 	mov.w	sl, #0
   12856:	f1b9 0f00 	cmp.w	r9, #0
   1285a:	f2c0 8325 	blt.w	12ea8 <_dtoa_r+0xb20>
   1285e:	9b06      	ldr	r3, [sp, #24]
   12860:	9309      	str	r3, [sp, #36]	; 0x24
   12862:	444b      	add	r3, r9
   12864:	44c8      	add	r8, r9
   12866:	9306      	str	r3, [sp, #24]
   12868:	2101      	movs	r1, #1
   1286a:	4620      	mov	r0, r4
   1286c:	f7fb fc76 	bl	e15c <__i2b>
   12870:	4606      	mov	r6, r0
   12872:	e00c      	b.n	1288e <_dtoa_r+0x506>
   12874:	4b7d      	ldr	r3, [pc, #500]	; (12a6c <_dtoa_r+0x6e4>)
   12876:	9300      	str	r3, [sp, #0]
   12878:	9800      	ldr	r0, [sp, #0]
   1287a:	b00f      	add	sp, #60	; 0x3c
   1287c:	ecbd 8b02 	vpop	{d8}
   12880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12884:	9b06      	ldr	r3, [sp, #24]
   12886:	f8dd a020 	ldr.w	sl, [sp, #32]
   1288a:	9e07      	ldr	r6, [sp, #28]
   1288c:	9309      	str	r3, [sp, #36]	; 0x24
   1288e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12890:	b16b      	cbz	r3, 128ae <_dtoa_r+0x526>
   12892:	f1b8 0f00 	cmp.w	r8, #0
   12896:	dd0a      	ble.n	128ae <_dtoa_r+0x526>
   12898:	4543      	cmp	r3, r8
   1289a:	9906      	ldr	r1, [sp, #24]
   1289c:	461a      	mov	r2, r3
   1289e:	bfa8      	it	ge
   128a0:	4642      	movge	r2, r8
   128a2:	1a89      	subs	r1, r1, r2
   128a4:	1a9b      	subs	r3, r3, r2
   128a6:	9106      	str	r1, [sp, #24]
   128a8:	9309      	str	r3, [sp, #36]	; 0x24
   128aa:	eba8 0802 	sub.w	r8, r8, r2
   128ae:	9b08      	ldr	r3, [sp, #32]
   128b0:	b163      	cbz	r3, 128cc <_dtoa_r+0x544>
   128b2:	9b07      	ldr	r3, [sp, #28]
   128b4:	2b00      	cmp	r3, #0
   128b6:	f000 82a7 	beq.w	12e08 <_dtoa_r+0xa80>
   128ba:	f1ba 0f00 	cmp.w	sl, #0
   128be:	f300 8204 	bgt.w	12cca <_dtoa_r+0x942>
   128c2:	9b08      	ldr	r3, [sp, #32]
   128c4:	ebb3 020a 	subs.w	r2, r3, sl
   128c8:	f040 82ff 	bne.w	12eca <_dtoa_r+0xb42>
   128cc:	2101      	movs	r1, #1
   128ce:	4620      	mov	r0, r4
   128d0:	f7fb fc44 	bl	e15c <__i2b>
   128d4:	2f00      	cmp	r7, #0
   128d6:	4682      	mov	sl, r0
   128d8:	f300 80af 	bgt.w	12a3a <_dtoa_r+0x6b2>
   128dc:	9b01      	ldr	r3, [sp, #4]
   128de:	2b01      	cmp	r3, #1
   128e0:	f340 8187 	ble.w	12bf2 <_dtoa_r+0x86a>
   128e4:	2300      	movs	r3, #0
   128e6:	9308      	str	r3, [sp, #32]
   128e8:	2001      	movs	r0, #1
   128ea:	2f00      	cmp	r7, #0
   128ec:	f040 80b1 	bne.w	12a52 <_dtoa_r+0x6ca>
   128f0:	4440      	add	r0, r8
   128f2:	f010 001f 	ands.w	r0, r0, #31
   128f6:	f000 817a 	beq.w	12bee <_dtoa_r+0x866>
   128fa:	f1c0 0220 	rsb	r2, r0, #32
   128fe:	2a04      	cmp	r2, #4
   12900:	f300 8088 	bgt.w	12a14 <_dtoa_r+0x68c>
   12904:	f040 81f6 	bne.w	12cf4 <_dtoa_r+0x96c>
   12908:	9b06      	ldr	r3, [sp, #24]
   1290a:	2b00      	cmp	r3, #0
   1290c:	dd05      	ble.n	1291a <_dtoa_r+0x592>
   1290e:	4629      	mov	r1, r5
   12910:	461a      	mov	r2, r3
   12912:	4620      	mov	r0, r4
   12914:	f7fb fd5e 	bl	e3d4 <__lshift>
   12918:	4605      	mov	r5, r0
   1291a:	f1b8 0f00 	cmp.w	r8, #0
   1291e:	dd05      	ble.n	1292c <_dtoa_r+0x5a4>
   12920:	4651      	mov	r1, sl
   12922:	4642      	mov	r2, r8
   12924:	4620      	mov	r0, r4
   12926:	f7fb fd55 	bl	e3d4 <__lshift>
   1292a:	4682      	mov	sl, r0
   1292c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1292e:	2b00      	cmp	r3, #0
   12930:	f040 813f 	bne.w	12bb2 <_dtoa_r+0x82a>
   12934:	f1b9 0f00 	cmp.w	r9, #0
   12938:	f340 8125 	ble.w	12b86 <_dtoa_r+0x7fe>
   1293c:	9b07      	ldr	r3, [sp, #28]
   1293e:	2b00      	cmp	r3, #0
   12940:	f040 80a3 	bne.w	12a8a <_dtoa_r+0x702>
   12944:	9b04      	ldr	r3, [sp, #16]
   12946:	3301      	adds	r3, #1
   12948:	9304      	str	r3, [sp, #16]
   1294a:	f8dd 8000 	ldr.w	r8, [sp]
   1294e:	2701      	movs	r7, #1
   12950:	e007      	b.n	12962 <_dtoa_r+0x5da>
   12952:	4629      	mov	r1, r5
   12954:	2300      	movs	r3, #0
   12956:	220a      	movs	r2, #10
   12958:	4620      	mov	r0, r4
   1295a:	f7fb fb5d 	bl	e018 <__multadd>
   1295e:	3701      	adds	r7, #1
   12960:	4605      	mov	r5, r0
   12962:	4651      	mov	r1, sl
   12964:	4628      	mov	r0, r5
   12966:	f7ff fc79 	bl	1225c <quorem>
   1296a:	45b9      	cmp	r9, r7
   1296c:	f100 0030 	add.w	r0, r0, #48	; 0x30
   12970:	f808 0b01 	strb.w	r0, [r8], #1
   12974:	dced      	bgt.n	12952 <_dtoa_r+0x5ca>
   12976:	f1b9 0f00 	cmp.w	r9, #0
   1297a:	9a00      	ldr	r2, [sp, #0]
   1297c:	bfcc      	ite	gt
   1297e:	46cb      	movgt	fp, r9
   12980:	f04f 0b01 	movle.w	fp, #1
   12984:	4603      	mov	r3, r0
   12986:	4493      	add	fp, r2
   12988:	2700      	movs	r7, #0
   1298a:	4629      	mov	r1, r5
   1298c:	2201      	movs	r2, #1
   1298e:	4620      	mov	r0, r4
   12990:	9301      	str	r3, [sp, #4]
   12992:	f7fb fd1f 	bl	e3d4 <__lshift>
   12996:	4651      	mov	r1, sl
   12998:	4605      	mov	r5, r0
   1299a:	f7fb fd93 	bl	e4c4 <__mcmp>
   1299e:	2800      	cmp	r0, #0
   129a0:	f340 81af 	ble.w	12d02 <_dtoa_r+0x97a>
   129a4:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   129a8:	9a00      	ldr	r2, [sp, #0]
   129aa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   129ae:	e004      	b.n	129ba <_dtoa_r+0x632>
   129b0:	455a      	cmp	r2, fp
   129b2:	f000 81b1 	beq.w	12d18 <_dtoa_r+0x990>
   129b6:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   129ba:	2b39      	cmp	r3, #57	; 0x39
   129bc:	f10b 0901 	add.w	r9, fp, #1
   129c0:	d0f6      	beq.n	129b0 <_dtoa_r+0x628>
   129c2:	3301      	adds	r3, #1
   129c4:	f88b 3000 	strb.w	r3, [fp]
   129c8:	4651      	mov	r1, sl
   129ca:	4620      	mov	r0, r4
   129cc:	f7fb fb1a 	bl	e004 <_Bfree>
   129d0:	b156      	cbz	r6, 129e8 <_dtoa_r+0x660>
   129d2:	b12f      	cbz	r7, 129e0 <_dtoa_r+0x658>
   129d4:	42b7      	cmp	r7, r6
   129d6:	d003      	beq.n	129e0 <_dtoa_r+0x658>
   129d8:	4639      	mov	r1, r7
   129da:	4620      	mov	r0, r4
   129dc:	f7fb fb12 	bl	e004 <_Bfree>
   129e0:	4631      	mov	r1, r6
   129e2:	4620      	mov	r0, r4
   129e4:	f7fb fb0e 	bl	e004 <_Bfree>
   129e8:	4629      	mov	r1, r5
   129ea:	4620      	mov	r0, r4
   129ec:	f7fb fb0a 	bl	e004 <_Bfree>
   129f0:	2300      	movs	r3, #0
   129f2:	f889 3000 	strb.w	r3, [r9]
   129f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   129fa:	601a      	str	r2, [r3, #0]
   129fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   129fe:	2b00      	cmp	r3, #0
   12a00:	f43f acfe 	beq.w	12400 <_dtoa_r+0x78>
   12a04:	9800      	ldr	r0, [sp, #0]
   12a06:	f8c3 9000 	str.w	r9, [r3]
   12a0a:	b00f      	add	sp, #60	; 0x3c
   12a0c:	ecbd 8b02 	vpop	{d8}
   12a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a14:	f1c0 001c 	rsb	r0, r0, #28
   12a18:	9b06      	ldr	r3, [sp, #24]
   12a1a:	4403      	add	r3, r0
   12a1c:	9306      	str	r3, [sp, #24]
   12a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12a20:	4403      	add	r3, r0
   12a22:	9309      	str	r3, [sp, #36]	; 0x24
   12a24:	4480      	add	r8, r0
   12a26:	e76f      	b.n	12908 <_dtoa_r+0x580>
   12a28:	f1c2 0220 	rsb	r2, r2, #32
   12a2c:	fa06 f202 	lsl.w	r2, r6, r2
   12a30:	ee07 2a10 	vmov	s14, r2
   12a34:	e509      	b.n	1244a <_dtoa_r+0xc2>
   12a36:	2601      	movs	r6, #1
   12a38:	e563      	b.n	12502 <_dtoa_r+0x17a>
   12a3a:	4601      	mov	r1, r0
   12a3c:	463a      	mov	r2, r7
   12a3e:	4620      	mov	r0, r4
   12a40:	f7fb fc68 	bl	e314 <__pow5mult>
   12a44:	9b01      	ldr	r3, [sp, #4]
   12a46:	2b01      	cmp	r3, #1
   12a48:	4682      	mov	sl, r0
   12a4a:	f340 81c5 	ble.w	12dd8 <_dtoa_r+0xa50>
   12a4e:	2300      	movs	r3, #0
   12a50:	9308      	str	r3, [sp, #32]
   12a52:	f8da 2010 	ldr.w	r2, [sl, #16]
   12a56:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   12a5a:	6910      	ldr	r0, [r2, #16]
   12a5c:	f7fb fb2e 	bl	e0bc <__hi0bits>
   12a60:	f1c0 0020 	rsb	r0, r0, #32
   12a64:	e744      	b.n	128f0 <_dtoa_r+0x568>
   12a66:	bf00      	nop
   12a68:	200002a8 	.word	0x200002a8
   12a6c:	20001368 	.word	0x20001368
   12a70:	4631      	mov	r1, r6
   12a72:	2300      	movs	r3, #0
   12a74:	220a      	movs	r2, #10
   12a76:	4620      	mov	r0, r4
   12a78:	f7fb face 	bl	e018 <__multadd>
   12a7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12a7e:	2b00      	cmp	r3, #0
   12a80:	4606      	mov	r6, r0
   12a82:	f340 82ce 	ble.w	13022 <_dtoa_r+0xc9a>
   12a86:	9704      	str	r7, [sp, #16]
   12a88:	4699      	mov	r9, r3
   12a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12a8c:	2b00      	cmp	r3, #0
   12a8e:	dd05      	ble.n	12a9c <_dtoa_r+0x714>
   12a90:	4631      	mov	r1, r6
   12a92:	461a      	mov	r2, r3
   12a94:	4620      	mov	r0, r4
   12a96:	f7fb fc9d 	bl	e3d4 <__lshift>
   12a9a:	4606      	mov	r6, r0
   12a9c:	9b08      	ldr	r3, [sp, #32]
   12a9e:	2b00      	cmp	r3, #0
   12aa0:	f040 81eb 	bne.w	12e7a <_dtoa_r+0xaf2>
   12aa4:	46b0      	mov	r8, r6
   12aa6:	9b02      	ldr	r3, [sp, #8]
   12aa8:	9f00      	ldr	r7, [sp, #0]
   12aaa:	f003 0201 	and.w	r2, r3, #1
   12aae:	1e7b      	subs	r3, r7, #1
   12ab0:	444b      	add	r3, r9
   12ab2:	9308      	str	r3, [sp, #32]
   12ab4:	9b01      	ldr	r3, [sp, #4]
   12ab6:	920a      	str	r2, [sp, #40]	; 0x28
   12ab8:	4313      	orrs	r3, r2
   12aba:	9309      	str	r3, [sp, #36]	; 0x24
   12abc:	4651      	mov	r1, sl
   12abe:	4628      	mov	r0, r5
   12ac0:	f7ff fbcc 	bl	1225c <quorem>
   12ac4:	4631      	mov	r1, r6
   12ac6:	4683      	mov	fp, r0
   12ac8:	4628      	mov	r0, r5
   12aca:	f7fb fcfb 	bl	e4c4 <__mcmp>
   12ace:	4642      	mov	r2, r8
   12ad0:	4651      	mov	r1, sl
   12ad2:	4681      	mov	r9, r0
   12ad4:	4620      	mov	r0, r4
   12ad6:	f7fb fd17 	bl	e508 <__mdiff>
   12ada:	68c2      	ldr	r2, [r0, #12]
   12adc:	4601      	mov	r1, r0
   12ade:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   12ae2:	2a00      	cmp	r2, #0
   12ae4:	d142      	bne.n	12b6c <_dtoa_r+0x7e4>
   12ae6:	e9cd 0306 	strd	r0, r3, [sp, #24]
   12aea:	4628      	mov	r0, r5
   12aec:	f7fb fcea 	bl	e4c4 <__mcmp>
   12af0:	9906      	ldr	r1, [sp, #24]
   12af2:	9002      	str	r0, [sp, #8]
   12af4:	4620      	mov	r0, r4
   12af6:	f7fb fa85 	bl	e004 <_Bfree>
   12afa:	9a02      	ldr	r2, [sp, #8]
   12afc:	9b07      	ldr	r3, [sp, #28]
   12afe:	b91a      	cbnz	r2, 12b08 <_dtoa_r+0x780>
   12b00:	9909      	ldr	r1, [sp, #36]	; 0x24
   12b02:	2900      	cmp	r1, #0
   12b04:	f000 827e 	beq.w	13004 <_dtoa_r+0xc7c>
   12b08:	f1b9 0f00 	cmp.w	r9, #0
   12b0c:	f2c0 8183 	blt.w	12e16 <_dtoa_r+0xa8e>
   12b10:	9901      	ldr	r1, [sp, #4]
   12b12:	ea49 0901 	orr.w	r9, r9, r1
   12b16:	990a      	ldr	r1, [sp, #40]	; 0x28
   12b18:	ea51 0909 	orrs.w	r9, r1, r9
   12b1c:	f000 817b 	beq.w	12e16 <_dtoa_r+0xa8e>
   12b20:	2a00      	cmp	r2, #0
   12b22:	f300 81c6 	bgt.w	12eb2 <_dtoa_r+0xb2a>
   12b26:	9a08      	ldr	r2, [sp, #32]
   12b28:	703b      	strb	r3, [r7, #0]
   12b2a:	f107 0901 	add.w	r9, r7, #1
   12b2e:	4297      	cmp	r7, r2
   12b30:	46cb      	mov	fp, r9
   12b32:	f000 81c4 	beq.w	12ebe <_dtoa_r+0xb36>
   12b36:	4629      	mov	r1, r5
   12b38:	2300      	movs	r3, #0
   12b3a:	220a      	movs	r2, #10
   12b3c:	4620      	mov	r0, r4
   12b3e:	f7fb fa6b 	bl	e018 <__multadd>
   12b42:	4546      	cmp	r6, r8
   12b44:	4605      	mov	r5, r0
   12b46:	4631      	mov	r1, r6
   12b48:	f04f 0300 	mov.w	r3, #0
   12b4c:	f04f 020a 	mov.w	r2, #10
   12b50:	4620      	mov	r0, r4
   12b52:	d012      	beq.n	12b7a <_dtoa_r+0x7f2>
   12b54:	f7fb fa60 	bl	e018 <__multadd>
   12b58:	4641      	mov	r1, r8
   12b5a:	4606      	mov	r6, r0
   12b5c:	2300      	movs	r3, #0
   12b5e:	220a      	movs	r2, #10
   12b60:	4620      	mov	r0, r4
   12b62:	f7fb fa59 	bl	e018 <__multadd>
   12b66:	464f      	mov	r7, r9
   12b68:	4680      	mov	r8, r0
   12b6a:	e7a7      	b.n	12abc <_dtoa_r+0x734>
   12b6c:	4620      	mov	r0, r4
   12b6e:	9302      	str	r3, [sp, #8]
   12b70:	f7fb fa48 	bl	e004 <_Bfree>
   12b74:	9b02      	ldr	r3, [sp, #8]
   12b76:	2201      	movs	r2, #1
   12b78:	e7c6      	b.n	12b08 <_dtoa_r+0x780>
   12b7a:	f7fb fa4d 	bl	e018 <__multadd>
   12b7e:	464f      	mov	r7, r9
   12b80:	4606      	mov	r6, r0
   12b82:	4680      	mov	r8, r0
   12b84:	e79a      	b.n	12abc <_dtoa_r+0x734>
   12b86:	9b01      	ldr	r3, [sp, #4]
   12b88:	2b02      	cmp	r3, #2
   12b8a:	dc71      	bgt.n	12c70 <_dtoa_r+0x8e8>
   12b8c:	9b07      	ldr	r3, [sp, #28]
   12b8e:	2b00      	cmp	r3, #0
   12b90:	f47f af7b 	bne.w	12a8a <_dtoa_r+0x702>
   12b94:	9b04      	ldr	r3, [sp, #16]
   12b96:	4651      	mov	r1, sl
   12b98:	3301      	adds	r3, #1
   12b9a:	4628      	mov	r0, r5
   12b9c:	9304      	str	r3, [sp, #16]
   12b9e:	f7ff fb5d 	bl	1225c <quorem>
   12ba2:	f8dd b000 	ldr.w	fp, [sp]
   12ba6:	f100 0330 	add.w	r3, r0, #48	; 0x30
   12baa:	f80b 3b01 	strb.w	r3, [fp], #1
   12bae:	2700      	movs	r7, #0
   12bb0:	e6eb      	b.n	1298a <_dtoa_r+0x602>
   12bb2:	4651      	mov	r1, sl
   12bb4:	4628      	mov	r0, r5
   12bb6:	f7fb fc85 	bl	e4c4 <__mcmp>
   12bba:	2800      	cmp	r0, #0
   12bbc:	f6bf aeba 	bge.w	12934 <_dtoa_r+0x5ac>
   12bc0:	4629      	mov	r1, r5
   12bc2:	2300      	movs	r3, #0
   12bc4:	220a      	movs	r2, #10
   12bc6:	4620      	mov	r0, r4
   12bc8:	f7fb fa26 	bl	e018 <__multadd>
   12bcc:	9b04      	ldr	r3, [sp, #16]
   12bce:	1e5f      	subs	r7, r3, #1
   12bd0:	9b07      	ldr	r3, [sp, #28]
   12bd2:	4605      	mov	r5, r0
   12bd4:	2b00      	cmp	r3, #0
   12bd6:	f47f af4b 	bne.w	12a70 <_dtoa_r+0x6e8>
   12bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12bdc:	2b00      	cmp	r3, #0
   12bde:	f340 8218 	ble.w	13012 <_dtoa_r+0xc8a>
   12be2:	4699      	mov	r9, r3
   12be4:	e6b1      	b.n	1294a <_dtoa_r+0x5c2>
   12be6:	4bbc      	ldr	r3, [pc, #752]	; (12ed8 <_dtoa_r+0xb50>)
   12be8:	9300      	str	r3, [sp, #0]
   12bea:	3303      	adds	r3, #3
   12bec:	e4a4      	b.n	12538 <_dtoa_r+0x1b0>
   12bee:	201c      	movs	r0, #28
   12bf0:	e712      	b.n	12a18 <_dtoa_r+0x690>
   12bf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   12bf6:	2800      	cmp	r0, #0
   12bf8:	f47f ae74 	bne.w	128e4 <_dtoa_r+0x55c>
   12bfc:	f3c1 0213 	ubfx	r2, r1, #0, #20
   12c00:	2a00      	cmp	r2, #0
   12c02:	f000 80f4 	beq.w	12dee <_dtoa_r+0xa66>
   12c06:	9b02      	ldr	r3, [sp, #8]
   12c08:	9308      	str	r3, [sp, #32]
   12c0a:	e66d      	b.n	128e8 <_dtoa_r+0x560>
   12c0c:	2301      	movs	r3, #1
   12c0e:	9307      	str	r3, [sp, #28]
   12c10:	9b04      	ldr	r3, [sp, #16]
   12c12:	445b      	add	r3, fp
   12c14:	f103 0901 	add.w	r9, r3, #1
   12c18:	f1b9 0f01 	cmp.w	r9, #1
   12c1c:	46cc      	mov	ip, r9
   12c1e:	930b      	str	r3, [sp, #44]	; 0x2c
   12c20:	bfb8      	it	lt
   12c22:	f04f 0c01 	movlt.w	ip, #1
   12c26:	2100      	movs	r1, #0
   12c28:	f1bc 0f17 	cmp.w	ip, #23
   12c2c:	63e1      	str	r1, [r4, #60]	; 0x3c
   12c2e:	f77f acbc 	ble.w	125aa <_dtoa_r+0x222>
   12c32:	2001      	movs	r0, #1
   12c34:	2204      	movs	r2, #4
   12c36:	0052      	lsls	r2, r2, #1
   12c38:	f102 0314 	add.w	r3, r2, #20
   12c3c:	4563      	cmp	r3, ip
   12c3e:	4601      	mov	r1, r0
   12c40:	f100 0001 	add.w	r0, r0, #1
   12c44:	d9f7      	bls.n	12c36 <_dtoa_r+0x8ae>
   12c46:	63e1      	str	r1, [r4, #60]	; 0x3c
   12c48:	e4af      	b.n	125aa <_dtoa_r+0x222>
   12c4a:	2301      	movs	r3, #1
   12c4c:	9307      	str	r3, [sp, #28]
   12c4e:	f1bb 0f00 	cmp.w	fp, #0
   12c52:	dd52      	ble.n	12cfa <_dtoa_r+0x972>
   12c54:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   12c58:	46d9      	mov	r9, fp
   12c5a:	46dc      	mov	ip, fp
   12c5c:	e7e3      	b.n	12c26 <_dtoa_r+0x89e>
   12c5e:	2300      	movs	r3, #0
   12c60:	9307      	str	r3, [sp, #28]
   12c62:	e7d5      	b.n	12c10 <_dtoa_r+0x888>
   12c64:	2300      	movs	r3, #0
   12c66:	9307      	str	r3, [sp, #28]
   12c68:	e7f1      	b.n	12c4e <_dtoa_r+0x8c6>
   12c6a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   12c6e:	9704      	str	r7, [sp, #16]
   12c70:	f1b9 0f00 	cmp.w	r9, #0
   12c74:	f47f ada1 	bne.w	127ba <_dtoa_r+0x432>
   12c78:	4651      	mov	r1, sl
   12c7a:	464b      	mov	r3, r9
   12c7c:	2205      	movs	r2, #5
   12c7e:	4620      	mov	r0, r4
   12c80:	f7fb f9ca 	bl	e018 <__multadd>
   12c84:	4601      	mov	r1, r0
   12c86:	4682      	mov	sl, r0
   12c88:	4628      	mov	r0, r5
   12c8a:	f7fb fc1b 	bl	e4c4 <__mcmp>
   12c8e:	2800      	cmp	r0, #0
   12c90:	f77f ad93 	ble.w	127ba <_dtoa_r+0x432>
   12c94:	9b04      	ldr	r3, [sp, #16]
   12c96:	f103 0b01 	add.w	fp, r3, #1
   12c9a:	9b00      	ldr	r3, [sp, #0]
   12c9c:	2231      	movs	r2, #49	; 0x31
   12c9e:	4698      	mov	r8, r3
   12ca0:	f803 2b01 	strb.w	r2, [r3], #1
   12ca4:	9300      	str	r3, [sp, #0]
   12ca6:	4651      	mov	r1, sl
   12ca8:	4620      	mov	r0, r4
   12caa:	f7fb f9ab 	bl	e004 <_Bfree>
   12cae:	f10b 0301 	add.w	r3, fp, #1
   12cb2:	f8dd 9000 	ldr.w	r9, [sp]
   12cb6:	9304      	str	r3, [sp, #16]
   12cb8:	f8cd 8000 	str.w	r8, [sp]
   12cbc:	2e00      	cmp	r6, #0
   12cbe:	f47f ae8f 	bne.w	129e0 <_dtoa_r+0x658>
   12cc2:	e691      	b.n	129e8 <_dtoa_r+0x660>
   12cc4:	eba3 0a0a 	sub.w	sl, r3, sl
   12cc8:	e5c5      	b.n	12856 <_dtoa_r+0x4ce>
   12cca:	4631      	mov	r1, r6
   12ccc:	4652      	mov	r2, sl
   12cce:	4620      	mov	r0, r4
   12cd0:	f7fb fb20 	bl	e314 <__pow5mult>
   12cd4:	462a      	mov	r2, r5
   12cd6:	4601      	mov	r1, r0
   12cd8:	4606      	mov	r6, r0
   12cda:	4620      	mov	r0, r4
   12cdc:	f7fb fa6c 	bl	e1b8 <__multiply>
   12ce0:	4629      	mov	r1, r5
   12ce2:	4605      	mov	r5, r0
   12ce4:	4620      	mov	r0, r4
   12ce6:	f7fb f98d 	bl	e004 <_Bfree>
   12cea:	e5ea      	b.n	128c2 <_dtoa_r+0x53a>
   12cec:	2002      	movs	r0, #2
   12cee:	eeb0 5b48 	vmov.f64	d5, d8
   12cf2:	e481      	b.n	125f8 <_dtoa_r+0x270>
   12cf4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   12cf8:	e68e      	b.n	12a18 <_dtoa_r+0x690>
   12cfa:	f04f 0b01 	mov.w	fp, #1
   12cfe:	46d9      	mov	r9, fp
   12d00:	e44f      	b.n	125a2 <_dtoa_r+0x21a>
   12d02:	d103      	bne.n	12d0c <_dtoa_r+0x984>
   12d04:	9b01      	ldr	r3, [sp, #4]
   12d06:	07db      	lsls	r3, r3, #31
   12d08:	f53f ae4c 	bmi.w	129a4 <_dtoa_r+0x61c>
   12d0c:	46d9      	mov	r9, fp
   12d0e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   12d12:	2b30      	cmp	r3, #48	; 0x30
   12d14:	d0fa      	beq.n	12d0c <_dtoa_r+0x984>
   12d16:	e657      	b.n	129c8 <_dtoa_r+0x640>
   12d18:	9b04      	ldr	r3, [sp, #16]
   12d1a:	9a00      	ldr	r2, [sp, #0]
   12d1c:	3301      	adds	r3, #1
   12d1e:	9304      	str	r3, [sp, #16]
   12d20:	2331      	movs	r3, #49	; 0x31
   12d22:	7013      	strb	r3, [r2, #0]
   12d24:	e650      	b.n	129c8 <_dtoa_r+0x640>
   12d26:	f1ba 0f00 	cmp.w	sl, #0
   12d2a:	f000 8123 	beq.w	12f74 <_dtoa_r+0xbec>
   12d2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   12d32:	9b06      	ldr	r3, [sp, #24]
   12d34:	9309      	str	r3, [sp, #36]	; 0x24
   12d36:	4413      	add	r3, r2
   12d38:	f8dd a020 	ldr.w	sl, [sp, #32]
   12d3c:	9306      	str	r3, [sp, #24]
   12d3e:	4490      	add	r8, r2
   12d40:	e592      	b.n	12868 <_dtoa_r+0x4e0>
   12d42:	ee07 0a90 	vmov	s15, r0
   12d46:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   12d4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   12d4e:	eea6 5b07 	vfma.f64	d5, d6, d7
   12d52:	ee15 2a90 	vmov	r2, s11
   12d56:	ec51 0b15 	vmov	r0, r1, d5
   12d5a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   12d5e:	ec41 0b15 	vmov	d5, r0, r1
   12d62:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   12d66:	ee36 7b47 	vsub.f64	d7, d6, d7
   12d6a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   12d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12d72:	f300 8137 	bgt.w	12fe4 <_dtoa_r+0xc5c>
   12d76:	eeb1 5b45 	vneg.f64	d5, d5
   12d7a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   12d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12d82:	f57f acfb 	bpl.w	1277c <_dtoa_r+0x3f4>
   12d86:	f04f 0a00 	mov.w	sl, #0
   12d8a:	4656      	mov	r6, sl
   12d8c:	e515      	b.n	127ba <_dtoa_r+0x432>
   12d8e:	f000 80f5 	beq.w	12f7c <_dtoa_r+0xbf4>
   12d92:	9b04      	ldr	r3, [sp, #16]
   12d94:	4951      	ldr	r1, [pc, #324]	; (12edc <_dtoa_r+0xb54>)
   12d96:	425a      	negs	r2, r3
   12d98:	f002 000f 	and.w	r0, r2, #15
   12d9c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   12da0:	ed91 6b00 	vldr	d6, [r1]
   12da4:	1112      	asrs	r2, r2, #4
   12da6:	ee28 6b06 	vmul.f64	d6, d8, d6
   12daa:	f000 8142 	beq.w	13032 <_dtoa_r+0xcaa>
   12dae:	eeb0 7b46 	vmov.f64	d7, d6
   12db2:	494b      	ldr	r1, [pc, #300]	; (12ee0 <_dtoa_r+0xb58>)
   12db4:	2600      	movs	r6, #0
   12db6:	2002      	movs	r0, #2
   12db8:	07d3      	lsls	r3, r2, #31
   12dba:	d505      	bpl.n	12dc8 <_dtoa_r+0xa40>
   12dbc:	ed91 5b00 	vldr	d5, [r1]
   12dc0:	3001      	adds	r0, #1
   12dc2:	2601      	movs	r6, #1
   12dc4:	ee27 7b05 	vmul.f64	d7, d7, d5
   12dc8:	1052      	asrs	r2, r2, #1
   12dca:	f101 0108 	add.w	r1, r1, #8
   12dce:	d1f3      	bne.n	12db8 <_dtoa_r+0xa30>
   12dd0:	2e00      	cmp	r6, #0
   12dd2:	fe06 6b07 	vseleq.f64	d6, d6, d7
   12dd6:	e41e      	b.n	12616 <_dtoa_r+0x28e>
   12dd8:	9b02      	ldr	r3, [sp, #8]
   12dda:	2b00      	cmp	r3, #0
   12ddc:	f47f ae37 	bne.w	12a4e <_dtoa_r+0x6c6>
   12de0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   12de4:	f3c1 0213 	ubfx	r2, r1, #0, #20
   12de8:	2a00      	cmp	r2, #0
   12dea:	f040 8137 	bne.w	1305c <_dtoa_r+0xcd4>
   12dee:	4a3d      	ldr	r2, [pc, #244]	; (12ee4 <_dtoa_r+0xb5c>)
   12df0:	400a      	ands	r2, r1
   12df2:	2a00      	cmp	r2, #0
   12df4:	f000 80fa 	beq.w	12fec <_dtoa_r+0xc64>
   12df8:	9b06      	ldr	r3, [sp, #24]
   12dfa:	3301      	adds	r3, #1
   12dfc:	9306      	str	r3, [sp, #24]
   12dfe:	2301      	movs	r3, #1
   12e00:	f108 0801 	add.w	r8, r8, #1
   12e04:	9308      	str	r3, [sp, #32]
   12e06:	e56f      	b.n	128e8 <_dtoa_r+0x560>
   12e08:	4629      	mov	r1, r5
   12e0a:	9a08      	ldr	r2, [sp, #32]
   12e0c:	4620      	mov	r0, r4
   12e0e:	f7fb fa81 	bl	e314 <__pow5mult>
   12e12:	4605      	mov	r5, r0
   12e14:	e55a      	b.n	128cc <_dtoa_r+0x544>
   12e16:	2a00      	cmp	r2, #0
   12e18:	dd12      	ble.n	12e40 <_dtoa_r+0xab8>
   12e1a:	4629      	mov	r1, r5
   12e1c:	2201      	movs	r2, #1
   12e1e:	4620      	mov	r0, r4
   12e20:	9301      	str	r3, [sp, #4]
   12e22:	f7fb fad7 	bl	e3d4 <__lshift>
   12e26:	4651      	mov	r1, sl
   12e28:	4605      	mov	r5, r0
   12e2a:	f7fb fb4b 	bl	e4c4 <__mcmp>
   12e2e:	2800      	cmp	r0, #0
   12e30:	9b01      	ldr	r3, [sp, #4]
   12e32:	f340 80e1 	ble.w	12ff8 <_dtoa_r+0xc70>
   12e36:	2b39      	cmp	r3, #57	; 0x39
   12e38:	f000 80ca 	beq.w	12fd0 <_dtoa_r+0xc48>
   12e3c:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   12e40:	46b9      	mov	r9, r7
   12e42:	f809 3b01 	strb.w	r3, [r9], #1
   12e46:	9b04      	ldr	r3, [sp, #16]
   12e48:	3301      	adds	r3, #1
   12e4a:	4637      	mov	r7, r6
   12e4c:	9304      	str	r3, [sp, #16]
   12e4e:	4646      	mov	r6, r8
   12e50:	e5ba      	b.n	129c8 <_dtoa_r+0x640>
   12e52:	ee38 8b08 	vadd.f64	d8, d8, d8
   12e56:	eeb4 8bc6 	vcmpe.f64	d8, d6
   12e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12e5e:	dc0a      	bgt.n	12e76 <_dtoa_r+0xaee>
   12e60:	eeb4 8b46 	vcmp.f64	d8, d6
   12e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12e68:	f47f acdc 	bne.w	12824 <_dtoa_r+0x49c>
   12e6c:	ee17 3a10 	vmov	r3, s14
   12e70:	07d8      	lsls	r0, r3, #31
   12e72:	f57f acd7 	bpl.w	12824 <_dtoa_r+0x49c>
   12e76:	9a00      	ldr	r2, [sp, #0]
   12e78:	e454      	b.n	12724 <_dtoa_r+0x39c>
   12e7a:	6871      	ldr	r1, [r6, #4]
   12e7c:	4620      	mov	r0, r4
   12e7e:	f7fb f89b 	bl	dfb8 <_Balloc>
   12e82:	4607      	mov	r7, r0
   12e84:	2800      	cmp	r0, #0
   12e86:	f000 80de 	beq.w	13046 <_dtoa_r+0xcbe>
   12e8a:	6933      	ldr	r3, [r6, #16]
   12e8c:	3302      	adds	r3, #2
   12e8e:	009a      	lsls	r2, r3, #2
   12e90:	f106 010c 	add.w	r1, r6, #12
   12e94:	300c      	adds	r0, #12
   12e96:	f7f8 fc4b 	bl	b730 <memcpy>
   12e9a:	4639      	mov	r1, r7
   12e9c:	2201      	movs	r2, #1
   12e9e:	4620      	mov	r0, r4
   12ea0:	f7fb fa98 	bl	e3d4 <__lshift>
   12ea4:	4680      	mov	r8, r0
   12ea6:	e5fe      	b.n	12aa6 <_dtoa_r+0x71e>
   12ea8:	9b06      	ldr	r3, [sp, #24]
   12eaa:	eba3 0309 	sub.w	r3, r3, r9
   12eae:	9309      	str	r3, [sp, #36]	; 0x24
   12eb0:	e4da      	b.n	12868 <_dtoa_r+0x4e0>
   12eb2:	2b39      	cmp	r3, #57	; 0x39
   12eb4:	f000 808c 	beq.w	12fd0 <_dtoa_r+0xc48>
   12eb8:	46b9      	mov	r9, r7
   12eba:	3301      	adds	r3, #1
   12ebc:	e7c1      	b.n	12e42 <_dtoa_r+0xaba>
   12ebe:	9a04      	ldr	r2, [sp, #16]
   12ec0:	3201      	adds	r2, #1
   12ec2:	4637      	mov	r7, r6
   12ec4:	9204      	str	r2, [sp, #16]
   12ec6:	4646      	mov	r6, r8
   12ec8:	e55f      	b.n	1298a <_dtoa_r+0x602>
   12eca:	4629      	mov	r1, r5
   12ecc:	4620      	mov	r0, r4
   12ece:	f7fb fa21 	bl	e314 <__pow5mult>
   12ed2:	4605      	mov	r5, r0
   12ed4:	e4fa      	b.n	128cc <_dtoa_r+0x544>
   12ed6:	bf00      	nop
   12ed8:	200012c8 	.word	0x200012c8
   12edc:	200002a8 	.word	0x200002a8
   12ee0:	20000280 	.word	0x20000280
   12ee4:	7ff00000 	.word	0x7ff00000
   12ee8:	4b5e      	ldr	r3, [pc, #376]	; (13064 <_dtoa_r+0xcdc>)
   12eea:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   12eee:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   12ef2:	ed1c 3b02 	vldr	d3, [ip, #-8]
   12ef6:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   12efa:	ee36 7b47 	vsub.f64	d7, d6, d7
   12efe:	ec41 0b16 	vmov	d6, r0, r1
   12f02:	ee15 1a90 	vmov	r1, s11
   12f06:	ee23 3b06 	vmul.f64	d3, d3, d6
   12f0a:	9800      	ldr	r0, [sp, #0]
   12f0c:	3130      	adds	r1, #48	; 0x30
   12f0e:	2a01      	cmp	r2, #1
   12f10:	f800 1b01 	strb.w	r1, [r0], #1
   12f14:	f000 8083 	beq.w	1301e <_dtoa_r+0xc96>
   12f18:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   12f1c:	9b00      	ldr	r3, [sp, #0]
   12f1e:	1899      	adds	r1, r3, r2
   12f20:	ee27 7b04 	vmul.f64	d7, d7, d4
   12f24:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   12f28:	ee16 3a90 	vmov	r3, s13
   12f2c:	3330      	adds	r3, #48	; 0x30
   12f2e:	f800 3b01 	strb.w	r3, [r0], #1
   12f32:	4281      	cmp	r1, r0
   12f34:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   12f38:	ee37 7b45 	vsub.f64	d7, d7, d5
   12f3c:	d1f0      	bne.n	12f20 <_dtoa_r+0xb98>
   12f3e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   12f42:	ee33 5b06 	vadd.f64	d5, d3, d6
   12f46:	eeb4 5bc7 	vcmpe.f64	d5, d7
   12f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12f4e:	f53f abe3 	bmi.w	12718 <_dtoa_r+0x390>
   12f52:	ee36 6b43 	vsub.f64	d6, d6, d3
   12f56:	eeb4 6bc7 	vcmpe.f64	d6, d7
   12f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12f5e:	f77f ac0d 	ble.w	1277c <_dtoa_r+0x3f4>
   12f62:	4689      	mov	r9, r1
   12f64:	3901      	subs	r1, #1
   12f66:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   12f6a:	2b30      	cmp	r3, #48	; 0x30
   12f6c:	d0f9      	beq.n	12f62 <_dtoa_r+0xbda>
   12f6e:	1c73      	adds	r3, r6, #1
   12f70:	9304      	str	r3, [sp, #16]
   12f72:	e539      	b.n	129e8 <_dtoa_r+0x660>
   12f74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12f76:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   12f7a:	e6da      	b.n	12d32 <_dtoa_r+0x9aa>
   12f7c:	2002      	movs	r0, #2
   12f7e:	eeb0 6b48 	vmov.f64	d6, d8
   12f82:	f7ff bb48 	b.w	12616 <_dtoa_r+0x28e>
   12f86:	f1b9 0f00 	cmp.w	r9, #0
   12f8a:	f43f aeda 	beq.w	12d42 <_dtoa_r+0x9ba>
   12f8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12f90:	2a00      	cmp	r2, #0
   12f92:	f77f abf3 	ble.w	1277c <_dtoa_r+0x3f4>
   12f96:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   12f9a:	ee26 6b04 	vmul.f64	d6, d6, d4
   12f9e:	3001      	adds	r0, #1
   12fa0:	ee07 0a90 	vmov	s15, r0
   12fa4:	9b04      	ldr	r3, [sp, #16]
   12fa6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   12faa:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   12fae:	eea6 7b05 	vfma.f64	d7, d6, d5
   12fb2:	ee17 ca90 	vmov	ip, s15
   12fb6:	ec51 0b17 	vmov	r0, r1, d7
   12fba:	1e5e      	subs	r6, r3, #1
   12fbc:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   12fc0:	f7ff bb47 	b.w	12652 <_dtoa_r+0x2ca>
   12fc4:	9b04      	ldr	r3, [sp, #16]
   12fc6:	3301      	adds	r3, #1
   12fc8:	9304      	str	r3, [sp, #16]
   12fca:	2331      	movs	r3, #49	; 0x31
   12fcc:	f7ff bbb1 	b.w	12732 <_dtoa_r+0x3aa>
   12fd0:	9b04      	ldr	r3, [sp, #16]
   12fd2:	46bb      	mov	fp, r7
   12fd4:	3301      	adds	r3, #1
   12fd6:	9304      	str	r3, [sp, #16]
   12fd8:	2339      	movs	r3, #57	; 0x39
   12fda:	4637      	mov	r7, r6
   12fdc:	f80b 3b01 	strb.w	r3, [fp], #1
   12fe0:	4646      	mov	r6, r8
   12fe2:	e4e1      	b.n	129a8 <_dtoa_r+0x620>
   12fe4:	f04f 0a00 	mov.w	sl, #0
   12fe8:	4656      	mov	r6, sl
   12fea:	e653      	b.n	12c94 <_dtoa_r+0x90c>
   12fec:	9208      	str	r2, [sp, #32]
   12fee:	e47b      	b.n	128e8 <_dtoa_r+0x560>
   12ff0:	1c73      	adds	r3, r6, #1
   12ff2:	9304      	str	r3, [sp, #16]
   12ff4:	4689      	mov	r9, r1
   12ff6:	e4f7      	b.n	129e8 <_dtoa_r+0x660>
   12ff8:	f47f af22 	bne.w	12e40 <_dtoa_r+0xab8>
   12ffc:	07da      	lsls	r2, r3, #31
   12ffe:	f57f af1f 	bpl.w	12e40 <_dtoa_r+0xab8>
   13002:	e718      	b.n	12e36 <_dtoa_r+0xaae>
   13004:	2b39      	cmp	r3, #57	; 0x39
   13006:	d0e3      	beq.n	12fd0 <_dtoa_r+0xc48>
   13008:	f1b9 0f00 	cmp.w	r9, #0
   1300c:	f73f af16 	bgt.w	12e3c <_dtoa_r+0xab4>
   13010:	e716      	b.n	12e40 <_dtoa_r+0xab8>
   13012:	9b01      	ldr	r3, [sp, #4]
   13014:	2b02      	cmp	r3, #2
   13016:	f73f ae28 	bgt.w	12c6a <_dtoa_r+0x8e2>
   1301a:	9704      	str	r7, [sp, #16]
   1301c:	e5ba      	b.n	12b94 <_dtoa_r+0x80c>
   1301e:	4601      	mov	r1, r0
   13020:	e78d      	b.n	12f3e <_dtoa_r+0xbb6>
   13022:	9b01      	ldr	r3, [sp, #4]
   13024:	2b02      	cmp	r3, #2
   13026:	f73f ae20 	bgt.w	12c6a <_dtoa_r+0x8e2>
   1302a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   1302e:	9704      	str	r7, [sp, #16]
   13030:	e52b      	b.n	12a8a <_dtoa_r+0x702>
   13032:	2002      	movs	r0, #2
   13034:	f7ff baef 	b.w	12616 <_dtoa_r+0x28e>
   13038:	4b0b      	ldr	r3, [pc, #44]	; (13068 <_dtoa_r+0xce0>)
   1303a:	480c      	ldr	r0, [pc, #48]	; (1306c <_dtoa_r+0xce4>)
   1303c:	2200      	movs	r2, #0
   1303e:	f240 11af 	movw	r1, #431	; 0x1af
   13042:	f7fa ff03 	bl	de4c <__assert_func>
   13046:	4b08      	ldr	r3, [pc, #32]	; (13068 <_dtoa_r+0xce0>)
   13048:	4808      	ldr	r0, [pc, #32]	; (1306c <_dtoa_r+0xce4>)
   1304a:	463a      	mov	r2, r7
   1304c:	f240 21ef 	movw	r1, #751	; 0x2ef
   13050:	f7fa fefc 	bl	de4c <__assert_func>
   13054:	4b06      	ldr	r3, [pc, #24]	; (13070 <_dtoa_r+0xce8>)
   13056:	9300      	str	r3, [sp, #0]
   13058:	f7ff b9d2 	b.w	12400 <_dtoa_r+0x78>
   1305c:	9b02      	ldr	r3, [sp, #8]
   1305e:	9308      	str	r3, [sp, #32]
   13060:	e4f7      	b.n	12a52 <_dtoa_r+0x6ca>
   13062:	bf00      	nop
   13064:	200002a8 	.word	0x200002a8
   13068:	20001148 	.word	0x20001148
   1306c:	200012cc 	.word	0x200012cc
   13070:	200012bc 	.word	0x200012bc

00013074 <_close_r>:
   13074:	b538      	push	{r3, r4, r5, lr}
   13076:	4d07      	ldr	r5, [pc, #28]	; (13094 <_close_r+0x20>)
   13078:	2200      	movs	r2, #0
   1307a:	4604      	mov	r4, r0
   1307c:	4608      	mov	r0, r1
   1307e:	602a      	str	r2, [r5, #0]
   13080:	f7f8 fd1a 	bl	bab8 <_close>
   13084:	1c43      	adds	r3, r0, #1
   13086:	d000      	beq.n	1308a <_close_r+0x16>
   13088:	bd38      	pop	{r3, r4, r5, pc}
   1308a:	682b      	ldr	r3, [r5, #0]
   1308c:	2b00      	cmp	r3, #0
   1308e:	d0fb      	beq.n	13088 <_close_r+0x14>
   13090:	6023      	str	r3, [r4, #0]
   13092:	bd38      	pop	{r3, r4, r5, pc}
   13094:	20003850 	.word	0x20003850

00013098 <__sflush_r>:
   13098:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   1309c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   130a0:	460c      	mov	r4, r1
   130a2:	0711      	lsls	r1, r2, #28
   130a4:	4680      	mov	r8, r0
   130a6:	d447      	bmi.n	13138 <__sflush_r+0xa0>
   130a8:	6863      	ldr	r3, [r4, #4]
   130aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   130ae:	2b00      	cmp	r3, #0
   130b0:	81a2      	strh	r2, [r4, #12]
   130b2:	dd5e      	ble.n	13172 <__sflush_r+0xda>
   130b4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   130b6:	2d00      	cmp	r5, #0
   130b8:	d058      	beq.n	1316c <__sflush_r+0xd4>
   130ba:	2300      	movs	r3, #0
   130bc:	f8d8 6000 	ldr.w	r6, [r8]
   130c0:	f8c8 3000 	str.w	r3, [r8]
   130c4:	b293      	uxth	r3, r2
   130c6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   130ca:	d156      	bne.n	1317a <__sflush_r+0xe2>
   130cc:	2301      	movs	r3, #1
   130ce:	69e1      	ldr	r1, [r4, #28]
   130d0:	4640      	mov	r0, r8
   130d2:	47a8      	blx	r5
   130d4:	1c43      	adds	r3, r0, #1
   130d6:	d067      	beq.n	131a8 <__sflush_r+0x110>
   130d8:	89a3      	ldrh	r3, [r4, #12]
   130da:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   130dc:	075f      	lsls	r7, r3, #29
   130de:	d505      	bpl.n	130ec <__sflush_r+0x54>
   130e0:	6863      	ldr	r3, [r4, #4]
   130e2:	1ac0      	subs	r0, r0, r3
   130e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   130e6:	b10b      	cbz	r3, 130ec <__sflush_r+0x54>
   130e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   130ea:	1ac0      	subs	r0, r0, r3
   130ec:	69e1      	ldr	r1, [r4, #28]
   130ee:	4602      	mov	r2, r0
   130f0:	2300      	movs	r3, #0
   130f2:	4640      	mov	r0, r8
   130f4:	47a8      	blx	r5
   130f6:	1c41      	adds	r1, r0, #1
   130f8:	d141      	bne.n	1317e <__sflush_r+0xe6>
   130fa:	f8d8 3000 	ldr.w	r3, [r8]
   130fe:	2b00      	cmp	r3, #0
   13100:	d03d      	beq.n	1317e <__sflush_r+0xe6>
   13102:	2b1d      	cmp	r3, #29
   13104:	d001      	beq.n	1310a <__sflush_r+0x72>
   13106:	2b16      	cmp	r3, #22
   13108:	d156      	bne.n	131b8 <__sflush_r+0x120>
   1310a:	89a3      	ldrh	r3, [r4, #12]
   1310c:	6922      	ldr	r2, [r4, #16]
   1310e:	6022      	str	r2, [r4, #0]
   13110:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   13114:	2100      	movs	r1, #0
   13116:	6061      	str	r1, [r4, #4]
   13118:	81a3      	strh	r3, [r4, #12]
   1311a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1311c:	f8c8 6000 	str.w	r6, [r8]
   13120:	b321      	cbz	r1, 1316c <__sflush_r+0xd4>
   13122:	f104 0340 	add.w	r3, r4, #64	; 0x40
   13126:	4299      	cmp	r1, r3
   13128:	d002      	beq.n	13130 <__sflush_r+0x98>
   1312a:	4640      	mov	r0, r8
   1312c:	f7fb ff32 	bl	ef94 <_free_r>
   13130:	2000      	movs	r0, #0
   13132:	6320      	str	r0, [r4, #48]	; 0x30
   13134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13138:	6926      	ldr	r6, [r4, #16]
   1313a:	b1be      	cbz	r6, 1316c <__sflush_r+0xd4>
   1313c:	b293      	uxth	r3, r2
   1313e:	6825      	ldr	r5, [r4, #0]
   13140:	6026      	str	r6, [r4, #0]
   13142:	079a      	lsls	r2, r3, #30
   13144:	bf0c      	ite	eq
   13146:	6963      	ldreq	r3, [r4, #20]
   13148:	2300      	movne	r3, #0
   1314a:	1bad      	subs	r5, r5, r6
   1314c:	60a3      	str	r3, [r4, #8]
   1314e:	e00b      	b.n	13168 <__sflush_r+0xd0>
   13150:	462b      	mov	r3, r5
   13152:	4632      	mov	r2, r6
   13154:	69e1      	ldr	r1, [r4, #28]
   13156:	6a67      	ldr	r7, [r4, #36]	; 0x24
   13158:	4640      	mov	r0, r8
   1315a:	47b8      	blx	r7
   1315c:	f1b0 0c00 	subs.w	ip, r0, #0
   13160:	eba5 050c 	sub.w	r5, r5, ip
   13164:	4466      	add	r6, ip
   13166:	dd17      	ble.n	13198 <__sflush_r+0x100>
   13168:	2d00      	cmp	r5, #0
   1316a:	dcf1      	bgt.n	13150 <__sflush_r+0xb8>
   1316c:	2000      	movs	r0, #0
   1316e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13172:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   13174:	2b00      	cmp	r3, #0
   13176:	dc9d      	bgt.n	130b4 <__sflush_r+0x1c>
   13178:	e7f8      	b.n	1316c <__sflush_r+0xd4>
   1317a:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1317c:	e7ae      	b.n	130dc <__sflush_r+0x44>
   1317e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13182:	6922      	ldr	r2, [r4, #16]
   13184:	6022      	str	r2, [r4, #0]
   13186:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1318a:	81a3      	strh	r3, [r4, #12]
   1318c:	2200      	movs	r2, #0
   1318e:	04db      	lsls	r3, r3, #19
   13190:	6062      	str	r2, [r4, #4]
   13192:	d5c2      	bpl.n	1311a <__sflush_r+0x82>
   13194:	6520      	str	r0, [r4, #80]	; 0x50
   13196:	e7c0      	b.n	1311a <__sflush_r+0x82>
   13198:	89a3      	ldrh	r3, [r4, #12]
   1319a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1319e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   131a2:	81a3      	strh	r3, [r4, #12]
   131a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   131a8:	f8d8 3000 	ldr.w	r3, [r8]
   131ac:	2b00      	cmp	r3, #0
   131ae:	d093      	beq.n	130d8 <__sflush_r+0x40>
   131b0:	2b1d      	cmp	r3, #29
   131b2:	d006      	beq.n	131c2 <__sflush_r+0x12a>
   131b4:	2b16      	cmp	r3, #22
   131b6:	d004      	beq.n	131c2 <__sflush_r+0x12a>
   131b8:	89a3      	ldrh	r3, [r4, #12]
   131ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   131be:	81a3      	strh	r3, [r4, #12]
   131c0:	e7d5      	b.n	1316e <__sflush_r+0xd6>
   131c2:	f8c8 6000 	str.w	r6, [r8]
   131c6:	e7d1      	b.n	1316c <__sflush_r+0xd4>

000131c8 <_fflush_r>:
   131c8:	b538      	push	{r3, r4, r5, lr}
   131ca:	460c      	mov	r4, r1
   131cc:	4605      	mov	r5, r0
   131ce:	b108      	cbz	r0, 131d4 <_fflush_r+0xc>
   131d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   131d2:	b303      	cbz	r3, 13216 <_fflush_r+0x4e>
   131d4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   131d8:	b188      	cbz	r0, 131fe <_fflush_r+0x36>
   131da:	6e63      	ldr	r3, [r4, #100]	; 0x64
   131dc:	07db      	lsls	r3, r3, #31
   131de:	d401      	bmi.n	131e4 <_fflush_r+0x1c>
   131e0:	0581      	lsls	r1, r0, #22
   131e2:	d50f      	bpl.n	13204 <_fflush_r+0x3c>
   131e4:	4628      	mov	r0, r5
   131e6:	4621      	mov	r1, r4
   131e8:	f7ff ff56 	bl	13098 <__sflush_r>
   131ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
   131ee:	07da      	lsls	r2, r3, #31
   131f0:	4605      	mov	r5, r0
   131f2:	d402      	bmi.n	131fa <_fflush_r+0x32>
   131f4:	89a3      	ldrh	r3, [r4, #12]
   131f6:	059b      	lsls	r3, r3, #22
   131f8:	d508      	bpl.n	1320c <_fflush_r+0x44>
   131fa:	4628      	mov	r0, r5
   131fc:	bd38      	pop	{r3, r4, r5, pc}
   131fe:	4605      	mov	r5, r0
   13200:	4628      	mov	r0, r5
   13202:	bd38      	pop	{r3, r4, r5, pc}
   13204:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13206:	f7fa fec1 	bl	df8c <__retarget_lock_acquire_recursive>
   1320a:	e7eb      	b.n	131e4 <_fflush_r+0x1c>
   1320c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1320e:	f7fa febf 	bl	df90 <__retarget_lock_release_recursive>
   13212:	4628      	mov	r0, r5
   13214:	bd38      	pop	{r3, r4, r5, pc}
   13216:	f7fb fb5d 	bl	e8d4 <__sinit>
   1321a:	e7db      	b.n	131d4 <_fflush_r+0xc>
   1321c:	0000      	movs	r0, r0
	...

00013220 <frexp>:
   13220:	b430      	push	{r4, r5}
   13222:	b082      	sub	sp, #8
   13224:	ed8d 0b00 	vstr	d0, [sp]
   13228:	9a01      	ldr	r2, [sp, #4]
   1322a:	4c19      	ldr	r4, [pc, #100]	; (13290 <frexp+0x70>)
   1322c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   13230:	2100      	movs	r1, #0
   13232:	42a3      	cmp	r3, r4
   13234:	6001      	str	r1, [r0, #0]
   13236:	dc21      	bgt.n	1327c <frexp+0x5c>
   13238:	9c00      	ldr	r4, [sp, #0]
   1323a:	431c      	orrs	r4, r3
   1323c:	d01e      	beq.n	1327c <frexp+0x5c>
   1323e:	4c15      	ldr	r4, [pc, #84]	; (13294 <frexp+0x74>)
   13240:	4014      	ands	r4, r2
   13242:	b954      	cbnz	r4, 1325a <frexp+0x3a>
   13244:	ed9f 7b10 	vldr	d7, [pc, #64]	; 13288 <frexp+0x68>
   13248:	ee20 7b07 	vmul.f64	d7, d0, d7
   1324c:	ed8d 7b00 	vstr	d7, [sp]
   13250:	9a01      	ldr	r2, [sp, #4]
   13252:	f06f 0135 	mvn.w	r1, #53	; 0x35
   13256:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1325a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   1325e:	e9dd 4500 	ldrd	r4, r5, [sp]
   13262:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   13266:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   1326a:	151b      	asrs	r3, r3, #20
   1326c:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   13270:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   13274:	e9cd 4500 	strd	r4, r5, [sp]
   13278:	440b      	add	r3, r1
   1327a:	6003      	str	r3, [r0, #0]
   1327c:	ed9d 0b00 	vldr	d0, [sp]
   13280:	b002      	add	sp, #8
   13282:	bc30      	pop	{r4, r5}
   13284:	4770      	bx	lr
   13286:	bf00      	nop
   13288:	00000000 	.word	0x00000000
   1328c:	43500000 	.word	0x43500000
   13290:	7fefffff 	.word	0x7fefffff
   13294:	7ff00000 	.word	0x7ff00000

00013298 <_fstat_r>:
   13298:	b570      	push	{r4, r5, r6, lr}
   1329a:	460c      	mov	r4, r1
   1329c:	4d08      	ldr	r5, [pc, #32]	; (132c0 <_fstat_r+0x28>)
   1329e:	4603      	mov	r3, r0
   132a0:	2600      	movs	r6, #0
   132a2:	4620      	mov	r0, r4
   132a4:	4611      	mov	r1, r2
   132a6:	461c      	mov	r4, r3
   132a8:	602e      	str	r6, [r5, #0]
   132aa:	f7f8 fc09 	bl	bac0 <_fstat>
   132ae:	1c43      	adds	r3, r0, #1
   132b0:	d000      	beq.n	132b4 <_fstat_r+0x1c>
   132b2:	bd70      	pop	{r4, r5, r6, pc}
   132b4:	682b      	ldr	r3, [r5, #0]
   132b6:	2b00      	cmp	r3, #0
   132b8:	d0fb      	beq.n	132b2 <_fstat_r+0x1a>
   132ba:	6023      	str	r3, [r4, #0]
   132bc:	bd70      	pop	{r4, r5, r6, pc}
   132be:	bf00      	nop
   132c0:	20003850 	.word	0x20003850

000132c4 <_isatty_r>:
   132c4:	b538      	push	{r3, r4, r5, lr}
   132c6:	4d07      	ldr	r5, [pc, #28]	; (132e4 <_isatty_r+0x20>)
   132c8:	2200      	movs	r2, #0
   132ca:	4604      	mov	r4, r0
   132cc:	4608      	mov	r0, r1
   132ce:	602a      	str	r2, [r5, #0]
   132d0:	f7f8 fbfc 	bl	bacc <_isatty>
   132d4:	1c43      	adds	r3, r0, #1
   132d6:	d000      	beq.n	132da <_isatty_r+0x16>
   132d8:	bd38      	pop	{r3, r4, r5, pc}
   132da:	682b      	ldr	r3, [r5, #0]
   132dc:	2b00      	cmp	r3, #0
   132de:	d0fb      	beq.n	132d8 <_isatty_r+0x14>
   132e0:	6023      	str	r3, [r4, #0]
   132e2:	bd38      	pop	{r3, r4, r5, pc}
   132e4:	20003850 	.word	0x20003850

000132e8 <_lseek_r>:
   132e8:	b538      	push	{r3, r4, r5, lr}
   132ea:	460c      	mov	r4, r1
   132ec:	4d08      	ldr	r5, [pc, #32]	; (13310 <_lseek_r+0x28>)
   132ee:	4684      	mov	ip, r0
   132f0:	4611      	mov	r1, r2
   132f2:	4620      	mov	r0, r4
   132f4:	461a      	mov	r2, r3
   132f6:	2300      	movs	r3, #0
   132f8:	602b      	str	r3, [r5, #0]
   132fa:	4664      	mov	r4, ip
   132fc:	f7f8 fbe8 	bl	bad0 <_lseek>
   13300:	1c43      	adds	r3, r0, #1
   13302:	d000      	beq.n	13306 <_lseek_r+0x1e>
   13304:	bd38      	pop	{r3, r4, r5, pc}
   13306:	682b      	ldr	r3, [r5, #0]
   13308:	2b00      	cmp	r3, #0
   1330a:	d0fb      	beq.n	13304 <_lseek_r+0x1c>
   1330c:	6023      	str	r3, [r4, #0]
   1330e:	bd38      	pop	{r3, r4, r5, pc}
   13310:	20003850 	.word	0x20003850

00013314 <_read_r>:
   13314:	b538      	push	{r3, r4, r5, lr}
   13316:	460c      	mov	r4, r1
   13318:	4d08      	ldr	r5, [pc, #32]	; (1333c <_read_r+0x28>)
   1331a:	4684      	mov	ip, r0
   1331c:	4611      	mov	r1, r2
   1331e:	4620      	mov	r0, r4
   13320:	461a      	mov	r2, r3
   13322:	2300      	movs	r3, #0
   13324:	602b      	str	r3, [r5, #0]
   13326:	4664      	mov	r4, ip
   13328:	f7f8 fbc4 	bl	bab4 <_read>
   1332c:	1c43      	adds	r3, r0, #1
   1332e:	d000      	beq.n	13332 <_read_r+0x1e>
   13330:	bd38      	pop	{r3, r4, r5, pc}
   13332:	682b      	ldr	r3, [r5, #0]
   13334:	2b00      	cmp	r3, #0
   13336:	d0fb      	beq.n	13330 <_read_r+0x1c>
   13338:	6023      	str	r3, [r4, #0]
   1333a:	bd38      	pop	{r3, r4, r5, pc}
   1333c:	20003850 	.word	0x20003850

00013340 <__fputwc>:
   13340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13344:	b082      	sub	sp, #8
   13346:	4682      	mov	sl, r0
   13348:	4688      	mov	r8, r1
   1334a:	4614      	mov	r4, r2
   1334c:	f7fa fe22 	bl	df94 <__locale_mb_cur_max>
   13350:	2801      	cmp	r0, #1
   13352:	d103      	bne.n	1335c <__fputwc+0x1c>
   13354:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   13358:	2bfe      	cmp	r3, #254	; 0xfe
   1335a:	d936      	bls.n	133ca <__fputwc+0x8a>
   1335c:	f10d 0904 	add.w	r9, sp, #4
   13360:	4642      	mov	r2, r8
   13362:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   13366:	4649      	mov	r1, r9
   13368:	4650      	mov	r0, sl
   1336a:	f7fe fe0b 	bl	11f84 <_wcrtomb_r>
   1336e:	1c42      	adds	r2, r0, #1
   13370:	4606      	mov	r6, r0
   13372:	d032      	beq.n	133da <__fputwc+0x9a>
   13374:	b320      	cbz	r0, 133c0 <__fputwc+0x80>
   13376:	f89d c004 	ldrb.w	ip, [sp, #4]
   1337a:	2500      	movs	r5, #0
   1337c:	e009      	b.n	13392 <__fputwc+0x52>
   1337e:	6823      	ldr	r3, [r4, #0]
   13380:	1c5a      	adds	r2, r3, #1
   13382:	6022      	str	r2, [r4, #0]
   13384:	f883 c000 	strb.w	ip, [r3]
   13388:	3501      	adds	r5, #1
   1338a:	42b5      	cmp	r5, r6
   1338c:	d218      	bcs.n	133c0 <__fputwc+0x80>
   1338e:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   13392:	68a3      	ldr	r3, [r4, #8]
   13394:	3b01      	subs	r3, #1
   13396:	2b00      	cmp	r3, #0
   13398:	60a3      	str	r3, [r4, #8]
   1339a:	daf0      	bge.n	1337e <__fputwc+0x3e>
   1339c:	69a7      	ldr	r7, [r4, #24]
   1339e:	42bb      	cmp	r3, r7
   133a0:	4661      	mov	r1, ip
   133a2:	4622      	mov	r2, r4
   133a4:	4650      	mov	r0, sl
   133a6:	db02      	blt.n	133ae <__fputwc+0x6e>
   133a8:	f1bc 0f0a 	cmp.w	ip, #10
   133ac:	d1e7      	bne.n	1337e <__fputwc+0x3e>
   133ae:	f000 fa4b 	bl	13848 <__swbuf_r>
   133b2:	1c43      	adds	r3, r0, #1
   133b4:	d1e8      	bne.n	13388 <__fputwc+0x48>
   133b6:	4606      	mov	r6, r0
   133b8:	4630      	mov	r0, r6
   133ba:	b002      	add	sp, #8
   133bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   133c0:	4646      	mov	r6, r8
   133c2:	4630      	mov	r0, r6
   133c4:	b002      	add	sp, #8
   133c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   133ca:	fa5f fc88 	uxtb.w	ip, r8
   133ce:	f88d c004 	strb.w	ip, [sp, #4]
   133d2:	4606      	mov	r6, r0
   133d4:	f10d 0904 	add.w	r9, sp, #4
   133d8:	e7cf      	b.n	1337a <__fputwc+0x3a>
   133da:	89a3      	ldrh	r3, [r4, #12]
   133dc:	4630      	mov	r0, r6
   133de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   133e2:	81a3      	strh	r3, [r4, #12]
   133e4:	b002      	add	sp, #8
   133e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   133ea:	bf00      	nop

000133ec <_fputwc_r>:
   133ec:	b530      	push	{r4, r5, lr}
   133ee:	6e53      	ldr	r3, [r2, #100]	; 0x64
   133f0:	f013 0f01 	tst.w	r3, #1
   133f4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   133f8:	4614      	mov	r4, r2
   133fa:	b083      	sub	sp, #12
   133fc:	4605      	mov	r5, r0
   133fe:	b29a      	uxth	r2, r3
   13400:	d101      	bne.n	13406 <_fputwc_r+0x1a>
   13402:	0598      	lsls	r0, r3, #22
   13404:	d51c      	bpl.n	13440 <_fputwc_r+0x54>
   13406:	0490      	lsls	r0, r2, #18
   13408:	d406      	bmi.n	13418 <_fputwc_r+0x2c>
   1340a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1340c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   13410:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   13414:	81a3      	strh	r3, [r4, #12]
   13416:	6662      	str	r2, [r4, #100]	; 0x64
   13418:	4622      	mov	r2, r4
   1341a:	4628      	mov	r0, r5
   1341c:	f7ff ff90 	bl	13340 <__fputwc>
   13420:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13422:	07da      	lsls	r2, r3, #31
   13424:	4605      	mov	r5, r0
   13426:	d402      	bmi.n	1342e <_fputwc_r+0x42>
   13428:	89a3      	ldrh	r3, [r4, #12]
   1342a:	059b      	lsls	r3, r3, #22
   1342c:	d502      	bpl.n	13434 <_fputwc_r+0x48>
   1342e:	4628      	mov	r0, r5
   13430:	b003      	add	sp, #12
   13432:	bd30      	pop	{r4, r5, pc}
   13434:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13436:	f7fa fdab 	bl	df90 <__retarget_lock_release_recursive>
   1343a:	4628      	mov	r0, r5
   1343c:	b003      	add	sp, #12
   1343e:	bd30      	pop	{r4, r5, pc}
   13440:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13442:	9101      	str	r1, [sp, #4]
   13444:	f7fa fda2 	bl	df8c <__retarget_lock_acquire_recursive>
   13448:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1344c:	9901      	ldr	r1, [sp, #4]
   1344e:	b29a      	uxth	r2, r3
   13450:	e7d9      	b.n	13406 <_fputwc_r+0x1a>
   13452:	bf00      	nop

00013454 <__sfvwrite_r>:
   13454:	6893      	ldr	r3, [r2, #8]
   13456:	2b00      	cmp	r3, #0
   13458:	f000 8085 	beq.w	13566 <__sfvwrite_r+0x112>
   1345c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13460:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   13464:	460c      	mov	r4, r1
   13466:	0719      	lsls	r1, r3, #28
   13468:	4680      	mov	r8, r0
   1346a:	b083      	sub	sp, #12
   1346c:	4617      	mov	r7, r2
   1346e:	b298      	uxth	r0, r3
   13470:	d525      	bpl.n	134be <__sfvwrite_r+0x6a>
   13472:	6923      	ldr	r3, [r4, #16]
   13474:	b31b      	cbz	r3, 134be <__sfvwrite_r+0x6a>
   13476:	f010 0302 	ands.w	r3, r0, #2
   1347a:	683d      	ldr	r5, [r7, #0]
   1347c:	d02d      	beq.n	134da <__sfvwrite_r+0x86>
   1347e:	f04f 0a00 	mov.w	sl, #0
   13482:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 13744 <__sfvwrite_r+0x2f0>
   13486:	4656      	mov	r6, sl
   13488:	46b9      	mov	r9, r7
   1348a:	455e      	cmp	r6, fp
   1348c:	4633      	mov	r3, r6
   1348e:	4652      	mov	r2, sl
   13490:	bf28      	it	cs
   13492:	465b      	movcs	r3, fp
   13494:	4640      	mov	r0, r8
   13496:	2e00      	cmp	r6, #0
   13498:	d052      	beq.n	13540 <__sfvwrite_r+0xec>
   1349a:	69e1      	ldr	r1, [r4, #28]
   1349c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1349e:	47b8      	blx	r7
   134a0:	2800      	cmp	r0, #0
   134a2:	dd56      	ble.n	13552 <__sfvwrite_r+0xfe>
   134a4:	f8d9 3008 	ldr.w	r3, [r9, #8]
   134a8:	1a1b      	subs	r3, r3, r0
   134aa:	4482      	add	sl, r0
   134ac:	1a36      	subs	r6, r6, r0
   134ae:	f8c9 3008 	str.w	r3, [r9, #8]
   134b2:	2b00      	cmp	r3, #0
   134b4:	d1e9      	bne.n	1348a <__sfvwrite_r+0x36>
   134b6:	2000      	movs	r0, #0
   134b8:	b003      	add	sp, #12
   134ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134be:	4621      	mov	r1, r4
   134c0:	4640      	mov	r0, r8
   134c2:	f7fe fded 	bl	120a0 <__swsetup_r>
   134c6:	2800      	cmp	r0, #0
   134c8:	f040 8138 	bne.w	1373c <__sfvwrite_r+0x2e8>
   134cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   134d0:	683d      	ldr	r5, [r7, #0]
   134d2:	b298      	uxth	r0, r3
   134d4:	f010 0302 	ands.w	r3, r0, #2
   134d8:	d1d1      	bne.n	1347e <__sfvwrite_r+0x2a>
   134da:	f010 0901 	ands.w	r9, r0, #1
   134de:	d144      	bne.n	1356a <__sfvwrite_r+0x116>
   134e0:	464e      	mov	r6, r9
   134e2:	9700      	str	r7, [sp, #0]
   134e4:	b346      	cbz	r6, 13538 <__sfvwrite_r+0xe4>
   134e6:	0582      	lsls	r2, r0, #22
   134e8:	f8d4 b008 	ldr.w	fp, [r4, #8]
   134ec:	f140 8085 	bpl.w	135fa <__sfvwrite_r+0x1a6>
   134f0:	45b3      	cmp	fp, r6
   134f2:	465a      	mov	r2, fp
   134f4:	f200 80b4 	bhi.w	13660 <__sfvwrite_r+0x20c>
   134f8:	f410 6f90 	tst.w	r0, #1152	; 0x480
   134fc:	f040 80c1 	bne.w	13682 <__sfvwrite_r+0x22e>
   13500:	6820      	ldr	r0, [r4, #0]
   13502:	9201      	str	r2, [sp, #4]
   13504:	4649      	mov	r1, r9
   13506:	f7fa fc25 	bl	dd54 <memmove>
   1350a:	68a3      	ldr	r3, [r4, #8]
   1350c:	9a01      	ldr	r2, [sp, #4]
   1350e:	eba3 010b 	sub.w	r1, r3, fp
   13512:	6823      	ldr	r3, [r4, #0]
   13514:	60a1      	str	r1, [r4, #8]
   13516:	4413      	add	r3, r2
   13518:	46b2      	mov	sl, r6
   1351a:	6023      	str	r3, [r4, #0]
   1351c:	2600      	movs	r6, #0
   1351e:	9a00      	ldr	r2, [sp, #0]
   13520:	6893      	ldr	r3, [r2, #8]
   13522:	eba3 030a 	sub.w	r3, r3, sl
   13526:	44d1      	add	r9, sl
   13528:	6093      	str	r3, [r2, #8]
   1352a:	2b00      	cmp	r3, #0
   1352c:	d0c3      	beq.n	134b6 <__sfvwrite_r+0x62>
   1352e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   13532:	b280      	uxth	r0, r0
   13534:	2e00      	cmp	r6, #0
   13536:	d1d6      	bne.n	134e6 <__sfvwrite_r+0x92>
   13538:	e9d5 9600 	ldrd	r9, r6, [r5]
   1353c:	3508      	adds	r5, #8
   1353e:	e7d1      	b.n	134e4 <__sfvwrite_r+0x90>
   13540:	e9d5 a600 	ldrd	sl, r6, [r5]
   13544:	3508      	adds	r5, #8
   13546:	e7a0      	b.n	1348a <__sfvwrite_r+0x36>
   13548:	4621      	mov	r1, r4
   1354a:	4640      	mov	r0, r8
   1354c:	f7ff fe3c 	bl	131c8 <_fflush_r>
   13550:	b388      	cbz	r0, 135b6 <__sfvwrite_r+0x162>
   13552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1355a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1355e:	81a3      	strh	r3, [r4, #12]
   13560:	b003      	add	sp, #12
   13562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13566:	2000      	movs	r0, #0
   13568:	4770      	bx	lr
   1356a:	461e      	mov	r6, r3
   1356c:	46ba      	mov	sl, r7
   1356e:	4699      	mov	r9, r3
   13570:	4618      	mov	r0, r3
   13572:	9500      	str	r5, [sp, #0]
   13574:	461f      	mov	r7, r3
   13576:	b366      	cbz	r6, 135d2 <__sfvwrite_r+0x17e>
   13578:	2800      	cmp	r0, #0
   1357a:	d032      	beq.n	135e2 <__sfvwrite_r+0x18e>
   1357c:	464a      	mov	r2, r9
   1357e:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   13582:	6820      	ldr	r0, [r4, #0]
   13584:	68a5      	ldr	r5, [r4, #8]
   13586:	42b2      	cmp	r2, r6
   13588:	bf28      	it	cs
   1358a:	4632      	movcs	r2, r6
   1358c:	4288      	cmp	r0, r1
   1358e:	d904      	bls.n	1359a <__sfvwrite_r+0x146>
   13590:	eb05 0b03 	add.w	fp, r5, r3
   13594:	455a      	cmp	r2, fp
   13596:	f300 80a7 	bgt.w	136e8 <__sfvwrite_r+0x294>
   1359a:	4293      	cmp	r3, r2
   1359c:	dc64      	bgt.n	13668 <__sfvwrite_r+0x214>
   1359e:	69e1      	ldr	r1, [r4, #28]
   135a0:	6a65      	ldr	r5, [r4, #36]	; 0x24
   135a2:	463a      	mov	r2, r7
   135a4:	4640      	mov	r0, r8
   135a6:	47a8      	blx	r5
   135a8:	f1b0 0b00 	subs.w	fp, r0, #0
   135ac:	ddd1      	ble.n	13552 <__sfvwrite_r+0xfe>
   135ae:	ebb9 090b 	subs.w	r9, r9, fp
   135b2:	d0c9      	beq.n	13548 <__sfvwrite_r+0xf4>
   135b4:	2001      	movs	r0, #1
   135b6:	f8da 3008 	ldr.w	r3, [sl, #8]
   135ba:	eba3 030b 	sub.w	r3, r3, fp
   135be:	445f      	add	r7, fp
   135c0:	eba6 060b 	sub.w	r6, r6, fp
   135c4:	f8ca 3008 	str.w	r3, [sl, #8]
   135c8:	2b00      	cmp	r3, #0
   135ca:	f43f af74 	beq.w	134b6 <__sfvwrite_r+0x62>
   135ce:	2e00      	cmp	r6, #0
   135d0:	d1d2      	bne.n	13578 <__sfvwrite_r+0x124>
   135d2:	9a00      	ldr	r2, [sp, #0]
   135d4:	6856      	ldr	r6, [r2, #4]
   135d6:	4613      	mov	r3, r2
   135d8:	3208      	adds	r2, #8
   135da:	9200      	str	r2, [sp, #0]
   135dc:	2e00      	cmp	r6, #0
   135de:	d0f8      	beq.n	135d2 <__sfvwrite_r+0x17e>
   135e0:	681f      	ldr	r7, [r3, #0]
   135e2:	4632      	mov	r2, r6
   135e4:	210a      	movs	r1, #10
   135e6:	4638      	mov	r0, r7
   135e8:	f7fb f9a2 	bl	e930 <memchr>
   135ec:	2800      	cmp	r0, #0
   135ee:	f000 809c 	beq.w	1372a <__sfvwrite_r+0x2d6>
   135f2:	3001      	adds	r0, #1
   135f4:	eba0 0907 	sub.w	r9, r0, r7
   135f8:	e7c0      	b.n	1357c <__sfvwrite_r+0x128>
   135fa:	6820      	ldr	r0, [r4, #0]
   135fc:	6923      	ldr	r3, [r4, #16]
   135fe:	4298      	cmp	r0, r3
   13600:	d816      	bhi.n	13630 <__sfvwrite_r+0x1dc>
   13602:	6962      	ldr	r2, [r4, #20]
   13604:	42b2      	cmp	r2, r6
   13606:	d813      	bhi.n	13630 <__sfvwrite_r+0x1dc>
   13608:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1360c:	42b3      	cmp	r3, r6
   1360e:	bf28      	it	cs
   13610:	4633      	movcs	r3, r6
   13612:	69e1      	ldr	r1, [r4, #28]
   13614:	fb93 f3f2 	sdiv	r3, r3, r2
   13618:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1361a:	fb02 f303 	mul.w	r3, r2, r3
   1361e:	4640      	mov	r0, r8
   13620:	464a      	mov	r2, r9
   13622:	47b8      	blx	r7
   13624:	f1b0 0a00 	subs.w	sl, r0, #0
   13628:	dd93      	ble.n	13552 <__sfvwrite_r+0xfe>
   1362a:	eba6 060a 	sub.w	r6, r6, sl
   1362e:	e776      	b.n	1351e <__sfvwrite_r+0xca>
   13630:	45b3      	cmp	fp, r6
   13632:	46da      	mov	sl, fp
   13634:	bf28      	it	cs
   13636:	46b2      	movcs	sl, r6
   13638:	4652      	mov	r2, sl
   1363a:	4649      	mov	r1, r9
   1363c:	f7fa fb8a 	bl	dd54 <memmove>
   13640:	68a3      	ldr	r3, [r4, #8]
   13642:	6822      	ldr	r2, [r4, #0]
   13644:	eba3 030a 	sub.w	r3, r3, sl
   13648:	4452      	add	r2, sl
   1364a:	60a3      	str	r3, [r4, #8]
   1364c:	6022      	str	r2, [r4, #0]
   1364e:	2b00      	cmp	r3, #0
   13650:	d1eb      	bne.n	1362a <__sfvwrite_r+0x1d6>
   13652:	4621      	mov	r1, r4
   13654:	4640      	mov	r0, r8
   13656:	f7ff fdb7 	bl	131c8 <_fflush_r>
   1365a:	2800      	cmp	r0, #0
   1365c:	d0e5      	beq.n	1362a <__sfvwrite_r+0x1d6>
   1365e:	e778      	b.n	13552 <__sfvwrite_r+0xfe>
   13660:	6820      	ldr	r0, [r4, #0]
   13662:	46b3      	mov	fp, r6
   13664:	4632      	mov	r2, r6
   13666:	e74c      	b.n	13502 <__sfvwrite_r+0xae>
   13668:	4639      	mov	r1, r7
   1366a:	9201      	str	r2, [sp, #4]
   1366c:	f7fa fb72 	bl	dd54 <memmove>
   13670:	9a01      	ldr	r2, [sp, #4]
   13672:	68a3      	ldr	r3, [r4, #8]
   13674:	1a9b      	subs	r3, r3, r2
   13676:	60a3      	str	r3, [r4, #8]
   13678:	6823      	ldr	r3, [r4, #0]
   1367a:	4413      	add	r3, r2
   1367c:	6023      	str	r3, [r4, #0]
   1367e:	4693      	mov	fp, r2
   13680:	e795      	b.n	135ae <__sfvwrite_r+0x15a>
   13682:	6823      	ldr	r3, [r4, #0]
   13684:	6921      	ldr	r1, [r4, #16]
   13686:	eba3 0b01 	sub.w	fp, r3, r1
   1368a:	6963      	ldr	r3, [r4, #20]
   1368c:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   13690:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   13694:	f10b 0301 	add.w	r3, fp, #1
   13698:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   1369c:	4433      	add	r3, r6
   1369e:	4553      	cmp	r3, sl
   136a0:	4652      	mov	r2, sl
   136a2:	bf84      	itt	hi
   136a4:	469a      	movhi	sl, r3
   136a6:	4652      	movhi	r2, sl
   136a8:	0543      	lsls	r3, r0, #21
   136aa:	d52c      	bpl.n	13706 <__sfvwrite_r+0x2b2>
   136ac:	4611      	mov	r1, r2
   136ae:	4640      	mov	r0, r8
   136b0:	f7fa f870 	bl	d794 <_malloc_r>
   136b4:	2800      	cmp	r0, #0
   136b6:	d03b      	beq.n	13730 <__sfvwrite_r+0x2dc>
   136b8:	465a      	mov	r2, fp
   136ba:	6921      	ldr	r1, [r4, #16]
   136bc:	9001      	str	r0, [sp, #4]
   136be:	f7f8 f837 	bl	b730 <memcpy>
   136c2:	89a2      	ldrh	r2, [r4, #12]
   136c4:	9b01      	ldr	r3, [sp, #4]
   136c6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   136ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   136ce:	81a2      	strh	r2, [r4, #12]
   136d0:	eb03 000b 	add.w	r0, r3, fp
   136d4:	6123      	str	r3, [r4, #16]
   136d6:	ebaa 030b 	sub.w	r3, sl, fp
   136da:	f8c4 a014 	str.w	sl, [r4, #20]
   136de:	60a3      	str	r3, [r4, #8]
   136e0:	6020      	str	r0, [r4, #0]
   136e2:	46b3      	mov	fp, r6
   136e4:	4632      	mov	r2, r6
   136e6:	e70c      	b.n	13502 <__sfvwrite_r+0xae>
   136e8:	4639      	mov	r1, r7
   136ea:	465a      	mov	r2, fp
   136ec:	f7fa fb32 	bl	dd54 <memmove>
   136f0:	6823      	ldr	r3, [r4, #0]
   136f2:	445b      	add	r3, fp
   136f4:	6023      	str	r3, [r4, #0]
   136f6:	4621      	mov	r1, r4
   136f8:	4640      	mov	r0, r8
   136fa:	f7ff fd65 	bl	131c8 <_fflush_r>
   136fe:	2800      	cmp	r0, #0
   13700:	f43f af55 	beq.w	135ae <__sfvwrite_r+0x15a>
   13704:	e725      	b.n	13552 <__sfvwrite_r+0xfe>
   13706:	4640      	mov	r0, r8
   13708:	f7fb fa08 	bl	eb1c <_realloc_r>
   1370c:	4603      	mov	r3, r0
   1370e:	2800      	cmp	r0, #0
   13710:	d1de      	bne.n	136d0 <__sfvwrite_r+0x27c>
   13712:	6921      	ldr	r1, [r4, #16]
   13714:	4640      	mov	r0, r8
   13716:	f7fb fc3d 	bl	ef94 <_free_r>
   1371a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1371e:	220c      	movs	r2, #12
   13720:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13724:	f8c8 2000 	str.w	r2, [r8]
   13728:	e715      	b.n	13556 <__sfvwrite_r+0x102>
   1372a:	1c72      	adds	r2, r6, #1
   1372c:	4691      	mov	r9, r2
   1372e:	e726      	b.n	1357e <__sfvwrite_r+0x12a>
   13730:	220c      	movs	r2, #12
   13732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13736:	f8c8 2000 	str.w	r2, [r8]
   1373a:	e70c      	b.n	13556 <__sfvwrite_r+0x102>
   1373c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13740:	e6ba      	b.n	134b8 <__sfvwrite_r+0x64>
   13742:	bf00      	nop
   13744:	7ffffc00 	.word	0x7ffffc00

00013748 <__ssprint_r>:
   13748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1374c:	6893      	ldr	r3, [r2, #8]
   1374e:	6817      	ldr	r7, [r2, #0]
   13750:	b083      	sub	sp, #12
   13752:	4692      	mov	sl, r2
   13754:	2b00      	cmp	r3, #0
   13756:	d070      	beq.n	1383a <__ssprint_r+0xf2>
   13758:	4681      	mov	r9, r0
   1375a:	688a      	ldr	r2, [r1, #8]
   1375c:	6808      	ldr	r0, [r1, #0]
   1375e:	460c      	mov	r4, r1
   13760:	3708      	adds	r7, #8
   13762:	e043      	b.n	137ec <__ssprint_r+0xa4>
   13764:	89a3      	ldrh	r3, [r4, #12]
   13766:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1376a:	d02e      	beq.n	137ca <__ssprint_r+0x82>
   1376c:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   13770:	eba0 0801 	sub.w	r8, r0, r1
   13774:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   13778:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   1377c:	f108 0001 	add.w	r0, r8, #1
   13780:	1076      	asrs	r6, r6, #1
   13782:	4428      	add	r0, r5
   13784:	42b0      	cmp	r0, r6
   13786:	4632      	mov	r2, r6
   13788:	bf84      	itt	hi
   1378a:	4606      	movhi	r6, r0
   1378c:	4632      	movhi	r2, r6
   1378e:	055b      	lsls	r3, r3, #21
   13790:	d537      	bpl.n	13802 <__ssprint_r+0xba>
   13792:	4611      	mov	r1, r2
   13794:	4648      	mov	r0, r9
   13796:	f7f9 fffd 	bl	d794 <_malloc_r>
   1379a:	9001      	str	r0, [sp, #4]
   1379c:	2800      	cmp	r0, #0
   1379e:	d03a      	beq.n	13816 <__ssprint_r+0xce>
   137a0:	4642      	mov	r2, r8
   137a2:	6921      	ldr	r1, [r4, #16]
   137a4:	f7f7 ffc4 	bl	b730 <memcpy>
   137a8:	89a2      	ldrh	r2, [r4, #12]
   137aa:	9b01      	ldr	r3, [sp, #4]
   137ac:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   137b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   137b4:	81a2      	strh	r2, [r4, #12]
   137b6:	eba6 0208 	sub.w	r2, r6, r8
   137ba:	eb03 0008 	add.w	r0, r3, r8
   137be:	6166      	str	r6, [r4, #20]
   137c0:	60a2      	str	r2, [r4, #8]
   137c2:	6123      	str	r3, [r4, #16]
   137c4:	6020      	str	r0, [r4, #0]
   137c6:	462e      	mov	r6, r5
   137c8:	46a8      	mov	r8, r5
   137ca:	4642      	mov	r2, r8
   137cc:	4659      	mov	r1, fp
   137ce:	f7fa fac1 	bl	dd54 <memmove>
   137d2:	f8da 3008 	ldr.w	r3, [sl, #8]
   137d6:	68a2      	ldr	r2, [r4, #8]
   137d8:	6820      	ldr	r0, [r4, #0]
   137da:	1b92      	subs	r2, r2, r6
   137dc:	4440      	add	r0, r8
   137de:	1b5b      	subs	r3, r3, r5
   137e0:	60a2      	str	r2, [r4, #8]
   137e2:	6020      	str	r0, [r4, #0]
   137e4:	f8ca 3008 	str.w	r3, [sl, #8]
   137e8:	b33b      	cbz	r3, 1383a <__ssprint_r+0xf2>
   137ea:	3708      	adds	r7, #8
   137ec:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   137f0:	2d00      	cmp	r5, #0
   137f2:	d0fa      	beq.n	137ea <__ssprint_r+0xa2>
   137f4:	42aa      	cmp	r2, r5
   137f6:	4616      	mov	r6, r2
   137f8:	4690      	mov	r8, r2
   137fa:	d9b3      	bls.n	13764 <__ssprint_r+0x1c>
   137fc:	462e      	mov	r6, r5
   137fe:	46a8      	mov	r8, r5
   13800:	e7e3      	b.n	137ca <__ssprint_r+0x82>
   13802:	4648      	mov	r0, r9
   13804:	f7fb f98a 	bl	eb1c <_realloc_r>
   13808:	4603      	mov	r3, r0
   1380a:	2800      	cmp	r0, #0
   1380c:	d1d3      	bne.n	137b6 <__ssprint_r+0x6e>
   1380e:	6921      	ldr	r1, [r4, #16]
   13810:	4648      	mov	r0, r9
   13812:	f7fb fbbf 	bl	ef94 <_free_r>
   13816:	89a3      	ldrh	r3, [r4, #12]
   13818:	220c      	movs	r2, #12
   1381a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1381e:	f8c9 2000 	str.w	r2, [r9]
   13822:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13826:	81a3      	strh	r3, [r4, #12]
   13828:	2200      	movs	r2, #0
   1382a:	2300      	movs	r3, #0
   1382c:	f8ca 2008 	str.w	r2, [sl, #8]
   13830:	f8ca 3004 	str.w	r3, [sl, #4]
   13834:	b003      	add	sp, #12
   13836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1383a:	2000      	movs	r0, #0
   1383c:	2300      	movs	r3, #0
   1383e:	f8ca 3004 	str.w	r3, [sl, #4]
   13842:	b003      	add	sp, #12
   13844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013848 <__swbuf_r>:
   13848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1384a:	460d      	mov	r5, r1
   1384c:	4614      	mov	r4, r2
   1384e:	4606      	mov	r6, r0
   13850:	b110      	cbz	r0, 13858 <__swbuf_r+0x10>
   13852:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13854:	2b00      	cmp	r3, #0
   13856:	d04c      	beq.n	138f2 <__swbuf_r+0xaa>
   13858:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1385c:	69a3      	ldr	r3, [r4, #24]
   1385e:	60a3      	str	r3, [r4, #8]
   13860:	0717      	lsls	r7, r2, #28
   13862:	b290      	uxth	r0, r2
   13864:	d51b      	bpl.n	1389e <__swbuf_r+0x56>
   13866:	6923      	ldr	r3, [r4, #16]
   13868:	b1cb      	cbz	r3, 1389e <__swbuf_r+0x56>
   1386a:	b2ed      	uxtb	r5, r5
   1386c:	0481      	lsls	r1, r0, #18
   1386e:	462f      	mov	r7, r5
   13870:	d522      	bpl.n	138b8 <__swbuf_r+0x70>
   13872:	6822      	ldr	r2, [r4, #0]
   13874:	6961      	ldr	r1, [r4, #20]
   13876:	1ad3      	subs	r3, r2, r3
   13878:	4299      	cmp	r1, r3
   1387a:	dd29      	ble.n	138d0 <__swbuf_r+0x88>
   1387c:	3301      	adds	r3, #1
   1387e:	68a1      	ldr	r1, [r4, #8]
   13880:	3901      	subs	r1, #1
   13882:	60a1      	str	r1, [r4, #8]
   13884:	1c51      	adds	r1, r2, #1
   13886:	6021      	str	r1, [r4, #0]
   13888:	7015      	strb	r5, [r2, #0]
   1388a:	6962      	ldr	r2, [r4, #20]
   1388c:	429a      	cmp	r2, r3
   1388e:	d027      	beq.n	138e0 <__swbuf_r+0x98>
   13890:	89a3      	ldrh	r3, [r4, #12]
   13892:	07db      	lsls	r3, r3, #31
   13894:	d501      	bpl.n	1389a <__swbuf_r+0x52>
   13896:	2d0a      	cmp	r5, #10
   13898:	d022      	beq.n	138e0 <__swbuf_r+0x98>
   1389a:	4638      	mov	r0, r7
   1389c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1389e:	4621      	mov	r1, r4
   138a0:	4630      	mov	r0, r6
   138a2:	f7fe fbfd 	bl	120a0 <__swsetup_r>
   138a6:	bb08      	cbnz	r0, 138ec <__swbuf_r+0xa4>
   138a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   138ac:	6923      	ldr	r3, [r4, #16]
   138ae:	b290      	uxth	r0, r2
   138b0:	b2ed      	uxtb	r5, r5
   138b2:	0481      	lsls	r1, r0, #18
   138b4:	462f      	mov	r7, r5
   138b6:	d4dc      	bmi.n	13872 <__swbuf_r+0x2a>
   138b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   138bc:	81a2      	strh	r2, [r4, #12]
   138be:	6e62      	ldr	r2, [r4, #100]	; 0x64
   138c0:	6961      	ldr	r1, [r4, #20]
   138c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   138c6:	6662      	str	r2, [r4, #100]	; 0x64
   138c8:	6822      	ldr	r2, [r4, #0]
   138ca:	1ad3      	subs	r3, r2, r3
   138cc:	4299      	cmp	r1, r3
   138ce:	dcd5      	bgt.n	1387c <__swbuf_r+0x34>
   138d0:	4621      	mov	r1, r4
   138d2:	4630      	mov	r0, r6
   138d4:	f7ff fc78 	bl	131c8 <_fflush_r>
   138d8:	b940      	cbnz	r0, 138ec <__swbuf_r+0xa4>
   138da:	6822      	ldr	r2, [r4, #0]
   138dc:	2301      	movs	r3, #1
   138de:	e7ce      	b.n	1387e <__swbuf_r+0x36>
   138e0:	4621      	mov	r1, r4
   138e2:	4630      	mov	r0, r6
   138e4:	f7ff fc70 	bl	131c8 <_fflush_r>
   138e8:	2800      	cmp	r0, #0
   138ea:	d0d6      	beq.n	1389a <__swbuf_r+0x52>
   138ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   138f0:	e7d3      	b.n	1389a <__swbuf_r+0x52>
   138f2:	f7fa ffef 	bl	e8d4 <__sinit>
   138f6:	e7af      	b.n	13858 <__swbuf_r+0x10>

000138f8 <_wcsnrtombs_l>:
   138f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138fc:	b08b      	sub	sp, #44	; 0x2c
   138fe:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   13902:	9f14      	ldr	r7, [sp, #80]	; 0x50
   13904:	9103      	str	r1, [sp, #12]
   13906:	4681      	mov	r9, r0
   13908:	9205      	str	r2, [sp, #20]
   1390a:	461e      	mov	r6, r3
   1390c:	f1b8 0f00 	cmp.w	r8, #0
   13910:	d05c      	beq.n	139cc <_wcsnrtombs_l+0xd4>
   13912:	9b03      	ldr	r3, [sp, #12]
   13914:	2b00      	cmp	r3, #0
   13916:	d05e      	beq.n	139d6 <_wcsnrtombs_l+0xde>
   13918:	9b05      	ldr	r3, [sp, #20]
   1391a:	681d      	ldr	r5, [r3, #0]
   1391c:	2f00      	cmp	r7, #0
   1391e:	d06a      	beq.n	139f6 <_wcsnrtombs_l+0xfe>
   13920:	1e74      	subs	r4, r6, #1
   13922:	b34e      	cbz	r6, 13978 <_wcsnrtombs_l+0x80>
   13924:	9b03      	ldr	r3, [sp, #12]
   13926:	9304      	str	r3, [sp, #16]
   13928:	3d04      	subs	r5, #4
   1392a:	2600      	movs	r6, #0
   1392c:	9501      	str	r5, [sp, #4]
   1392e:	e00b      	b.n	13948 <_wcsnrtombs_l+0x50>
   13930:	9b03      	ldr	r3, [sp, #12]
   13932:	bb2b      	cbnz	r3, 13980 <_wcsnrtombs_l+0x88>
   13934:	9b01      	ldr	r3, [sp, #4]
   13936:	681a      	ldr	r2, [r3, #0]
   13938:	2a00      	cmp	r2, #0
   1393a:	d03a      	beq.n	139b2 <_wcsnrtombs_l+0xba>
   1393c:	45bc      	cmp	ip, r7
   1393e:	d25c      	bcs.n	139fa <_wcsnrtombs_l+0x102>
   13940:	3c01      	subs	r4, #1
   13942:	1c63      	adds	r3, r4, #1
   13944:	4666      	mov	r6, ip
   13946:	d017      	beq.n	13978 <_wcsnrtombs_l+0x80>
   13948:	f8d8 3000 	ldr.w	r3, [r8]
   1394c:	9302      	str	r3, [sp, #8]
   1394e:	9b01      	ldr	r3, [sp, #4]
   13950:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   13954:	f853 2f04 	ldr.w	r2, [r3, #4]!
   13958:	9301      	str	r3, [sp, #4]
   1395a:	a907      	add	r1, sp, #28
   1395c:	4643      	mov	r3, r8
   1395e:	4648      	mov	r0, r9
   13960:	f8d8 b004 	ldr.w	fp, [r8, #4]
   13964:	47a8      	blx	r5
   13966:	1c42      	adds	r2, r0, #1
   13968:	d03a      	beq.n	139e0 <_wcsnrtombs_l+0xe8>
   1396a:	eb00 0c06 	add.w	ip, r0, r6
   1396e:	45bc      	cmp	ip, r7
   13970:	d9de      	bls.n	13930 <_wcsnrtombs_l+0x38>
   13972:	9b02      	ldr	r3, [sp, #8]
   13974:	e9c8 3b00 	strd	r3, fp, [r8]
   13978:	4630      	mov	r0, r6
   1397a:	b00b      	add	sp, #44	; 0x2c
   1397c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13980:	2800      	cmp	r0, #0
   13982:	dd0e      	ble.n	139a2 <_wcsnrtombs_l+0xaa>
   13984:	9b04      	ldr	r3, [sp, #16]
   13986:	9d01      	ldr	r5, [sp, #4]
   13988:	4418      	add	r0, r3
   1398a:	1e5a      	subs	r2, r3, #1
   1398c:	a907      	add	r1, sp, #28
   1398e:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
   13992:	f811 3b01 	ldrb.w	r3, [r1], #1
   13996:	f802 3f01 	strb.w	r3, [r2, #1]!
   1399a:	4572      	cmp	r2, lr
   1399c:	d1f9      	bne.n	13992 <_wcsnrtombs_l+0x9a>
   1399e:	9501      	str	r5, [sp, #4]
   139a0:	9004      	str	r0, [sp, #16]
   139a2:	9b05      	ldr	r3, [sp, #20]
   139a4:	681a      	ldr	r2, [r3, #0]
   139a6:	3204      	adds	r2, #4
   139a8:	601a      	str	r2, [r3, #0]
   139aa:	9b01      	ldr	r3, [sp, #4]
   139ac:	681a      	ldr	r2, [r3, #0]
   139ae:	2a00      	cmp	r2, #0
   139b0:	d1c4      	bne.n	1393c <_wcsnrtombs_l+0x44>
   139b2:	9b03      	ldr	r3, [sp, #12]
   139b4:	b10b      	cbz	r3, 139ba <_wcsnrtombs_l+0xc2>
   139b6:	9b05      	ldr	r3, [sp, #20]
   139b8:	601a      	str	r2, [r3, #0]
   139ba:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
   139be:	2200      	movs	r2, #0
   139c0:	4630      	mov	r0, r6
   139c2:	f8c8 2000 	str.w	r2, [r8]
   139c6:	b00b      	add	sp, #44	; 0x2c
   139c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139cc:	9b03      	ldr	r3, [sp, #12]
   139ce:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   139d2:	2b00      	cmp	r3, #0
   139d4:	d1a0      	bne.n	13918 <_wcsnrtombs_l+0x20>
   139d6:	9b05      	ldr	r3, [sp, #20]
   139d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   139dc:	681d      	ldr	r5, [r3, #0]
   139de:	e79f      	b.n	13920 <_wcsnrtombs_l+0x28>
   139e0:	4606      	mov	r6, r0
   139e2:	218a      	movs	r1, #138	; 0x8a
   139e4:	2200      	movs	r2, #0
   139e6:	4630      	mov	r0, r6
   139e8:	f8c9 1000 	str.w	r1, [r9]
   139ec:	f8c8 2000 	str.w	r2, [r8]
   139f0:	b00b      	add	sp, #44	; 0x2c
   139f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139f6:	463e      	mov	r6, r7
   139f8:	e7be      	b.n	13978 <_wcsnrtombs_l+0x80>
   139fa:	4666      	mov	r6, ip
   139fc:	e7bc      	b.n	13978 <_wcsnrtombs_l+0x80>
   139fe:	bf00      	nop

00013a00 <_wcsnrtombs_r>:
   13a00:	b510      	push	{r4, lr}
   13a02:	b084      	sub	sp, #16
   13a04:	4c05      	ldr	r4, [pc, #20]	; (13a1c <_wcsnrtombs_r+0x1c>)
   13a06:	9806      	ldr	r0, [sp, #24]
   13a08:	9000      	str	r0, [sp, #0]
   13a0a:	9807      	ldr	r0, [sp, #28]
   13a0c:	9001      	str	r0, [sp, #4]
   13a0e:	4804      	ldr	r0, [pc, #16]	; (13a20 <_wcsnrtombs_r+0x20>)
   13a10:	6800      	ldr	r0, [r0, #0]
   13a12:	9402      	str	r4, [sp, #8]
   13a14:	f7ff ff70 	bl	138f8 <_wcsnrtombs_l>
   13a18:	b004      	add	sp, #16
   13a1a:	bd10      	pop	{r4, pc}
   13a1c:	20001bc4 	.word	0x20001bc4
   13a20:	2000214c 	.word	0x2000214c
   13a24:	00000000 	.word	0x00000000

00013a28 <___init_veneer>:
   13a28:	f85f f000 	ldr.w	pc, [pc]	; 13a2c <___init_veneer+0x4>
   13a2c:	60001e35 	.word	0x60001e35

00013a30 <___reboot_Teensyduino__veneer>:
   13a30:	f85f f000 	ldr.w	pc, [pc]	; 13a34 <___reboot_Teensyduino__veneer+0x4>
   13a34:	60001d8d 	.word	0x60001d8d
	...

Disassembly of section .fini:

00013a40 <_fini>:
   13a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13a42:	bf00      	nop
